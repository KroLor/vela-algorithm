
build/debug/Vela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08006d58  08006d58  00007d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080073b0  080073b0  000083b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  080073b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000278  200001d4  08007588  000091d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000044c  08007588  0000944c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030cd9  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008504  00000000  00000000  00039edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001908  00000000  00000000  000423e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013a0  00000000  00000000  00043cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c692  00000000  00000000  00045090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006e53  00000000  00000000  00061722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  00068575  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d2c  00000000  00000000  000685b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00013233  00000000  00000000  0006c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000189  00000000  00000000  0007f513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_ldivmod>:
 8000b78:	b97b      	cbnz	r3, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7a:	b972      	cbnz	r2, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bfbe      	ittt	lt
 8000b80:	2000      	movlt	r0, #0
 8000b82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b86:	e006      	blt.n	8000b96 <__aeabi_ldivmod+0x1e>
 8000b88:	bf08      	it	eq
 8000b8a:	2800      	cmpeq	r0, #0
 8000b8c:	bf1c      	itt	ne
 8000b8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b92:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b96:	f000 b857 	b.w	8000c48 <__aeabi_idiv0>
 8000b9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	db09      	blt.n	8000bba <__aeabi_ldivmod+0x42>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db1a      	blt.n	8000be0 <__aeabi_ldivmod+0x68>
 8000baa:	f005 ff6b 	bl	8006a84 <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4770      	bx	lr
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db1b      	blt.n	8000bfc <__aeabi_ldivmod+0x84>
 8000bc4:	f005 ff5e 	bl	8006a84 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	f005 ff4d 	bl	8006a84 <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfa:	4770      	bx	lr
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	f005 ff3f 	bl	8006a84 <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 b80c 	b.w	8000c48 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f005 ff24 	bl	8006a84 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__do_global_dtors_aux>:
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4c05      	ldr	r4, [pc, #20]	@ (8000c64 <__do_global_dtors_aux+0x18>)
 8000c50:	7823      	ldrb	r3, [r4, #0]
 8000c52:	b933      	cbnz	r3, 8000c62 <__do_global_dtors_aux+0x16>
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__do_global_dtors_aux+0x1c>)
 8000c56:	b113      	cbz	r3, 8000c5e <__do_global_dtors_aux+0x12>
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <__do_global_dtors_aux+0x20>)
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	2301      	movs	r3, #1
 8000c60:	7023      	strb	r3, [r4, #0]
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	200001d4 	.word	0x200001d4
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	08006d40 	.word	0x08006d40

08000c70 <frame_dummy>:
 8000c70:	b508      	push	{r3, lr}
 8000c72:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <frame_dummy+0x10>)
 8000c74:	b11b      	cbz	r3, 8000c7e <frame_dummy+0xe>
 8000c76:	4903      	ldr	r1, [pc, #12]	@ (8000c84 <frame_dummy+0x14>)
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <frame_dummy+0x18>)
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	08006d40 	.word	0x08006d40

08000c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2100      	movs	r1, #0
 8000c90:	9100      	str	r1, [sp, #0]
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_GPIO_Init+0x34>)
 8000c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c96:	f042 0201 	orr.w	r2, r2, #1
 8000c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c9e:	f002 0201 	and.w	r2, r2, #1
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	9101      	str	r1, [sp, #4]
 8000ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000caa:	f042 0202 	orr.w	r2, r2, #2
 8000cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	9b01      	ldr	r3, [sp, #4]

}
 8000cba:	b002      	add	sp, #8
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc6:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <MX_I2C1_Init+0x30>)
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_I2C1_Init+0x34>)
 8000cca:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_I2C1_Init+0x38>)
 8000cce:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cda:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce4:	f001 fa68 	bl	80021b8 <HAL_I2C_Init>
 8000ce8:	b900      	cbnz	r0, 8000cec <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cea:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cec:	f000 fc28 	bl	8001540 <Error_Handler>
}
 8000cf0:	e7fb      	b.n	8000cea <MX_I2C1_Init+0x26>
 8000cf2:	bf00      	nop
 8000cf4:	200001f0 	.word	0x200001f0
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	000186a0 	.word	0x000186a0

08000d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d00:	b530      	push	{r4, r5, lr}
 8000d02:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	2300      	movs	r3, #0
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	9305      	str	r3, [sp, #20]
 8000d0c:	9306      	str	r3, [sp, #24]
 8000d0e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000d10:	6802      	ldr	r2, [r0, #0]
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_I2C_MspInit+0x64>)
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d001      	beq.n	8000d1c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d18:	b009      	add	sp, #36	@ 0x24
 8000d1a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	9501      	str	r5, [sp, #4]
 8000d20:	4c11      	ldr	r4, [pc, #68]	@ (8000d68 <HAL_I2C_MspInit+0x68>)
 8000d22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23c0      	movs	r3, #192	@ 0xc0
 8000d36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	a903      	add	r1, sp, #12
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <HAL_I2C_MspInit+0x6c>)
 8000d48:	f000 fec8 	bl	8001adc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4c:	9502      	str	r5, [sp, #8]
 8000d4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d54:	6423      	str	r3, [r4, #64]	@ 0x40
 8000d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	9b02      	ldr	r3, [sp, #8]
}
 8000d60:	e7da      	b.n	8000d18 <HAL_I2C_MspInit+0x18>
 8000d62:	bf00      	nop
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <bmp280_compensate_T_int32>:
// t_fine carries fine temperature as global value
int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <bmp280_compensate_T_int32+0x3c>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	005a      	lsls	r2, r3, #1
 8000d76:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <bmp280_compensate_T_int32+0x40>)
 8000d7c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000d80:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000d84:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 8000d88:	fb00 f000 	mul.w	r0, r0, r0
	>> 12) *
 8000d8c:	1300      	asrs	r0, r0, #12
	((int32_t)dig_T3)) >> 14;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <bmp280_compensate_T_int32+0x44>)
 8000d90:	f9b3 3000 	ldrsh.w	r3, [r3]
	>> 12) *
 8000d94:	fb03 f000 	mul.w	r0, r3, r0
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000d98:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 8000d9a:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <bmp280_compensate_T_int32+0x48>)
 8000da0:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000da2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000da6:	3080      	adds	r0, #128	@ 0x80
	return T;
}
 8000da8:	1200      	asrs	r0, r0, #8
 8000daa:	4770      	bx	lr
 8000dac:	20000266 	.word	0x20000266
 8000db0:	20000264 	.word	0x20000264
 8000db4:	20000262 	.word	0x20000262
 8000db8:	20000244 	.word	0x20000244

08000dbc <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000dbe:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <bmp280_compensate_P_int64+0x19c>)
 8000dc0:	6819      	ldr	r1, [r3, #0]
 8000dc2:	17cb      	asrs	r3, r1, #31
 8000dc4:	f5b1 31fa 	subs.w	r1, r1, #128000	@ 0x1f400
 8000dc8:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000dcc:	fb01 f403 	mul.w	r4, r1, r3
 8000dd0:	fba1 2601 	umull	r2, r6, r1, r1
 8000dd4:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8000dd8:	4c60      	ldr	r4, [pc, #384]	@ (8000f5c <bmp280_compensate_P_int64+0x1a0>)
 8000dda:	f9b4 5000 	ldrsh.w	r5, [r4]
 8000dde:	17ec      	asrs	r4, r5, #31
 8000de0:	fb02 f404 	mul.w	r4, r2, r4
 8000de4:	fb05 4406 	mla	r4, r5, r6, r4
 8000de8:	fba2 7505 	umull	r7, r5, r2, r5
 8000dec:	442c      	add	r4, r5
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000dee:	4d5c      	ldr	r5, [pc, #368]	@ (8000f60 <bmp280_compensate_P_int64+0x1a4>)
 8000df0:	f9b5 c000 	ldrsh.w	ip, [r5]
 8000df4:	ea4f 75ec 	mov.w	r5, ip, asr #31
 8000df8:	fb0c fe03 	mul.w	lr, ip, r3
 8000dfc:	fb01 ee05 	mla	lr, r1, r5, lr
 8000e00:	fbac c501 	umull	ip, r5, ip, r1
 8000e04:	44ae      	add	lr, r5
 8000e06:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 8000e0a:	ea4e 3edc 	orr.w	lr, lr, ip, lsr #15
 8000e0e:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 8000e12:	eb1c 0c07 	adds.w	ip, ip, r7
 8000e16:	eb44 040e 	adc.w	r4, r4, lr
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000e1a:	4d52      	ldr	r5, [pc, #328]	@ (8000f64 <bmp280_compensate_P_int64+0x1a8>)
 8000e1c:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000e20:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000e24:	4d50      	ldr	r5, [pc, #320]	@ (8000f68 <bmp280_compensate_P_int64+0x1ac>)
 8000e26:	f9b5 e000 	ldrsh.w	lr, [r5]
 8000e2a:	ea4f 75ee 	mov.w	r5, lr, asr #31
 8000e2e:	fb02 f505 	mul.w	r5, r2, r5
 8000e32:	fb0e 5506 	mla	r5, lr, r6, r5
 8000e36:	fba2 2e0e 	umull	r2, lr, r2, lr
 8000e3a:	4475      	add	r5, lr
 8000e3c:	0a12      	lsrs	r2, r2, #8
 8000e3e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8000e42:	4e4a      	ldr	r6, [pc, #296]	@ (8000f6c <bmp280_compensate_P_int64+0x1b0>)
 8000e44:	f9b6 e000 	ldrsh.w	lr, [r6]
 8000e48:	ea4f 76ee 	mov.w	r6, lr, asr #31
 8000e4c:	fb0e f303 	mul.w	r3, lr, r3
 8000e50:	fb01 3306 	mla	r3, r1, r6, r3
 8000e54:	fbae e101 	umull	lr, r1, lr, r1
 8000e58:	440b      	add	r3, r1
 8000e5a:	031b      	lsls	r3, r3, #12
 8000e5c:	ea43 531e 	orr.w	r3, r3, lr, lsr #20
 8000e60:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 8000e64:	eb12 020e 	adds.w	r2, r2, lr
 8000e68:	eb43 2325 	adc.w	r3, r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000e6c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000e70:	493f      	ldr	r1, [pc, #252]	@ (8000f70 <bmp280_compensate_P_int64+0x1b4>)
 8000e72:	880d      	ldrh	r5, [r1, #0]
 8000e74:	fba2 2105 	umull	r2, r1, r2, r5
 8000e78:	fb05 1103 	mla	r1, r5, r3, r1
 8000e7c:	104a      	asrs	r2, r1, #1
 8000e7e:	17cb      	asrs	r3, r1, #31

	if (var1 == 0)
 8000e80:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8000e84:	d065      	beq.n	8000f52 <bmp280_compensate_P_int64+0x196>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576-adc_P;
 8000e86:	f5c0 1e80 	rsb	lr, r0, #1048576	@ 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 8000e8a:	ea4f 016e 	mov.w	r1, lr, asr #1
 8000e8e:	ea4f 7ece 	mov.w	lr, lr, lsl #31
 8000e92:	ebbe 0e0c 	subs.w	lr, lr, ip
 8000e96:	eb61 0404 	sbc.w	r4, r1, r4
 8000e9a:	eb1e 0c0e 	adds.w	ip, lr, lr
 8000e9e:	eb44 0104 	adc.w	r1, r4, r4
 8000ea2:	eb1c 0c0e 	adds.w	ip, ip, lr
 8000ea6:	eb44 0101 	adc.w	r1, r4, r1
 8000eaa:	0188      	lsls	r0, r1, #6
 8000eac:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8000eb0:	ea4f 158c 	mov.w	r5, ip, lsl #6
 8000eb4:	eb1c 0c05 	adds.w	ip, ip, r5
 8000eb8:	eb41 0100 	adc.w	r1, r1, r0
 8000ebc:	0089      	lsls	r1, r1, #2
 8000ebe:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8000ec2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ec6:	eb1c 0c0e 	adds.w	ip, ip, lr
 8000eca:	eb44 0101 	adc.w	r1, r4, r1
 8000ece:	0089      	lsls	r1, r1, #2
 8000ed0:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8000ed4:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8000ed8:	eb10 000e 	adds.w	r0, r0, lr
 8000edc:	eb44 0101 	adc.w	r1, r4, r1
 8000ee0:	f7ff fe4a 	bl	8000b78 <__aeabi_ldivmod>
 8000ee4:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000ee6:	4a23      	ldr	r2, [pc, #140]	@ (8000f74 <bmp280_compensate_P_int64+0x1b8>)
 8000ee8:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000eec:	17ef      	asrs	r7, r5, #31
 8000eee:	0b42      	lsrs	r2, r0, #13
 8000ef0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ef4:	134e      	asrs	r6, r1, #13
 8000ef6:	fb05 f406 	mul.w	r4, r5, r6
 8000efa:	fb02 4407 	mla	r4, r2, r7, r4
 8000efe:	fba5 5702 	umull	r5, r7, r5, r2
 8000f02:	443c      	add	r4, r7
 8000f04:	fb02 f404 	mul.w	r4, r2, r4
 8000f08:	fb05 4406 	mla	r4, r5, r6, r4
 8000f0c:	fba2 2505 	umull	r2, r5, r2, r5
 8000f10:	442c      	add	r4, r5
 8000f12:	0e52      	lsrs	r2, r2, #25
 8000f14:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000f18:	4d17      	ldr	r5, [pc, #92]	@ (8000f78 <bmp280_compensate_P_int64+0x1bc>)
 8000f1a:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000f1e:	17ef      	asrs	r7, r5, #31
 8000f20:	fb05 f601 	mul.w	r6, r5, r1
 8000f24:	fb07 6000 	mla	r0, r7, r0, r6
 8000f28:	fba5 5603 	umull	r5, r6, r5, r3
 8000f2c:	4430      	add	r0, r6
 8000f2e:	0ced      	lsrs	r5, r5, #19
 8000f30:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 8000f3a:	195b      	adds	r3, r3, r5
 8000f3c:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 8000f40:	0a18      	lsrs	r0, r3, #8
 8000f42:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <bmp280_compensate_P_int64+0x1c0>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 8000f4c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0; // avoid exception caused by division by zero
 8000f52:	2000      	movs	r0, #0
 8000f54:	e7fc      	b.n	8000f50 <bmp280_compensate_P_int64+0x194>
 8000f56:	bf00      	nop
 8000f58:	20000244 	.word	0x20000244
 8000f5c:	20000256 	.word	0x20000256
 8000f60:	20000258 	.word	0x20000258
 8000f64:	2000025a 	.word	0x2000025a
 8000f68:	2000025c 	.word	0x2000025c
 8000f6c:	2000025e 	.word	0x2000025e
 8000f70:	20000260 	.word	0x20000260
 8000f74:	20000250 	.word	0x20000250
 8000f78:	20000252 	.word	0x20000252
 8000f7c:	20000254 	.word	0x20000254

08000f80 <InitBmp>:

void InitBmp()
{
 8000f80:	b530      	push	{r4, r5, lr}
 8000f82:	b08d      	sub	sp, #52	@ 0x34
	uint16_t Register_ID = 0xD0; //Адрес регистра в котором хранится значение ID
	uint8_t Data[1]; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	HAL_I2C_Mem_Read(&hi2c1, Address_Bmp280, Register_ID, I2C_MEMADD_SIZE_8BIT, Data, Size_, Timeout_);
 8000f84:	23ff      	movs	r3, #255	@ 0xff
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	22d0      	movs	r2, #208	@ 0xd0
 8000f92:	21ec      	movs	r1, #236	@ 0xec
 8000f94:	481a      	ldr	r0, [pc, #104]	@ (8001000 <InitBmp+0x80>)
 8000f96:	f001 fa9d 	bl	80024d4 <HAL_I2C_Mem_Read>
	if (Data[0] == 0x58)
 8000f9a:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8000f9e:	2b58      	cmp	r3, #88	@ 0x58
 8000fa0:	d01a      	beq.n	8000fd8 <InitBmp+0x58>
	{
		char buffer [28] = "BMP 0x58 READ SUCCESSFULLY\n\r";
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
	} else
	{
		char buffer [20] = "BMP READ ERROR\n\r";
 8000fa2:	f10d 0c10 	add.w	ip, sp, #16
 8000fa6:	4c17      	ldr	r4, [pc, #92]	@ (8001004 <InitBmp+0x84>)
 8000fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000faa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	f88c 3000 	strb.w	r3, [ip]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8ad 3021 	strh.w	r3, [sp, #33]	@ 0x21
 8000fba:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000fbe:	ac04      	add	r4, sp, #16
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff f93d 	bl	8000240 <strlen>
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	b282      	uxth	r2, r0
 8000fcc:	4621      	mov	r1, r4
 8000fce:	480e      	ldr	r0, [pc, #56]	@ (8001008 <InitBmp+0x88>)
 8000fd0:	f002 fc89 	bl	80038e6 <HAL_UART_Transmit>

	}
}
 8000fd4:	b00d      	add	sp, #52	@ 0x34
 8000fd6:	bd30      	pop	{r4, r5, pc}
		char buffer [28] = "BMP 0x58 READ SUCCESSFULLY\n\r";
 8000fd8:	ac04      	add	r4, sp, #16
 8000fda:	4d0c      	ldr	r5, [pc, #48]	@ (800100c <InitBmp+0x8c>)
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8000fe8:	ac04      	add	r4, sp, #16
 8000fea:	4620      	mov	r0, r4
 8000fec:	f7ff f928 	bl	8000240 <strlen>
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	b282      	uxth	r2, r0
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <InitBmp+0x88>)
 8000ffa:	f002 fc74 	bl	80038e6 <HAL_UART_Transmit>
 8000ffe:	e7e9      	b.n	8000fd4 <InitBmp+0x54>
 8001000:	200001f0 	.word	0x200001f0
 8001004:	08006d58 	.word	0x08006d58
 8001008:	200002b8 	.word	0x200002b8
 800100c:	08006e2c 	.word	0x08006e2c

08001010 <UART_Send_HAL_Status>:

/// @brief 
/// @param status 
/// @param reg 
void UART_Send_HAL_Status(HAL_StatusTypeDef status, char* reg)
{
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	b09b      	sub	sp, #108	@ 0x6c
  char* message = NULL;

  switch (status)
 8001014:	2803      	cmp	r0, #3
 8001016:	d803      	bhi.n	8001020 <UART_Send_HAL_Status+0x10>
 8001018:	e8df f000 	tbb	[pc, r0]
 800101c:	2c2a042e 	.word	0x2c2a042e
 8001020:	2500      	movs	r5, #0
 8001022:	e000      	b.n	8001026 <UART_Send_HAL_Status+0x16>
  {
    case HAL_OK:
      message = "OK";
      break;
    case HAL_ERROR:
      message = "ERROR";
 8001024:	4d15      	ldr	r5, [pc, #84]	@ (800107c <UART_Send_HAL_Status+0x6c>)
    default:
      break;
  }

  char buffer[100];
  strcat(buffer, reg);
 8001026:	ac01      	add	r4, sp, #4
 8001028:	4620      	mov	r0, r4
 800102a:	f003 fc35 	bl	8004898 <strcat>
  strcat(buffer, ": ");
 800102e:	4620      	mov	r0, r4
 8001030:	f7ff f906 	bl	8000240 <strlen>
 8001034:	1822      	adds	r2, r4, r0
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <UART_Send_HAL_Status+0x70>)
 8001038:	8819      	ldrh	r1, [r3, #0]
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	5221      	strh	r1, [r4, r0]
 800103e:	7093      	strb	r3, [r2, #2]
  strcat(buffer, message);
 8001040:	4629      	mov	r1, r5
 8001042:	4620      	mov	r0, r4
 8001044:	f003 fc28 	bl	8004898 <strcat>
  strcat(buffer, "\n\r\0");
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff f8f9 	bl	8000240 <strlen>
 800104e:	1822      	adds	r2, r4, r0
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <UART_Send_HAL_Status+0x74>)
 8001052:	8a99      	ldrh	r1, [r3, #20]
 8001054:	7d9b      	ldrb	r3, [r3, #22]
 8001056:	5221      	strh	r1, [r4, r0]
 8001058:	7093      	strb	r3, [r2, #2]

  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 0xFF);
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff f8f0 	bl	8000240 <strlen>
 8001060:	23ff      	movs	r3, #255	@ 0xff
 8001062:	b282      	uxth	r2, r0
 8001064:	4621      	mov	r1, r4
 8001066:	4808      	ldr	r0, [pc, #32]	@ (8001088 <UART_Send_HAL_Status+0x78>)
 8001068:	f002 fc3d 	bl	80038e6 <HAL_UART_Transmit>
}
 800106c:	b01b      	add	sp, #108	@ 0x6c
 800106e:	bd30      	pop	{r4, r5, pc}
      message = "BUSY";
 8001070:	4d06      	ldr	r5, [pc, #24]	@ (800108c <UART_Send_HAL_Status+0x7c>)
      break;
 8001072:	e7d8      	b.n	8001026 <UART_Send_HAL_Status+0x16>
      message = "TIMEOUT";
 8001074:	4d06      	ldr	r5, [pc, #24]	@ (8001090 <UART_Send_HAL_Status+0x80>)
      break;
 8001076:	e7d6      	b.n	8001026 <UART_Send_HAL_Status+0x16>
      message = "OK";
 8001078:	4d06      	ldr	r5, [pc, #24]	@ (8001094 <UART_Send_HAL_Status+0x84>)
 800107a:	e7d4      	b.n	8001026 <UART_Send_HAL_Status+0x16>
 800107c:	08006e54 	.word	0x08006e54
 8001080:	08006e6c 	.word	0x08006e6c
 8001084:	08006d58 	.word	0x08006d58
 8001088:	200002b8 	.word	0x200002b8
 800108c:	08006e5c 	.word	0x08006e5c
 8001090:	08006e64 	.word	0x08006e64
 8001094:	08006e4c 	.word	0x08006e4c

08001098 <Read_Dig_Variables>:

void Read_Dig_Variables()
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	b084      	sub	sp, #16
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T1, 2, 0xFF), "dig_T1");
 800109c:	4c50      	ldr	r4, [pc, #320]	@ (80011e0 <Read_Dig_Variables+0x148>)
 800109e:	26ff      	movs	r6, #255	@ 0xff
 80010a0:	9602      	str	r6, [sp, #8]
 80010a2:	2502      	movs	r5, #2
 80010a4:	9501      	str	r5, [sp, #4]
 80010a6:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <Read_Dig_Variables+0x14c>)
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2288      	movs	r2, #136	@ 0x88
 80010ae:	21ec      	movs	r1, #236	@ 0xec
 80010b0:	4620      	mov	r0, r4
 80010b2:	f001 fa0f 	bl	80024d4 <HAL_I2C_Mem_Read>
 80010b6:	494c      	ldr	r1, [pc, #304]	@ (80011e8 <Read_Dig_Variables+0x150>)
 80010b8:	f7ff ffaa 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T2, 2, 0xFF), "dig_T2");
 80010bc:	9602      	str	r6, [sp, #8]
 80010be:	9501      	str	r5, [sp, #4]
 80010c0:	4b4a      	ldr	r3, [pc, #296]	@ (80011ec <Read_Dig_Variables+0x154>)
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	228a      	movs	r2, #138	@ 0x8a
 80010c8:	21ec      	movs	r1, #236	@ 0xec
 80010ca:	4620      	mov	r0, r4
 80010cc:	f001 fa02 	bl	80024d4 <HAL_I2C_Mem_Read>
 80010d0:	4947      	ldr	r1, [pc, #284]	@ (80011f0 <Read_Dig_Variables+0x158>)
 80010d2:	f7ff ff9d 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T3, 2, 0xFF), "dig_T3");
 80010d6:	9602      	str	r6, [sp, #8]
 80010d8:	9501      	str	r5, [sp, #4]
 80010da:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <Read_Dig_Variables+0x15c>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	228c      	movs	r2, #140	@ 0x8c
 80010e2:	21ec      	movs	r1, #236	@ 0xec
 80010e4:	4620      	mov	r0, r4
 80010e6:	f001 f9f5 	bl	80024d4 <HAL_I2C_Mem_Read>
 80010ea:	4943      	ldr	r1, [pc, #268]	@ (80011f8 <Read_Dig_Variables+0x160>)
 80010ec:	f7ff ff90 	bl	8001010 <UART_Send_HAL_Status>
  
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P1, 2, 0xFF), "dig_P1");
 80010f0:	9602      	str	r6, [sp, #8]
 80010f2:	9501      	str	r5, [sp, #4]
 80010f4:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <Read_Dig_Variables+0x164>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	228e      	movs	r2, #142	@ 0x8e
 80010fc:	21ec      	movs	r1, #236	@ 0xec
 80010fe:	4620      	mov	r0, r4
 8001100:	f001 f9e8 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001104:	493e      	ldr	r1, [pc, #248]	@ (8001200 <Read_Dig_Variables+0x168>)
 8001106:	f7ff ff83 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x90, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P2, 2, 0xFF), "dig_P2");
 800110a:	9602      	str	r6, [sp, #8]
 800110c:	9501      	str	r5, [sp, #4]
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <Read_Dig_Variables+0x16c>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2290      	movs	r2, #144	@ 0x90
 8001116:	21ec      	movs	r1, #236	@ 0xec
 8001118:	4620      	mov	r0, r4
 800111a:	f001 f9db 	bl	80024d4 <HAL_I2C_Mem_Read>
 800111e:	493a      	ldr	r1, [pc, #232]	@ (8001208 <Read_Dig_Variables+0x170>)
 8001120:	f7ff ff76 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x92, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P3, 2, 0xFF), "dig_P3");
 8001124:	9602      	str	r6, [sp, #8]
 8001126:	9501      	str	r5, [sp, #4]
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <Read_Dig_Variables+0x174>)
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2292      	movs	r2, #146	@ 0x92
 8001130:	21ec      	movs	r1, #236	@ 0xec
 8001132:	4620      	mov	r0, r4
 8001134:	f001 f9ce 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001138:	4935      	ldr	r1, [pc, #212]	@ (8001210 <Read_Dig_Variables+0x178>)
 800113a:	f7ff ff69 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x94, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P4, 2, 0xFF), "dig_P4");
 800113e:	9602      	str	r6, [sp, #8]
 8001140:	9501      	str	r5, [sp, #4]
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <Read_Dig_Variables+0x17c>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2294      	movs	r2, #148	@ 0x94
 800114a:	21ec      	movs	r1, #236	@ 0xec
 800114c:	4620      	mov	r0, r4
 800114e:	f001 f9c1 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001152:	4931      	ldr	r1, [pc, #196]	@ (8001218 <Read_Dig_Variables+0x180>)
 8001154:	f7ff ff5c 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x96, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P5, 2, 0xFF), "dig_P5");
 8001158:	9602      	str	r6, [sp, #8]
 800115a:	9501      	str	r5, [sp, #4]
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <Read_Dig_Variables+0x184>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2296      	movs	r2, #150	@ 0x96
 8001164:	21ec      	movs	r1, #236	@ 0xec
 8001166:	4620      	mov	r0, r4
 8001168:	f001 f9b4 	bl	80024d4 <HAL_I2C_Mem_Read>
 800116c:	492c      	ldr	r1, [pc, #176]	@ (8001220 <Read_Dig_Variables+0x188>)
 800116e:	f7ff ff4f 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x98, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P6, 2, 0xFF), "dig_P6");
 8001172:	9602      	str	r6, [sp, #8]
 8001174:	9501      	str	r5, [sp, #4]
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <Read_Dig_Variables+0x18c>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2298      	movs	r2, #152	@ 0x98
 800117e:	21ec      	movs	r1, #236	@ 0xec
 8001180:	4620      	mov	r0, r4
 8001182:	f001 f9a7 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001186:	4928      	ldr	r1, [pc, #160]	@ (8001228 <Read_Dig_Variables+0x190>)
 8001188:	f7ff ff42 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P7, 2, 0xFF), "dig_P7");
 800118c:	9602      	str	r6, [sp, #8]
 800118e:	9501      	str	r5, [sp, #4]
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <Read_Dig_Variables+0x194>)
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	229a      	movs	r2, #154	@ 0x9a
 8001198:	21ec      	movs	r1, #236	@ 0xec
 800119a:	4620      	mov	r0, r4
 800119c:	f001 f99a 	bl	80024d4 <HAL_I2C_Mem_Read>
 80011a0:	4923      	ldr	r1, [pc, #140]	@ (8001230 <Read_Dig_Variables+0x198>)
 80011a2:	f7ff ff35 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P8, 2, 0xFF), "dig_P8");
 80011a6:	9602      	str	r6, [sp, #8]
 80011a8:	9501      	str	r5, [sp, #4]
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Read_Dig_Variables+0x19c>)
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	229c      	movs	r2, #156	@ 0x9c
 80011b2:	21ec      	movs	r1, #236	@ 0xec
 80011b4:	4620      	mov	r0, r4
 80011b6:	f001 f98d 	bl	80024d4 <HAL_I2C_Mem_Read>
 80011ba:	491f      	ldr	r1, [pc, #124]	@ (8001238 <Read_Dig_Variables+0x1a0>)
 80011bc:	f7ff ff28 	bl	8001010 <UART_Send_HAL_Status>
  UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P9, 2, 0xFF), "dig_P9");
 80011c0:	9602      	str	r6, [sp, #8]
 80011c2:	9501      	str	r5, [sp, #4]
 80011c4:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <Read_Dig_Variables+0x1a4>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	229e      	movs	r2, #158	@ 0x9e
 80011cc:	21ec      	movs	r1, #236	@ 0xec
 80011ce:	4620      	mov	r0, r4
 80011d0:	f001 f980 	bl	80024d4 <HAL_I2C_Mem_Read>
 80011d4:	491a      	ldr	r1, [pc, #104]	@ (8001240 <Read_Dig_Variables+0x1a8>)
 80011d6:	f7ff ff1b 	bl	8001010 <UART_Send_HAL_Status>
}
 80011da:	b004      	add	sp, #16
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	bf00      	nop
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	20000266 	.word	0x20000266
 80011e8:	08006e70 	.word	0x08006e70
 80011ec:	20000264 	.word	0x20000264
 80011f0:	08006e78 	.word	0x08006e78
 80011f4:	20000262 	.word	0x20000262
 80011f8:	08006e80 	.word	0x08006e80
 80011fc:	20000260 	.word	0x20000260
 8001200:	08006e88 	.word	0x08006e88
 8001204:	2000025e 	.word	0x2000025e
 8001208:	08006e90 	.word	0x08006e90
 800120c:	2000025c 	.word	0x2000025c
 8001210:	08006e98 	.word	0x08006e98
 8001214:	2000025a 	.word	0x2000025a
 8001218:	08006ea0 	.word	0x08006ea0
 800121c:	20000258 	.word	0x20000258
 8001220:	08006ea8 	.word	0x08006ea8
 8001224:	20000256 	.word	0x20000256
 8001228:	08006eb0 	.word	0x08006eb0
 800122c:	20000254 	.word	0x20000254
 8001230:	08006eb8 	.word	0x08006eb8
 8001234:	20000252 	.word	0x20000252
 8001238:	08006ec0 	.word	0x08006ec0
 800123c:	20000250 	.word	0x20000250
 8001240:	08006ec8 	.word	0x08006ec8

08001244 <Acc_LSM_Init>:


void Acc_LSM_Init()
{
 8001244:	b530      	push	{r4, r5, lr}
 8001246:	b0b9      	sub	sp, #228	@ 0xe4
  char str_buf[100] =  "--------------------LSM6DS33 init--------------------------\n\r";
 8001248:	4c4d      	ldr	r4, [pc, #308]	@ (8001380 <Acc_LSM_Init+0x13c>)
 800124a:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800124e:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 8001252:	46f4      	mov	ip, lr
 8001254:	6820      	ldr	r0, [r4, #0]
 8001256:	6861      	ldr	r1, [r4, #4]
 8001258:	68a2      	ldr	r2, [r4, #8]
 800125a:	68e3      	ldr	r3, [r4, #12]
 800125c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001260:	3410      	adds	r4, #16
 8001262:	46e6      	mov	lr, ip
 8001264:	42ac      	cmp	r4, r5
 8001266:	d1f4      	bne.n	8001252 <Acc_LSM_Init+0xe>
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	6861      	ldr	r1, [r4, #4]
 800126c:	68a2      	ldr	r2, [r4, #8]
 800126e:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f8ae 3000 	strh.w	r3, [lr]
 8001278:	2226      	movs	r2, #38	@ 0x26
 800127a:	2100      	movs	r1, #0
 800127c:	f10d 00ba 	add.w	r0, sp, #186	@ 0xba
 8001280:	f003 fb02 	bl	8004888 <memset>
  HAL_UART_Transmit(&huart1, (uint8_t*)str_buf, strlen(str_buf), 1000);
 8001284:	ac1f      	add	r4, sp, #124	@ 0x7c
 8001286:	4620      	mov	r0, r4
 8001288:	f7fe ffda 	bl	8000240 <strlen>
 800128c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001290:	b282      	uxth	r2, r0
 8001292:	4621      	mov	r1, r4
 8001294:	483b      	ldr	r0, [pc, #236]	@ (8001384 <Acc_LSM_Init+0x140>)
 8001296:	f002 fb26 	bl	80038e6 <HAL_UART_Transmit>
	uint16_t register_address = 0x0F; //Адрес регистра в котором хранится значение ID
	uint8_t data; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, register_address, I2C_MEMADD_SIZE_8BIT, &data, Size_, Timeout_), "WHO AM I");
 800129a:	23ff      	movs	r3, #255	@ 0xff
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	2301      	movs	r3, #1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	220f      	movs	r2, #15
 80012aa:	21d4      	movs	r1, #212	@ 0xd4
 80012ac:	4836      	ldr	r0, [pc, #216]	@ (8001388 <Acc_LSM_Init+0x144>)
 80012ae:	f001 f911 	bl	80024d4 <HAL_I2C_Mem_Read>
 80012b2:	4936      	ldr	r1, [pc, #216]	@ (800138c <Acc_LSM_Init+0x148>)
 80012b4:	f7ff feac 	bl	8001010 <UART_Send_HAL_Status>
	if (data == 0x69)
 80012b8:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80012bc:	2b69      	cmp	r3, #105	@ 0x69
 80012be:	d024      	beq.n	800130a <Acc_LSM_Init+0xc6>

    uint8_t acc_power_mode = 0b01000100;
    UART_Send_HAL_Status(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, 0xFF), "ctrl_meas");
	} else
	{
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 80012c0:	ac05      	add	r4, sp, #20
 80012c2:	4d33      	ldr	r5, [pc, #204]	@ (8001390 <Acc_LSM_Init+0x14c>)
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012cc:	c403      	stmia	r4!, {r0, r1}
 80012ce:	f824 2b02 	strh.w	r2, [r4], #2
 80012d2:	0c12      	lsrs	r2, r2, #16
 80012d4:	7022      	strb	r2, [r4, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8cd 302f 	str.w	r3, [sp, #47]	@ 0x2f
 80012dc:	f8cd 3033 	str.w	r3, [sp, #51]	@ 0x33
 80012e0:	f8cd 3037 	str.w	r3, [sp, #55]	@ 0x37
 80012e4:	f8cd 303b 	str.w	r3, [sp, #59]	@ 0x3b
 80012e8:	f8cd 303f 	str.w	r3, [sp, #63]	@ 0x3f
 80012ec:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 80012f0:	ac05      	add	r4, sp, #20
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7fe ffa4 	bl	8000240 <strlen>
 80012f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fc:	b282      	uxth	r2, r0
 80012fe:	4621      	mov	r1, r4
 8001300:	4820      	ldr	r0, [pc, #128]	@ (8001384 <Acc_LSM_Init+0x140>)
 8001302:	f002 faf0 	bl	80038e6 <HAL_UART_Transmit>
	}
}
 8001306:	b039      	add	sp, #228	@ 0xe4
 8001308:	bd30      	pop	{r4, r5, pc}
		char buffer [100] = "ACCELEROMETER READ SUCCESSFULLY (nice)\n\r";
 800130a:	4c22      	ldr	r4, [pc, #136]	@ (8001394 <Acc_LSM_Init+0x150>)
 800130c:	f10d 0c14 	add.w	ip, sp, #20
 8001310:	f104 0e20 	add.w	lr, r4, #32
 8001314:	4665      	mov	r5, ip
 8001316:	6820      	ldr	r0, [r4, #0]
 8001318:	6861      	ldr	r1, [r4, #4]
 800131a:	68a2      	ldr	r2, [r4, #8]
 800131c:	68e3      	ldr	r3, [r4, #12]
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	3410      	adds	r4, #16
 8001322:	46ac      	mov	ip, r5
 8001324:	4574      	cmp	r4, lr
 8001326:	d1f5      	bne.n	8001314 <Acc_LSM_Init+0xd0>
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	6861      	ldr	r1, [r4, #4]
 800132c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001330:	7a23      	ldrb	r3, [r4, #8]
 8001332:	f88c 3000 	strb.w	r3, [ip]
 8001336:	223b      	movs	r2, #59	@ 0x3b
 8001338:	2100      	movs	r1, #0
 800133a:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 800133e:	f003 faa3 	bl	8004888 <memset>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001342:	ac05      	add	r4, sp, #20
 8001344:	4620      	mov	r0, r4
 8001346:	f7fe ff7b 	bl	8000240 <strlen>
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	b282      	uxth	r2, r0
 8001350:	4621      	mov	r1, r4
 8001352:	480c      	ldr	r0, [pc, #48]	@ (8001384 <Acc_LSM_Init+0x140>)
 8001354:	f002 fac7 	bl	80038e6 <HAL_UART_Transmit>
    uint8_t acc_power_mode = 0b01000100;
 8001358:	2344      	movs	r3, #68	@ 0x44
 800135a:	f88d 3013 	strb.w	r3, [sp, #19]
    UART_Send_HAL_Status(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, 0xFF), "ctrl_meas");
 800135e:	23ff      	movs	r3, #255	@ 0xff
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f10d 0213 	add.w	r2, sp, #19
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	2210      	movs	r2, #16
 800136e:	21d4      	movs	r1, #212	@ 0xd4
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <Acc_LSM_Init+0x144>)
 8001372:	f000 ffff 	bl	8002374 <HAL_I2C_Mem_Write>
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <Acc_LSM_Init+0x154>)
 8001378:	f7ff fe4a 	bl	8001010 <UART_Send_HAL_Status>
 800137c:	e7c3      	b.n	8001306 <Acc_LSM_Init+0xc2>
 800137e:	bf00      	nop
 8001380:	08006ee8 	.word	0x08006ee8
 8001384:	200002b8 	.word	0x200002b8
 8001388:	200001f0 	.word	0x200001f0
 800138c:	08006ed0 	.word	0x08006ed0
 8001390:	08006d70 	.word	0x08006d70
 8001394:	08006f28 	.word	0x08006f28
 8001398:	08006edc 	.word	0x08006edc
 800139c:	00000000 	.word	0x00000000

080013a0 <Read_Acc>:

void Read_Acc(double* buffer_xyz)
{
 80013a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a4:	b089      	sub	sp, #36	@ 0x24
 80013a6:	4680      	mov	r8, r0
	uint8_t dev_address = 0b11010100;
  uint16_t raw_val[2];

	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x28, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTX_L_XL");
 80013a8:	4e5d      	ldr	r6, [pc, #372]	@ (8001520 <Read_Acc+0x180>)
 80013aa:	27ff      	movs	r7, #255	@ 0xff
 80013ac:	9702      	str	r7, [sp, #8]
 80013ae:	2401      	movs	r4, #1
 80013b0:	9401      	str	r4, [sp, #4]
 80013b2:	f10d 0b1c 	add.w	fp, sp, #28
 80013b6:	f8cd b000 	str.w	fp, [sp]
 80013ba:	4623      	mov	r3, r4
 80013bc:	2228      	movs	r2, #40	@ 0x28
 80013be:	21d4      	movs	r1, #212	@ 0xd4
 80013c0:	4630      	mov	r0, r6
 80013c2:	f001 f887 	bl	80024d4 <HAL_I2C_Mem_Read>
 80013c6:	4957      	ldr	r1, [pc, #348]	@ (8001524 <Read_Acc+0x184>)
 80013c8:	f7ff fe22 	bl	8001010 <UART_Send_HAL_Status>
	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x29, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTX_H_XL");
 80013cc:	9702      	str	r7, [sp, #8]
 80013ce:	9401      	str	r4, [sp, #4]
 80013d0:	f10d 0a1d 	add.w	sl, sp, #29
 80013d4:	f8cd a000 	str.w	sl, [sp]
 80013d8:	4623      	mov	r3, r4
 80013da:	2229      	movs	r2, #41	@ 0x29
 80013dc:	21d4      	movs	r1, #212	@ 0xd4
 80013de:	4630      	mov	r0, r6
 80013e0:	f001 f878 	bl	80024d4 <HAL_I2C_Mem_Read>
 80013e4:	4950      	ldr	r1, [pc, #320]	@ (8001528 <Read_Acc+0x188>)
 80013e6:	f7ff fe13 	bl	8001010 <UART_Send_HAL_Status>

  int16_t x_val = raw_val[1] << 8 | raw_val[0];
 80013ea:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 80013ee:	022d      	lsls	r5, r5, #8
 80013f0:	b22d      	sxth	r5, r5
 80013f2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80013f6:	431d      	orrs	r5, r3
  raw_val[0] = raw_val[1] = 0;
 80013f8:	f04f 0900 	mov.w	r9, #0
 80013fc:	f8ad 901e 	strh.w	r9, [sp, #30]
 8001400:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTY_L_XL");
 8001404:	9702      	str	r7, [sp, #8]
 8001406:	9401      	str	r4, [sp, #4]
 8001408:	f8cd b000 	str.w	fp, [sp]
 800140c:	4623      	mov	r3, r4
 800140e:	222a      	movs	r2, #42	@ 0x2a
 8001410:	21d4      	movs	r1, #212	@ 0xd4
 8001412:	4630      	mov	r0, r6
 8001414:	f001 f85e 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001418:	4944      	ldr	r1, [pc, #272]	@ (800152c <Read_Acc+0x18c>)
 800141a:	f7ff fdf9 	bl	8001010 <UART_Send_HAL_Status>
	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTY_H_XL");
 800141e:	9702      	str	r7, [sp, #8]
 8001420:	9401      	str	r4, [sp, #4]
 8001422:	f8cd a000 	str.w	sl, [sp]
 8001426:	4623      	mov	r3, r4
 8001428:	222b      	movs	r2, #43	@ 0x2b
 800142a:	21d4      	movs	r1, #212	@ 0xd4
 800142c:	4630      	mov	r0, r6
 800142e:	f001 f851 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001432:	493f      	ldr	r1, [pc, #252]	@ (8001530 <Read_Acc+0x190>)
 8001434:	f7ff fdec 	bl	8001010 <UART_Send_HAL_Status>

  int16_t y_val = raw_val[1] << 8 | raw_val[0];
 8001438:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21b      	sxth	r3, r3
 8001440:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8001444:	4313      	orrs	r3, r2
 8001446:	9305      	str	r3, [sp, #20]
  raw_val[0] = raw_val[1] = 0;
 8001448:	f8ad 901e 	strh.w	r9, [sp, #30]
 800144c:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTZ_L_XL");
 8001450:	9702      	str	r7, [sp, #8]
 8001452:	9401      	str	r4, [sp, #4]
 8001454:	f8cd b000 	str.w	fp, [sp]
 8001458:	4623      	mov	r3, r4
 800145a:	222c      	movs	r2, #44	@ 0x2c
 800145c:	21d4      	movs	r1, #212	@ 0xd4
 800145e:	4630      	mov	r0, r6
 8001460:	f001 f838 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001464:	4933      	ldr	r1, [pc, #204]	@ (8001534 <Read_Acc+0x194>)
 8001466:	f7ff fdd3 	bl	8001010 <UART_Send_HAL_Status>
	UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2D, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTZ_H_XL");
 800146a:	9702      	str	r7, [sp, #8]
 800146c:	9401      	str	r4, [sp, #4]
 800146e:	f8cd a000 	str.w	sl, [sp]
 8001472:	4623      	mov	r3, r4
 8001474:	222d      	movs	r2, #45	@ 0x2d
 8001476:	21d4      	movs	r1, #212	@ 0xd4
 8001478:	4630      	mov	r0, r6
 800147a:	f001 f82b 	bl	80024d4 <HAL_I2C_Mem_Read>
 800147e:	492e      	ldr	r1, [pc, #184]	@ (8001538 <Read_Acc+0x198>)
 8001480:	f7ff fdc6 	bl	8001010 <UART_Send_HAL_Status>

  int16_t z_val = raw_val[1] << 8 | raw_val[0];
 8001484:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 8001488:	0224      	lsls	r4, r4, #8
 800148a:	b224      	sxth	r4, r4
 800148c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8001490:	431c      	orrs	r4, r3

  buffer_xyz[0] = ((double)x_val * 0.488/1000)*9.81;
 8001492:	4628      	mov	r0, r5
 8001494:	f7ff f82e 	bl	80004f4 <__aeabi_i2d>
 8001498:	a31d      	add	r3, pc, #116	@ (adr r3, 8001510 <Read_Acc+0x170>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f893 	bl	80005c8 <__aeabi_dmul>
 80014a2:	2200      	movs	r2, #0
 80014a4:	4b25      	ldr	r3, [pc, #148]	@ (800153c <Read_Acc+0x19c>)
 80014a6:	f7ff f9b9 	bl	800081c <__aeabi_ddiv>
 80014aa:	a31b      	add	r3, pc, #108	@ (adr r3, 8001518 <Read_Acc+0x178>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f88a 	bl	80005c8 <__aeabi_dmul>
 80014b4:	e9c8 0100 	strd	r0, r1, [r8]
  buffer_xyz[1] = ((double)y_val * 0.488/1000)*9.81;
 80014b8:	9805      	ldr	r0, [sp, #20]
 80014ba:	f7ff f81b 	bl	80004f4 <__aeabi_i2d>
 80014be:	a314      	add	r3, pc, #80	@ (adr r3, 8001510 <Read_Acc+0x170>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f880 	bl	80005c8 <__aeabi_dmul>
 80014c8:	2200      	movs	r2, #0
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <Read_Acc+0x19c>)
 80014cc:	f7ff f9a6 	bl	800081c <__aeabi_ddiv>
 80014d0:	a311      	add	r3, pc, #68	@ (adr r3, 8001518 <Read_Acc+0x178>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f877 	bl	80005c8 <__aeabi_dmul>
 80014da:	e9c8 0102 	strd	r0, r1, [r8, #8]
  buffer_xyz[2] = ((double)z_val * 0.488/1000)*9.81;
 80014de:	4620      	mov	r0, r4
 80014e0:	f7ff f808 	bl	80004f4 <__aeabi_i2d>
 80014e4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001510 <Read_Acc+0x170>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f86d 	bl	80005c8 <__aeabi_dmul>
 80014ee:	2200      	movs	r2, #0
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <Read_Acc+0x19c>)
 80014f2:	f7ff f993 	bl	800081c <__aeabi_ddiv>
 80014f6:	a308      	add	r3, pc, #32	@ (adr r3, 8001518 <Read_Acc+0x178>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f864 	bl	80005c8 <__aeabi_dmul>
 8001500:	e9c8 0104 	strd	r0, r1, [r8, #16]
}
 8001504:	b009      	add	sp, #36	@ 0x24
 8001506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	5a1cac08 	.word	0x5a1cac08
 8001514:	3fdf3b64 	.word	0x3fdf3b64
 8001518:	51eb851f 	.word	0x51eb851f
 800151c:	40239eb8 	.word	0x40239eb8
 8001520:	200001f0 	.word	0x200001f0
 8001524:	08006f54 	.word	0x08006f54
 8001528:	08006f60 	.word	0x08006f60
 800152c:	08006f6c 	.word	0x08006f6c
 8001530:	08006f78 	.word	0x08006f78
 8001534:	08006f84 	.word	0x08006f84
 8001538:	08006f90 	.word	0x08006f90
 800153c:	408f4000 	.word	0x408f4000

08001540 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001542:	e7fe      	b.n	8001542 <Error_Handler+0x2>

08001544 <SystemClock_Config>:
{
 8001544:	b510      	push	{r4, lr}
 8001546:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001548:	ac08      	add	r4, sp, #32
 800154a:	2230      	movs	r2, #48	@ 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4620      	mov	r0, r4
 8001550:	f003 f99a 	bl	8004888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	2300      	movs	r3, #0
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9304      	str	r3, [sp, #16]
 800155a:	9305      	str	r3, [sp, #20]
 800155c:	9306      	str	r3, [sp, #24]
 800155e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <SystemClock_Config+0x98>)
 8001564:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001566:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800156a:	6411      	str	r1, [r2, #64]	@ 0x40
 800156c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800156e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001572:	9201      	str	r2, [sp, #4]
 8001574:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <SystemClock_Config+0x9c>)
 800157a:	6811      	ldr	r1, [r2, #0]
 800157c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001580:	6011      	str	r1, [r2, #0]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001588:	9202      	str	r2, [sp, #8]
 800158a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2202      	movs	r2, #2
 800158e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2101      	movs	r1, #1
 8001592:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2110      	movs	r1, #16
 8001596:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80015a0:	2364      	movs	r3, #100	@ 0x64
 80015a2:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	4620      	mov	r0, r4
 80015ac:	f001 f92a 	bl	8002804 <HAL_RCC_OscConfig>
 80015b0:	b980      	cbnz	r0, 80015d4 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b6:	2302      	movs	r3, #2
 80015b8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c2:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015c6:	2103      	movs	r1, #3
 80015c8:	a803      	add	r0, sp, #12
 80015ca:	f001 fb6b 	bl	8002ca4 <HAL_RCC_ClockConfig>
 80015ce:	b918      	cbnz	r0, 80015d8 <SystemClock_Config+0x94>
}
 80015d0:	b014      	add	sp, #80	@ 0x50
 80015d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015d4:	f7ff ffb4 	bl	8001540 <Error_Handler>
    Error_Handler();
 80015d8:	f7ff ffb2 	bl	8001540 <Error_Handler>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <main>:
{
 80015e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015e8:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
    char data[100] =  "F411 says: I'm alive\n\r\0";
 80015ec:	4db8      	ldr	r5, [pc, #736]	@ (80018d0 <main+0x2ec>)
 80015ee:	ac8b      	add	r4, sp, #556	@ 0x22c
 80015f0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80015f2:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80015f4:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80015f6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80015f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fa:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 80015fc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80015fe:	c403      	stmia	r4!, {r0, r1}
 8001600:	224c      	movs	r2, #76	@ 0x4c
 8001602:	2100      	movs	r1, #0
 8001604:	4620      	mov	r0, r4
 8001606:	f003 f93f 	bl	8004888 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 800160a:	ac8b      	add	r4, sp, #556	@ 0x22c
 800160c:	4620      	mov	r0, r4
 800160e:	f7fe fe17 	bl	8000240 <strlen>
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	b282      	uxth	r2, r0
 8001618:	4621      	mov	r1, r4
 800161a:	48ae      	ldr	r0, [pc, #696]	@ (80018d4 <main+0x2f0>)
 800161c:	f002 f963 	bl	80038e6 <HAL_UART_Transmit>
  HAL_Init();
 8001620:	f000 f9a0 	bl	8001964 <HAL_Init>
  SystemClock_Config();
 8001624:	f7ff ff8e 	bl	8001544 <SystemClock_Config>
  MX_GPIO_Init();
 8001628:	f7ff fb30 	bl	8000c8c <MX_GPIO_Init>
  MX_I2C1_Init();
 800162c:	f7ff fb4a 	bl	8000cc4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001630:	f002 fb2e 	bl	8003c90 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001634:	f002 fab6 	bl	8003ba4 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001638:	2100      	movs	r1, #0
 800163a:	48a7      	ldr	r0, [pc, #668]	@ (80018d8 <main+0x2f4>)
 800163c:	f001 ff4e 	bl	80034dc <HAL_TIM_PWM_Start>
  Acc_LSM_Init();
 8001640:	f7ff fe00 	bl	8001244 <Acc_LSM_Init>
  InitBmp();
 8001644:	f7ff fc9c 	bl	8000f80 <InitBmp>
  Read_Dig_Variables();
 8001648:	f7ff fd26 	bl	8001098 <Read_Dig_Variables>
  uint8_t ctrl_meas = 0b01001001;
 800164c:	2349      	movs	r3, #73	@ 0x49
 800164e:	f88d 322b 	strb.w	r3, [sp, #555]	@ 0x22b
  UART_Send_HAL_Status(HAL_I2C_Mem_Write(&hi2c1, 0x76 << 1, 0xF4, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, 1, 0xFF), "ctrl_meas");
 8001652:	23ff      	movs	r3, #255	@ 0xff
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2301      	movs	r3, #1
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f20d 222b 	addw	r2, sp, #555	@ 0x22b
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	22f4      	movs	r2, #244	@ 0xf4
 8001662:	21ec      	movs	r1, #236	@ 0xec
 8001664:	489d      	ldr	r0, [pc, #628]	@ (80018dc <main+0x2f8>)
 8001666:	f000 fe85 	bl	8002374 <HAL_I2C_Mem_Write>
 800166a:	499d      	ldr	r1, [pc, #628]	@ (80018e0 <main+0x2fc>)
 800166c:	f7ff fcd0 	bl	8001010 <UART_Send_HAL_Status>
    HAL_Delay(1000);
 8001670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001674:	f000 f9a2 	bl	80019bc <HAL_Delay>
    char data[100] =  "------------------------BMP----------------------\n\r\0";
 8001678:	ae0d      	add	r6, sp, #52	@ 0x34
 800167a:	4c95      	ldr	r4, [pc, #596]	@ (80018d0 <main+0x2ec>)
 800167c:	f104 0c64 	add.w	ip, r4, #100	@ 0x64
 8001680:	4635      	mov	r5, r6
 8001682:	3494      	adds	r4, #148	@ 0x94
 8001684:	46ae      	mov	lr, r5
 8001686:	f8dc 0000 	ldr.w	r0, [ip]
 800168a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800168e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8001692:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001696:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800169a:	f10c 0c10 	add.w	ip, ip, #16
 800169e:	4675      	mov	r5, lr
 80016a0:	45a4      	cmp	ip, r4
 80016a2:	d1ef      	bne.n	8001684 <main+0xa0>
 80016a4:	f8dc 0000 	ldr.w	r0, [ip]
 80016a8:	f8ce 0000 	str.w	r0, [lr]
 80016ac:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80016b0:	f88e 3004 	strb.w	r3, [lr, #4]
 80016b4:	222f      	movs	r2, #47	@ 0x2f
 80016b6:	2100      	movs	r1, #0
 80016b8:	f106 0035 	add.w	r0, r6, #53	@ 0x35
 80016bc:	f003 f8e4 	bl	8004888 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 80016c0:	ac0d      	add	r4, sp, #52	@ 0x34
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7fe fdbc 	bl	8000240 <strlen>
 80016c8:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 80018d4 <main+0x2f0>
 80016cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d0:	b282      	uxth	r2, r0
 80016d2:	4621      	mov	r1, r4
 80016d4:	4640      	mov	r0, r8
 80016d6:	f002 f906 	bl	80038e6 <HAL_UART_Transmit>
    temp_raw[0] = temp_raw[1] = temp_raw[2]  = 0;
 80016da:	ad04      	add	r5, sp, #16
 80016dc:	f04f 0900 	mov.w	r9, #0
 80016e0:	f88d 9012 	strb.w	r9, [sp, #18]
 80016e4:	f88d 9011 	strb.w	r9, [sp, #17]
 80016e8:	f88d 9010 	strb.w	r9, [sp, #16]
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFA, I2C_MEMADD_SIZE_8BIT, temp_raw, 1, 0xFF), "temp_msb");
 80016ec:	4e7b      	ldr	r6, [pc, #492]	@ (80018dc <main+0x2f8>)
 80016ee:	27ff      	movs	r7, #255	@ 0xff
 80016f0:	9702      	str	r7, [sp, #8]
 80016f2:	2401      	movs	r4, #1
 80016f4:	9401      	str	r4, [sp, #4]
 80016f6:	9500      	str	r5, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	22fa      	movs	r2, #250	@ 0xfa
 80016fc:	21ec      	movs	r1, #236	@ 0xec
 80016fe:	4630      	mov	r0, r6
 8001700:	f000 fee8 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001704:	4977      	ldr	r1, [pc, #476]	@ (80018e4 <main+0x300>)
 8001706:	f7ff fc83 	bl	8001010 <UART_Send_HAL_Status>
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFB, I2C_MEMADD_SIZE_8BIT, temp_raw+1, 1, 0xFF), "temp_lsb");
 800170a:	9702      	str	r7, [sp, #8]
 800170c:	9401      	str	r4, [sp, #4]
 800170e:	f10d 0311 	add.w	r3, sp, #17
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	22fb      	movs	r2, #251	@ 0xfb
 8001718:	21ec      	movs	r1, #236	@ 0xec
 800171a:	4630      	mov	r0, r6
 800171c:	f000 feda 	bl	80024d4 <HAL_I2C_Mem_Read>
 8001720:	4971      	ldr	r1, [pc, #452]	@ (80018e8 <main+0x304>)
 8001722:	f7ff fc75 	bl	8001010 <UART_Send_HAL_Status>
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFC, I2C_MEMADD_SIZE_8BIT, temp_raw+2, 1, 0xFF), "temp_xlsb");
 8001726:	9702      	str	r7, [sp, #8]
 8001728:	9401      	str	r4, [sp, #4]
 800172a:	f10d 0312 	add.w	r3, sp, #18
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4623      	mov	r3, r4
 8001732:	22fc      	movs	r2, #252	@ 0xfc
 8001734:	21ec      	movs	r1, #236	@ 0xec
 8001736:	4630      	mov	r0, r6
 8001738:	f000 fecc 	bl	80024d4 <HAL_I2C_Mem_Read>
 800173c:	496b      	ldr	r1, [pc, #428]	@ (80018ec <main+0x308>)
 800173e:	f7ff fc67 	bl	8001010 <UART_Send_HAL_Status>
    int32_t temp_raw_32 = (int32_t) ( ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | ((uint32_t)temp_raw[2] >> 4) );
 8001742:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001746:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001750:	f89d 0012 	ldrb.w	r0, [sp, #18]
    actual_temp = 0;
 8001754:	4d66      	ldr	r5, [pc, #408]	@ (80018f0 <main+0x30c>)
 8001756:	f8c5 9000 	str.w	r9, [r5]
    actual_temp = bmp280_compensate_T_int32(temp_raw_32);
 800175a:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 800175e:	f7ff fb07 	bl	8000d70 <bmp280_compensate_T_int32>
 8001762:	6028      	str	r0, [r5, #0]
    sprintf(temp_str, "Temperature: %.2f Celsius\n\n\r", ((float)actual_temp)/100);
 8001764:	ee07 0a90 	vmov	s15, r0
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80018f4 <main+0x310>
 8001770:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001774:	ee17 0a90 	vmov	r0, s15
 8001778:	f7fe fece 	bl	8000518 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ad26      	add	r5, sp, #152	@ 0x98
 8001782:	495d      	ldr	r1, [pc, #372]	@ (80018f8 <main+0x314>)
 8001784:	4628      	mov	r0, r5
 8001786:	f003 f819 	bl	80047bc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)temp_str, strlen(temp_str), 1000);
 800178a:	4628      	mov	r0, r5
 800178c:	f7fe fd58 	bl	8000240 <strlen>
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	b282      	uxth	r2, r0
 8001796:	4629      	mov	r1, r5
 8001798:	4640      	mov	r0, r8
 800179a:	f002 f8a4 	bl	80038e6 <HAL_UART_Transmit>
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF7, I2C_MEMADD_SIZE_8BIT, pressure_raw, 1, 0xFF), "press_msb");
 800179e:	9702      	str	r7, [sp, #8]
 80017a0:	9401      	str	r4, [sp, #4]
 80017a2:	ad05      	add	r5, sp, #20
 80017a4:	9500      	str	r5, [sp, #0]
 80017a6:	4623      	mov	r3, r4
 80017a8:	22f7      	movs	r2, #247	@ 0xf7
 80017aa:	21ec      	movs	r1, #236	@ 0xec
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 fe91 	bl	80024d4 <HAL_I2C_Mem_Read>
 80017b2:	4952      	ldr	r1, [pc, #328]	@ (80018fc <main+0x318>)
 80017b4:	f7ff fc2c 	bl	8001010 <UART_Send_HAL_Status>
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF8, I2C_MEMADD_SIZE_8BIT, pressure_raw+1, 1, 0xFF), "press_lsb");
 80017b8:	9702      	str	r7, [sp, #8]
 80017ba:	9401      	str	r4, [sp, #4]
 80017bc:	f10d 0315 	add.w	r3, sp, #21
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4623      	mov	r3, r4
 80017c4:	22f8      	movs	r2, #248	@ 0xf8
 80017c6:	21ec      	movs	r1, #236	@ 0xec
 80017c8:	4630      	mov	r0, r6
 80017ca:	f000 fe83 	bl	80024d4 <HAL_I2C_Mem_Read>
 80017ce:	494c      	ldr	r1, [pc, #304]	@ (8001900 <main+0x31c>)
 80017d0:	f7ff fc1e 	bl	8001010 <UART_Send_HAL_Status>
    UART_Send_HAL_Status(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF9, I2C_MEMADD_SIZE_8BIT, pressure_raw+2, 1, 0xFF), "press_xlsb");
 80017d4:	9702      	str	r7, [sp, #8]
 80017d6:	9401      	str	r4, [sp, #4]
 80017d8:	f10d 0316 	add.w	r3, sp, #22
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4623      	mov	r3, r4
 80017e0:	22f9      	movs	r2, #249	@ 0xf9
 80017e2:	21ec      	movs	r1, #236	@ 0xec
 80017e4:	4630      	mov	r0, r6
 80017e6:	f000 fe75 	bl	80024d4 <HAL_I2C_Mem_Read>
 80017ea:	4946      	ldr	r1, [pc, #280]	@ (8001904 <main+0x320>)
 80017ec:	f7ff fc10 	bl	8001010 <UART_Send_HAL_Status>
    int32_t pressure_raw_32 = (int32_t) ( ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | ((uint32_t)pressure_raw[2] >> 4) );
 80017f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80017f4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80017fe:	f89d 0016 	ldrb.w	r0, [sp, #22]
    actual_pressure = bmp280_compensate_P_int64(pressure_raw_32);
 8001802:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 8001806:	f7ff fad9 	bl	8000dbc <bmp280_compensate_P_int64>
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <main+0x324>)
 800180c:	6018      	str	r0, [r3, #0]
    sprintf(pressure_str, "Pressure: %.4f Pa\n\n\r",  ((float)actual_pressure)/256);
 800180e:	ee07 0a90 	vmov	s15, r0
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800190c <main+0x328>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fe79 	bl	8000518 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ac3f      	add	r4, sp, #252	@ 0xfc
 800182c:	4938      	ldr	r1, [pc, #224]	@ (8001910 <main+0x32c>)
 800182e:	4620      	mov	r0, r4
 8001830:	f002 ffc4 	bl	80047bc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)pressure_str, strlen(pressure_str), 1000);
 8001834:	4620      	mov	r0, r4
 8001836:	f7fe fd03 	bl	8000240 <strlen>
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	b282      	uxth	r2, r0
 8001840:	4621      	mov	r1, r4
 8001842:	4640      	mov	r0, r8
 8001844:	f002 f84f 	bl	80038e6 <HAL_UART_Transmit>
    char data1[100] =  "------------------------ACC----------------------\n\r\0";
 8001848:	f50d 7cb0 	add.w	ip, sp, #352	@ 0x160
 800184c:	4e20      	ldr	r6, [pc, #128]	@ (80018d0 <main+0x2ec>)
 800184e:	f106 049c 	add.w	r4, r6, #156	@ 0x9c
 8001852:	4667      	mov	r7, ip
 8001854:	36cc      	adds	r6, #204	@ 0xcc
 8001856:	463d      	mov	r5, r7
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	6861      	ldr	r1, [r4, #4]
 800185c:	68a2      	ldr	r2, [r4, #8]
 800185e:	68e3      	ldr	r3, [r4, #12]
 8001860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001862:	3410      	adds	r4, #16
 8001864:	462f      	mov	r7, r5
 8001866:	42b4      	cmp	r4, r6
 8001868:	d1f5      	bne.n	8001856 <main+0x272>
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	6028      	str	r0, [r5, #0]
 800186e:	7923      	ldrb	r3, [r4, #4]
 8001870:	712b      	strb	r3, [r5, #4]
 8001872:	222f      	movs	r2, #47	@ 0x2f
 8001874:	2100      	movs	r1, #0
 8001876:	f10c 0035 	add.w	r0, ip, #53	@ 0x35
 800187a:	f003 f805 	bl	8004888 <memset>
    HAL_UART_Transmit(&huart1, (uint8_t*)data1, strlen(data), 1000);
 800187e:	a80d      	add	r0, sp, #52	@ 0x34
 8001880:	f7fe fcde 	bl	8000240 <strlen>
 8001884:	4e13      	ldr	r6, [pc, #76]	@ (80018d4 <main+0x2f0>)
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	b282      	uxth	r2, r0
 800188c:	a958      	add	r1, sp, #352	@ 0x160
 800188e:	4630      	mov	r0, r6
 8001890:	f002 f829 	bl	80038e6 <HAL_UART_Transmit>
    Read_Acc(acc_vals);
 8001894:	ac06      	add	r4, sp, #24
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fd82 	bl	80013a0 <Read_Acc>
    sprintf(acc_str, "Acceleration: (%0.4f, %0.4f, %0.4f) \n\n\r", acc_vals[0], acc_vals[1], acc_vals[2]);
 800189c:	ad71      	add	r5, sp, #452	@ 0x1c4
 800189e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80018a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80018aa:	e9cd 2300 	strd	r2, r3, [sp]
 80018ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80018b2:	4918      	ldr	r1, [pc, #96]	@ (8001914 <main+0x330>)
 80018b4:	4628      	mov	r0, r5
 80018b6:	f002 ff81 	bl	80047bc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)acc_str, strlen(acc_str), 1000);
 80018ba:	4628      	mov	r0, r5
 80018bc:	f7fe fcc0 	bl	8000240 <strlen>
 80018c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c4:	b282      	uxth	r2, r0
 80018c6:	4629      	mov	r1, r5
 80018c8:	4630      	mov	r0, r6
 80018ca:	f002 f80c 	bl	80038e6 <HAL_UART_Transmit>
  while (1)
 80018ce:	e6cf      	b.n	8001670 <main+0x8c>
 80018d0:	08006d58 	.word	0x08006d58
 80018d4:	200002b8 	.word	0x200002b8
 80018d8:	20000270 	.word	0x20000270
 80018dc:	200001f0 	.word	0x200001f0
 80018e0:	08006edc 	.word	0x08006edc
 80018e4:	08006f9c 	.word	0x08006f9c
 80018e8:	08006fa8 	.word	0x08006fa8
 80018ec:	08006fb4 	.word	0x08006fb4
 80018f0:	2000024c 	.word	0x2000024c
 80018f4:	42c80000 	.word	0x42c80000
 80018f8:	08006fc0 	.word	0x08006fc0
 80018fc:	08006fe0 	.word	0x08006fe0
 8001900:	08006fec 	.word	0x08006fec
 8001904:	08006ff8 	.word	0x08006ff8
 8001908:	20000248 	.word	0x20000248
 800190c:	3b800000 	.word	0x3b800000
 8001910:	08007004 	.word	0x08007004
 8001914:	0800701c 	.word	0x0800701c

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_InitTick+0x40>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001924:	fbb3 f3f2 	udiv	r3, r3, r2
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <HAL_InitTick+0x44>)
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001930:	f000 f8c0 	bl	8001ab4 <HAL_SYSTICK_Config>
 8001934:	b968      	cbnz	r0, 8001952 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	2c0f      	cmp	r4, #15
 8001938:	d901      	bls.n	800193e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	e00a      	b.n	8001954 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193e:	2200      	movs	r2, #0
 8001940:	4621      	mov	r1, r4
 8001942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001946:	f000 f8a1 	bl	8001a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_InitTick+0x48>)
 800194c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2000      	movs	r0, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001952:	2001      	movs	r0, #1
}
 8001954:	bd10      	pop	{r4, pc}
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_Init>:
{
 8001964:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_Init+0x30>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800196e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001976:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800197e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f871 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f7ff ffc6 	bl	8001918 <HAL_InitTick>
  HAL_MspInit();
 800198c:	f000 ff1e 	bl	80027cc <HAL_MspInit>
}
 8001990:	2000      	movs	r0, #0
 8001992:	bd08      	pop	{r3, pc}
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001998:	4a03      	ldr	r2, [pc, #12]	@ (80019a8 <HAL_IncTick+0x10>)
 800199a:	6811      	ldr	r1, [r2, #0]
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_IncTick+0x14>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	440b      	add	r3, r1
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000268 	.word	0x20000268
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019b0:	4b01      	ldr	r3, [pc, #4]	@ (80019b8 <HAL_GetTick+0x8>)
 80019b2:	6818      	ldr	r0, [r3, #0]
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000268 	.word	0x20000268

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fff6 	bl	80019b0 <HAL_GetTick>
 80019c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80019ca:	d002      	beq.n	80019d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_Delay+0x24>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019d2:	f7ff ffed 	bl	80019b0 <HAL_GetTick>
 80019d6:	1b40      	subs	r0, r0, r5
 80019d8:	42a0      	cmp	r0, r4
 80019da:	d3fa      	bcc.n	80019d2 <HAL_Delay+0x16>
  {
  }
}
 80019dc:	bd38      	pop	{r3, r4, r5, pc}
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80019e4:	2800      	cmp	r0, #0
 80019e6:	db07      	blt.n	80019f8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e8:	f000 021f 	and.w	r2, r0, #31
 80019ec:	0940      	lsrs	r0, r0, #5
 80019ee:	2301      	movs	r3, #1
 80019f0:	4093      	lsls	r3, r2
 80019f2:	4a02      	ldr	r2, [pc, #8]	@ (80019fc <__NVIC_EnableIRQ+0x18>)
 80019f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	db08      	blt.n	8001a16 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	0109      	lsls	r1, r1, #4
 8001a06:	b2c9      	uxtb	r1, r1
 8001a08:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a0c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a10:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001a14:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	f000 000f 	and.w	r0, r0, #15
 8001a1a:	0109      	lsls	r1, r1, #4
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	4b01      	ldr	r3, [pc, #4]	@ (8001a24 <__NVIC_SetPriority+0x24>)
 8001a20:	5419      	strb	r1, [r3, r0]
  }
}
 8001a22:	4770      	bx	lr
 8001a24:	e000ed14 	.word	0xe000ed14

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2e:	f1c0 0c07 	rsb	ip, r0, #7
 8001a32:	f1bc 0f04 	cmp.w	ip, #4
 8001a36:	bf28      	it	cs
 8001a38:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3c:	1d03      	adds	r3, r0, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d90f      	bls.n	8001a62 <NVIC_EncodePriority+0x3a>
 8001a42:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001a48:	fa0e f00c 	lsl.w	r0, lr, ip
 8001a4c:	ea21 0100 	bic.w	r1, r1, r0
 8001a50:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a52:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a56:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001a5a:	ea41 0002 	orr.w	r0, r1, r2
 8001a5e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	2300      	movs	r3, #0
 8001a64:	e7ee      	b.n	8001a44 <NVIC_EncodePriority+0x1c>
	...

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a6a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	0200      	lsls	r0, r0, #8
 8001a76:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001a84:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_NVIC_SetPriority+0x1c>)
 8001a92:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a94:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001a98:	f7ff ffc6 	bl	8001a28 <NVIC_EncodePriority>
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff ffae 	bl	8001a00 <__NVIC_SetPriority>
}
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	f7ff ff99 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001ab2:	bd08      	pop	{r3, pc}

08001ab4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001aba:	d20b      	bcs.n	8001ad4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ac0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_SYSTICK_Config+0x24>)
 8001ac4:	21f0      	movs	r1, #240	@ 0xf0
 8001ac6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aca:	2000      	movs	r0, #0
 8001acc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	2207      	movs	r2, #7
 8001ad0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ad4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f200 80d7 	bhi.w	8001c92 <HAL_GPIO_Init+0x1b6>
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	e065      	b.n	8001bb6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001af0:	2403      	movs	r4, #3
 8001af2:	fa04 f40e 	lsl.w	r4, r4, lr
 8001af6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	68cc      	ldr	r4, [r1, #12]
 8001afc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b00:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001b02:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b06:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	684a      	ldr	r2, [r1, #4]
 8001b0c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001b14:	6042      	str	r2, [r0, #4]
 8001b16:	e05c      	b.n	8001bd2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	08dc      	lsrs	r4, r3, #3
 8001b1a:	3408      	adds	r4, #8
 8001b1c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b20:	f003 0507 	and.w	r5, r3, #7
 8001b24:	00ad      	lsls	r5, r5, #2
 8001b26:	f04f 0e0f 	mov.w	lr, #15
 8001b2a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001b2e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b32:	690a      	ldr	r2, [r1, #16]
 8001b34:	40aa      	lsls	r2, r5
 8001b36:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b3a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b3e:	e05c      	b.n	8001bfa <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b40:	2204      	movs	r2, #4
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x6a>
 8001b44:	2200      	movs	r2, #0
 8001b46:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b4a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4c:	3402      	adds	r4, #2
 8001b4e:	4d51      	ldr	r5, [pc, #324]	@ (8001c94 <HAL_GPIO_Init+0x1b8>)
 8001b50:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_GPIO_Init+0x1bc>)
 8001b56:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	ea6f 020c 	mvn.w	r2, ip
 8001b5c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b60:	684e      	ldr	r6, [r1, #4]
 8001b62:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001b66:	d001      	beq.n	8001b6c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001b68:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b6c:	4c4a      	ldr	r4, [pc, #296]	@ (8001c98 <HAL_GPIO_Init+0x1bc>)
 8001b6e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b70:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b76:	684e      	ldr	r6, [r1, #4]
 8001b78:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001b7c:	d001      	beq.n	8001b82 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001b7e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001b82:	4c45      	ldr	r4, [pc, #276]	@ (8001c98 <HAL_GPIO_Init+0x1bc>)
 8001b84:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001b86:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8c:	684e      	ldr	r6, [r1, #4]
 8001b8e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001b92:	d001      	beq.n	8001b98 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001b94:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b98:	4c3f      	ldr	r4, [pc, #252]	@ (8001c98 <HAL_GPIO_Init+0x1bc>)
 8001b9a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba0:	684d      	ldr	r5, [r1, #4]
 8001ba2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001ba6:	d001      	beq.n	8001bac <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001ba8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001bac:	4c3a      	ldr	r4, [pc, #232]	@ (8001c98 <HAL_GPIO_Init+0x1bc>)
 8001bae:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	d86b      	bhi.n	8001c8e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	680c      	ldr	r4, [r1, #0]
 8001bbc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001bc0:	ea32 0404 	bics.w	r4, r2, r4
 8001bc4:	d1f4      	bne.n	8001bb0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	684c      	ldr	r4, [r1, #4]
 8001bc8:	f004 0403 	and.w	r4, r4, #3
 8001bcc:	3c01      	subs	r4, #1
 8001bce:	2c01      	cmp	r4, #1
 8001bd0:	d98b      	bls.n	8001aea <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	684a      	ldr	r2, [r1, #4]
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	2a03      	cmp	r2, #3
 8001bda:	d009      	beq.n	8001bf0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001bdc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	005d      	lsls	r5, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	40aa      	lsls	r2, r5
 8001be4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	688a      	ldr	r2, [r1, #8]
 8001bea:	40aa      	lsls	r2, r5
 8001bec:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001bee:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	684a      	ldr	r2, [r1, #4]
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	2a02      	cmp	r2, #2
 8001bf8:	d08e      	beq.n	8001b18 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001bfa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c06:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0a:	684a      	ldr	r2, [r1, #4]
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c14:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001c16:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	684a      	ldr	r2, [r1, #4]
 8001c1a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001c1e:	d0c7      	beq.n	8001bb0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	2200      	movs	r2, #0
 8001c22:	9201      	str	r2, [sp, #4]
 8001c24:	4a1d      	ldr	r2, [pc, #116]	@ (8001c9c <HAL_GPIO_Init+0x1c0>)
 8001c26:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001c28:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c2c:	6454      	str	r4, [r2, #68]	@ 0x44
 8001c2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c30:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c38:	089c      	lsrs	r4, r3, #2
 8001c3a:	1ca5      	adds	r5, r4, #2
 8001c3c:	4a15      	ldr	r2, [pc, #84]	@ (8001c94 <HAL_GPIO_Init+0x1b8>)
 8001c3e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c42:	f003 0e03 	and.w	lr, r3, #3
 8001c46:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c50:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_GPIO_Init+0x1c4>)
 8001c56:	4290      	cmp	r0, r2
 8001c58:	f43f af74 	beq.w	8001b44 <HAL_GPIO_Init+0x68>
 8001c5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c60:	4290      	cmp	r0, r2
 8001c62:	d00e      	beq.n	8001c82 <HAL_GPIO_Init+0x1a6>
 8001c64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d00c      	beq.n	8001c86 <HAL_GPIO_Init+0x1aa>
 8001c6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c70:	4290      	cmp	r0, r2
 8001c72:	d00a      	beq.n	8001c8a <HAL_GPIO_Init+0x1ae>
 8001c74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	f43f af61 	beq.w	8001b40 <HAL_GPIO_Init+0x64>
 8001c7e:	2207      	movs	r2, #7
 8001c80:	e761      	b.n	8001b46 <HAL_GPIO_Init+0x6a>
 8001c82:	2201      	movs	r2, #1
 8001c84:	e75f      	b.n	8001b46 <HAL_GPIO_Init+0x6a>
 8001c86:	2202      	movs	r2, #2
 8001c88:	e75d      	b.n	8001b46 <HAL_GPIO_Init+0x6a>
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	e75b      	b.n	8001b46 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
 8001c92:	4770      	bx	lr
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40013c00 	.word	0x40013c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cac:	d101      	bne.n	8001cb2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001cae:	2000      	movs	r0, #0
}
 8001cb0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cb6:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cc6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001cc8:	f042 0204 	orr.w	r2, r2, #4
 8001ccc:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001cce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	4770      	bx	lr

08001cd6 <I2C_WaitOnFlagUntilTimeout>:
{
 8001cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cda:	4606      	mov	r6, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	4617      	mov	r7, r2
 8001ce0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce2:	e03b      	b.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce4:	f7ff fe64 	bl	80019b0 <HAL_GetTick>
 8001ce8:	9b06      	ldr	r3, [sp, #24]
 8001cea:	1ac0      	subs	r0, r0, r3
 8001cec:	4540      	cmp	r0, r8
 8001cee:	d802      	bhi.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x20>
 8001cf0:	f1b8 0f00 	cmp.w	r8, #0
 8001cf4:	d132      	bne.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cf6:	2d01      	cmp	r5, #1
 8001cf8:	d018      	beq.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cfa:	6833      	ldr	r3, [r6, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	ea24 0303 	bic.w	r3, r4, r3
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	429f      	cmp	r7, r3
 8001d0c:	d126      	bne.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d12:	2220      	movs	r2, #32
 8001d14:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d18:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d1c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001d24:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
 8001d2a:	e027      	b.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d2c:	6833      	ldr	r3, [r6, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	ea24 0303 	bic.w	r3, r4, r3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	e7e5      	b.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	ea24 0c03 	bic.w	ip, r4, r3
 8001d46:	fa1f fc8c 	uxth.w	ip, ip
 8001d4a:	fabc fc8c 	clz	ip, ip
 8001d4e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001d52:	4567      	cmp	r7, ip
 8001d54:	d111      	bne.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d5a:	d1c3      	bne.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001d60:	2d01      	cmp	r5, #1
 8001d62:	d0ec      	beq.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0x68>
 8001d64:	6833      	ldr	r3, [r6, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	ea24 0c03 	bic.w	ip, r4, r3
 8001d6c:	fa1f fc8c 	uxth.w	ip, ip
 8001d70:	fabc fc8c 	clz	ip, ip
 8001d74:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001d78:	e7eb      	b.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001d7a:	2000      	movs	r0, #0
}
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d84:	4605      	mov	r5, r0
 8001d86:	460e      	mov	r6, r1
 8001d88:	4690      	mov	r8, r2
 8001d8a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d8c:	e053      	b.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d94:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d9c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001da2:	2220      	movs	r2, #32
 8001da4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dac:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001dae:	f042 0204 	orr.w	r2, r2, #4
 8001db2:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001db4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e04a      	b.n	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbc:	f7ff fdf8 	bl	80019b0 <HAL_GetTick>
 8001dc0:	eba0 0009 	sub.w	r0, r0, r9
 8001dc4:	4540      	cmp	r0, r8
 8001dc6:	d802      	bhi.n	8001dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001dc8:	f1b8 0f00 	cmp.w	r8, #0
 8001dcc:	d133      	bne.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dce:	2f01      	cmp	r7, #1
 8001dd0:	d017      	beq.n	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	ea26 0303 	bic.w	r3, r6, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b00      	subs	r3, #0
 8001dde:	bf18      	it	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	b343      	cbz	r3, 8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001de8:	2220      	movs	r2, #32
 8001dea:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dee:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001df4:	f042 0220 	orr.w	r2, r2, #32
 8001df8:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001dfa:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e027      	b.n	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e02:	682b      	ldr	r3, [r5, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	ea26 0303 	bic.w	r3, r6, r3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b00      	subs	r3, #0
 8001e0e:	bf18      	it	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	e7e6      	b.n	8001de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	699c      	ldr	r4, [r3, #24]
 8001e18:	ea26 0404 	bic.w	r4, r6, r4
 8001e1c:	b2a4      	uxth	r4, r4
 8001e1e:	3c00      	subs	r4, #0
 8001e20:	bf18      	it	ne
 8001e22:	2401      	movne	r4, #1
 8001e24:	b1a4      	cbz	r4, 8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001e2e:	d1ae      	bne.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001e30:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001e34:	d1c2      	bne.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e36:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001e3a:	2f01      	cmp	r7, #1
 8001e3c:	d1ea      	bne.n	8001e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	695c      	ldr	r4, [r3, #20]
 8001e42:	ea26 0404 	bic.w	r4, r6, r4
 8001e46:	b2a4      	uxth	r4, r4
 8001e48:	3c00      	subs	r4, #0
 8001e4a:	bf18      	it	ne
 8001e4c:	2401      	movne	r4, #1
 8001e4e:	e7e9      	b.n	8001e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001e50:	2000      	movs	r0, #0
}
 8001e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e56 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001e56:	b570      	push	{r4, r5, r6, lr}
 8001e58:	4604      	mov	r4, r0
 8001e5a:	460d      	mov	r5, r1
 8001e5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e66:	d121      	bne.n	8001eac <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ff1b 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001e6e:	b9f8      	cbnz	r0, 8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001e70:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001e74:	d0f3      	beq.n	8001e5e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff fd9b 	bl	80019b0 <HAL_GetTick>
 8001e7a:	1b80      	subs	r0, r0, r6
 8001e7c:	42a8      	cmp	r0, r5
 8001e7e:	d801      	bhi.n	8001e84 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	d1ec      	bne.n	8001e5e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e8c:	d1e7      	bne.n	8001e5e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e92:	2220      	movs	r2, #32
 8001e94:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e98:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ea4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	e000      	b.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
}
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	e7fc      	b.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001eb4 <I2C_RequestMemoryWrite>:
{
 8001eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	461f      	mov	r7, r3
 8001ec2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001ec6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec8:	6803      	ldr	r3, [r0, #0]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001ed0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed2:	9600      	str	r6, [sp, #0]
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001edc:	f7ff fefb 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	b960      	cbnz	r0, 8001efc <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001ee8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eea:	4633      	mov	r3, r6
 8001eec:	4642      	mov	r2, r8
 8001eee:	4926      	ldr	r1, [pc, #152]	@ (8001f88 <I2C_RequestMemoryWrite+0xd4>)
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff ff45 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef6:	b168      	cbz	r0, 8001f14 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
 8001efa:	e008      	b.n	8001f0e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f04:	d002      	beq.n	8001f0c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f0a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001f0c:	2003      	movs	r0, #3
}
 8001f0e:	b005      	add	sp, #20
 8001f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f14:	2300      	movs	r3, #0
 8001f16:	9303      	str	r3, [sp, #12]
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	9203      	str	r2, [sp, #12]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	9303      	str	r3, [sp, #12]
 8001f22:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f24:	4632      	mov	r2, r6
 8001f26:	4641      	mov	r1, r8
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff ff94 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2e:	b930      	cbnz	r0, 8001f3e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f30:	2f01      	cmp	r7, #1
 8001f32:	d10f      	bne.n	8001f54 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	fa5f f689 	uxtb.w	r6, r9
 8001f3a:	611e      	str	r6, [r3, #16]
 8001f3c:	e7e7      	b.n	8001f0e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d001      	beq.n	8001f48 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
 8001f46:	e7e2      	b.n	8001f0e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e7f7      	b.n	8001f44 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001f5a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5c:	4632      	mov	r2, r6
 8001f5e:	4641      	mov	r1, r8
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff ff78 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f66:	b920      	cbnz	r0, 8001f72 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	fa5f f689 	uxtb.w	r6, r9
 8001f6e:	611e      	str	r6, [r3, #16]
 8001f70:	e7cd      	b.n	8001f0e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001f78:	2001      	movs	r0, #1
 8001f7a:	e7c8      	b.n	8001f0e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e7f7      	b.n	8001f78 <I2C_RequestMemoryWrite+0xc4>
 8001f88:	00010002 	.word	0x00010002

08001f8c <I2C_RequestMemoryRead>:
{
 8001f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	4616      	mov	r6, r2
 8001f98:	4699      	mov	r9, r3
 8001f9a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001f9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa0:	6802      	ldr	r2, [r0, #0]
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001faa:	6803      	ldr	r3, [r0, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001fb2:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb4:	f8cd 8000 	str.w	r8, [sp]
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fc0:	f7ff fe89 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	b970      	cbnz	r0, 8001fe4 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fc6:	fa5f fa85 	uxtb.w	sl, r5
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001fd0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	463a      	mov	r2, r7
 8001fd6:	4941      	ldr	r1, [pc, #260]	@ (80020dc <I2C_RequestMemoryRead+0x150>)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fed1 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fde:	b168      	cbz	r0, 8001ffc <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e008      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001fec:	d002      	beq.n	8001ff4 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001ff4:	2003      	movs	r0, #3
}
 8001ff6:	b004      	add	sp, #16
 8001ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9303      	str	r3, [sp, #12]
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	9203      	str	r2, [sp, #12]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	9303      	str	r3, [sp, #12]
 800200a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200c:	4642      	mov	r2, r8
 800200e:	4639      	mov	r1, r7
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff ff20 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 8002016:	b980      	cbnz	r0, 800203a <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002018:	f1b9 0f01 	cmp.w	r9, #1
 800201c:	d118      	bne.n	8002050 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	b2f6      	uxtb	r6, r6
 8002022:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002024:	4642      	mov	r2, r8
 8002026:	4639      	mov	r1, r7
 8002028:	4620      	mov	r0, r4
 800202a:	f7ff ff14 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 800202e:	b368      	cbz	r0, 800208c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002032:	2b04      	cmp	r3, #4
 8002034:	d024      	beq.n	8002080 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8002036:	2001      	movs	r0, #1
 8002038:	e7dd      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800203c:	2b04      	cmp	r3, #4
 800203e:	d001      	beq.n	8002044 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8002040:	2001      	movs	r0, #1
 8002042:	e7d8      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e7f7      	b.n	8002040 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	0a32      	lsrs	r2, r6, #8
 8002054:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	4642      	mov	r2, r8
 8002058:	4639      	mov	r1, r7
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff fefb 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 8002060:	b918      	cbnz	r0, 800206a <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	b2f6      	uxtb	r6, r6
 8002066:	611e      	str	r6, [r3, #16]
 8002068:	e7dc      	b.n	8002024 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800206c:	2b04      	cmp	r3, #4
 800206e:	d001      	beq.n	8002074 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8002070:	2001      	movs	r0, #1
 8002072:	e7c0      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e7f7      	b.n	8002070 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	6822      	ldr	r2, [r4, #0]
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e7d4      	b.n	8002036 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002096:	f8cd 8000 	str.w	r8, [sp]
 800209a:	463b      	mov	r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff fe17 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	b968      	cbnz	r0, 80020c6 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020aa:	6822      	ldr	r2, [r4, #0]
 80020ac:	f04a 0301 	orr.w	r3, sl, #1
 80020b0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b2:	4643      	mov	r3, r8
 80020b4:	463a      	mov	r2, r7
 80020b6:	4909      	ldr	r1, [pc, #36]	@ (80020dc <I2C_RequestMemoryRead+0x150>)
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff fe61 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d099      	beq.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
 80020c4:	e797      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020ce:	d002      	beq.n	80020d6 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d4:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
 80020d8:	e78d      	b.n	8001ff6 <I2C_RequestMemoryRead+0x6a>
 80020da:	bf00      	nop
 80020dc:	00010002 	.word	0x00010002

080020e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	460d      	mov	r5, r1
 80020e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f013 0f04 	tst.w	r3, #4
 80020f0:	d121      	bne.n	8002136 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff fdd6 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 80020f8:	b9f8      	cbnz	r0, 800213a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80020fe:	d0f3      	beq.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002100:	f7ff fc56 	bl	80019b0 <HAL_GetTick>
 8002104:	1b80      	subs	r0, r0, r6
 8002106:	42a8      	cmp	r0, r5
 8002108:	d801      	bhi.n	800210e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800210a:	2d00      	cmp	r5, #0
 800210c:	d1ec      	bne.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f013 0f04 	tst.w	r3, #4
 8002116:	d1e7      	bne.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002118:	2300      	movs	r3, #0
 800211a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	2220      	movs	r2, #32
 800211e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002122:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002128:	f042 0220 	orr.w	r2, r2, #32
 800212c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800212e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
 8002134:	e000      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002136:	2000      	movs	r0, #0
}
 8002138:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800213a:	2001      	movs	r0, #1
 800213c:	e7fc      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800213e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800213e:	b570      	push	{r4, r5, r6, lr}
 8002140:	4604      	mov	r4, r0
 8002142:	460d      	mov	r5, r1
 8002144:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002146:	e014      	b.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800214e:	2300      	movs	r3, #0
 8002150:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002152:	2220      	movs	r2, #32
 8002154:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800215c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800215e:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002160:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e025      	b.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002170:	d010      	beq.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	6958      	ldr	r0, [r3, #20]
 8002176:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800217a:	d11a      	bne.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800217c:	6958      	ldr	r0, [r3, #20]
 800217e:	f010 0f10 	tst.w	r0, #16
 8002182:	d1e1      	bne.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7ff fc14 	bl	80019b0 <HAL_GetTick>
 8002188:	1b80      	subs	r0, r0, r6
 800218a:	42a8      	cmp	r0, r5
 800218c:	d8ec      	bhi.n	8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800218e:	2d00      	cmp	r5, #0
 8002190:	d1ef      	bne.n	8002172 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8002192:	e7e9      	b.n	8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002198:	2220      	movs	r2, #32
 800219a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80021aa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
 80021b0:	e000      	b.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80021b2:	2000      	movs	r0, #0
}
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080021b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80021b8:	2800      	cmp	r0, #0
 80021ba:	f000 80cc 	beq.w	8002356 <HAL_I2C_Init+0x19e>
{
 80021be:	b570      	push	{r4, r5, r6, lr}
 80021c0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d077      	beq.n	80022ba <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ca:	2324      	movs	r3, #36	@ 0x24
 80021cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	6813      	ldr	r3, [r2, #0]
 80021de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021e2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80021ec:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ee:	f000 fe0f 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f2:	6862      	ldr	r2, [r4, #4]
 80021f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002360 <HAL_I2C_Init+0x1a8>)
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d864      	bhi.n	80022c4 <HAL_I2C_Init+0x10c>
 80021fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002364 <HAL_I2C_Init+0x1ac>)
 80021fc:	4298      	cmp	r0, r3
 80021fe:	bf8c      	ite	hi
 8002200:	2300      	movhi	r3, #0
 8002202:	2301      	movls	r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 80a8 	bne.w	800235a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800220a:	4957      	ldr	r1, [pc, #348]	@ (8002368 <HAL_I2C_Init+0x1b0>)
 800220c:	fba1 3100 	umull	r3, r1, r1, r0
 8002210:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002212:	6825      	ldr	r5, [r4, #0]
 8002214:	686a      	ldr	r2, [r5, #4]
 8002216:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800221a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800221e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002220:	6821      	ldr	r1, [r4, #0]
 8002222:	6a0a      	ldr	r2, [r1, #32]
 8002224:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002228:	6866      	ldr	r6, [r4, #4]
 800222a:	4d4d      	ldr	r5, [pc, #308]	@ (8002360 <HAL_I2C_Init+0x1a8>)
 800222c:	42ae      	cmp	r6, r5
 800222e:	d84f      	bhi.n	80022d0 <HAL_I2C_Init+0x118>
 8002230:	3301      	adds	r3, #1
 8002232:	4313      	orrs	r3, r2
 8002234:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002236:	6821      	ldr	r1, [r4, #0]
 8002238:	69ca      	ldr	r2, [r1, #28]
 800223a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800223e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002242:	6865      	ldr	r5, [r4, #4]
 8002244:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <HAL_I2C_Init+0x1a8>)
 8002246:	429d      	cmp	r5, r3
 8002248:	d84c      	bhi.n	80022e4 <HAL_I2C_Init+0x12c>
 800224a:	1e43      	subs	r3, r0, #1
 800224c:	006d      	lsls	r5, r5, #1
 800224e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002252:	3301      	adds	r3, #1
 8002254:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002258:	4203      	tst	r3, r0
 800225a:	d078      	beq.n	800234e <HAL_I2C_Init+0x196>
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	431a      	orrs	r2, r3
 8002262:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002264:	6821      	ldr	r1, [r4, #0]
 8002266:	680b      	ldr	r3, [r1, #0]
 8002268:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800226c:	69e2      	ldr	r2, [r4, #28]
 800226e:	6a20      	ldr	r0, [r4, #32]
 8002270:	4302      	orrs	r2, r0
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002276:	6821      	ldr	r1, [r4, #0]
 8002278:	688b      	ldr	r3, [r1, #8]
 800227a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800227e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002282:	6922      	ldr	r2, [r4, #16]
 8002284:	68e0      	ldr	r0, [r4, #12]
 8002286:	4302      	orrs	r2, r0
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800228c:	6821      	ldr	r1, [r4, #0]
 800228e:	68cb      	ldr	r3, [r1, #12]
 8002290:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002294:	6962      	ldr	r2, [r4, #20]
 8002296:	69a0      	ldr	r0, [r4, #24]
 8002298:	4302      	orrs	r2, r0
 800229a:	4313      	orrs	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	2000      	movs	r0, #0
 80022aa:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	2320      	movs	r3, #32
 80022ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80022be:	f7fe fd1f 	bl	8000d00 <HAL_I2C_MspInit>
 80022c2:	e782      	b.n	80021ca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c4:	4b29      	ldr	r3, [pc, #164]	@ (800236c <HAL_I2C_Init+0x1b4>)
 80022c6:	4298      	cmp	r0, r3
 80022c8:	bf8c      	ite	hi
 80022ca:	2300      	movhi	r3, #0
 80022cc:	2301      	movls	r3, #1
 80022ce:	e799      	b.n	8002204 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80022d4:	fb05 f303 	mul.w	r3, r5, r3
 80022d8:	4d25      	ldr	r5, [pc, #148]	@ (8002370 <HAL_I2C_Init+0x1b8>)
 80022da:	fba5 5303 	umull	r5, r3, r5, r3
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	3301      	adds	r3, #1
 80022e2:	e7a6      	b.n	8002232 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e4:	68a6      	ldr	r6, [r4, #8]
 80022e6:	b9be      	cbnz	r6, 8002318 <HAL_I2C_Init+0x160>
 80022e8:	1e43      	subs	r3, r0, #1
 80022ea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80022ee:	fbb3 f3fc 	udiv	r3, r3, ip
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	bb43      	cbnz	r3, 8002352 <HAL_I2C_Init+0x19a>
 8002300:	b9c6      	cbnz	r6, 8002334 <HAL_I2C_Init+0x17c>
 8002302:	1e43      	subs	r3, r0, #1
 8002304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002308:	fbb3 f3f5 	udiv	r3, r3, r5
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002316:	e7a3      	b.n	8002260 <HAL_I2C_Init+0xa8>
 8002318:	1e43      	subs	r3, r0, #1
 800231a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800231e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002322:	fbb3 f3fc 	udiv	r3, r3, ip
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	e7e4      	b.n	80022fe <HAL_I2C_Init+0x146>
 8002334:	1e43      	subs	r3, r0, #1
 8002336:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800233a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800233e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234c:	e788      	b.n	8002260 <HAL_I2C_Init+0xa8>
 800234e:	2304      	movs	r3, #4
 8002350:	e786      	b.n	8002260 <HAL_I2C_Init+0xa8>
 8002352:	2301      	movs	r3, #1
 8002354:	e784      	b.n	8002260 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
}
 8002358:	4770      	bx	lr
    return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
 800235c:	e7ac      	b.n	80022b8 <HAL_I2C_Init+0x100>
 800235e:	bf00      	nop
 8002360:	000186a0 	.word	0x000186a0
 8002364:	001e847f 	.word	0x001e847f
 8002368:	431bde83 	.word	0x431bde83
 800236c:	003d08ff 	.word	0x003d08ff
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_I2C_Mem_Write>:
{
 8002374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002378:	b083      	sub	sp, #12
 800237a:	4604      	mov	r4, r0
 800237c:	460f      	mov	r7, r1
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff fb14 	bl	80019b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800238c:	2a20      	cmp	r2, #32
 800238e:	d003      	beq.n	8002398 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002390:	2002      	movs	r0, #2
}
 8002392:	b003      	add	sp, #12
 8002394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002398:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239a:	9000      	str	r0, [sp, #0]
 800239c:	2319      	movs	r3, #25
 800239e:	2201      	movs	r2, #1
 80023a0:	494a      	ldr	r1, [pc, #296]	@ (80024cc <HAL_I2C_Mem_Write+0x158>)
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff fc97 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f040 8089 	bne.w	80024c0 <HAL_I2C_Mem_Write+0x14c>
    __HAL_LOCK(hi2c);
 80023ae:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	f000 8086 	beq.w	80024c4 <HAL_I2C_Mem_Write+0x150>
 80023b8:	2301      	movs	r3, #1
 80023ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f012 0f01 	tst.w	r2, #1
 80023c6:	d103      	bne.n	80023d0 <HAL_I2C_Mem_Write+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023d8:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023da:	2321      	movs	r3, #33	@ 0x21
 80023dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	2340      	movs	r3, #64	@ 0x40
 80023e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80023ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80023ec:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ee:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80023f2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80023f6:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f8:	4b35      	ldr	r3, [pc, #212]	@ (80024d0 <HAL_I2C_Mem_Write+0x15c>)
 80023fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fc:	9501      	str	r5, [sp, #4]
 80023fe:	9600      	str	r6, [sp, #0]
 8002400:	464b      	mov	r3, r9
 8002402:	4642      	mov	r2, r8
 8002404:	4639      	mov	r1, r7
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff fd54 	bl	8001eb4 <I2C_RequestMemoryWrite>
 800240c:	2800      	cmp	r0, #0
 800240e:	d15b      	bne.n	80024c8 <HAL_I2C_Mem_Write+0x154>
    while (hi2c->XferSize > 0U)
 8002410:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	d035      	beq.n	8002482 <HAL_I2C_Mem_Write+0x10e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	462a      	mov	r2, r5
 8002418:	4631      	mov	r1, r6
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fd1b 	bl	8001e56 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	bb20      	cbnz	r0, 800246c <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002422:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800242a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800242c:	1c53      	adds	r3, r2, #1
 800242e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002430:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002432:	3901      	subs	r1, #1
 8002434:	b289      	uxth	r1, r1
 8002436:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002438:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	6958      	ldr	r0, [r3, #20]
 8002446:	f010 0f04 	tst.w	r0, #4
 800244a:	d0e1      	beq.n	8002410 <HAL_I2C_Mem_Write+0x9c>
 800244c:	2900      	cmp	r1, #0
 800244e:	d0df      	beq.n	8002410 <HAL_I2C_Mem_Write+0x9c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002450:	7852      	ldrb	r2, [r2, #1]
 8002452:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002454:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002456:	3301      	adds	r3, #1
 8002458:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800245a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002460:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800246a:	e7d1      	b.n	8002410 <HAL_I2C_Mem_Write+0x9c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800246e:	2b04      	cmp	r3, #4
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8002472:	2001      	movs	r0, #1
 8002474:	e78d      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002476:	6822      	ldr	r2, [r4, #0]
 8002478:	6813      	ldr	r3, [r2, #0]
 800247a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e7f7      	b.n	8002472 <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002482:	462a      	mov	r2, r5
 8002484:	4631      	mov	r1, r6
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff fe2a 	bl	80020e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800248c:	b150      	cbz	r0, 80024a4 <HAL_I2C_Mem_Write+0x130>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002490:	2b04      	cmp	r3, #4
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Write+0x124>
      return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
 8002496:	e77c      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e7f7      	b.n	8002494 <HAL_I2C_Mem_Write+0x120>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	6813      	ldr	r3, [r2, #0]
 80024a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	2320      	movs	r3, #32
 80024b0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80024ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80024be:	e768      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80024c0:	2002      	movs	r0, #2
 80024c2:	e766      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80024c4:	2002      	movs	r0, #2
 80024c6:	e764      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
 80024ca:	e762      	b.n	8002392 <HAL_I2C_Mem_Write+0x1e>
 80024cc:	00100002 	.word	0x00100002
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <HAL_I2C_Mem_Read>:
{
 80024d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024d8:	b087      	sub	sp, #28
 80024da:	4604      	mov	r4, r0
 80024dc:	460f      	mov	r7, r1
 80024de:	4690      	mov	r8, r2
 80024e0:	4699      	mov	r9, r3
 80024e2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff fa64 	bl	80019b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80024ec:	2a20      	cmp	r2, #32
 80024ee:	d004      	beq.n	80024fa <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 80024f0:	2702      	movs	r7, #2
}
 80024f2:	4638      	mov	r0, r7
 80024f4:	b007      	add	sp, #28
 80024f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024fa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	9000      	str	r0, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	4989      	ldr	r1, [pc, #548]	@ (8002728 <HAL_I2C_Mem_Read+0x254>)
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff fbe6 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 800250a:	2800      	cmp	r0, #0
 800250c:	f040 814e 	bne.w	80027ac <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 8002510:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	f000 814b 	beq.w	80027b0 <HAL_I2C_Mem_Read+0x2dc>
 800251a:	2301      	movs	r3, #1
 800251c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f012 0f01 	tst.w	r2, #1
 8002528:	d103      	bne.n	8002532 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800253a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800253c:	2322      	movs	r3, #34	@ 0x22
 800253e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002542:	2340      	movs	r3, #64	@ 0x40
 8002544:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800254c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800254e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002550:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8002554:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002556:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002558:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255a:	4b74      	ldr	r3, [pc, #464]	@ (800272c <HAL_I2C_Mem_Read+0x258>)
 800255c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255e:	9501      	str	r5, [sp, #4]
 8002560:	9600      	str	r6, [sp, #0]
 8002562:	464b      	mov	r3, r9
 8002564:	4642      	mov	r2, r8
 8002566:	4639      	mov	r1, r7
 8002568:	4620      	mov	r0, r4
 800256a:	f7ff fd0f 	bl	8001f8c <I2C_RequestMemoryRead>
 800256e:	4607      	mov	r7, r0
 8002570:	2800      	cmp	r0, #0
 8002572:	f040 811f 	bne.w	80027b4 <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 8002576:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002578:	b95b      	cbnz	r3, 8002592 <HAL_I2C_Mem_Read+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	9202      	str	r2, [sp, #8]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	9202      	str	r2, [sp, #8]
 8002586:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e075      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
    else if (hi2c->XferSize == 1U)
 8002592:	2b01      	cmp	r3, #1
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Mem_Read+0xd8>
    else if (hi2c->XferSize == 2U)
 8002596:	2b02      	cmp	r3, #2
 8002598:	d01a      	beq.n	80025d0 <HAL_I2C_Mem_Read+0xfc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259a:	2300      	movs	r3, #0
 800259c:	9305      	str	r3, [sp, #20]
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	9205      	str	r2, [sp, #20]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	9305      	str	r3, [sp, #20]
 80025a8:	9b05      	ldr	r3, [sp, #20]
 80025aa:	e068      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025b4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	9203      	str	r2, [sp, #12]
 80025c4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e056      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025d8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025e2:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	9304      	str	r3, [sp, #16]
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	9204      	str	r2, [sp, #16]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	9304      	str	r3, [sp, #16]
 80025f2:	9b04      	ldr	r3, [sp, #16]
 80025f4:	e043      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f6:	462a      	mov	r2, r5
 80025f8:	4631      	mov	r1, r6
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7ff fd9f 	bl	800213e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002600:	2800      	cmp	r0, #0
 8002602:	f040 80d9 	bne.w	80027b8 <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800260c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800260e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002614:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800261a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29b      	uxth	r3, r3
 8002622:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002624:	e02b      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002626:	9500      	str	r5, [sp, #0]
 8002628:	4633      	mov	r3, r6
 800262a:	2200      	movs	r2, #0
 800262c:	4940      	ldr	r1, [pc, #256]	@ (8002730 <HAL_I2C_Mem_Read+0x25c>)
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff fb51 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 8002634:	2800      	cmp	r0, #0
 8002636:	f040 80c1 	bne.w	80027bc <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002642:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800264a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800264c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800264e:	1c53      	adds	r3, r2, #1
 8002650:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002652:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002658:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002668:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800266e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002674:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29b      	uxth	r3, r3
 800267c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800267e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 808a 	beq.w	800279a <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 8002686:	2b03      	cmp	r3, #3
 8002688:	d854      	bhi.n	8002734 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 800268a:	2b01      	cmp	r3, #1
 800268c:	d0b3      	beq.n	80025f6 <HAL_I2C_Mem_Read+0x122>
        else if (hi2c->XferSize == 2U)
 800268e:	2b02      	cmp	r3, #2
 8002690:	d0c9      	beq.n	8002626 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002692:	9500      	str	r5, [sp, #0]
 8002694:	4633      	mov	r3, r6
 8002696:	2200      	movs	r2, #0
 8002698:	4925      	ldr	r1, [pc, #148]	@ (8002730 <HAL_I2C_Mem_Read+0x25c>)
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff fb1b 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	f040 808d 	bne.w	80027c0 <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a6:	6822      	ldr	r2, [r4, #0]
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026ae:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026b6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026ba:	3301      	adds	r3, #1
 80026bc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026be:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	9500      	str	r5, [sp, #0]
 80026d0:	4633      	mov	r3, r6
 80026d2:	2200      	movs	r2, #0
 80026d4:	4916      	ldr	r1, [pc, #88]	@ (8002730 <HAL_I2C_Mem_Read+0x25c>)
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff fafd 	bl	8001cd6 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d171      	bne.n	80027c4 <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026f4:	1c53      	adds	r3, r2, #1
 80026f6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026f8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29b      	uxth	r3, r3
 8002706:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800270e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002710:	3301      	adds	r3, #1
 8002712:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002714:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800271a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002724:	e7ab      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
 8002726:	bf00      	nop
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000
 8002730:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002734:	462a      	mov	r2, r5
 8002736:	4631      	mov	r1, r6
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fd00 	bl	800213e <I2C_WaitOnRXNEFlagUntilTimeout>
 800273e:	2800      	cmp	r0, #0
 8002740:	d142      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002748:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800274a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800274c:	3301      	adds	r3, #1
 800274e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002750:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002752:	3a01      	subs	r2, #1
 8002754:	b292      	uxth	r2, r2
 8002756:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002758:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29b      	uxth	r3, r3
 8002760:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	6959      	ldr	r1, [r3, #20]
 8002766:	f011 0f04 	tst.w	r1, #4
 800276a:	d088      	beq.n	800267e <HAL_I2C_Mem_Read+0x1aa>
          if (hi2c->XferSize == 3U)
 800276c:	2a03      	cmp	r2, #3
 800276e:	d00f      	beq.n	8002790 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002776:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002778:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800277a:	3301      	adds	r3, #1
 800277c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800277e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002784:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29b      	uxth	r3, r3
 800278c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800278e:	e776      	b.n	800267e <HAL_I2C_Mem_Read+0x1aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e7ea      	b.n	8002770 <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800279a:	2320      	movs	r3, #32
 800279c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80027a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80027aa:	e6a2      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80027ac:	2702      	movs	r7, #2
 80027ae:	e6a0      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80027b0:	2702      	movs	r7, #2
 80027b2:	e69e      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80027b4:	2701      	movs	r7, #1
 80027b6:	e69c      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027b8:	2701      	movs	r7, #1
 80027ba:	e69a      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027bc:	2701      	movs	r7, #1
 80027be:	e698      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027c0:	2701      	movs	r7, #1
 80027c2:	e696      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027c4:	2701      	movs	r7, #1
 80027c6:	e694      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80027c8:	2701      	movs	r7, #1
 80027ca:	e692      	b.n	80024f2 <HAL_I2C_Mem_Read+0x1e>

080027cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027cc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2100      	movs	r1, #0
 80027d0:	9100      	str	r1, [sp, #0]
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_MspInit+0x34>)
 80027d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027da:	645a      	str	r2, [r3, #68]	@ 0x44
 80027dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027de:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80027e2:	9200      	str	r2, [sp, #0]
 80027e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	9101      	str	r1, [sp, #4]
 80027e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	b002      	add	sp, #8
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800

08002804 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002804:	2800      	cmp	r0, #0
 8002806:	f000 81e0 	beq.w	8002bca <HAL_RCC_OscConfig+0x3c6>
{
 800280a:	b570      	push	{r4, r5, r6, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	f013 0f01 	tst.w	r3, #1
 8002816:	d03b      	beq.n	8002890 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002818:	4b9f      	ldr	r3, [pc, #636]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d02c      	beq.n	800287e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002824:	4b9c      	ldr	r3, [pc, #624]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282c:	2b08      	cmp	r3, #8
 800282e:	d021      	beq.n	8002874 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	6863      	ldr	r3, [r4, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002836:	d04f      	beq.n	80028d8 <HAL_RCC_OscConfig+0xd4>
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d052      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe0>
 800283e:	4b96      	ldr	r3, [pc, #600]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800284e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d050      	beq.n	80028f8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7ff f8ab 	bl	80019b0 <HAL_GetTick>
 800285a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285c:	4b8e      	ldr	r3, [pc, #568]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002864:	d114      	bne.n	8002890 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002866:	f7ff f8a3 	bl	80019b0 <HAL_GetTick>
 800286a:	1b40      	subs	r0, r0, r5
 800286c:	2864      	cmp	r0, #100	@ 0x64
 800286e:	d9f5      	bls.n	800285c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002870:	2003      	movs	r0, #3
 8002872:	e1b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002874:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800287c:	d0d8      	beq.n	8002830 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	4b86      	ldr	r3, [pc, #536]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002886:	d003      	beq.n	8002890 <HAL_RCC_OscConfig+0x8c>
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 819f 	beq.w	8002bce <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f013 0f02 	tst.w	r3, #2
 8002896:	d054      	beq.n	8002942 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002898:	4b7f      	ldr	r3, [pc, #508]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f013 0f0c 	tst.w	r3, #12
 80028a0:	d03e      	beq.n	8002920 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d033      	beq.n	8002916 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ae:	68e3      	ldr	r3, [r4, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d068      	beq.n	8002986 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b4:	4b79      	ldr	r3, [pc, #484]	@ (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7ff f879 	bl	80019b0 <HAL_GetTick>
 80028be:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b75      	ldr	r3, [pc, #468]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f013 0f02 	tst.w	r3, #2
 80028c8:	d154      	bne.n	8002974 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7ff f871 	bl	80019b0 <HAL_GetTick>
 80028ce:	1b40      	subs	r0, r0, r5
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9f5      	bls.n	80028c0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80028d4:	2003      	movs	r0, #3
 80028d6:	e17f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	4a6f      	ldr	r2, [pc, #444]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80028da:	6813      	ldr	r3, [r2, #0]
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e7b5      	b.n	8002850 <HAL_RCC_OscConfig+0x4c>
 80028e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e7ab      	b.n	8002850 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80028f8:	f7ff f85a 	bl	80019b0 <HAL_GetTick>
 80028fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b66      	ldr	r3, [pc, #408]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002906:	d0c3      	beq.n	8002890 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff f852 	bl	80019b0 <HAL_GetTick>
 800290c:	1b40      	subs	r0, r0, r5
 800290e:	2864      	cmp	r0, #100	@ 0x64
 8002910:	d9f5      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002916:	4b60      	ldr	r3, [pc, #384]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800291e:	d1c6      	bne.n	80028ae <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002920:	4b5d      	ldr	r3, [pc, #372]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f013 0f02 	tst.w	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_OscConfig+0x12e>
 800292a:	68e3      	ldr	r3, [r4, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 8150 	bne.w	8002bd2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4a59      	ldr	r2, [pc, #356]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002934:	6813      	ldr	r3, [r2, #0]
 8002936:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800293a:	6921      	ldr	r1, [r4, #16]
 800293c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002940:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	f013 0f08 	tst.w	r3, #8
 8002948:	d042      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294a:	6963      	ldr	r3, [r4, #20]
 800294c:	b36b      	cbz	r3, 80029aa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b53      	ldr	r3, [pc, #332]	@ (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002950:	2201      	movs	r2, #1
 8002952:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7ff f82b 	bl	80019b0 <HAL_GetTick>
 800295a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002960:	f013 0f02 	tst.w	r3, #2
 8002964:	d134      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002966:	f7ff f823 	bl	80019b0 <HAL_GetTick>
 800296a:	1b40      	subs	r0, r0, r5
 800296c:	2802      	cmp	r0, #2
 800296e:	d9f5      	bls.n	800295c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
 8002972:	e131      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4a48      	ldr	r2, [pc, #288]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002976:	6813      	ldr	r3, [r2, #0]
 8002978:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800297c:	6921      	ldr	r1, [r4, #16]
 800297e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e7dd      	b.n	8002942 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800298c:	f7ff f810 	bl	80019b0 <HAL_GetTick>
 8002990:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f013 0f02 	tst.w	r3, #2
 800299a:	d0d2      	beq.n	8002942 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff f808 	bl	80019b0 <HAL_GetTick>
 80029a0:	1b40      	subs	r0, r0, r5
 80029a2:	2802      	cmp	r0, #2
 80029a4:	d9f5      	bls.n	8002992 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80029a6:	2003      	movs	r0, #3
 80029a8:	e116      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029aa:	4b3c      	ldr	r3, [pc, #240]	@ (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fffd 	bl	80019b0 <HAL_GetTick>
 80029b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f013 0f02 	tst.w	r3, #2
 80029c0:	d006      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe fff5 	bl	80019b0 <HAL_GetTick>
 80029c6:	1b40      	subs	r0, r0, r5
 80029c8:	2802      	cmp	r0, #2
 80029ca:	d9f5      	bls.n	80029b8 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	f013 0f04 	tst.w	r3, #4
 80029d6:	d077      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80029e0:	d133      	bne.n	8002a4a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 80029e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029fa:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <HAL_RCC_OscConfig+0x29c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a06:	68a3      	ldr	r3, [r4, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d034      	beq.n	8002a76 <HAL_RCC_OscConfig+0x272>
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d038      	beq.n	8002a82 <HAL_RCC_OscConfig+0x27e>
 8002a10:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002a12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a1c:	f022 0204 	bic.w	r2, r2, #4
 8002a20:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d03d      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe ffc2 	bl	80019b0 <HAL_GetTick>
 8002a2c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f013 0f02 	tst.w	r3, #2
 8002a36:	d146      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe ffba 	bl	80019b0 <HAL_GetTick>
 8002a3c:	1b80      	subs	r0, r0, r6
 8002a3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a42:	4298      	cmp	r0, r3
 8002a44:	d9f3      	bls.n	8002a2e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	e0c6      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	e7d6      	b.n	80029fc <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_RCC_OscConfig+0x29c>)
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a56:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a58:	f7fe ffaa 	bl	80019b0 <HAL_GetTick>
 8002a5c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_RCC_OscConfig+0x29c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a66:	d1ce      	bne.n	8002a06 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe ffa2 	bl	80019b0 <HAL_GetTick>
 8002a6c:	1b80      	subs	r0, r0, r6
 8002a6e:	2802      	cmp	r0, #2
 8002a70:	d9f5      	bls.n	8002a5e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002a72:	2003      	movs	r0, #3
 8002a74:	e0b0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002a78:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a80:	e7cf      	b.n	8002a22 <HAL_RCC_OscConfig+0x21e>
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_OscConfig+0x294>)
 8002a84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a86:	f042 0204 	orr.w	r2, r2, #4
 8002a8a:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a94:	e7c5      	b.n	8002a22 <HAL_RCC_OscConfig+0x21e>
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	42470000 	.word	0x42470000
 8002aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe ff84 	bl	80019b0 <HAL_GetTick>
 8002aa8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b52      	ldr	r3, [pc, #328]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f013 0f02 	tst.w	r3, #2
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff7c 	bl	80019b0 <HAL_GetTick>
 8002ab8:	1b80      	subs	r0, r0, r6
 8002aba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	d9f3      	bls.n	8002aaa <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e088      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac6:	b9ed      	cbnz	r5, 8002b04 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	69a3      	ldr	r3, [r4, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8083 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad0:	4a48      	ldr	r2, [pc, #288]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	f002 020c 	and.w	r2, r2, #12
 8002ad8:	2a08      	cmp	r2, #8
 8002ada:	d051      	beq.n	8002b80 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d017      	beq.n	8002b10 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b45      	ldr	r3, [pc, #276]	@ (8002bf8 <HAL_RCC_OscConfig+0x3f4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe ff63 	bl	80019b0 <HAL_GetTick>
 8002aea:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aec:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002af4:	d042      	beq.n	8002b7c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe ff5b 	bl	80019b0 <HAL_GetTick>
 8002afa:	1b00      	subs	r0, r0, r4
 8002afc:	2802      	cmp	r0, #2
 8002afe:	d9f5      	bls.n	8002aec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e069      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002b06:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	e7db      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <HAL_RCC_OscConfig+0x3f4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b16:	f7fe ff4b 	bl	80019b0 <HAL_GetTick>
 8002b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1c:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b24:	d006      	beq.n	8002b34 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe ff43 	bl	80019b0 <HAL_GetTick>
 8002b2a:	1b40      	subs	r0, r0, r5
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	d9f5      	bls.n	8002b1c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b30:	2003      	movs	r0, #3
 8002b32:	e051      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b34:	69e3      	ldr	r3, [r4, #28]
 8002b36:	6a22      	ldr	r2, [r4, #32]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b40:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b42:	0852      	lsrs	r2, r2, #1
 8002b44:	3a01      	subs	r2, #1
 8002b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002b52:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_RCC_OscConfig+0x3f4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b5a:	f7fe ff29 	bl	80019b0 <HAL_GetTick>
 8002b5e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe ff21 	bl	80019b0 <HAL_GetTick>
 8002b6e:	1b00      	subs	r0, r0, r4
 8002b70:	2802      	cmp	r0, #2
 8002b72:	d9f5      	bls.n	8002b60 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002b74:	2003      	movs	r0, #3
 8002b76:	e02f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b78:	2000      	movs	r0, #0
 8002b7a:	e02d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e02b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d02b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x3f0>)
 8002b86:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b88:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002b8c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	4291      	cmp	r1, r2
 8002b90:	d126      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b96:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	d123      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ba8:	d11e      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002baa:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002bae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bba:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002bbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002bc4:	d114      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e006      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
}
 8002bcc:	4770      	bx	lr
        return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002bd6:	2000      	movs	r0, #0
}
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
 8002bde:	e7fb      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002be0:	2001      	movs	r0, #1
 8002be2:	e7f9      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002be4:	2001      	movs	r0, #1
 8002be6:	e7f7      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002be8:	2001      	movs	r0, #1
 8002bea:	e7f5      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002bec:	2001      	movs	r0, #1
 8002bee:	e7f3      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	e7f1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d4>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d041      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x92>
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d141      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c1c:	d012      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c26:	481d      	ldr	r0, [pc, #116]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	fba1 0100 	umull	r0, r1, r1, r0
 8002c2e:	f7fd fff3 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002c3e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c42:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c46:	6858      	ldr	r0, [r3, #4]
 8002c48:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c4c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c50:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c54:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c58:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c5c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c60:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c64:	ebb1 010c 	subs.w	r1, r1, ip
 8002c68:	eb63 030e 	sbc.w	r3, r3, lr
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c72:	00c9      	lsls	r1, r1, #3
 8002c74:	eb11 0c00 	adds.w	ip, r1, r0
 8002c78:	f143 0300 	adc.w	r3, r3, #0
 8002c7c:	0299      	lsls	r1, r3, #10
 8002c7e:	2300      	movs	r3, #0
 8002c80:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002c84:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002c88:	f7fd ffc6 	bl	8000c18 <__aeabi_uldivmod>
 8002c8c:	e7d1      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c90:	e7d7      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c92:	4803      	ldr	r0, [pc, #12]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002c94:	e7d5      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x46>
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	017d7840 	.word	0x017d7840
 8002ca0:	00f42400 	.word	0x00f42400

08002ca4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f000 809b 	beq.w	8002de0 <HAL_RCC_ClockConfig+0x13c>
{
 8002caa:	b570      	push	{r4, r5, r6, lr}
 8002cac:	460d      	mov	r5, r1
 8002cae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002df0 <HAL_RCC_ClockConfig+0x14c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d208      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbc:	b2cb      	uxtb	r3, r1
 8002cbe:	4a4c      	ldr	r2, [pc, #304]	@ (8002df0 <HAL_RCC_ClockConfig+0x14c>)
 8002cc0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	6813      	ldr	r3, [r2, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	f040 808b 	bne.w	8002de4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	f013 0f02 	tst.w	r3, #2
 8002cd4:	d017      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	f013 0f04 	tst.w	r3, #4
 8002cda:	d004      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4a45      	ldr	r2, [pc, #276]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002cde:	6893      	ldr	r3, [r2, #8]
 8002ce0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	f013 0f08 	tst.w	r3, #8
 8002cec:	d004      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cee:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002cf0:	6893      	ldr	r3, [r2, #8]
 8002cf2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cf6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002cfa:	6893      	ldr	r3, [r2, #8]
 8002cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d00:	68a1      	ldr	r1, [r4, #8]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f013 0f01 	tst.w	r3, #1
 8002d0c:	d032      	beq.n	8002d74 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	6863      	ldr	r3, [r4, #4]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d021      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d14:	1e9a      	subs	r2, r3, #2
 8002d16:	2a01      	cmp	r2, #1
 8002d18:	d925      	bls.n	8002d66 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4a36      	ldr	r2, [pc, #216]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	f012 0f02 	tst.w	r2, #2
 8002d22:	d061      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d24:	4933      	ldr	r1, [pc, #204]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d26:	688a      	ldr	r2, [r1, #8]
 8002d28:	f022 0203 	bic.w	r2, r2, #3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d30:	f7fe fe3e 	bl	80019b0 <HAL_GetTick>
 8002d34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	6862      	ldr	r2, [r4, #4]
 8002d40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d44:	d016      	beq.n	8002d74 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7fe fe33 	bl	80019b0 <HAL_GetTick>
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d50:	4298      	cmp	r0, r3
 8002d52:	d9f0      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e042      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d58:	4a26      	ldr	r2, [pc, #152]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d60:	d1e0      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d62:	2001      	movs	r0, #1
 8002d64:	e03b      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002d6e:	d1d9      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d70:	2001      	movs	r0, #1
 8002d72:	e034      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_RCC_ClockConfig+0x14c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	42ab      	cmp	r3, r5
 8002d7e:	d907      	bls.n	8002d90 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d80:	b2ea      	uxtb	r2, r5
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_ClockConfig+0x14c>)
 8002d84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	42ab      	cmp	r3, r5
 8002d8e:	d12d      	bne.n	8002dec <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f013 0f04 	tst.w	r3, #4
 8002d96:	d006      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002d9a:	6893      	ldr	r3, [r2, #8]
 8002d9c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002da0:	68e1      	ldr	r1, [r4, #12]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	f013 0f08 	tst.w	r3, #8
 8002dac:	d007      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002db6:	6921      	ldr	r1, [r4, #16]
 8002db8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dbc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbe:	f7ff ff1d 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_ClockConfig+0x150>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dca:	4a0b      	ldr	r2, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x154>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	40d8      	lsrs	r0, r3
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <HAL_RCC_ClockConfig+0x158>)
 8002dd2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <HAL_RCC_ClockConfig+0x15c>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f7fe fd9e 	bl	8001918 <HAL_InitTick>
  return HAL_OK;
 8002ddc:	2000      	movs	r0, #0
}
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
}
 8002de2:	4770      	bx	lr
      return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
 8002de6:	e7fa      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e7f8      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e7f6      	b.n	8002dde <HAL_RCC_ClockConfig+0x13a>
 8002df0:	40023c00 	.word	0x40023c00
 8002df4:	40023800 	.word	0x40023800
 8002df8:	0800704c 	.word	0x0800704c
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e04:	4b01      	ldr	r3, [pc, #4]	@ (8002e0c <HAL_RCC_GetHCLKFreq+0x8>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000008 	.word	0x20000008

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e12:	f7ff fff7 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e1e:	4a03      	ldr	r2, [pc, #12]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e22:	40d8      	lsrs	r0, r3
 8002e24:	bd08      	pop	{r3, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08007044 	.word	0x08007044

08002e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e32:	f7ff ffe7 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e36:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e3e:	4a03      	ldr	r2, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e40:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e42:	40d8      	lsrs	r0, r3
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08007044 	.word	0x08007044

08002e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e52:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e54:	6a03      	ldr	r3, [r0, #32]
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e5e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e60:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e64:	680c      	ldr	r4, [r1, #0]
 8002e66:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e68:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e6c:	688b      	ldr	r3, [r1, #8]
 8002e6e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <TIM_OC1_SetConfig+0x50>)
 8002e72:	4290      	cmp	r0, r2
 8002e74:	d006      	beq.n	8002e84 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e76:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e78:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e7a:	684a      	ldr	r2, [r1, #4]
 8002e7c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7e:	6203      	str	r3, [r0, #32]
}
 8002e80:	bc30      	pop	{r4, r5}
 8002e82:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002e88:	68ca      	ldr	r2, [r1, #12]
 8002e8a:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e8c:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e90:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002e94:	694a      	ldr	r2, [r1, #20]
 8002e96:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e98:	698d      	ldr	r5, [r1, #24]
 8002e9a:	4315      	orrs	r5, r2
 8002e9c:	e7eb      	b.n	8002e76 <TIM_OC1_SetConfig+0x26>
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000

08002ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ea8:	6a02      	ldr	r2, [r0, #32]
 8002eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb8:	680d      	ldr	r5, [r1, #0]
 8002eba:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <TIM_OC3_SetConfig+0x58>)
 8002ec8:	4290      	cmp	r0, r2
 8002eca:	d006      	beq.n	8002eda <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ecc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ece:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ed0:	684a      	ldr	r2, [r1, #4]
 8002ed2:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed4:	6203      	str	r3, [r0, #32]
}
 8002ed6:	bc30      	pop	{r4, r5}
 8002ed8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ede:	68ca      	ldr	r2, [r1, #12]
 8002ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ee4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ee8:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eec:	694a      	ldr	r2, [r1, #20]
 8002eee:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ef2:	698a      	ldr	r2, [r1, #24]
 8002ef4:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002ef8:	e7e8      	b.n	8002ecc <TIM_OC3_SetConfig+0x28>
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000

08002f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f04:	6a02      	ldr	r2, [r0, #32]
 8002f06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f0a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f10:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f14:	680d      	ldr	r5, [r1, #0]
 8002f16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f1e:	688d      	ldr	r5, [r1, #8]
 8002f20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	4d07      	ldr	r5, [pc, #28]	@ (8002f44 <TIM_OC4_SetConfig+0x44>)
 8002f26:	42a8      	cmp	r0, r5
 8002f28:	d006      	beq.n	8002f38 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f2c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2e:	684a      	ldr	r2, [r1, #4]
 8002f30:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	6203      	str	r3, [r0, #32]
}
 8002f34:	bc30      	pop	{r4, r5}
 8002f36:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f38:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f3c:	694d      	ldr	r5, [r1, #20]
 8002f3e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002f42:	e7f2      	b.n	8002f2a <TIM_OC4_SetConfig+0x2a>
 8002f44:	40010000 	.word	0x40010000

08002f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f48:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f4a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4c:	6a04      	ldr	r4, [r0, #32]
 8002f4e:	f024 0401 	bic.w	r4, r4, #1
 8002f52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f54:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f56:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002f62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f66:	6203      	str	r3, [r0, #32]
}
 8002f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f70:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f72:	6a04      	ldr	r4, [r0, #32]
 8002f74:	f024 0410 	bic.w	r4, r4, #16
 8002f78:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f7c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f80:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f88:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f8e:	6203      	str	r3, [r0, #32]
}
 8002f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f96:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa2:	6083      	str	r3, [r0, #8]
}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_PWM_MspInit>:
}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_PeriodElapsedCallback>:
}
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_IC_CaptureCallback>:
}
 8002fac:	4770      	bx	lr

08002fae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_TriggerCallback>:
}
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_IRQHandler>:
{
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002fb6:	6803      	ldr	r3, [r0, #0]
 8002fb8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fba:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fbc:	f015 0f02 	tst.w	r5, #2
 8002fc0:	d010      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fc2:	f016 0f02 	tst.w	r6, #2
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc8:	f06f 0202 	mvn.w	r2, #2
 8002fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f013 0f03 	tst.w	r3, #3
 8002fda:	d05e      	beq.n	800309a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002fdc:	f7ff ffe6 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fe4:	f015 0f04 	tst.w	r5, #4
 8002fe8:	d012      	beq.n	8003010 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fea:	f016 0f04 	tst.w	r6, #4
 8002fee:	d00f      	beq.n	8003010 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	f06f 0204 	mvn.w	r2, #4
 8002ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003004:	d04f      	beq.n	80030a6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ffd0 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300c:	2300      	movs	r3, #0
 800300e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003010:	f015 0f08 	tst.w	r5, #8
 8003014:	d012      	beq.n	800303c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003016:	f016 0f08 	tst.w	r6, #8
 800301a:	d00f      	beq.n	800303c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f06f 0208 	mvn.w	r2, #8
 8003022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003024:	2304      	movs	r3, #4
 8003026:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f013 0f03 	tst.w	r3, #3
 8003030:	d040      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff ffba 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	2300      	movs	r3, #0
 800303a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800303c:	f015 0f10 	tst.w	r5, #16
 8003040:	d012      	beq.n	8003068 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003042:	f016 0f10 	tst.w	r6, #16
 8003046:	d00f      	beq.n	8003068 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	f06f 0210 	mvn.w	r2, #16
 800304e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003050:	2308      	movs	r3, #8
 8003052:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800305c:	d031      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff ffa4 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003064:	2300      	movs	r3, #0
 8003066:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003068:	f015 0f01 	tst.w	r5, #1
 800306c:	d002      	beq.n	8003074 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800306e:	f016 0f01 	tst.w	r6, #1
 8003072:	d12d      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003074:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003078:	d002      	beq.n	8003080 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800307a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800307e:	d12f      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003080:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003084:	d002      	beq.n	800308c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003086:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800308a:	d131      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800308c:	f015 0f20 	tst.w	r5, #32
 8003090:	d002      	beq.n	8003098 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003092:	f016 0f20 	tst.w	r6, #32
 8003096:	d133      	bne.n	8003100 <HAL_TIM_IRQHandler+0x14e>
}
 8003098:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	f7ff ff86 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309e:	4620      	mov	r0, r4
 80030a0:	f7ff ff85 	bl	8002fae <HAL_TIM_PWM_PulseFinishedCallback>
 80030a4:	e79c      	b.n	8002fe0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff ff7f 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff ff7e 	bl	8002fae <HAL_TIM_PWM_PulseFinishedCallback>
 80030b2:	e7ab      	b.n	800300c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff78 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff ff77 	bl	8002fae <HAL_TIM_PWM_PulseFinishedCallback>
 80030c0:	e7ba      	b.n	8003038 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff ff71 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff ff70 	bl	8002fae <HAL_TIM_PWM_PulseFinishedCallback>
 80030ce:	e7c9      	b.n	8003064 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	f06f 0201 	mvn.w	r2, #1
 80030d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff ff65 	bl	8002fa8 <HAL_TIM_PeriodElapsedCallback>
 80030de:	e7c9      	b.n	8003074 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 fad1 	bl	8003690 <HAL_TIMEx_BreakCallback>
 80030ee:	e7c7      	b.n	8003080 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff59 	bl	8002fb0 <HAL_TIM_TriggerCallback>
 80030fe:	e7c5      	b.n	800308c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	f06f 0220 	mvn.w	r2, #32
 8003106:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003108:	4620      	mov	r0, r4
 800310a:	f000 fac0 	bl	800368e <HAL_TIMEx_CommutCallback>
}
 800310e:	e7c3      	b.n	8003098 <HAL_TIM_IRQHandler+0xe6>

08003110 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003110:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003112:	4a29      	ldr	r2, [pc, #164]	@ (80031b8 <TIM_Base_SetConfig+0xa8>)
 8003114:	4290      	cmp	r0, r2
 8003116:	d00e      	beq.n	8003136 <TIM_Base_SetConfig+0x26>
 8003118:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800311c:	d00b      	beq.n	8003136 <TIM_Base_SetConfig+0x26>
 800311e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003122:	4290      	cmp	r0, r2
 8003124:	d007      	beq.n	8003136 <TIM_Base_SetConfig+0x26>
 8003126:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800312a:	4290      	cmp	r0, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0x26>
 800312e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003132:	4290      	cmp	r0, r2
 8003134:	d103      	bne.n	800313e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800313a:	684a      	ldr	r2, [r1, #4]
 800313c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313e:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <TIM_Base_SetConfig+0xa8>)
 8003140:	4290      	cmp	r0, r2
 8003142:	d01a      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 8003144:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003148:	d017      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 800314a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800314e:	4290      	cmp	r0, r2
 8003150:	d013      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 8003152:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003156:	4290      	cmp	r0, r2
 8003158:	d00f      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 800315a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800315e:	4290      	cmp	r0, r2
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 8003162:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003166:	4290      	cmp	r0, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 800316a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800316e:	4290      	cmp	r0, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0x6a>
 8003172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003176:	4290      	cmp	r0, r2
 8003178:	d103      	bne.n	8003182 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800317a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	68ca      	ldr	r2, [r1, #12]
 8003180:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003186:	694a      	ldr	r2, [r1, #20]
 8003188:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800318a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800318c:	688b      	ldr	r3, [r1, #8]
 800318e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003190:	680b      	ldr	r3, [r1, #0]
 8003192:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <TIM_Base_SetConfig+0xa8>)
 8003196:	4298      	cmp	r0, r3
 8003198:	d00a      	beq.n	80031b0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800319a:	2301      	movs	r3, #1
 800319c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800319e:	6903      	ldr	r3, [r0, #16]
 80031a0:	f013 0f01 	tst.w	r3, #1
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031a6:	6903      	ldr	r3, [r0, #16]
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6103      	str	r3, [r0, #16]
}
 80031ae:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80031b0:	690b      	ldr	r3, [r1, #16]
 80031b2:	6303      	str	r3, [r0, #48]	@ 0x30
 80031b4:	e7f1      	b.n	800319a <TIM_Base_SetConfig+0x8a>
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000

080031bc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80031bc:	b340      	cbz	r0, 8003210 <HAL_TIM_Base_Init+0x54>
{
 80031be:	b510      	push	{r4, lr}
 80031c0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031c6:	b1f3      	cbz	r3, 8003206 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ce:	4621      	mov	r1, r4
 80031d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80031d4:	f7ff ff9c 	bl	8003110 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	2301      	movs	r3, #1
 80031da:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80031e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80031e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80031ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80031fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80031fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003202:	2000      	movs	r0, #0
}
 8003204:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003206:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800320a:	f000 fc65 	bl	8003ad8 <HAL_TIM_Base_MspInit>
 800320e:	e7db      	b.n	80031c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
}
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003214:	b340      	cbz	r0, 8003268 <HAL_TIM_PWM_Init+0x54>
{
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800321e:	b1f3      	cbz	r3, 800325e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	2302      	movs	r3, #2
 8003222:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003226:	4621      	mov	r1, r4
 8003228:	f851 0b04 	ldr.w	r0, [r1], #4
 800322c:	f7ff ff70 	bl	8003110 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	2301      	movs	r3, #1
 8003232:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800323a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800323e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003242:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800324a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800324e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003252:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003256:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800325a:	2000      	movs	r0, #0
}
 800325c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800325e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003262:	f7ff fea0 	bl	8002fa6 <HAL_TIM_PWM_MspInit>
 8003266:	e7db      	b.n	8003220 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003268:	2001      	movs	r0, #1
}
 800326a:	4770      	bx	lr

0800326c <TIM_OC2_SetConfig>:
{
 800326c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800326e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	6a02      	ldr	r2, [r0, #32]
 8003272:	f022 0210 	bic.w	r2, r2, #16
 8003276:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003278:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800327a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800327c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	680d      	ldr	r5, [r1, #0]
 8003282:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003286:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800328a:	688d      	ldr	r5, [r1, #8]
 800328c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003290:	4d0c      	ldr	r5, [pc, #48]	@ (80032c4 <TIM_OC2_SetConfig+0x58>)
 8003292:	42a8      	cmp	r0, r5
 8003294:	d006      	beq.n	80032a4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003296:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003298:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800329a:	684a      	ldr	r2, [r1, #4]
 800329c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800329e:	6203      	str	r3, [r0, #32]
}
 80032a0:	bc30      	pop	{r4, r5}
 80032a2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a8:	68cd      	ldr	r5, [r1, #12]
 80032aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032b2:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b6:	694d      	ldr	r5, [r1, #20]
 80032b8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032bc:	698d      	ldr	r5, [r1, #24]
 80032be:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80032c2:	e7e8      	b.n	8003296 <TIM_OC2_SetConfig+0x2a>
 80032c4:	40010000 	.word	0x40010000

080032c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80032c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80032ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d066      	beq.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80032d2:	4604      	mov	r4, r0
 80032d4:	460d      	mov	r5, r1
 80032d6:	2301      	movs	r3, #1
 80032d8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80032dc:	2a0c      	cmp	r2, #12
 80032de:	d85a      	bhi.n	8003396 <HAL_TIM_PWM_ConfigChannel+0xce>
 80032e0:	e8df f002 	tbb	[pc, r2]
 80032e4:	59595907 	.word	0x59595907
 80032e8:	5959591b 	.word	0x5959591b
 80032ec:	59595930 	.word	0x59595930
 80032f0:	44          	.byte	0x44
 80032f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f2:	6800      	ldr	r0, [r0, #0]
 80032f4:	f7ff fdac 	bl	8002e50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	6993      	ldr	r3, [r2, #24]
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	6993      	ldr	r3, [r2, #24]
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	6993      	ldr	r3, [r2, #24]
 8003310:	6929      	ldr	r1, [r5, #16]
 8003312:	430b      	orrs	r3, r1
 8003314:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2000      	movs	r0, #0
      break;
 8003318:	e03e      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	f7ff ffa6 	bl	800326c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	6993      	ldr	r3, [r2, #24]
 8003324:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003328:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6993      	ldr	r3, [r2, #24]
 800332e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003332:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6993      	ldr	r3, [r2, #24]
 8003338:	6929      	ldr	r1, [r5, #16]
 800333a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800333e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2000      	movs	r0, #0
      break;
 8003342:	e029      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003344:	6800      	ldr	r0, [r0, #0]
 8003346:	f7ff fdad 	bl	8002ea4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	69d3      	ldr	r3, [r2, #28]
 800334e:	f043 0308 	orr.w	r3, r3, #8
 8003352:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	69d3      	ldr	r3, [r2, #28]
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	69d3      	ldr	r3, [r2, #28]
 8003362:	6929      	ldr	r1, [r5, #16]
 8003364:	430b      	orrs	r3, r1
 8003366:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2000      	movs	r0, #0
      break;
 800336a:	e015      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336c:	6800      	ldr	r0, [r0, #0]
 800336e:	f7ff fdc7 	bl	8002f00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	69d3      	ldr	r3, [r2, #28]
 8003376:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800337a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	69d3      	ldr	r3, [r2, #28]
 8003380:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003384:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	69d3      	ldr	r3, [r2, #28]
 800338a:	6929      	ldr	r1, [r5, #16]
 800338c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003390:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2000      	movs	r0, #0
      break;
 8003394:	e000      	b.n	8003398 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003396:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003398:	2300      	movs	r3, #0
 800339a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800339e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80033a0:	2002      	movs	r0, #2
 80033a2:	e7fc      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0xd6>

080033a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80033b0:	430a      	orrs	r2, r1
 80033b2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	6082      	str	r2, [r0, #8]
}
 80033b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033be:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d078      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0xfa>
{
 80033c6:	b510      	push	{r4, lr}
 80033c8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80033ca:	2301      	movs	r3, #1
 80033cc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80033e2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80033e4:	680b      	ldr	r3, [r1, #0]
 80033e6:	2b60      	cmp	r3, #96	@ 0x60
 80033e8:	d04c      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0xc6>
 80033ea:	d823      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x76>
 80033ec:	2b40      	cmp	r3, #64	@ 0x40
 80033ee:	d054      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xdc>
 80033f0:	d811      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x58>
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x40>
 80033f6:	d80a      	bhi.n	800340e <HAL_TIM_ConfigClockSource+0x50>
 80033f8:	b10b      	cbz	r3, 80033fe <HAL_TIM_ConfigClockSource+0x40>
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d105      	bne.n	800340a <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fe:	4619      	mov	r1, r3
 8003400:	6820      	ldr	r0, [r4, #0]
 8003402:	f7ff fdc8 	bl	8002f96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2000      	movs	r0, #0
      break;
 8003408:	e028      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e026      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800340e:	2b30      	cmp	r3, #48	@ 0x30
 8003410:	d0f5      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003412:	2001      	movs	r0, #1
 8003414:	e022      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003416:	2b50      	cmp	r3, #80	@ 0x50
 8003418:	d10a      	bne.n	8003430 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	68ca      	ldr	r2, [r1, #12]
 800341c:	6849      	ldr	r1, [r1, #4]
 800341e:	6800      	ldr	r0, [r0, #0]
 8003420:	f7ff fd92 	bl	8002f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003424:	2150      	movs	r1, #80	@ 0x50
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f7ff fdb5 	bl	8002f96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2000      	movs	r0, #0
      break;
 800342e:	e015      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003430:	2001      	movs	r0, #1
 8003432:	e013      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003438:	d03a      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xf2>
 800343a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343e:	d014      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xac>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d137      	bne.n	80034b4 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	68cb      	ldr	r3, [r1, #12]
 8003446:	684a      	ldr	r2, [r1, #4]
 8003448:	6889      	ldr	r1, [r1, #8]
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	f7ff ffaa 	bl	80033a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003458:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800345c:	2301      	movs	r3, #1
 800345e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003462:	2300      	movs	r3, #0
 8003464:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003468:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	68cb      	ldr	r3, [r1, #12]
 800346c:	684a      	ldr	r2, [r1, #4]
 800346e:	6889      	ldr	r1, [r1, #8]
 8003470:	6800      	ldr	r0, [r0, #0]
 8003472:	f7ff ff97 	bl	80033a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	6893      	ldr	r3, [r2, #8]
 800347a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800347e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2000      	movs	r0, #0
      break;
 8003482:	e7eb      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003484:	68ca      	ldr	r2, [r1, #12]
 8003486:	6849      	ldr	r1, [r1, #4]
 8003488:	6800      	ldr	r0, [r0, #0]
 800348a:	f7ff fd70 	bl	8002f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800348e:	2160      	movs	r1, #96	@ 0x60
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	f7ff fd80 	bl	8002f96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2000      	movs	r0, #0
      break;
 8003498:	e7e0      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	68ca      	ldr	r2, [r1, #12]
 800349c:	6849      	ldr	r1, [r1, #4]
 800349e:	6800      	ldr	r0, [r0, #0]
 80034a0:	f7ff fd52 	bl	8002f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a4:	2140      	movs	r1, #64	@ 0x40
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f7ff fd75 	bl	8002f96 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2000      	movs	r0, #0
      break;
 80034ae:	e7d5      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80034b0:	2000      	movs	r0, #0
 80034b2:	e7d3      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7d1      	b.n	800345c <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80034b8:	2002      	movs	r0, #2
}
 80034ba:	4770      	bx	lr

080034bc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034bc:	f001 011f 	and.w	r1, r1, #31
 80034c0:	f04f 0c01 	mov.w	ip, #1
 80034c4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c8:	6a03      	ldr	r3, [r0, #32]
 80034ca:	ea23 030c 	bic.w	r3, r3, ip
 80034ce:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d0:	6a03      	ldr	r3, [r0, #32]
 80034d2:	408a      	lsls	r2, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	6203      	str	r3, [r0, #32]
}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_TIM_PWM_Start>:
{
 80034dc:	b510      	push	{r4, lr}
 80034de:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034e0:	4608      	mov	r0, r1
 80034e2:	bb89      	cbnz	r1, 8003548 <HAL_TIM_PWM_Start+0x6c>
 80034e4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80034e8:	3b01      	subs	r3, #1
 80034ea:	bf18      	it	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d160      	bne.n	80035b4 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d13e      	bne.n	8003574 <HAL_TIM_PWM_Start+0x98>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034fc:	2201      	movs	r2, #1
 80034fe:	4601      	mov	r1, r0
 8003500:	6820      	ldr	r0, [r4, #0]
 8003502:	f7ff ffdb 	bl	80034bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <HAL_TIM_PWM_Start+0xe0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d042      	beq.n	8003594 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	@ (80035bc <HAL_TIM_PWM_Start+0xe0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d043      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d040      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
 800351c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003520:	4293      	cmp	r3, r2
 8003522:	d03c      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
 8003524:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003528:	4293      	cmp	r3, r2
 800352a:	d038      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
 800352c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003530:	4293      	cmp	r3, r2
 8003532:	d034      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
 8003534:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003538:	4293      	cmp	r3, r2
 800353a:	d030      	beq.n	800359e <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003544:	2000      	movs	r0, #0
 8003546:	e034      	b.n	80035b2 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003548:	2904      	cmp	r1, #4
 800354a:	d007      	beq.n	800355c <HAL_TIM_PWM_Start+0x80>
 800354c:	2908      	cmp	r1, #8
 800354e:	d00b      	beq.n	8003568 <HAL_TIM_PWM_Start+0x8c>
 8003550:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003554:	3b01      	subs	r3, #1
 8003556:	bf18      	it	ne
 8003558:	2301      	movne	r3, #1
 800355a:	e7c8      	b.n	80034ee <HAL_TIM_PWM_Start+0x12>
 800355c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003560:	3b01      	subs	r3, #1
 8003562:	bf18      	it	ne
 8003564:	2301      	movne	r3, #1
 8003566:	e7c2      	b.n	80034ee <HAL_TIM_PWM_Start+0x12>
 8003568:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800356c:	3b01      	subs	r3, #1
 800356e:	bf18      	it	ne
 8003570:	2301      	movne	r3, #1
 8003572:	e7bc      	b.n	80034ee <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003574:	2804      	cmp	r0, #4
 8003576:	d005      	beq.n	8003584 <HAL_TIM_PWM_Start+0xa8>
 8003578:	2808      	cmp	r0, #8
 800357a:	d007      	beq.n	800358c <HAL_TIM_PWM_Start+0xb0>
 800357c:	2302      	movs	r3, #2
 800357e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003582:	e7bb      	b.n	80034fc <HAL_TIM_PWM_Start+0x20>
 8003584:	2302      	movs	r3, #2
 8003586:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800358a:	e7b7      	b.n	80034fc <HAL_TIM_PWM_Start+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003592:	e7b3      	b.n	80034fc <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8003594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359a:	645a      	str	r2, [r3, #68]	@ 0x44
 800359c:	e7b7      	b.n	800350e <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	2a06      	cmp	r2, #6
 80035a6:	d007      	beq.n	80035b8 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035b0:	2000      	movs	r0, #0
}
 80035b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035b4:	2001      	movs	r0, #1
 80035b6:	e7fc      	b.n	80035b2 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	e7fa      	b.n	80035b2 <HAL_TIM_PWM_Start+0xd6>
 80035bc:	40010000 	.word	0x40010000

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80035c4:	2a01      	cmp	r2, #1
 80035c6:	d035      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80035c8:	b410      	push	{r4}
 80035ca:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80035cc:	2201      	movs	r2, #1
 80035ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d2:	2202      	movs	r2, #2
 80035d4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d8:	6802      	ldr	r2, [r0, #0]
 80035da:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035dc:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035de:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e2:	6808      	ldr	r0, [r1, #0]
 80035e4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4812      	ldr	r0, [pc, #72]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80035ee:	4282      	cmp	r2, r0
 80035f0:	d012      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035f2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80035f6:	d00f      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80035f8:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80035fc:	4282      	cmp	r2, r0
 80035fe:	d00b      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003600:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003604:	4282      	cmp	r2, r0
 8003606:	d007      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003608:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800360c:	4282      	cmp	r2, r0
 800360e:	d003      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003610:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003614:	4282      	cmp	r2, r0
 8003616:	d104      	bne.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003618:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361c:	6849      	ldr	r1, [r1, #4]
 800361e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003620:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003628:	2000      	movs	r0, #0
 800362a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800362e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003632:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003634:	2002      	movs	r0, #2
}
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000

0800363c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800363c:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d021      	beq.n	800368a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8003646:	2301      	movs	r3, #1
 8003648:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800364c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800364e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003652:	6888      	ldr	r0, [r1, #8]
 8003654:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800365a:	6848      	ldr	r0, [r1, #4]
 800365c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800365e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003662:	6808      	ldr	r0, [r1, #0]
 8003664:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800366a:	6908      	ldr	r0, [r1, #16]
 800366c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800366e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003672:	6948      	ldr	r0, [r1, #20]
 8003674:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800367a:	69c9      	ldr	r1, [r1, #28]
 800367c:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800367e:	6811      	ldr	r1, [r2, #0]
 8003680:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003682:	2000      	movs	r0, #0
 8003684:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003688:	4770      	bx	lr
  __HAL_LOCK(htim);
 800368a:	2002      	movs	r0, #2
}
 800368c:	4770      	bx	lr

0800368e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800368e:	4770      	bx	lr

08003690 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003690:	4770      	bx	lr

08003692 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003692:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	f102 030c 	add.w	r3, r2, #12
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	320c      	adds	r2, #12
 80036a2:	e842 3100 	strex	r1, r3, [r2]
 80036a6:	2900      	cmp	r1, #0
 80036a8:	d1f3      	bne.n	8003692 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	f102 0314 	add.w	r3, r2, #20
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	3214      	adds	r2, #20
 80036ba:	e842 3100 	strex	r1, r3, [r2]
 80036be:	2900      	cmp	r1, #0
 80036c0:	d1f3      	bne.n	80036aa <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d005      	beq.n	80036d4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	2320      	movs	r3, #32
 80036ca:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	2300      	movs	r3, #0
 80036d0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80036d2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	f102 030c 	add.w	r3, r2, #12
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	320c      	adds	r2, #12
 80036e4:	e842 3100 	strex	r1, r3, [r2]
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d1f3      	bne.n	80036d4 <UART_EndRxTransfer+0x42>
 80036ec:	e7ec      	b.n	80036c8 <UART_EndRxTransfer+0x36>
	...

080036f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	6802      	ldr	r2, [r0, #0]
 80036f6:	6913      	ldr	r3, [r2, #16]
 80036f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036fc:	68c1      	ldr	r1, [r0, #12]
 80036fe:	430b      	orrs	r3, r1
 8003700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003702:	6883      	ldr	r3, [r0, #8]
 8003704:	6902      	ldr	r2, [r0, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	6943      	ldr	r3, [r0, #20]
 800370a:	431a      	orrs	r2, r3
 800370c:	69c3      	ldr	r3, [r0, #28]
 800370e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003710:	6801      	ldr	r1, [r0, #0]
 8003712:	68cb      	ldr	r3, [r1, #12]
 8003714:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003718:	f023 030c 	bic.w	r3, r3, #12
 800371c:	4313      	orrs	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003720:	6802      	ldr	r2, [r0, #0]
 8003722:	6953      	ldr	r3, [r2, #20]
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	6981      	ldr	r1, [r0, #24]
 800372a:	430b      	orrs	r3, r1
 800372c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800372e:	6803      	ldr	r3, [r0, #0]
 8003730:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <UART_SetConfig+0x108>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x54>
 8003736:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800373a:	4293      	cmp	r3, r2
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800373e:	f7ff fb67 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003742:	e001      	b.n	8003748 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7ff fb74 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003748:	69e3      	ldr	r3, [r4, #28]
 800374a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800374e:	d029      	beq.n	80037a4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003750:	2100      	movs	r1, #0
 8003752:	1803      	adds	r3, r0, r0
 8003754:	4149      	adcs	r1, r1
 8003756:	181b      	adds	r3, r3, r0
 8003758:	f141 0100 	adc.w	r1, r1, #0
 800375c:	00c9      	lsls	r1, r1, #3
 800375e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1818      	adds	r0, r3, r0
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800376c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003770:	f141 0100 	adc.w	r1, r1, #0
 8003774:	f7fd fa50 	bl	8000c18 <__aeabi_uldivmod>
 8003778:	4a20      	ldr	r2, [pc, #128]	@ (80037fc <UART_SetConfig+0x10c>)
 800377a:	fba2 3100 	umull	r3, r1, r2, r0
 800377e:	0949      	lsrs	r1, r1, #5
 8003780:	2364      	movs	r3, #100	@ 0x64
 8003782:	fb03 0311 	mls	r3, r3, r1, r0
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	3332      	adds	r3, #50	@ 0x32
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003794:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	6821      	ldr	r1, [r4, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }
}
 80037a2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a4:	2300      	movs	r3, #0
 80037a6:	1802      	adds	r2, r0, r0
 80037a8:	eb43 0103 	adc.w	r1, r3, r3
 80037ac:	1812      	adds	r2, r2, r0
 80037ae:	f141 0100 	adc.w	r1, r1, #0
 80037b2:	00c9      	lsls	r1, r1, #3
 80037b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b8:	00d2      	lsls	r2, r2, #3
 80037ba:	1810      	adds	r0, r2, r0
 80037bc:	f141 0100 	adc.w	r1, r1, #0
 80037c0:	6862      	ldr	r2, [r4, #4]
 80037c2:	1892      	adds	r2, r2, r2
 80037c4:	415b      	adcs	r3, r3
 80037c6:	f7fd fa27 	bl	8000c18 <__aeabi_uldivmod>
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <UART_SetConfig+0x10c>)
 80037cc:	fba2 3100 	umull	r3, r1, r2, r0
 80037d0:	0949      	lsrs	r1, r1, #5
 80037d2:	2364      	movs	r3, #100	@ 0x64
 80037d4:	fb03 0311 	mls	r3, r3, r1, r0
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	3332      	adds	r3, #50	@ 0x32
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005a      	lsls	r2, r3, #1
 80037e4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80037e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
 80037f6:	e7d4      	b.n	80037a2 <UART_SetConfig+0xb2>
 80037f8:	40011000 	.word	0x40011000
 80037fc:	51eb851f 	.word	0x51eb851f

08003800 <UART_WaitOnFlagUntilTimeout>:
{
 8003800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003804:	b083      	sub	sp, #12
 8003806:	4605      	mov	r5, r0
 8003808:	460e      	mov	r6, r1
 800380a:	4617      	mov	r7, r2
 800380c:	4699      	mov	r9, r3
 800380e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	682b      	ldr	r3, [r5, #0]
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	ea36 0404 	bics.w	r4, r6, r4
 800381a:	bf0c      	ite	eq
 800381c:	2401      	moveq	r4, #1
 800381e:	2400      	movne	r4, #0
 8003820:	42bc      	cmp	r4, r7
 8003822:	d128      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003824:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003828:	d0f3      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe f8c1 	bl	80019b0 <HAL_GetTick>
 800382e:	eba0 0009 	sub.w	r0, r0, r9
 8003832:	4540      	cmp	r0, r8
 8003834:	d823      	bhi.n	800387e <UART_WaitOnFlagUntilTimeout+0x7e>
 8003836:	f1b8 0f00 	cmp.w	r8, #0
 800383a:	d022      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	f012 0f04 	tst.w	r2, #4
 8003844:	d0e5      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
 8003846:	2e80      	cmp	r6, #128	@ 0x80
 8003848:	d0e3      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
 800384a:	2e40      	cmp	r6, #64	@ 0x40
 800384c:	d0e1      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	f012 0f08 	tst.w	r2, #8
 8003854:	d0dd      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003856:	2400      	movs	r4, #0
 8003858:	9401      	str	r4, [sp, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	9201      	str	r2, [sp, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff ff14 	bl	8003692 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	2308      	movs	r3, #8
 800386c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800386e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
 8003874:	e000      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8003876:	2000      	movs	r0, #0
}
 8003878:	b003      	add	sp, #12
 800387a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800387e:	2003      	movs	r0, #3
 8003880:	e7fa      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0x78>
 8003882:	2003      	movs	r0, #3
 8003884:	e7f8      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0x78>

08003886 <HAL_UART_Init>:
  if (huart == NULL)
 8003886:	b360      	cbz	r0, 80038e2 <HAL_UART_Init+0x5c>
{
 8003888:	b510      	push	{r4, lr}
 800388a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800388c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003890:	b313      	cbz	r3, 80038d8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	2324      	movs	r3, #36	@ 0x24
 8003894:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003898:	6822      	ldr	r2, [r4, #0]
 800389a:	68d3      	ldr	r3, [r2, #12]
 800389c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff24 	bl	80036f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6913      	ldr	r3, [r2, #16]
 80038ac:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80038b0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	6953      	ldr	r3, [r2, #20]
 80038b6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80038ba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	68d3      	ldr	r3, [r2, #12]
 80038c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038c4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	2000      	movs	r0, #0
 80038c8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038ca:	2320      	movs	r3, #32
 80038cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80038d6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80038d8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80038dc:	f000 f9f2 	bl	8003cc4 <HAL_UART_MspInit>
 80038e0:	e7d7      	b.n	8003892 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80038e2:	2001      	movs	r0, #1
}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_Transmit>:
{
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80038ee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d156      	bne.n	80039a4 <HAL_UART_Transmit+0xbe>
 80038f6:	4604      	mov	r4, r0
 80038f8:	460d      	mov	r5, r1
 80038fa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80038fc:	2900      	cmp	r1, #0
 80038fe:	d055      	beq.n	80039ac <HAL_UART_Transmit+0xc6>
 8003900:	b90a      	cbnz	r2, 8003906 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8003902:	2001      	movs	r0, #1
 8003904:	e04f      	b.n	80039a6 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390a:	2321      	movs	r3, #33	@ 0x21
 800390c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003910:	f7fe f84e 	bl	80019b0 <HAL_GetTick>
 8003914:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003916:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800391a:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	68a3      	ldr	r3, [r4, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8003926:	f04f 0800 	mov.w	r8, #0
 800392a:	e014      	b.n	8003956 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	b32b      	cbz	r3, 800397c <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8003930:	f04f 0800 	mov.w	r8, #0
 8003934:	e00f      	b.n	8003956 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8003936:	2320      	movs	r3, #32
 8003938:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800393c:	2003      	movs	r0, #3
 800393e:	e032      	b.n	80039a6 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003940:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800394c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800394e:	b292      	uxth	r2, r2
 8003950:	3a01      	subs	r2, #1
 8003952:	b292      	uxth	r2, r2
 8003954:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003956:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003958:	b29b      	uxth	r3, r3
 800395a:	b193      	cbz	r3, 8003982 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395c:	9600      	str	r6, [sp, #0]
 800395e:	463b      	mov	r3, r7
 8003960:	2200      	movs	r2, #0
 8003962:	2180      	movs	r1, #128	@ 0x80
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff ff4b 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 800396a:	2800      	cmp	r0, #0
 800396c:	d1e3      	bne.n	8003936 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 800396e:	2d00      	cmp	r5, #0
 8003970:	d0e6      	beq.n	8003940 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003972:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800397a:	e7e7      	b.n	800394c <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 800397c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800397e:	2500      	movs	r5, #0
 8003980:	e7e9      	b.n	8003956 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	9600      	str	r6, [sp, #0]
 8003984:	463b      	mov	r3, r7
 8003986:	2200      	movs	r2, #0
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	4620      	mov	r0, r4
 800398c:	f7ff ff38 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8003990:	b918      	cbnz	r0, 800399a <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8003992:	2320      	movs	r3, #32
 8003994:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003998:	e005      	b.n	80039a6 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 800399a:	2320      	movs	r3, #32
 800399c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80039a0:	2003      	movs	r0, #3
 80039a2:	e000      	b.n	80039a6 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80039a4:	2002      	movs	r0, #2
}
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80039ac:	2001      	movs	r0, #1
 80039ae:	e7fa      	b.n	80039a6 <HAL_UART_Transmit+0xc0>

080039b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039b0:	e7fe      	b.n	80039b0 <NMI_Handler>

080039b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b2:	e7fe      	b.n	80039b2 <HardFault_Handler>

080039b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <MemManage_Handler>

080039b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <BusFault_Handler>

080039b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <UsageFault_Handler>

080039ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ba:	4770      	bx	lr

080039bc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039bc:	4770      	bx	lr

080039be <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039be:	4770      	bx	lr

080039c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c2:	f7fd ffe9 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c6:	bd08      	pop	{r3, pc}

080039c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80039c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039ca:	4802      	ldr	r0, [pc, #8]	@ (80039d4 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80039cc:	f7ff faf1 	bl	8002fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80039d0:	bd08      	pop	{r3, pc}
 80039d2:	bf00      	nop
 80039d4:	20000270 	.word	0x20000270

080039d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039da:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80039dc:	f7ff fae9 	bl	8002fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	20000270 	.word	0x20000270

080039e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80039e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039ea:	4802      	ldr	r0, [pc, #8]	@ (80039f4 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 80039ec:	f7ff fae1 	bl	8002fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80039f0:	bd08      	pop	{r3, pc}
 80039f2:	bf00      	nop
 80039f4:	20000270 	.word	0x20000270

080039f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80039f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039fa:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <TIM1_CC_IRQHandler+0xc>)
 80039fc:	f7ff fad9 	bl	8002fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a00:	bd08      	pop	{r3, pc}
 8003a02:	bf00      	nop
 8003a04:	20000270 	.word	0x20000270

08003a08 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003a08:	2001      	movs	r0, #1
 8003a0a:	4770      	bx	lr

08003a0c <_kill>:

int _kill(int pid, int sig)
{
 8003a0c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a0e:	f000 ff9d 	bl	800494c <__errno>
 8003a12:	2316      	movs	r3, #22
 8003a14:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a1a:	bd08      	pop	{r3, pc}

08003a1c <_exit>:

void _exit (int status)
{
 8003a1c:	b508      	push	{r3, lr}
  _kill(status, -1);
 8003a1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a22:	f7ff fff3 	bl	8003a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a26:	e7fe      	b.n	8003a26 <_exit+0xa>

08003a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2e:	2500      	movs	r5, #0
 8003a30:	e006      	b.n	8003a40 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8003a32:	f3af 8000 	nop.w
 8003a36:	4621      	mov	r1, r4
 8003a38:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003a3e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a40:	42b5      	cmp	r5, r6
 8003a42:	dbf6      	blt.n	8003a32 <_read+0xa>
  }

  return len;
}
 8003a44:	4630      	mov	r0, r6
 8003a46:	bd70      	pop	{r4, r5, r6, pc}

08003a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4e:	2500      	movs	r5, #0
 8003a50:	e004      	b.n	8003a5c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003a52:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	42b5      	cmp	r5, r6
 8003a5e:	dbf8      	blt.n	8003a52 <_write+0xa>
  }
  return len;
}
 8003a60:	4630      	mov	r0, r6
 8003a62:	bd70      	pop	{r4, r5, r6, pc}

08003a64 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a68:	4770      	bx	lr

08003a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a6e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003a70:	2000      	movs	r0, #0
 8003a72:	4770      	bx	lr

08003a74 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003a74:	2001      	movs	r0, #1
 8003a76:	4770      	bx	lr

08003a78 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003a78:	2000      	movs	r0, #0
 8003a7a:	4770      	bx	lr

08003a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a80:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab4 <_sbrk+0x38>)
 8003a82:	490d      	ldr	r1, [pc, #52]	@ (8003ab8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a84:	480d      	ldr	r0, [pc, #52]	@ (8003abc <_sbrk+0x40>)
 8003a86:	6800      	ldr	r0, [r0, #0]
 8003a88:	b140      	cbz	r0, 8003a9c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a8a:	480c      	ldr	r0, [pc, #48]	@ (8003abc <_sbrk+0x40>)
 8003a8c:	6800      	ldr	r0, [r0, #0]
 8003a8e:	4403      	add	r3, r0
 8003a90:	1a52      	subs	r2, r2, r1
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d806      	bhi.n	8003aa4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a96:	4a09      	ldr	r2, [pc, #36]	@ (8003abc <_sbrk+0x40>)
 8003a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003a9a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a9c:	4807      	ldr	r0, [pc, #28]	@ (8003abc <_sbrk+0x40>)
 8003a9e:	4c08      	ldr	r4, [pc, #32]	@ (8003ac0 <_sbrk+0x44>)
 8003aa0:	6004      	str	r4, [r0, #0]
 8003aa2:	e7f2      	b.n	8003a8a <_sbrk+0xe>
    errno = ENOMEM;
 8003aa4:	f000 ff52 	bl	800494c <__errno>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab0:	e7f3      	b.n	8003a9a <_sbrk+0x1e>
 8003ab2:	bf00      	nop
 8003ab4:	20020000 	.word	0x20020000
 8003ab8:	00000400 	.word	0x00000400
 8003abc:	2000026c 	.word	0x2000026c
 8003ac0:	20000450 	.word	0x20000450

08003ac4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac4:	4a03      	ldr	r2, [pc, #12]	@ (8003ad4 <SystemInit+0x10>)
 8003ac6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003aca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ace:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003ad8:	6802      	ldr	r2, [r0, #0]
 8003ada:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d000      	beq.n	8003ae2 <HAL_TIM_Base_MspInit+0xa>
 8003ae0:	4770      	bx	lr
{
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ae6:	2400      	movs	r4, #0
 8003ae8:	9401      	str	r4, [sp, #4]
 8003aea:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003aee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003b00:	4622      	mov	r2, r4
 8003b02:	4621      	mov	r1, r4
 8003b04:	2018      	movs	r0, #24
 8003b06:	f7fd ffc1 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b0a:	2018      	movs	r0, #24
 8003b0c:	f7fd ffce 	bl	8001aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b10:	4622      	mov	r2, r4
 8003b12:	4621      	mov	r1, r4
 8003b14:	2019      	movs	r0, #25
 8003b16:	f7fd ffb9 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b1a:	2019      	movs	r0, #25
 8003b1c:	f7fd ffc6 	bl	8001aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003b20:	4622      	mov	r2, r4
 8003b22:	4621      	mov	r1, r4
 8003b24:	201a      	movs	r0, #26
 8003b26:	f7fd ffb1 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b2a:	201a      	movs	r0, #26
 8003b2c:	f7fd ffbe 	bl	8001aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003b30:	4622      	mov	r2, r4
 8003b32:	4621      	mov	r1, r4
 8003b34:	201b      	movs	r0, #27
 8003b36:	f7fd ffa9 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003b3a:	201b      	movs	r0, #27
 8003b3c:	f7fd ffb6 	bl	8001aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b40:	b002      	add	sp, #8
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	40010000 	.word	0x40010000

08003b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b48:	b500      	push	{lr}
 8003b4a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	9303      	str	r3, [sp, #12]
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003b58:	6802      	ldr	r2, [r0, #0]
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <HAL_TIM_MspPostInit+0x50>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d002      	beq.n	8003b66 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b60:	b007      	add	sp, #28
 8003b62:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_TIM_MspPostInit+0x54>)
 8003b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	a901      	add	r1, sp, #4
 8003b8e:	4804      	ldr	r0, [pc, #16]	@ (8003ba0 <HAL_TIM_MspPostInit+0x58>)
 8003b90:	f7fd ffa4 	bl	8001adc <HAL_GPIO_Init>
}
 8003b94:	e7e4      	b.n	8003b60 <HAL_TIM_MspPostInit+0x18>
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40020000 	.word	0x40020000

08003ba4 <MX_TIM1_Init>:
{
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ba8:	2400      	movs	r4, #0
 8003baa:	9412      	str	r4, [sp, #72]	@ 0x48
 8003bac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003bae:	9414      	str	r4, [sp, #80]	@ 0x50
 8003bb0:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb2:	9410      	str	r4, [sp, #64]	@ 0x40
 8003bb4:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8003bb8:	940a      	str	r4, [sp, #40]	@ 0x28
 8003bba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003bbc:	940c      	str	r4, [sp, #48]	@ 0x30
 8003bbe:	940d      	str	r4, [sp, #52]	@ 0x34
 8003bc0:	940e      	str	r4, [sp, #56]	@ 0x38
 8003bc2:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	a801      	add	r0, sp, #4
 8003bca:	f000 fe5d 	bl	8004888 <memset>
  htim1.Instance = TIM1;
 8003bce:	482e      	ldr	r0, [pc, #184]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <MX_TIM1_Init+0xe8>)
 8003bd2:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 999;
 8003bd4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003bd8:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bda:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1999;
 8003bdc:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8003be0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003be4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003be8:	f7ff fae8 	bl	80031bc <HAL_TIM_Base_Init>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d138      	bne.n	8003c62 <MX_TIM1_Init+0xbe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bf4:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bf6:	a912      	add	r1, sp, #72	@ 0x48
 8003bf8:	4823      	ldr	r0, [pc, #140]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003bfa:	f7ff fbe0 	bl	80033be <HAL_TIM_ConfigClockSource>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d132      	bne.n	8003c68 <MX_TIM1_Init+0xc4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c02:	4821      	ldr	r0, [pc, #132]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003c04:	f7ff fb06 	bl	8003214 <HAL_TIM_PWM_Init>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d130      	bne.n	8003c6e <MX_TIM1_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c10:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c12:	a910      	add	r1, sp, #64	@ 0x40
 8003c14:	481c      	ldr	r0, [pc, #112]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003c16:	f7ff fcd3 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1a:	bb58      	cbnz	r0, 8003c74 <MX_TIM1_Init+0xd0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c1c:	2360      	movs	r3, #96	@ 0x60
 8003c1e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 225;
 8003c20:	23e1      	movs	r3, #225	@ 0xe1
 8003c22:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c24:	2200      	movs	r2, #0
 8003c26:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c28:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c2a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c2c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c2e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c30:	a909      	add	r1, sp, #36	@ 0x24
 8003c32:	4815      	ldr	r0, [pc, #84]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003c34:	f7ff fb48 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
 8003c38:	b9f8      	cbnz	r0, 8003c7a <MX_TIM1_Init+0xd6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c3e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c40:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c42:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c44:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c4a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c4c:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c4e:	a901      	add	r1, sp, #4
 8003c50:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003c52:	f7ff fcf3 	bl	800363c <HAL_TIMEx_ConfigBreakDeadTime>
 8003c56:	b998      	cbnz	r0, 8003c80 <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 8003c58:	480b      	ldr	r0, [pc, #44]	@ (8003c88 <MX_TIM1_Init+0xe4>)
 8003c5a:	f7ff ff75 	bl	8003b48 <HAL_TIM_MspPostInit>
}
 8003c5e:	b016      	add	sp, #88	@ 0x58
 8003c60:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003c62:	f7fd fc6d 	bl	8001540 <Error_Handler>
 8003c66:	e7c3      	b.n	8003bf0 <MX_TIM1_Init+0x4c>
    Error_Handler();
 8003c68:	f7fd fc6a 	bl	8001540 <Error_Handler>
 8003c6c:	e7c9      	b.n	8003c02 <MX_TIM1_Init+0x5e>
    Error_Handler();
 8003c6e:	f7fd fc67 	bl	8001540 <Error_Handler>
 8003c72:	e7cb      	b.n	8003c0c <MX_TIM1_Init+0x68>
    Error_Handler();
 8003c74:	f7fd fc64 	bl	8001540 <Error_Handler>
 8003c78:	e7d0      	b.n	8003c1c <MX_TIM1_Init+0x78>
    Error_Handler();
 8003c7a:	f7fd fc61 	bl	8001540 <Error_Handler>
 8003c7e:	e7dc      	b.n	8003c3a <MX_TIM1_Init+0x96>
    Error_Handler();
 8003c80:	f7fd fc5e 	bl	8001540 <Error_Handler>
 8003c84:	e7e8      	b.n	8003c58 <MX_TIM1_Init+0xb4>
 8003c86:	bf00      	nop
 8003c88:	20000270 	.word	0x20000270
 8003c8c:	40010000 	.word	0x40010000

08003c90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c90:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c92:	480a      	ldr	r0, [pc, #40]	@ (8003cbc <MX_USART1_UART_Init+0x2c>)
 8003c94:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <MX_USART1_UART_Init+0x30>)
 8003c96:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003c98:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003c9c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ca2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ca4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003caa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cae:	f7ff fdea 	bl	8003886 <HAL_UART_Init>
 8003cb2:	b900      	cbnz	r0, 8003cb6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cb4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cb6:	f7fd fc43 	bl	8001540 <Error_Handler>
}
 8003cba:	e7fb      	b.n	8003cb4 <MX_USART1_UART_Init+0x24>
 8003cbc:	200002b8 	.word	0x200002b8
 8003cc0:	40011000 	.word	0x40011000

08003cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cc4:	b500      	push	{lr}
 8003cc6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9303      	str	r3, [sp, #12]
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	9305      	str	r3, [sp, #20]
 8003cd0:	9306      	str	r3, [sp, #24]
 8003cd2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003cd4:	6802      	ldr	r2, [r0, #0]
 8003cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cda:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d002      	beq.n	8003ce8 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ce2:	b009      	add	sp, #36	@ 0x24
 8003ce4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ce8:	2100      	movs	r1, #0
 8003cea:	9101      	str	r1, [sp, #4]
 8003cec:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf2:	f042 0210 	orr.w	r2, r2, #16
 8003cf6:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cfa:	f002 0210 	and.w	r2, r2, #16
 8003cfe:	9201      	str	r2, [sp, #4]
 8003d00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	9102      	str	r1, [sp, #8]
 8003d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d24:	2307      	movs	r3, #7
 8003d26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	a903      	add	r1, sp, #12
 8003d2a:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <HAL_UART_MspInit+0x70>)
 8003d2c:	f7fd fed6 	bl	8001adc <HAL_GPIO_Init>
}
 8003d30:	e7d7      	b.n	8003ce2 <HAL_UART_MspInit+0x1e>
 8003d32:	bf00      	nop
 8003d34:	40020000 	.word	0x40020000

08003d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d3c:	f7ff fec2 	bl	8003ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d40:	480c      	ldr	r0, [pc, #48]	@ (8003d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d42:	490d      	ldr	r1, [pc, #52]	@ (8003d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d44:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d48:	e002      	b.n	8003d50 <LoopCopyDataInit>

08003d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d4e:	3304      	adds	r3, #4

08003d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d54:	d3f9      	bcc.n	8003d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d56:	4a0a      	ldr	r2, [pc, #40]	@ (8003d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d58:	4c0a      	ldr	r4, [pc, #40]	@ (8003d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d5c:	e001      	b.n	8003d62 <LoopFillZerobss>

08003d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d60:	3204      	adds	r2, #4

08003d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d64:	d3fb      	bcc.n	8003d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d66:	f000 fdf7 	bl	8004958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6a:	f7fd fc3b 	bl	80015e4 <main>
  bx  lr    
 8003d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003d7c:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8003d80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003d84:	2000044c 	.word	0x2000044c

08003d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d88:	e7fe      	b.n	8003d88 <ADC_IRQHandler>

08003d8a <__cvt>:
 8003d8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8e:	ec57 6b10 	vmov	r6, r7, d0
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	460c      	mov	r4, r1
 8003d96:	4619      	mov	r1, r3
 8003d98:	463b      	mov	r3, r7
 8003d9a:	bfbb      	ittet	lt
 8003d9c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003da0:	461f      	movlt	r7, r3
 8003da2:	2300      	movge	r3, #0
 8003da4:	232d      	movlt	r3, #45	@ 0x2d
 8003da6:	700b      	strb	r3, [r1, #0]
 8003da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003daa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dae:	4691      	mov	r9, r2
 8003db0:	f023 0820 	bic.w	r8, r3, #32
 8003db4:	bfbc      	itt	lt
 8003db6:	4632      	movlt	r2, r6
 8003db8:	4616      	movlt	r6, r2
 8003dba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dbe:	d005      	beq.n	8003dcc <__cvt+0x42>
 8003dc0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dc4:	d100      	bne.n	8003dc8 <__cvt+0x3e>
 8003dc6:	3401      	adds	r4, #1
 8003dc8:	2102      	movs	r1, #2
 8003dca:	e000      	b.n	8003dce <__cvt+0x44>
 8003dcc:	2103      	movs	r1, #3
 8003dce:	ab03      	add	r3, sp, #12
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	ab02      	add	r3, sp, #8
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	ec47 6b10 	vmov	d0, r6, r7
 8003dda:	4653      	mov	r3, sl
 8003ddc:	4622      	mov	r2, r4
 8003dde:	f000 fe6b 	bl	8004ab8 <_dtoa_r>
 8003de2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003de6:	4605      	mov	r5, r0
 8003de8:	d119      	bne.n	8003e1e <__cvt+0x94>
 8003dea:	f019 0f01 	tst.w	r9, #1
 8003dee:	d00e      	beq.n	8003e0e <__cvt+0x84>
 8003df0:	eb00 0904 	add.w	r9, r0, r4
 8003df4:	2200      	movs	r2, #0
 8003df6:	2300      	movs	r3, #0
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	f7fc fe4c 	bl	8000a98 <__aeabi_dcmpeq>
 8003e00:	b108      	cbz	r0, 8003e06 <__cvt+0x7c>
 8003e02:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e06:	2230      	movs	r2, #48	@ 0x30
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	454b      	cmp	r3, r9
 8003e0c:	d31e      	bcc.n	8003e4c <__cvt+0xc2>
 8003e0e:	9b03      	ldr	r3, [sp, #12]
 8003e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e12:	1b5b      	subs	r3, r3, r5
 8003e14:	4628      	mov	r0, r5
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	b004      	add	sp, #16
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e22:	eb00 0904 	add.w	r9, r0, r4
 8003e26:	d1e5      	bne.n	8003df4 <__cvt+0x6a>
 8003e28:	7803      	ldrb	r3, [r0, #0]
 8003e2a:	2b30      	cmp	r3, #48	@ 0x30
 8003e2c:	d10a      	bne.n	8003e44 <__cvt+0xba>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2300      	movs	r3, #0
 8003e32:	4630      	mov	r0, r6
 8003e34:	4639      	mov	r1, r7
 8003e36:	f7fc fe2f 	bl	8000a98 <__aeabi_dcmpeq>
 8003e3a:	b918      	cbnz	r0, 8003e44 <__cvt+0xba>
 8003e3c:	f1c4 0401 	rsb	r4, r4, #1
 8003e40:	f8ca 4000 	str.w	r4, [sl]
 8003e44:	f8da 3000 	ldr.w	r3, [sl]
 8003e48:	4499      	add	r9, r3
 8003e4a:	e7d3      	b.n	8003df4 <__cvt+0x6a>
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	9103      	str	r1, [sp, #12]
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e7d9      	b.n	8003e08 <__cvt+0x7e>

08003e54 <__exponent>:
 8003e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e56:	2900      	cmp	r1, #0
 8003e58:	bfba      	itte	lt
 8003e5a:	4249      	neglt	r1, r1
 8003e5c:	232d      	movlt	r3, #45	@ 0x2d
 8003e5e:	232b      	movge	r3, #43	@ 0x2b
 8003e60:	2909      	cmp	r1, #9
 8003e62:	7002      	strb	r2, [r0, #0]
 8003e64:	7043      	strb	r3, [r0, #1]
 8003e66:	dd29      	ble.n	8003ebc <__exponent+0x68>
 8003e68:	f10d 0407 	add.w	r4, sp, #7
 8003e6c:	4625      	mov	r5, r4
 8003e6e:	270a      	movs	r7, #10
 8003e70:	4622      	mov	r2, r4
 8003e72:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e76:	fb07 1316 	mls	r3, r7, r6, r1
 8003e7a:	3330      	adds	r3, #48	@ 0x30
 8003e7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003e80:	460b      	mov	r3, r1
 8003e82:	2b63      	cmp	r3, #99	@ 0x63
 8003e84:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8003e88:	4631      	mov	r1, r6
 8003e8a:	dcf1      	bgt.n	8003e70 <__exponent+0x1c>
 8003e8c:	3130      	adds	r1, #48	@ 0x30
 8003e8e:	1e93      	subs	r3, r2, #2
 8003e90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e94:	1c41      	adds	r1, r0, #1
 8003e96:	461c      	mov	r4, r3
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	d30a      	bcc.n	8003eb2 <__exponent+0x5e>
 8003e9c:	f10d 0309 	add.w	r3, sp, #9
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	42a5      	cmp	r5, r4
 8003ea4:	bf38      	it	cc
 8003ea6:	2300      	movcc	r3, #0
 8003ea8:	1c82      	adds	r2, r0, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	1a18      	subs	r0, r3, r0
 8003eae:	b003      	add	sp, #12
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003eb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003eba:	e7ed      	b.n	8003e98 <__exponent+0x44>
 8003ebc:	2330      	movs	r3, #48	@ 0x30
 8003ebe:	3130      	adds	r1, #48	@ 0x30
 8003ec0:	7083      	strb	r3, [r0, #2]
 8003ec2:	70c1      	strb	r1, [r0, #3]
 8003ec4:	1d03      	adds	r3, r0, #4
 8003ec6:	e7f1      	b.n	8003eac <__exponent+0x58>

08003ec8 <_printf_float>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	b08d      	sub	sp, #52	@ 0x34
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	4605      	mov	r5, r0
 8003eda:	f000 fced 	bl	80048b8 <_localeconv_r>
 8003ede:	6803      	ldr	r3, [r0, #0]
 8003ee0:	9306      	str	r3, [sp, #24]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc f9ac 	bl	8000240 <strlen>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ef4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ef8:	9007      	str	r0, [sp, #28]
 8003efa:	3307      	adds	r3, #7
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	ecb3 7b02 	vldmia	r3!, {d7}
 8003f04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f08:	f8c8 3000 	str.w	r3, [r8]
 8003f0c:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8003f10:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003f14:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8003f18:	4b9c      	ldr	r3, [pc, #624]	@ (800418c <_printf_float+0x2c4>)
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc fdeb 	bl	8000afc <__aeabi_dcmpun>
 8003f26:	bb70      	cbnz	r0, 8003f86 <_printf_float+0xbe>
 8003f28:	4b98      	ldr	r3, [pc, #608]	@ (800418c <_printf_float+0x2c4>)
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f2e:	4640      	mov	r0, r8
 8003f30:	4649      	mov	r1, r9
 8003f32:	f7fc fdc5 	bl	8000ac0 <__aeabi_dcmple>
 8003f36:	bb30      	cbnz	r0, 8003f86 <_printf_float+0xbe>
 8003f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f7fc fdb4 	bl	8000aac <__aeabi_dcmplt>
 8003f44:	b110      	cbz	r0, 8003f4c <_printf_float+0x84>
 8003f46:	232d      	movs	r3, #45	@ 0x2d
 8003f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f4c:	4a90      	ldr	r2, [pc, #576]	@ (8004190 <_printf_float+0x2c8>)
 8003f4e:	4b91      	ldr	r3, [pc, #580]	@ (8004194 <_printf_float+0x2cc>)
 8003f50:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f54:	bf8c      	ite	hi
 8003f56:	4690      	movhi	r8, r2
 8003f58:	4698      	movls	r8, r3
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	f02b 0304 	bic.w	r3, fp, #4
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	f04f 0900 	mov.w	r9, #0
 8003f68:	9700      	str	r7, [sp, #0]
 8003f6a:	4633      	mov	r3, r6
 8003f6c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f9d1 	bl	8004318 <_printf_common>
 8003f76:	3001      	adds	r0, #1
 8003f78:	f040 808c 	bne.w	8004094 <_printf_float+0x1cc>
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f80:	b00d      	add	sp, #52	@ 0x34
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fc fdb5 	bl	8000afc <__aeabi_dcmpun>
 8003f92:	b140      	cbz	r0, 8003fa6 <_printf_float+0xde>
 8003f94:	9b05      	ldr	r3, [sp, #20]
 8003f96:	4a80      	ldr	r2, [pc, #512]	@ (8004198 <_printf_float+0x2d0>)
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfbc      	itt	lt
 8003f9c:	232d      	movlt	r3, #45	@ 0x2d
 8003f9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fa2:	4b7e      	ldr	r3, [pc, #504]	@ (800419c <_printf_float+0x2d4>)
 8003fa4:	e7d4      	b.n	8003f50 <_printf_float+0x88>
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 8003fae:	d13b      	bne.n	8004028 <_printf_float+0x160>
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6022      	str	r2, [r4, #0]
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fc0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003fc4:	ab09      	add	r3, sp, #36	@ 0x24
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	6861      	ldr	r1, [r4, #4]
 8003fca:	ed9d 0b04 	vldr	d0, [sp, #16]
 8003fce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7ff fed9 	bl	8003d8a <__cvt>
 8003fd8:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003fde:	4680      	mov	r8, r0
 8003fe0:	d129      	bne.n	8004036 <_printf_float+0x16e>
 8003fe2:	1cc8      	adds	r0, r1, #3
 8003fe4:	db02      	blt.n	8003fec <_printf_float+0x124>
 8003fe6:	6863      	ldr	r3, [r4, #4]
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	da41      	bge.n	8004070 <_printf_float+0x1a8>
 8003fec:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ff0:	fa5f fa8a 	uxtb.w	sl, sl
 8003ff4:	3901      	subs	r1, #1
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ffc:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ffe:	f7ff ff29 	bl	8003e54 <__exponent>
 8004002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004004:	1813      	adds	r3, r2, r0
 8004006:	2a01      	cmp	r2, #1
 8004008:	4681      	mov	r9, r0
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	dc02      	bgt.n	8004014 <_printf_float+0x14c>
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	07d2      	lsls	r2, r2, #31
 8004012:	d501      	bpl.n	8004018 <_printf_float+0x150>
 8004014:	3301      	adds	r3, #1
 8004016:	6123      	str	r3, [r4, #16]
 8004018:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0a3      	beq.n	8003f68 <_printf_float+0xa0>
 8004020:	232d      	movs	r3, #45	@ 0x2d
 8004022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004026:	e79f      	b.n	8003f68 <_printf_float+0xa0>
 8004028:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800402c:	d1c2      	bne.n	8003fb4 <_printf_float+0xec>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1c0      	bne.n	8003fb4 <_printf_float+0xec>
 8004032:	2301      	movs	r3, #1
 8004034:	e7bd      	b.n	8003fb2 <_printf_float+0xea>
 8004036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800403a:	d9db      	bls.n	8003ff4 <_printf_float+0x12c>
 800403c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004040:	d118      	bne.n	8004074 <_printf_float+0x1ac>
 8004042:	2900      	cmp	r1, #0
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	dd0b      	ble.n	8004060 <_printf_float+0x198>
 8004048:	6121      	str	r1, [r4, #16]
 800404a:	b913      	cbnz	r3, 8004052 <_printf_float+0x18a>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	07d0      	lsls	r0, r2, #31
 8004050:	d502      	bpl.n	8004058 <_printf_float+0x190>
 8004052:	3301      	adds	r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	65a1      	str	r1, [r4, #88]	@ 0x58
 800405a:	f04f 0900 	mov.w	r9, #0
 800405e:	e7db      	b.n	8004018 <_printf_float+0x150>
 8004060:	b913      	cbnz	r3, 8004068 <_printf_float+0x1a0>
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	07d2      	lsls	r2, r2, #31
 8004066:	d501      	bpl.n	800406c <_printf_float+0x1a4>
 8004068:	3302      	adds	r3, #2
 800406a:	e7f4      	b.n	8004056 <_printf_float+0x18e>
 800406c:	2301      	movs	r3, #1
 800406e:	e7f2      	b.n	8004056 <_printf_float+0x18e>
 8004070:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004076:	428b      	cmp	r3, r1
 8004078:	dc05      	bgt.n	8004086 <_printf_float+0x1be>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6121      	str	r1, [r4, #16]
 800407e:	07d8      	lsls	r0, r3, #31
 8004080:	d5ea      	bpl.n	8004058 <_printf_float+0x190>
 8004082:	1c4b      	adds	r3, r1, #1
 8004084:	e7e7      	b.n	8004056 <_printf_float+0x18e>
 8004086:	2900      	cmp	r1, #0
 8004088:	bfd4      	ite	le
 800408a:	f1c1 0202 	rsble	r2, r1, #2
 800408e:	2201      	movgt	r2, #1
 8004090:	4413      	add	r3, r2
 8004092:	e7e0      	b.n	8004056 <_printf_float+0x18e>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	055a      	lsls	r2, r3, #21
 8004098:	d407      	bmi.n	80040aa <_printf_float+0x1e2>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	4642      	mov	r2, r8
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	d12b      	bne.n	8004100 <_printf_float+0x238>
 80040a8:	e768      	b.n	8003f7c <_printf_float+0xb4>
 80040aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040ae:	f240 80dd 	bls.w	800426c <_printf_float+0x3a4>
 80040b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040b6:	2200      	movs	r2, #0
 80040b8:	2300      	movs	r3, #0
 80040ba:	f7fc fced 	bl	8000a98 <__aeabi_dcmpeq>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d033      	beq.n	800412a <_printf_float+0x262>
 80040c2:	4a37      	ldr	r2, [pc, #220]	@ (80041a0 <_printf_float+0x2d8>)
 80040c4:	2301      	movs	r3, #1
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f af55 	beq.w	8003f7c <_printf_float+0xb4>
 80040d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80040d6:	4543      	cmp	r3, r8
 80040d8:	db02      	blt.n	80040e0 <_printf_float+0x218>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	07d8      	lsls	r0, r3, #31
 80040de:	d50f      	bpl.n	8004100 <_printf_float+0x238>
 80040e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	47b8      	blx	r7
 80040ea:	3001      	adds	r0, #1
 80040ec:	f43f af46 	beq.w	8003f7c <_printf_float+0xb4>
 80040f0:	f04f 0900 	mov.w	r9, #0
 80040f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80040f8:	f104 0a1a 	add.w	sl, r4, #26
 80040fc:	45c8      	cmp	r8, r9
 80040fe:	dc09      	bgt.n	8004114 <_printf_float+0x24c>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	079b      	lsls	r3, r3, #30
 8004104:	f100 8103 	bmi.w	800430e <_printf_float+0x446>
 8004108:	68e0      	ldr	r0, [r4, #12]
 800410a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800410c:	4298      	cmp	r0, r3
 800410e:	bfb8      	it	lt
 8004110:	4618      	movlt	r0, r3
 8004112:	e735      	b.n	8003f80 <_printf_float+0xb8>
 8004114:	2301      	movs	r3, #1
 8004116:	4652      	mov	r2, sl
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	f43f af2c 	beq.w	8003f7c <_printf_float+0xb4>
 8004124:	f109 0901 	add.w	r9, r9, #1
 8004128:	e7e8      	b.n	80040fc <_printf_float+0x234>
 800412a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	dc39      	bgt.n	80041a4 <_printf_float+0x2dc>
 8004130:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <_printf_float+0x2d8>)
 8004132:	2301      	movs	r3, #1
 8004134:	4631      	mov	r1, r6
 8004136:	4628      	mov	r0, r5
 8004138:	47b8      	blx	r7
 800413a:	3001      	adds	r0, #1
 800413c:	f43f af1e 	beq.w	8003f7c <_printf_float+0xb4>
 8004140:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004144:	ea59 0303 	orrs.w	r3, r9, r3
 8004148:	d102      	bne.n	8004150 <_printf_float+0x288>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	07d9      	lsls	r1, r3, #31
 800414e:	d5d7      	bpl.n	8004100 <_printf_float+0x238>
 8004150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004154:	4631      	mov	r1, r6
 8004156:	4628      	mov	r0, r5
 8004158:	47b8      	blx	r7
 800415a:	3001      	adds	r0, #1
 800415c:	f43f af0e 	beq.w	8003f7c <_printf_float+0xb4>
 8004160:	f04f 0a00 	mov.w	sl, #0
 8004164:	f104 0b1a 	add.w	fp, r4, #26
 8004168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416a:	425b      	negs	r3, r3
 800416c:	4553      	cmp	r3, sl
 800416e:	dc01      	bgt.n	8004174 <_printf_float+0x2ac>
 8004170:	464b      	mov	r3, r9
 8004172:	e793      	b.n	800409c <_printf_float+0x1d4>
 8004174:	2301      	movs	r3, #1
 8004176:	465a      	mov	r2, fp
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f aefc 	beq.w	8003f7c <_printf_float+0xb4>
 8004184:	f10a 0a01 	add.w	sl, sl, #1
 8004188:	e7ee      	b.n	8004168 <_printf_float+0x2a0>
 800418a:	bf00      	nop
 800418c:	7fefffff 	.word	0x7fefffff
 8004190:	08007060 	.word	0x08007060
 8004194:	0800705c 	.word	0x0800705c
 8004198:	08007068 	.word	0x08007068
 800419c:	08007064 	.word	0x08007064
 80041a0:	0800706c 	.word	0x0800706c
 80041a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041aa:	4553      	cmp	r3, sl
 80041ac:	bfa8      	it	ge
 80041ae:	4653      	movge	r3, sl
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	4699      	mov	r9, r3
 80041b4:	dc36      	bgt.n	8004224 <_printf_float+0x35c>
 80041b6:	f04f 0b00 	mov.w	fp, #0
 80041ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041be:	f104 021a 	add.w	r2, r4, #26
 80041c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041c4:	9304      	str	r3, [sp, #16]
 80041c6:	eba3 0309 	sub.w	r3, r3, r9
 80041ca:	455b      	cmp	r3, fp
 80041cc:	dc31      	bgt.n	8004232 <_printf_float+0x36a>
 80041ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041d0:	459a      	cmp	sl, r3
 80041d2:	dc3a      	bgt.n	800424a <_printf_float+0x382>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	07da      	lsls	r2, r3, #31
 80041d8:	d437      	bmi.n	800424a <_printf_float+0x382>
 80041da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041dc:	ebaa 0903 	sub.w	r9, sl, r3
 80041e0:	9b04      	ldr	r3, [sp, #16]
 80041e2:	ebaa 0303 	sub.w	r3, sl, r3
 80041e6:	4599      	cmp	r9, r3
 80041e8:	bfa8      	it	ge
 80041ea:	4699      	movge	r9, r3
 80041ec:	f1b9 0f00 	cmp.w	r9, #0
 80041f0:	dc33      	bgt.n	800425a <_printf_float+0x392>
 80041f2:	f04f 0800 	mov.w	r8, #0
 80041f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041fa:	f104 0b1a 	add.w	fp, r4, #26
 80041fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004200:	ebaa 0303 	sub.w	r3, sl, r3
 8004204:	eba3 0309 	sub.w	r3, r3, r9
 8004208:	4543      	cmp	r3, r8
 800420a:	f77f af79 	ble.w	8004100 <_printf_float+0x238>
 800420e:	2301      	movs	r3, #1
 8004210:	465a      	mov	r2, fp
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f aeaf 	beq.w	8003f7c <_printf_float+0xb4>
 800421e:	f108 0801 	add.w	r8, r8, #1
 8004222:	e7ec      	b.n	80041fe <_printf_float+0x336>
 8004224:	4642      	mov	r2, r8
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	d1c2      	bne.n	80041b6 <_printf_float+0x2ee>
 8004230:	e6a4      	b.n	8003f7c <_printf_float+0xb4>
 8004232:	2301      	movs	r3, #1
 8004234:	4631      	mov	r1, r6
 8004236:	4628      	mov	r0, r5
 8004238:	9204      	str	r2, [sp, #16]
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	f43f ae9d 	beq.w	8003f7c <_printf_float+0xb4>
 8004242:	9a04      	ldr	r2, [sp, #16]
 8004244:	f10b 0b01 	add.w	fp, fp, #1
 8004248:	e7bb      	b.n	80041c2 <_printf_float+0x2fa>
 800424a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800424e:	4631      	mov	r1, r6
 8004250:	4628      	mov	r0, r5
 8004252:	47b8      	blx	r7
 8004254:	3001      	adds	r0, #1
 8004256:	d1c0      	bne.n	80041da <_printf_float+0x312>
 8004258:	e690      	b.n	8003f7c <_printf_float+0xb4>
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	464b      	mov	r3, r9
 800425e:	4442      	add	r2, r8
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	d1c3      	bne.n	80041f2 <_printf_float+0x32a>
 800426a:	e687      	b.n	8003f7c <_printf_float+0xb4>
 800426c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004270:	f1ba 0f01 	cmp.w	sl, #1
 8004274:	dc01      	bgt.n	800427a <_printf_float+0x3b2>
 8004276:	07db      	lsls	r3, r3, #31
 8004278:	d536      	bpl.n	80042e8 <_printf_float+0x420>
 800427a:	2301      	movs	r3, #1
 800427c:	4642      	mov	r2, r8
 800427e:	4631      	mov	r1, r6
 8004280:	4628      	mov	r0, r5
 8004282:	47b8      	blx	r7
 8004284:	3001      	adds	r0, #1
 8004286:	f43f ae79 	beq.w	8003f7c <_printf_float+0xb4>
 800428a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	47b8      	blx	r7
 8004294:	3001      	adds	r0, #1
 8004296:	f43f ae71 	beq.w	8003f7c <_printf_float+0xb4>
 800429a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800429e:	2200      	movs	r2, #0
 80042a0:	2300      	movs	r3, #0
 80042a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80042a6:	f7fc fbf7 	bl	8000a98 <__aeabi_dcmpeq>
 80042aa:	b9c0      	cbnz	r0, 80042de <_printf_float+0x416>
 80042ac:	4653      	mov	r3, sl
 80042ae:	f108 0201 	add.w	r2, r8, #1
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	d10c      	bne.n	80042d6 <_printf_float+0x40e>
 80042bc:	e65e      	b.n	8003f7c <_printf_float+0xb4>
 80042be:	2301      	movs	r3, #1
 80042c0:	465a      	mov	r2, fp
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f ae57 	beq.w	8003f7c <_printf_float+0xb4>
 80042ce:	f108 0801 	add.w	r8, r8, #1
 80042d2:	45d0      	cmp	r8, sl
 80042d4:	dbf3      	blt.n	80042be <_printf_float+0x3f6>
 80042d6:	464b      	mov	r3, r9
 80042d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80042dc:	e6df      	b.n	800409e <_printf_float+0x1d6>
 80042de:	f04f 0800 	mov.w	r8, #0
 80042e2:	f104 0b1a 	add.w	fp, r4, #26
 80042e6:	e7f4      	b.n	80042d2 <_printf_float+0x40a>
 80042e8:	2301      	movs	r3, #1
 80042ea:	4642      	mov	r2, r8
 80042ec:	e7e1      	b.n	80042b2 <_printf_float+0x3ea>
 80042ee:	2301      	movs	r3, #1
 80042f0:	464a      	mov	r2, r9
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	f43f ae3f 	beq.w	8003f7c <_printf_float+0xb4>
 80042fe:	f108 0801 	add.w	r8, r8, #1
 8004302:	68e3      	ldr	r3, [r4, #12]
 8004304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004306:	1a5b      	subs	r3, r3, r1
 8004308:	4543      	cmp	r3, r8
 800430a:	dcf0      	bgt.n	80042ee <_printf_float+0x426>
 800430c:	e6fc      	b.n	8004108 <_printf_float+0x240>
 800430e:	f04f 0800 	mov.w	r8, #0
 8004312:	f104 0919 	add.w	r9, r4, #25
 8004316:	e7f4      	b.n	8004302 <_printf_float+0x43a>

08004318 <_printf_common>:
 8004318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	4616      	mov	r6, r2
 800431e:	4698      	mov	r8, r3
 8004320:	688a      	ldr	r2, [r1, #8]
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004328:	4293      	cmp	r3, r2
 800432a:	bfb8      	it	lt
 800432c:	4613      	movlt	r3, r2
 800432e:	6033      	str	r3, [r6, #0]
 8004330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004334:	4607      	mov	r7, r0
 8004336:	460c      	mov	r4, r1
 8004338:	b10a      	cbz	r2, 800433e <_printf_common+0x26>
 800433a:	3301      	adds	r3, #1
 800433c:	6033      	str	r3, [r6, #0]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	0699      	lsls	r1, r3, #26
 8004342:	bf42      	ittt	mi
 8004344:	6833      	ldrmi	r3, [r6, #0]
 8004346:	3302      	addmi	r3, #2
 8004348:	6033      	strmi	r3, [r6, #0]
 800434a:	6825      	ldr	r5, [r4, #0]
 800434c:	f015 0506 	ands.w	r5, r5, #6
 8004350:	d106      	bne.n	8004360 <_printf_common+0x48>
 8004352:	f104 0a19 	add.w	sl, r4, #25
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	6832      	ldr	r2, [r6, #0]
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	42ab      	cmp	r3, r5
 800435e:	dc26      	bgt.n	80043ae <_printf_common+0x96>
 8004360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	3b00      	subs	r3, #0
 8004368:	bf18      	it	ne
 800436a:	2301      	movne	r3, #1
 800436c:	0692      	lsls	r2, r2, #26
 800436e:	d42b      	bmi.n	80043c8 <_printf_common+0xb0>
 8004370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004374:	4641      	mov	r1, r8
 8004376:	4638      	mov	r0, r7
 8004378:	47c8      	blx	r9
 800437a:	3001      	adds	r0, #1
 800437c:	d01e      	beq.n	80043bc <_printf_common+0xa4>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	f003 0306 	and.w	r3, r3, #6
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf02      	ittt	eq
 800438a:	68e5      	ldreq	r5, [r4, #12]
 800438c:	6833      	ldreq	r3, [r6, #0]
 800438e:	1aed      	subeq	r5, r5, r3
 8004390:	68a3      	ldr	r3, [r4, #8]
 8004392:	bf0c      	ite	eq
 8004394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004398:	2500      	movne	r5, #0
 800439a:	4293      	cmp	r3, r2
 800439c:	bfc4      	itt	gt
 800439e:	1a9b      	subgt	r3, r3, r2
 80043a0:	18ed      	addgt	r5, r5, r3
 80043a2:	2600      	movs	r6, #0
 80043a4:	341a      	adds	r4, #26
 80043a6:	42b5      	cmp	r5, r6
 80043a8:	d11a      	bne.n	80043e0 <_printf_common+0xc8>
 80043aa:	2000      	movs	r0, #0
 80043ac:	e008      	b.n	80043c0 <_printf_common+0xa8>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4652      	mov	r2, sl
 80043b2:	4641      	mov	r1, r8
 80043b4:	4638      	mov	r0, r7
 80043b6:	47c8      	blx	r9
 80043b8:	3001      	adds	r0, #1
 80043ba:	d103      	bne.n	80043c4 <_printf_common+0xac>
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c4:	3501      	adds	r5, #1
 80043c6:	e7c6      	b.n	8004356 <_printf_common+0x3e>
 80043c8:	18e1      	adds	r1, r4, r3
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	2030      	movs	r0, #48	@ 0x30
 80043ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043d2:	4422      	add	r2, r4
 80043d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043dc:	3302      	adds	r3, #2
 80043de:	e7c7      	b.n	8004370 <_printf_common+0x58>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4622      	mov	r2, r4
 80043e4:	4641      	mov	r1, r8
 80043e6:	4638      	mov	r0, r7
 80043e8:	47c8      	blx	r9
 80043ea:	3001      	adds	r0, #1
 80043ec:	d0e6      	beq.n	80043bc <_printf_common+0xa4>
 80043ee:	3601      	adds	r6, #1
 80043f0:	e7d9      	b.n	80043a6 <_printf_common+0x8e>
	...

080043f4 <_printf_i>:
 80043f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	7e0f      	ldrb	r7, [r1, #24]
 80043fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043fc:	2f78      	cmp	r7, #120	@ 0x78
 80043fe:	4691      	mov	r9, r2
 8004400:	4680      	mov	r8, r0
 8004402:	460c      	mov	r4, r1
 8004404:	469a      	mov	sl, r3
 8004406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800440a:	d807      	bhi.n	800441c <_printf_i+0x28>
 800440c:	2f62      	cmp	r7, #98	@ 0x62
 800440e:	d80a      	bhi.n	8004426 <_printf_i+0x32>
 8004410:	2f00      	cmp	r7, #0
 8004412:	f000 80d2 	beq.w	80045ba <_printf_i+0x1c6>
 8004416:	2f58      	cmp	r7, #88	@ 0x58
 8004418:	f000 80b7 	beq.w	800458a <_printf_i+0x196>
 800441c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004424:	e03a      	b.n	800449c <_printf_i+0xa8>
 8004426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800442a:	2b15      	cmp	r3, #21
 800442c:	d8f6      	bhi.n	800441c <_printf_i+0x28>
 800442e:	a101      	add	r1, pc, #4	@ (adr r1, 8004434 <_printf_i+0x40>)
 8004430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004434:	0800448d 	.word	0x0800448d
 8004438:	080044a1 	.word	0x080044a1
 800443c:	0800441d 	.word	0x0800441d
 8004440:	0800441d 	.word	0x0800441d
 8004444:	0800441d 	.word	0x0800441d
 8004448:	0800441d 	.word	0x0800441d
 800444c:	080044a1 	.word	0x080044a1
 8004450:	0800441d 	.word	0x0800441d
 8004454:	0800441d 	.word	0x0800441d
 8004458:	0800441d 	.word	0x0800441d
 800445c:	0800441d 	.word	0x0800441d
 8004460:	080045a1 	.word	0x080045a1
 8004464:	080044cb 	.word	0x080044cb
 8004468:	08004557 	.word	0x08004557
 800446c:	0800441d 	.word	0x0800441d
 8004470:	0800441d 	.word	0x0800441d
 8004474:	080045c3 	.word	0x080045c3
 8004478:	0800441d 	.word	0x0800441d
 800447c:	080044cb 	.word	0x080044cb
 8004480:	0800441d 	.word	0x0800441d
 8004484:	0800441d 	.word	0x0800441d
 8004488:	0800455f 	.word	0x0800455f
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6032      	str	r2, [r6, #0]
 8004494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800449c:	2301      	movs	r3, #1
 800449e:	e09d      	b.n	80045dc <_printf_i+0x1e8>
 80044a0:	6833      	ldr	r3, [r6, #0]
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	6031      	str	r1, [r6, #0]
 80044a8:	0606      	lsls	r6, r0, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xbc>
 80044ac:	681d      	ldr	r5, [r3, #0]
 80044ae:	e003      	b.n	80044b8 <_printf_i+0xc4>
 80044b0:	0645      	lsls	r5, r0, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xb8>
 80044b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	da03      	bge.n	80044c4 <_printf_i+0xd0>
 80044bc:	232d      	movs	r3, #45	@ 0x2d
 80044be:	426d      	negs	r5, r5
 80044c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c4:	4859      	ldr	r0, [pc, #356]	@ (800462c <_printf_i+0x238>)
 80044c6:	230a      	movs	r3, #10
 80044c8:	e010      	b.n	80044ec <_printf_i+0xf8>
 80044ca:	6821      	ldr	r1, [r4, #0]
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	0608      	lsls	r0, r1, #24
 80044d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044d4:	d402      	bmi.n	80044dc <_printf_i+0xe8>
 80044d6:	0649      	lsls	r1, r1, #25
 80044d8:	bf48      	it	mi
 80044da:	b2ad      	uxthmi	r5, r5
 80044dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80044de:	4853      	ldr	r0, [pc, #332]	@ (800462c <_printf_i+0x238>)
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	d159      	bne.n	8004598 <_printf_i+0x1a4>
 80044e4:	2308      	movs	r3, #8
 80044e6:	2100      	movs	r1, #0
 80044e8:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ec:	6866      	ldr	r6, [r4, #4]
 80044ee:	60a6      	str	r6, [r4, #8]
 80044f0:	2e00      	cmp	r6, #0
 80044f2:	db05      	blt.n	8004500 <_printf_i+0x10c>
 80044f4:	6821      	ldr	r1, [r4, #0]
 80044f6:	432e      	orrs	r6, r5
 80044f8:	f021 0104 	bic.w	r1, r1, #4
 80044fc:	6021      	str	r1, [r4, #0]
 80044fe:	d04d      	beq.n	800459c <_printf_i+0x1a8>
 8004500:	4616      	mov	r6, r2
 8004502:	fbb5 f1f3 	udiv	r1, r5, r3
 8004506:	fb03 5711 	mls	r7, r3, r1, r5
 800450a:	5dc7      	ldrb	r7, [r0, r7]
 800450c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004510:	462f      	mov	r7, r5
 8004512:	42bb      	cmp	r3, r7
 8004514:	460d      	mov	r5, r1
 8004516:	d9f4      	bls.n	8004502 <_printf_i+0x10e>
 8004518:	2b08      	cmp	r3, #8
 800451a:	d10b      	bne.n	8004534 <_printf_i+0x140>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	07df      	lsls	r7, r3, #31
 8004520:	d508      	bpl.n	8004534 <_printf_i+0x140>
 8004522:	6923      	ldr	r3, [r4, #16]
 8004524:	6861      	ldr	r1, [r4, #4]
 8004526:	4299      	cmp	r1, r3
 8004528:	bfde      	ittt	le
 800452a:	2330      	movle	r3, #48	@ 0x30
 800452c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004530:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004534:	1b92      	subs	r2, r2, r6
 8004536:	6122      	str	r2, [r4, #16]
 8004538:	f8cd a000 	str.w	sl, [sp]
 800453c:	464b      	mov	r3, r9
 800453e:	aa03      	add	r2, sp, #12
 8004540:	4621      	mov	r1, r4
 8004542:	4640      	mov	r0, r8
 8004544:	f7ff fee8 	bl	8004318 <_printf_common>
 8004548:	3001      	adds	r0, #1
 800454a:	d14c      	bne.n	80045e6 <_printf_i+0x1f2>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004550:	b004      	add	sp, #16
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	4834      	ldr	r0, [pc, #208]	@ (8004630 <_printf_i+0x23c>)
 8004560:	2778      	movs	r7, #120	@ 0x78
 8004562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	6831      	ldr	r1, [r6, #0]
 800456a:	061f      	lsls	r7, r3, #24
 800456c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004570:	d402      	bmi.n	8004578 <_printf_i+0x184>
 8004572:	065f      	lsls	r7, r3, #25
 8004574:	bf48      	it	mi
 8004576:	b2ad      	uxthmi	r5, r5
 8004578:	6031      	str	r1, [r6, #0]
 800457a:	07d9      	lsls	r1, r3, #31
 800457c:	bf44      	itt	mi
 800457e:	f043 0320 	orrmi.w	r3, r3, #32
 8004582:	6023      	strmi	r3, [r4, #0]
 8004584:	b11d      	cbz	r5, 800458e <_printf_i+0x19a>
 8004586:	2310      	movs	r3, #16
 8004588:	e7ad      	b.n	80044e6 <_printf_i+0xf2>
 800458a:	4828      	ldr	r0, [pc, #160]	@ (800462c <_printf_i+0x238>)
 800458c:	e7e9      	b.n	8004562 <_printf_i+0x16e>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	f023 0320 	bic.w	r3, r3, #32
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	e7f6      	b.n	8004586 <_printf_i+0x192>
 8004598:	230a      	movs	r3, #10
 800459a:	e7a4      	b.n	80044e6 <_printf_i+0xf2>
 800459c:	4616      	mov	r6, r2
 800459e:	e7bb      	b.n	8004518 <_printf_i+0x124>
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	6961      	ldr	r1, [r4, #20]
 80045a6:	1d18      	adds	r0, r3, #4
 80045a8:	6030      	str	r0, [r6, #0]
 80045aa:	062e      	lsls	r6, r5, #24
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	d501      	bpl.n	80045b4 <_printf_i+0x1c0>
 80045b0:	6019      	str	r1, [r3, #0]
 80045b2:	e002      	b.n	80045ba <_printf_i+0x1c6>
 80045b4:	0668      	lsls	r0, r5, #25
 80045b6:	d5fb      	bpl.n	80045b0 <_printf_i+0x1bc>
 80045b8:	8019      	strh	r1, [r3, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	4616      	mov	r6, r2
 80045c0:	e7ba      	b.n	8004538 <_printf_i+0x144>
 80045c2:	6833      	ldr	r3, [r6, #0]
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	6032      	str	r2, [r6, #0]
 80045c8:	681e      	ldr	r6, [r3, #0]
 80045ca:	6862      	ldr	r2, [r4, #4]
 80045cc:	2100      	movs	r1, #0
 80045ce:	4630      	mov	r0, r6
 80045d0:	f7fb fde6 	bl	80001a0 <memchr>
 80045d4:	b108      	cbz	r0, 80045da <_printf_i+0x1e6>
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	6060      	str	r0, [r4, #4]
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	2300      	movs	r3, #0
 80045e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e4:	e7a8      	b.n	8004538 <_printf_i+0x144>
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	4632      	mov	r2, r6
 80045ea:	4649      	mov	r1, r9
 80045ec:	4640      	mov	r0, r8
 80045ee:	47d0      	blx	sl
 80045f0:	3001      	adds	r0, #1
 80045f2:	d0ab      	beq.n	800454c <_printf_i+0x158>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	079b      	lsls	r3, r3, #30
 80045f8:	d413      	bmi.n	8004622 <_printf_i+0x22e>
 80045fa:	68e0      	ldr	r0, [r4, #12]
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	4298      	cmp	r0, r3
 8004600:	bfb8      	it	lt
 8004602:	4618      	movlt	r0, r3
 8004604:	e7a4      	b.n	8004550 <_printf_i+0x15c>
 8004606:	2301      	movs	r3, #1
 8004608:	4632      	mov	r2, r6
 800460a:	4649      	mov	r1, r9
 800460c:	4640      	mov	r0, r8
 800460e:	47d0      	blx	sl
 8004610:	3001      	adds	r0, #1
 8004612:	d09b      	beq.n	800454c <_printf_i+0x158>
 8004614:	3501      	adds	r5, #1
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	9903      	ldr	r1, [sp, #12]
 800461a:	1a5b      	subs	r3, r3, r1
 800461c:	42ab      	cmp	r3, r5
 800461e:	dcf2      	bgt.n	8004606 <_printf_i+0x212>
 8004620:	e7eb      	b.n	80045fa <_printf_i+0x206>
 8004622:	2500      	movs	r5, #0
 8004624:	f104 0619 	add.w	r6, r4, #25
 8004628:	e7f5      	b.n	8004616 <_printf_i+0x222>
 800462a:	bf00      	nop
 800462c:	0800706e 	.word	0x0800706e
 8004630:	0800707f 	.word	0x0800707f

08004634 <std>:
 8004634:	2300      	movs	r3, #0
 8004636:	b510      	push	{r4, lr}
 8004638:	4604      	mov	r4, r0
 800463a:	e9c0 3300 	strd	r3, r3, [r0]
 800463e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004642:	6083      	str	r3, [r0, #8]
 8004644:	8181      	strh	r1, [r0, #12]
 8004646:	6643      	str	r3, [r0, #100]	@ 0x64
 8004648:	81c2      	strh	r2, [r0, #14]
 800464a:	6183      	str	r3, [r0, #24]
 800464c:	4619      	mov	r1, r3
 800464e:	2208      	movs	r2, #8
 8004650:	305c      	adds	r0, #92	@ 0x5c
 8004652:	f000 f919 	bl	8004888 <memset>
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <std+0x58>)
 8004658:	6263      	str	r3, [r4, #36]	@ 0x24
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <std+0x5c>)
 800465c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <std+0x60>)
 8004660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <std+0x64>)
 8004664:	6323      	str	r3, [r4, #48]	@ 0x30
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <std+0x68>)
 8004668:	6224      	str	r4, [r4, #32]
 800466a:	429c      	cmp	r4, r3
 800466c:	d006      	beq.n	800467c <std+0x48>
 800466e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004672:	4294      	cmp	r4, r2
 8004674:	d002      	beq.n	800467c <std+0x48>
 8004676:	33d0      	adds	r3, #208	@ 0xd0
 8004678:	429c      	cmp	r4, r3
 800467a:	d105      	bne.n	8004688 <std+0x54>
 800467c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004684:	f000 b98c 	b.w	80049a0 <__retarget_lock_init_recursive>
 8004688:	bd10      	pop	{r4, pc}
 800468a:	bf00      	nop
 800468c:	08004801 	.word	0x08004801
 8004690:	08004823 	.word	0x08004823
 8004694:	0800485b 	.word	0x0800485b
 8004698:	08004881 	.word	0x08004881
 800469c:	20000300 	.word	0x20000300

080046a0 <stdio_exit_handler>:
 80046a0:	4a02      	ldr	r2, [pc, #8]	@ (80046ac <stdio_exit_handler+0xc>)
 80046a2:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <stdio_exit_handler+0x10>)
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <stdio_exit_handler+0x14>)
 80046a6:	f000 b86b 	b.w	8004780 <_fwalk_sglue>
 80046aa:	bf00      	nop
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	08006355 	.word	0x08006355
 80046b4:	2000001c 	.word	0x2000001c

080046b8 <cleanup_stdio>:
 80046b8:	6841      	ldr	r1, [r0, #4]
 80046ba:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <cleanup_stdio+0x34>)
 80046bc:	4299      	cmp	r1, r3
 80046be:	b510      	push	{r4, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	d001      	beq.n	80046c8 <cleanup_stdio+0x10>
 80046c4:	f001 fe46 	bl	8006354 <_fflush_r>
 80046c8:	68a1      	ldr	r1, [r4, #8]
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <cleanup_stdio+0x38>)
 80046cc:	4299      	cmp	r1, r3
 80046ce:	d002      	beq.n	80046d6 <cleanup_stdio+0x1e>
 80046d0:	4620      	mov	r0, r4
 80046d2:	f001 fe3f 	bl	8006354 <_fflush_r>
 80046d6:	68e1      	ldr	r1, [r4, #12]
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <cleanup_stdio+0x3c>)
 80046da:	4299      	cmp	r1, r3
 80046dc:	d004      	beq.n	80046e8 <cleanup_stdio+0x30>
 80046de:	4620      	mov	r0, r4
 80046e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e4:	f001 be36 	b.w	8006354 <_fflush_r>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	20000300 	.word	0x20000300
 80046f0:	20000368 	.word	0x20000368
 80046f4:	200003d0 	.word	0x200003d0

080046f8 <global_stdio_init.part.0>:
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <global_stdio_init.part.0+0x34>)
 80046fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <global_stdio_init.part.0+0x38>)
 80046fc:	480d      	ldr	r0, [pc, #52]	@ (8004734 <global_stdio_init.part.0+0x3c>)
 80046fe:	b510      	push	{r4, lr}
 8004700:	2104      	movs	r1, #4
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	f7ff ff95 	bl	8004634 <std>
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <global_stdio_init.part.0+0x3c>)
 800470c:	2201      	movs	r2, #1
 800470e:	461c      	mov	r4, r3
 8004710:	2109      	movs	r1, #9
 8004712:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8004716:	f7ff ff8d 	bl	8004634 <std>
 800471a:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800471e:	2202      	movs	r2, #2
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	2112      	movs	r1, #18
 8004726:	f7ff bf85 	b.w	8004634 <std>
 800472a:	bf00      	nop
 800472c:	20000438 	.word	0x20000438
 8004730:	080046a1 	.word	0x080046a1
 8004734:	20000300 	.word	0x20000300

08004738 <__sfp_lock_acquire>:
 8004738:	4801      	ldr	r0, [pc, #4]	@ (8004740 <__sfp_lock_acquire+0x8>)
 800473a:	f000 b932 	b.w	80049a2 <__retarget_lock_acquire_recursive>
 800473e:	bf00      	nop
 8004740:	20000441 	.word	0x20000441

08004744 <__sfp_lock_release>:
 8004744:	4801      	ldr	r0, [pc, #4]	@ (800474c <__sfp_lock_release+0x8>)
 8004746:	f000 b92d 	b.w	80049a4 <__retarget_lock_release_recursive>
 800474a:	bf00      	nop
 800474c:	20000441 	.word	0x20000441

08004750 <__sinit>:
 8004750:	b510      	push	{r4, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	f7ff fff0 	bl	8004738 <__sfp_lock_acquire>
 8004758:	6a23      	ldr	r3, [r4, #32]
 800475a:	b11b      	cbz	r3, 8004764 <__sinit+0x14>
 800475c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004760:	f7ff bff0 	b.w	8004744 <__sfp_lock_release>
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <__sinit+0x28>)
 8004766:	6223      	str	r3, [r4, #32]
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <__sinit+0x2c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f5      	bne.n	800475c <__sinit+0xc>
 8004770:	f7ff ffc2 	bl	80046f8 <global_stdio_init.part.0>
 8004774:	e7f2      	b.n	800475c <__sinit+0xc>
 8004776:	bf00      	nop
 8004778:	080046b9 	.word	0x080046b9
 800477c:	20000438 	.word	0x20000438

08004780 <_fwalk_sglue>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	4607      	mov	r7, r0
 8004786:	4688      	mov	r8, r1
 8004788:	4614      	mov	r4, r2
 800478a:	2600      	movs	r6, #0
 800478c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004790:	f1b9 0901 	subs.w	r9, r9, #1
 8004794:	d505      	bpl.n	80047a2 <_fwalk_sglue+0x22>
 8004796:	6824      	ldr	r4, [r4, #0]
 8004798:	2c00      	cmp	r4, #0
 800479a:	d1f7      	bne.n	800478c <_fwalk_sglue+0xc>
 800479c:	4630      	mov	r0, r6
 800479e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a2:	89ab      	ldrh	r3, [r5, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d907      	bls.n	80047b8 <_fwalk_sglue+0x38>
 80047a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ac:	3301      	adds	r3, #1
 80047ae:	d003      	beq.n	80047b8 <_fwalk_sglue+0x38>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	4306      	orrs	r6, r0
 80047b8:	3568      	adds	r5, #104	@ 0x68
 80047ba:	e7e9      	b.n	8004790 <_fwalk_sglue+0x10>

080047bc <siprintf>:
 80047bc:	b40e      	push	{r1, r2, r3}
 80047be:	b510      	push	{r4, lr}
 80047c0:	b09d      	sub	sp, #116	@ 0x74
 80047c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047c4:	9002      	str	r0, [sp, #8]
 80047c6:	9006      	str	r0, [sp, #24]
 80047c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047cc:	480a      	ldr	r0, [pc, #40]	@ (80047f8 <siprintf+0x3c>)
 80047ce:	9107      	str	r1, [sp, #28]
 80047d0:	9104      	str	r1, [sp, #16]
 80047d2:	490a      	ldr	r1, [pc, #40]	@ (80047fc <siprintf+0x40>)
 80047d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d8:	9105      	str	r1, [sp, #20]
 80047da:	2400      	movs	r4, #0
 80047dc:	a902      	add	r1, sp, #8
 80047de:	6800      	ldr	r0, [r0, #0]
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047e4:	f001 fc38 	bl	8006058 <_svfiprintf_r>
 80047e8:	9b02      	ldr	r3, [sp, #8]
 80047ea:	701c      	strb	r4, [r3, #0]
 80047ec:	b01d      	add	sp, #116	@ 0x74
 80047ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f2:	b003      	add	sp, #12
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000018 	.word	0x20000018
 80047fc:	ffff0208 	.word	0xffff0208

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f87c 	bl	8004904 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	4605      	mov	r5, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	2302      	movs	r3, #2
 800483a:	2200      	movs	r2, #0
 800483c:	f000 f850 	bl	80048e0 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b867 	b.w	8004928 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f83d 	bl	80048e0 <_lseek_r>
 8004866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	bf0b      	itete	eq
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	81a3      	strhne	r3, [r4, #12]
 800487a:	bf18      	it	ne
 800487c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800487e:	bd10      	pop	{r4, pc}

08004880 <__sclose>:
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	f000 b81c 	b.w	80048c0 <_close_r>

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <strcat>:
 8004898:	b510      	push	{r4, lr}
 800489a:	4602      	mov	r2, r0
 800489c:	7814      	ldrb	r4, [r2, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	3201      	adds	r2, #1
 80048a2:	2c00      	cmp	r4, #0
 80048a4:	d1fa      	bne.n	800489c <strcat+0x4>
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	d1f9      	bne.n	80048a8 <strcat+0x10>
 80048b4:	bd10      	pop	{r4, pc}
	...

080048b8 <_localeconv_r>:
 80048b8:	4800      	ldr	r0, [pc, #0]	@ (80048bc <_localeconv_r+0x4>)
 80048ba:	4770      	bx	lr
 80048bc:	20000158 	.word	0x20000158

080048c0 <_close_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d06      	ldr	r5, [pc, #24]	@ (80048dc <_close_r+0x1c>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	f7ff f8ca 	bl	8003a64 <_close>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_close_r+0x1a>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_close_r+0x1a>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	2000043c 	.word	0x2000043c

080048e0 <_lseek_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4d07      	ldr	r5, [pc, #28]	@ (8004900 <_lseek_r+0x20>)
 80048e4:	4604      	mov	r4, r0
 80048e6:	4608      	mov	r0, r1
 80048e8:	4611      	mov	r1, r2
 80048ea:	2200      	movs	r2, #0
 80048ec:	602a      	str	r2, [r5, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7ff f8c2 	bl	8003a78 <_lseek>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_lseek_r+0x1e>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_lseek_r+0x1e>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	2000043c 	.word	0x2000043c

08004904 <_read_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d07      	ldr	r5, [pc, #28]	@ (8004924 <_read_r+0x20>)
 8004908:	4604      	mov	r4, r0
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	2200      	movs	r2, #0
 8004910:	602a      	str	r2, [r5, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f7ff f888 	bl	8003a28 <_read>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_read_r+0x1e>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_read_r+0x1e>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	2000043c 	.word	0x2000043c

08004928 <_write_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_write_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7ff f886 	bl	8003a48 <_write>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_write_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_write_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	2000043c 	.word	0x2000043c

0800494c <__errno>:
 800494c:	4b01      	ldr	r3, [pc, #4]	@ (8004954 <__errno+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000018 	.word	0x20000018

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <__libc_init_array+0x38>)
 800495c:	4d0d      	ldr	r5, [pc, #52]	@ (8004994 <__libc_init_array+0x3c>)
 800495e:	1b5b      	subs	r3, r3, r5
 8004960:	109c      	asrs	r4, r3, #2
 8004962:	2600      	movs	r6, #0
 8004964:	42a6      	cmp	r6, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	f002 f9ea 	bl	8006d40 <_init>
 800496c:	4d0a      	ldr	r5, [pc, #40]	@ (8004998 <__libc_init_array+0x40>)
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <__libc_init_array+0x44>)
 8004970:	1b5b      	subs	r3, r3, r5
 8004972:	109c      	asrs	r4, r3, #2
 8004974:	2600      	movs	r6, #0
 8004976:	42a6      	cmp	r6, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004980:	4798      	blx	r3
 8004982:	3601      	adds	r6, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f855 3b04 	ldr.w	r3, [r5], #4
 800498a:	4798      	blx	r3
 800498c:	3601      	adds	r6, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	080073ac 	.word	0x080073ac
 8004994:	080073ac 	.word	0x080073ac
 8004998:	080073ac 	.word	0x080073ac
 800499c:	080073b0 	.word	0x080073b0

080049a0 <__retarget_lock_init_recursive>:
 80049a0:	4770      	bx	lr

080049a2 <__retarget_lock_acquire_recursive>:
 80049a2:	4770      	bx	lr

080049a4 <__retarget_lock_release_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <quorem>:
 80049a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6903      	ldr	r3, [r0, #16]
 80049ac:	690c      	ldr	r4, [r1, #16]
 80049ae:	42a3      	cmp	r3, r4
 80049b0:	4607      	mov	r7, r0
 80049b2:	db7e      	blt.n	8004ab2 <quorem+0x10c>
 80049b4:	3c01      	subs	r4, #1
 80049b6:	f101 0814 	add.w	r8, r1, #20
 80049ba:	00a3      	lsls	r3, r4, #2
 80049bc:	f100 0514 	add.w	r5, r0, #20
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049d0:	3301      	adds	r3, #1
 80049d2:	429a      	cmp	r2, r3
 80049d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80049dc:	d32e      	bcc.n	8004a3c <quorem+0x96>
 80049de:	f04f 0a00 	mov.w	sl, #0
 80049e2:	46c4      	mov	ip, r8
 80049e4:	46ae      	mov	lr, r5
 80049e6:	46d3      	mov	fp, sl
 80049e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049ec:	b298      	uxth	r0, r3
 80049ee:	fb06 a000 	mla	r0, r6, r0, sl
 80049f2:	0c02      	lsrs	r2, r0, #16
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	fb06 2303 	mla	r3, r6, r3, r2
 80049fa:	f8de 2000 	ldr.w	r2, [lr]
 80049fe:	b280      	uxth	r0, r0
 8004a00:	b292      	uxth	r2, r2
 8004a02:	1a12      	subs	r2, r2, r0
 8004a04:	445a      	add	r2, fp
 8004a06:	f8de 0000 	ldr.w	r0, [lr]
 8004a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a1e:	45e1      	cmp	r9, ip
 8004a20:	f84e 2b04 	str.w	r2, [lr], #4
 8004a24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a28:	d2de      	bcs.n	80049e8 <quorem+0x42>
 8004a2a:	9b00      	ldr	r3, [sp, #0]
 8004a2c:	58eb      	ldr	r3, [r5, r3]
 8004a2e:	b92b      	cbnz	r3, 8004a3c <quorem+0x96>
 8004a30:	9b01      	ldr	r3, [sp, #4]
 8004a32:	3b04      	subs	r3, #4
 8004a34:	429d      	cmp	r5, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	d32f      	bcc.n	8004a9a <quorem+0xf4>
 8004a3a:	613c      	str	r4, [r7, #16]
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f001 f99f 	bl	8005d80 <__mcmp>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	db25      	blt.n	8004a92 <quorem+0xec>
 8004a46:	4629      	mov	r1, r5
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a4e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a52:	fa1f fe82 	uxth.w	lr, r2
 8004a56:	fa1f f38c 	uxth.w	r3, ip
 8004a5a:	eba3 030e 	sub.w	r3, r3, lr
 8004a5e:	4403      	add	r3, r0
 8004a60:	0c12      	lsrs	r2, r2, #16
 8004a62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a70:	45c1      	cmp	r9, r8
 8004a72:	f841 3b04 	str.w	r3, [r1], #4
 8004a76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a7a:	d2e6      	bcs.n	8004a4a <quorem+0xa4>
 8004a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a84:	b922      	cbnz	r2, 8004a90 <quorem+0xea>
 8004a86:	3b04      	subs	r3, #4
 8004a88:	429d      	cmp	r5, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	d30b      	bcc.n	8004aa6 <quorem+0x100>
 8004a8e:	613c      	str	r4, [r7, #16]
 8004a90:	3601      	adds	r6, #1
 8004a92:	4630      	mov	r0, r6
 8004a94:	b003      	add	sp, #12
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d1cb      	bne.n	8004a3a <quorem+0x94>
 8004aa2:	3c01      	subs	r4, #1
 8004aa4:	e7c6      	b.n	8004a34 <quorem+0x8e>
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	3b04      	subs	r3, #4
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	d1ef      	bne.n	8004a8e <quorem+0xe8>
 8004aae:	3c01      	subs	r4, #1
 8004ab0:	e7ea      	b.n	8004a88 <quorem+0xe2>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e7ee      	b.n	8004a94 <quorem+0xee>
	...

08004ab8 <_dtoa_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	b099      	sub	sp, #100	@ 0x64
 8004abe:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8004ac2:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ac4:	69c2      	ldr	r2, [r0, #28]
 8004ac6:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8004ac8:	910a      	str	r1, [sp, #40]	@ 0x28
 8004aca:	ec57 6b10 	vmov	r6, r7, d0
 8004ace:	4681      	mov	r9, r0
 8004ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ad2:	b982      	cbnz	r2, 8004af6 <_dtoa_r+0x3e>
 8004ad4:	2010      	movs	r0, #16
 8004ad6:	f000 fe21 	bl	800571c <malloc>
 8004ada:	4602      	mov	r2, r0
 8004adc:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ae0:	b920      	cbnz	r0, 8004aec <_dtoa_r+0x34>
 8004ae2:	4bb1      	ldr	r3, [pc, #708]	@ (8004da8 <_dtoa_r+0x2f0>)
 8004ae4:	21ef      	movs	r1, #239	@ 0xef
 8004ae6:	48b1      	ldr	r0, [pc, #708]	@ (8004dac <_dtoa_r+0x2f4>)
 8004ae8:	f001 fc94 	bl	8006414 <__assert_func>
 8004aec:	2300      	movs	r3, #0
 8004aee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004af2:	6003      	str	r3, [r0, #0]
 8004af4:	60c3      	str	r3, [r0, #12]
 8004af6:	6811      	ldr	r1, [r2, #0]
 8004af8:	b159      	cbz	r1, 8004b12 <_dtoa_r+0x5a>
 8004afa:	6852      	ldr	r2, [r2, #4]
 8004afc:	604a      	str	r2, [r1, #4]
 8004afe:	2301      	movs	r3, #1
 8004b00:	4093      	lsls	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
 8004b04:	4648      	mov	r0, r9
 8004b06:	f000 fefd 	bl	8005904 <_Bfree>
 8004b0a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f1b7 0800 	subs.w	r8, r7, #0
 8004b16:	bfb5      	itete	lt
 8004b18:	2301      	movlt	r3, #1
 8004b1a:	2300      	movge	r3, #0
 8004b1c:	6023      	strlt	r3, [r4, #0]
 8004b1e:	6023      	strge	r3, [r4, #0]
 8004b20:	4ba3      	ldr	r3, [pc, #652]	@ (8004db0 <_dtoa_r+0x2f8>)
 8004b22:	bfbc      	itt	lt
 8004b24:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 8004b28:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 8004b2c:	ea33 0308 	bics.w	r3, r3, r8
 8004b30:	d11a      	bne.n	8004b68 <_dtoa_r+0xb0>
 8004b32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b34:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8004b38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b3c:	ea58 0806 	orrs.w	r8, r8, r6
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	f000 8574 	beq.w	800562e <_dtoa_r+0xb76>
 8004b46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b48:	b953      	cbnz	r3, 8004b60 <_dtoa_r+0xa8>
 8004b4a:	4b9a      	ldr	r3, [pc, #616]	@ (8004db4 <_dtoa_r+0x2fc>)
 8004b4c:	e021      	b.n	8004b92 <_dtoa_r+0xda>
 8004b4e:	4b9a      	ldr	r3, [pc, #616]	@ (8004db8 <_dtoa_r+0x300>)
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	9800      	ldr	r0, [sp, #0]
 8004b5a:	b019      	add	sp, #100	@ 0x64
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	4b94      	ldr	r3, [pc, #592]	@ (8004db4 <_dtoa_r+0x2fc>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	3303      	adds	r3, #3
 8004b66:	e7f5      	b.n	8004b54 <_dtoa_r+0x9c>
 8004b68:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	ec51 0b17 	vmov	r0, r1, d7
 8004b72:	2300      	movs	r3, #0
 8004b74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b78:	f7fb ff8e 	bl	8000a98 <__aeabi_dcmpeq>
 8004b7c:	4682      	mov	sl, r0
 8004b7e:	b150      	cbz	r0, 8004b96 <_dtoa_r+0xde>
 8004b80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b82:	2301      	movs	r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b88:	b113      	cbz	r3, 8004b90 <_dtoa_r+0xd8>
 8004b8a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b8c:	4b8b      	ldr	r3, [pc, #556]	@ (8004dbc <_dtoa_r+0x304>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc0 <_dtoa_r+0x308>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	e7e0      	b.n	8004b58 <_dtoa_r+0xa0>
 8004b96:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004b9a:	aa16      	add	r2, sp, #88	@ 0x58
 8004b9c:	a917      	add	r1, sp, #92	@ 0x5c
 8004b9e:	4648      	mov	r0, r9
 8004ba0:	f001 f9a2 	bl	8005ee8 <__d2b>
 8004ba4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8004ba8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8004baa:	9001      	str	r0, [sp, #4]
 8004bac:	f000 8082 	beq.w	8004cb4 <_dtoa_r+0x1fc>
 8004bb0:	9b07      	ldr	r3, [sp, #28]
 8004bb2:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8004bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bbe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bc2:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bc6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004bca:	4619      	mov	r1, r3
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc4 <_dtoa_r+0x30c>)
 8004bd0:	f7fb fb42 	bl	8000258 <__aeabi_dsub>
 8004bd4:	a36e      	add	r3, pc, #440	@ (adr r3, 8004d90 <_dtoa_r+0x2d8>)
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f7fb fcf5 	bl	80005c8 <__aeabi_dmul>
 8004bde:	a36e      	add	r3, pc, #440	@ (adr r3, 8004d98 <_dtoa_r+0x2e0>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fb3a 	bl	800025c <__adddf3>
 8004be8:	4606      	mov	r6, r0
 8004bea:	4620      	mov	r0, r4
 8004bec:	460f      	mov	r7, r1
 8004bee:	f7fb fc81 	bl	80004f4 <__aeabi_i2d>
 8004bf2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004da0 <_dtoa_r+0x2e8>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fce6 	bl	80005c8 <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4630      	mov	r0, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	f7fb fb2a 	bl	800025c <__adddf3>
 8004c08:	4606      	mov	r6, r0
 8004c0a:	460f      	mov	r7, r1
 8004c0c:	f7fb ff8c 	bl	8000b28 <__aeabi_d2iz>
 8004c10:	2200      	movs	r2, #0
 8004c12:	4680      	mov	r8, r0
 8004c14:	2300      	movs	r3, #0
 8004c16:	4630      	mov	r0, r6
 8004c18:	4639      	mov	r1, r7
 8004c1a:	f7fb ff47 	bl	8000aac <__aeabi_dcmplt>
 8004c1e:	b148      	cbz	r0, 8004c34 <_dtoa_r+0x17c>
 8004c20:	4640      	mov	r0, r8
 8004c22:	f7fb fc67 	bl	80004f4 <__aeabi_i2d>
 8004c26:	4632      	mov	r2, r6
 8004c28:	463b      	mov	r3, r7
 8004c2a:	f7fb ff35 	bl	8000a98 <__aeabi_dcmpeq>
 8004c2e:	b908      	cbnz	r0, 8004c34 <_dtoa_r+0x17c>
 8004c30:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c34:	f1b8 0f16 	cmp.w	r8, #22
 8004c38:	d859      	bhi.n	8004cee <_dtoa_r+0x236>
 8004c3a:	4b63      	ldr	r3, [pc, #396]	@ (8004dc8 <_dtoa_r+0x310>)
 8004c3c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c48:	f7fb ff30 	bl	8000aac <__aeabi_dcmplt>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d050      	beq.n	8004cf2 <_dtoa_r+0x23a>
 8004c50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c54:	2300      	movs	r3, #0
 8004c56:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c58:	1b2d      	subs	r5, r5, r4
 8004c5a:	1e6b      	subs	r3, r5, #1
 8004c5c:	9308      	str	r3, [sp, #32]
 8004c5e:	bf43      	ittte	mi
 8004c60:	2300      	movmi	r3, #0
 8004c62:	f1c5 0701 	rsbmi	r7, r5, #1
 8004c66:	9308      	strmi	r3, [sp, #32]
 8004c68:	2700      	movpl	r7, #0
 8004c6a:	f1b8 0f00 	cmp.w	r8, #0
 8004c6e:	db42      	blt.n	8004cf6 <_dtoa_r+0x23e>
 8004c70:	9b08      	ldr	r3, [sp, #32]
 8004c72:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8004c76:	4443      	add	r3, r8
 8004c78:	9308      	str	r3, [sp, #32]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c80:	2b09      	cmp	r3, #9
 8004c82:	d86c      	bhi.n	8004d5e <_dtoa_r+0x2a6>
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	bfc4      	itt	gt
 8004c88:	3b04      	subgt	r3, #4
 8004c8a:	930a      	strgt	r3, [sp, #40]	@ 0x28
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c8e:	f1a3 0302 	sub.w	r3, r3, #2
 8004c92:	bfcc      	ite	gt
 8004c94:	2400      	movgt	r4, #0
 8004c96:	2401      	movle	r4, #1
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d86c      	bhi.n	8004d76 <_dtoa_r+0x2be>
 8004c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <_dtoa_r+0x1ec>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004d57 	.word	0x08004d57
 8004ca8:	08004d5b 	.word	0x08004d5b
 8004cac:	08004d1d 	.word	0x08004d1d
 8004cb0:	08004d07 	.word	0x08004d07
 8004cb4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004cb6:	442c      	add	r4, r5
 8004cb8:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	bfc1      	itttt	gt
 8004cc0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cc8:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 8004ccc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cd0:	bfd6      	itet	le
 8004cd2:	f1c3 0320 	rsble	r3, r3, #32
 8004cd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004cda:	fa06 f003 	lslle.w	r0, r6, r3
 8004cde:	f7fb fbf9 	bl	80004d4 <__aeabi_ui2d>
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ce8:	3c01      	subs	r4, #1
 8004cea:	9214      	str	r2, [sp, #80]	@ 0x50
 8004cec:	e76d      	b.n	8004bca <_dtoa_r+0x112>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b1      	b.n	8004c56 <_dtoa_r+0x19e>
 8004cf2:	9012      	str	r0, [sp, #72]	@ 0x48
 8004cf4:	e7b0      	b.n	8004c58 <_dtoa_r+0x1a0>
 8004cf6:	f1c8 0300 	rsb	r3, r8, #0
 8004cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	eba7 0708 	sub.w	r7, r7, r8
 8004d02:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d04:	e7bb      	b.n	8004c7e <_dtoa_r+0x1c6>
 8004d06:	2301      	movs	r3, #1
 8004d08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d0c:	4443      	add	r3, r8
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	3301      	adds	r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	bfb8      	it	lt
 8004d18:	2301      	movlt	r3, #1
 8004d1a:	e006      	b.n	8004d2a <_dtoa_r+0x272>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dd2a      	ble.n	8004d7c <_dtoa_r+0x2c4>
 8004d26:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d2a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2204      	movs	r2, #4
 8004d32:	f102 0514 	add.w	r5, r2, #20
 8004d36:	429d      	cmp	r5, r3
 8004d38:	f101 0601 	add.w	r6, r1, #1
 8004d3c:	d923      	bls.n	8004d86 <_dtoa_r+0x2ce>
 8004d3e:	6041      	str	r1, [r0, #4]
 8004d40:	4648      	mov	r0, r9
 8004d42:	f000 fda1 	bl	8005888 <_Balloc>
 8004d46:	9000      	str	r0, [sp, #0]
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d141      	bne.n	8004dd0 <_dtoa_r+0x318>
 8004d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dcc <_dtoa_r+0x314>)
 8004d4e:	4602      	mov	r2, r0
 8004d50:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d54:	e6c7      	b.n	8004ae6 <_dtoa_r+0x2e>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e7e1      	b.n	8004d1e <_dtoa_r+0x266>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e7d4      	b.n	8004d08 <_dtoa_r+0x250>
 8004d5e:	2401      	movs	r4, #1
 8004d60:	2300      	movs	r3, #0
 8004d62:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d6a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2312      	movs	r3, #18
 8004d72:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d74:	e7d9      	b.n	8004d2a <_dtoa_r+0x272>
 8004d76:	2301      	movs	r3, #1
 8004d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d7a:	e7f4      	b.n	8004d66 <_dtoa_r+0x2ae>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d82:	461a      	mov	r2, r3
 8004d84:	e7f5      	b.n	8004d72 <_dtoa_r+0x2ba>
 8004d86:	0052      	lsls	r2, r2, #1
 8004d88:	4631      	mov	r1, r6
 8004d8a:	e7d2      	b.n	8004d32 <_dtoa_r+0x27a>
 8004d8c:	f3af 8000 	nop.w
 8004d90:	636f4361 	.word	0x636f4361
 8004d94:	3fd287a7 	.word	0x3fd287a7
 8004d98:	8b60c8b3 	.word	0x8b60c8b3
 8004d9c:	3fc68a28 	.word	0x3fc68a28
 8004da0:	509f79fb 	.word	0x509f79fb
 8004da4:	3fd34413 	.word	0x3fd34413
 8004da8:	0800709d 	.word	0x0800709d
 8004dac:	080070b4 	.word	0x080070b4
 8004db0:	7ff00000 	.word	0x7ff00000
 8004db4:	08007099 	.word	0x08007099
 8004db8:	08007090 	.word	0x08007090
 8004dbc:	0800706d 	.word	0x0800706d
 8004dc0:	0800706c 	.word	0x0800706c
 8004dc4:	3ff80000 	.word	0x3ff80000
 8004dc8:	080071d8 	.word	0x080071d8
 8004dcc:	080070f6 	.word	0x080070f6
 8004dd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dd4:	9a00      	ldr	r2, [sp, #0]
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	2b0e      	cmp	r3, #14
 8004ddc:	f200 80a1 	bhi.w	8004f22 <_dtoa_r+0x46a>
 8004de0:	2c00      	cmp	r4, #0
 8004de2:	f000 809e 	beq.w	8004f22 <_dtoa_r+0x46a>
 8004de6:	f1b8 0f00 	cmp.w	r8, #0
 8004dea:	dd36      	ble.n	8004e5a <_dtoa_r+0x3a2>
 8004dec:	4b9e      	ldr	r3, [pc, #632]	@ (8005068 <_dtoa_r+0x5b0>)
 8004dee:	f008 020f 	and.w	r2, r8, #15
 8004df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df6:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004dfa:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004dfe:	ea4f 1528 	mov.w	r5, r8, asr #4
 8004e02:	d016      	beq.n	8004e32 <_dtoa_r+0x37a>
 8004e04:	4b99      	ldr	r3, [pc, #612]	@ (800506c <_dtoa_r+0x5b4>)
 8004e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e0e:	f7fb fd05 	bl	800081c <__aeabi_ddiv>
 8004e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e16:	f005 050f 	and.w	r5, r5, #15
 8004e1a:	2403      	movs	r4, #3
 8004e1c:	4e93      	ldr	r6, [pc, #588]	@ (800506c <_dtoa_r+0x5b4>)
 8004e1e:	b975      	cbnz	r5, 8004e3e <_dtoa_r+0x386>
 8004e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e24:	4652      	mov	r2, sl
 8004e26:	465b      	mov	r3, fp
 8004e28:	f7fb fcf8 	bl	800081c <__aeabi_ddiv>
 8004e2c:	4682      	mov	sl, r0
 8004e2e:	468b      	mov	fp, r1
 8004e30:	e02d      	b.n	8004e8e <_dtoa_r+0x3d6>
 8004e32:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e36:	2402      	movs	r4, #2
 8004e38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e3c:	e7ee      	b.n	8004e1c <_dtoa_r+0x364>
 8004e3e:	07e9      	lsls	r1, r5, #31
 8004e40:	d508      	bpl.n	8004e54 <_dtoa_r+0x39c>
 8004e42:	4650      	mov	r0, sl
 8004e44:	4659      	mov	r1, fp
 8004e46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e4a:	f7fb fbbd 	bl	80005c8 <__aeabi_dmul>
 8004e4e:	3401      	adds	r4, #1
 8004e50:	4682      	mov	sl, r0
 8004e52:	468b      	mov	fp, r1
 8004e54:	106d      	asrs	r5, r5, #1
 8004e56:	3608      	adds	r6, #8
 8004e58:	e7e1      	b.n	8004e1e <_dtoa_r+0x366>
 8004e5a:	f000 80ad 	beq.w	8004fb8 <_dtoa_r+0x500>
 8004e5e:	f1c8 0500 	rsb	r5, r8, #0
 8004e62:	4b81      	ldr	r3, [pc, #516]	@ (8005068 <_dtoa_r+0x5b0>)
 8004e64:	4e81      	ldr	r6, [pc, #516]	@ (800506c <_dtoa_r+0x5b4>)
 8004e66:	f005 020f 	and.w	r2, r5, #15
 8004e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e76:	f7fb fba7 	bl	80005c8 <__aeabi_dmul>
 8004e7a:	112d      	asrs	r5, r5, #4
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	468b      	mov	fp, r1
 8004e80:	2300      	movs	r3, #0
 8004e82:	2402      	movs	r4, #2
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	f040 808c 	bne.w	8004fa2 <_dtoa_r+0x4ea>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ce      	bne.n	8004e2c <_dtoa_r+0x374>
 8004e8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8095 	beq.w	8004fc0 <_dtoa_r+0x508>
 8004e96:	4b76      	ldr	r3, [pc, #472]	@ (8005070 <_dtoa_r+0x5b8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	f7fb fe05 	bl	8000aac <__aeabi_dcmplt>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f000 808c 	beq.w	8004fc0 <_dtoa_r+0x508>
 8004ea8:	9b04      	ldr	r3, [sp, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8088 	beq.w	8004fc0 <_dtoa_r+0x508>
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	dd35      	ble.n	8004f22 <_dtoa_r+0x46a>
 8004eb6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004eba:	9302      	str	r3, [sp, #8]
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8005074 <_dtoa_r+0x5bc>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f7fb fb80 	bl	80005c8 <__aeabi_dmul>
 8004ec8:	9e05      	ldr	r6, [sp, #20]
 8004eca:	4682      	mov	sl, r0
 8004ecc:	468b      	mov	fp, r1
 8004ece:	3401      	adds	r4, #1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7fb fb0f 	bl	80004f4 <__aeabi_i2d>
 8004ed6:	4652      	mov	r2, sl
 8004ed8:	465b      	mov	r3, fp
 8004eda:	f7fb fb75 	bl	80005c8 <__aeabi_dmul>
 8004ede:	4b66      	ldr	r3, [pc, #408]	@ (8005078 <_dtoa_r+0x5c0>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f7fb f9bb 	bl	800025c <__adddf3>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 8004eec:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	d169      	bne.n	8004fc8 <_dtoa_r+0x510>
 8004ef4:	4b61      	ldr	r3, [pc, #388]	@ (800507c <_dtoa_r+0x5c4>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4650      	mov	r0, sl
 8004efa:	4659      	mov	r1, fp
 8004efc:	f7fb f9ac 	bl	8000258 <__aeabi_dsub>
 8004f00:	4622      	mov	r2, r4
 8004f02:	462b      	mov	r3, r5
 8004f04:	4682      	mov	sl, r0
 8004f06:	468b      	mov	fp, r1
 8004f08:	f7fb fdee 	bl	8000ae8 <__aeabi_dcmpgt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f040 8294 	bne.w	800543a <_dtoa_r+0x982>
 8004f12:	4622      	mov	r2, r4
 8004f14:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8004f18:	4650      	mov	r0, sl
 8004f1a:	4659      	mov	r1, fp
 8004f1c:	f7fb fdc6 	bl	8000aac <__aeabi_dcmplt>
 8004f20:	bb20      	cbnz	r0, 8004f6c <_dtoa_r+0x4b4>
 8004f22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f2c0 8160 	blt.w	80051ea <_dtoa_r+0x732>
 8004f2a:	f1b8 0f0e 	cmp.w	r8, #14
 8004f2e:	f300 815c 	bgt.w	80051ea <_dtoa_r+0x732>
 8004f32:	4b4d      	ldr	r3, [pc, #308]	@ (8005068 <_dtoa_r+0x5b0>)
 8004f34:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f38:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004f3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f280 80ee 	bge.w	8005120 <_dtoa_r+0x668>
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f300 80ea 	bgt.w	8005120 <_dtoa_r+0x668>
 8004f4c:	d10e      	bne.n	8004f6c <_dtoa_r+0x4b4>
 8004f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800507c <_dtoa_r+0x5c4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	4650      	mov	r0, sl
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb fb37 	bl	80005c8 <__aeabi_dmul>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f62:	f7fb fdad 	bl	8000ac0 <__aeabi_dcmple>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f000 826a 	beq.w	8005440 <_dtoa_r+0x988>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	462c      	mov	r4, r5
 8004f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f72:	9e00      	ldr	r6, [sp, #0]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	9302      	str	r3, [sp, #8]
 8004f78:	4627      	mov	r7, r4
 8004f7a:	2400      	movs	r4, #0
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4648      	mov	r0, r9
 8004f80:	f000 fcc0 	bl	8005904 <_Bfree>
 8004f84:	2f00      	cmp	r7, #0
 8004f86:	f000 80c1 	beq.w	800510c <_dtoa_r+0x654>
 8004f8a:	b12c      	cbz	r4, 8004f98 <_dtoa_r+0x4e0>
 8004f8c:	42bc      	cmp	r4, r7
 8004f8e:	d003      	beq.n	8004f98 <_dtoa_r+0x4e0>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4648      	mov	r0, r9
 8004f94:	f000 fcb6 	bl	8005904 <_Bfree>
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4648      	mov	r0, r9
 8004f9c:	f000 fcb2 	bl	8005904 <_Bfree>
 8004fa0:	e0b4      	b.n	800510c <_dtoa_r+0x654>
 8004fa2:	07ea      	lsls	r2, r5, #31
 8004fa4:	d505      	bpl.n	8004fb2 <_dtoa_r+0x4fa>
 8004fa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004faa:	f7fb fb0d 	bl	80005c8 <__aeabi_dmul>
 8004fae:	3401      	adds	r4, #1
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	106d      	asrs	r5, r5, #1
 8004fb4:	3608      	adds	r6, #8
 8004fb6:	e765      	b.n	8004e84 <_dtoa_r+0x3cc>
 8004fb8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8004fbc:	2402      	movs	r4, #2
 8004fbe:	e766      	b.n	8004e8e <_dtoa_r+0x3d6>
 8004fc0:	9e04      	ldr	r6, [sp, #16]
 8004fc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8004fc6:	e783      	b.n	8004ed0 <_dtoa_r+0x418>
 8004fc8:	4b27      	ldr	r3, [pc, #156]	@ (8005068 <_dtoa_r+0x5b0>)
 8004fca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d055      	beq.n	8005084 <_dtoa_r+0x5cc>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	2000      	movs	r0, #0
 8004fde:	4928      	ldr	r1, [pc, #160]	@ (8005080 <_dtoa_r+0x5c8>)
 8004fe0:	f7fb fc1c 	bl	800081c <__aeabi_ddiv>
 8004fe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fe8:	f7fb f936 	bl	8000258 <__aeabi_dsub>
 8004fec:	9b00      	ldr	r3, [sp, #0]
 8004fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ff2:	199d      	adds	r5, r3, r6
 8004ff4:	461e      	mov	r6, r3
 8004ff6:	4659      	mov	r1, fp
 8004ff8:	4650      	mov	r0, sl
 8004ffa:	f7fb fd95 	bl	8000b28 <__aeabi_d2iz>
 8004ffe:	4604      	mov	r4, r0
 8005000:	f7fb fa78 	bl	80004f4 <__aeabi_i2d>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	f7fb f924 	bl	8000258 <__aeabi_dsub>
 8005010:	3430      	adds	r4, #48	@ 0x30
 8005012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005016:	f806 4b01 	strb.w	r4, [r6], #1
 800501a:	4682      	mov	sl, r0
 800501c:	468b      	mov	fp, r1
 800501e:	f7fb fd45 	bl	8000aac <__aeabi_dcmplt>
 8005022:	2800      	cmp	r0, #0
 8005024:	d172      	bne.n	800510c <_dtoa_r+0x654>
 8005026:	4652      	mov	r2, sl
 8005028:	465b      	mov	r3, fp
 800502a:	4911      	ldr	r1, [pc, #68]	@ (8005070 <_dtoa_r+0x5b8>)
 800502c:	2000      	movs	r0, #0
 800502e:	f7fb f913 	bl	8000258 <__aeabi_dsub>
 8005032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005036:	f7fb fd39 	bl	8000aac <__aeabi_dcmplt>
 800503a:	2800      	cmp	r0, #0
 800503c:	f040 80b6 	bne.w	80051ac <_dtoa_r+0x6f4>
 8005040:	42ae      	cmp	r6, r5
 8005042:	f43f af6e 	beq.w	8004f22 <_dtoa_r+0x46a>
 8005046:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800504a:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <_dtoa_r+0x5bc>)
 800504c:	2200      	movs	r2, #0
 800504e:	f7fb fabb 	bl	80005c8 <__aeabi_dmul>
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <_dtoa_r+0x5bc>)
 8005054:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005058:	2200      	movs	r2, #0
 800505a:	4650      	mov	r0, sl
 800505c:	4659      	mov	r1, fp
 800505e:	f7fb fab3 	bl	80005c8 <__aeabi_dmul>
 8005062:	4682      	mov	sl, r0
 8005064:	468b      	mov	fp, r1
 8005066:	e7c6      	b.n	8004ff6 <_dtoa_r+0x53e>
 8005068:	080071d8 	.word	0x080071d8
 800506c:	080071b0 	.word	0x080071b0
 8005070:	3ff00000 	.word	0x3ff00000
 8005074:	40240000 	.word	0x40240000
 8005078:	401c0000 	.word	0x401c0000
 800507c:	40140000 	.word	0x40140000
 8005080:	3fe00000 	.word	0x3fe00000
 8005084:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005088:	f7fb fa9e 	bl	80005c8 <__aeabi_dmul>
 800508c:	9b00      	ldr	r3, [sp, #0]
 800508e:	9d00      	ldr	r5, [sp, #0]
 8005090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005094:	4433      	add	r3, r6
 8005096:	9315      	str	r3, [sp, #84]	@ 0x54
 8005098:	4659      	mov	r1, fp
 800509a:	4650      	mov	r0, sl
 800509c:	f7fb fd44 	bl	8000b28 <__aeabi_d2iz>
 80050a0:	4604      	mov	r4, r0
 80050a2:	f7fb fa27 	bl	80004f4 <__aeabi_i2d>
 80050a6:	3430      	adds	r4, #48	@ 0x30
 80050a8:	460b      	mov	r3, r1
 80050aa:	4602      	mov	r2, r0
 80050ac:	4659      	mov	r1, fp
 80050ae:	4650      	mov	r0, sl
 80050b0:	f7fb f8d2 	bl	8000258 <__aeabi_dsub>
 80050b4:	f805 4b01 	strb.w	r4, [r5], #1
 80050b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050ba:	429d      	cmp	r5, r3
 80050bc:	4682      	mov	sl, r0
 80050be:	468b      	mov	fp, r1
 80050c0:	d127      	bne.n	8005112 <_dtoa_r+0x65a>
 80050c2:	9b00      	ldr	r3, [sp, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050ca:	441e      	add	r6, r3
 80050cc:	4bb3      	ldr	r3, [pc, #716]	@ (800539c <_dtoa_r+0x8e4>)
 80050ce:	f7fb f8c5 	bl	800025c <__adddf3>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4650      	mov	r0, sl
 80050d8:	4659      	mov	r1, fp
 80050da:	f7fb fd05 	bl	8000ae8 <__aeabi_dcmpgt>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d164      	bne.n	80051ac <_dtoa_r+0x6f4>
 80050e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050e6:	49ad      	ldr	r1, [pc, #692]	@ (800539c <_dtoa_r+0x8e4>)
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7fb f8b5 	bl	8000258 <__aeabi_dsub>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4650      	mov	r0, sl
 80050f4:	4659      	mov	r1, fp
 80050f6:	f7fb fcd9 	bl	8000aac <__aeabi_dcmplt>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	f43f af11 	beq.w	8004f22 <_dtoa_r+0x46a>
 8005100:	4633      	mov	r3, r6
 8005102:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005106:	2a30      	cmp	r2, #48	@ 0x30
 8005108:	d0fa      	beq.n	8005100 <_dtoa_r+0x648>
 800510a:	461e      	mov	r6, r3
 800510c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005110:	e03a      	b.n	8005188 <_dtoa_r+0x6d0>
 8005112:	4ba3      	ldr	r3, [pc, #652]	@ (80053a0 <_dtoa_r+0x8e8>)
 8005114:	2200      	movs	r2, #0
 8005116:	f7fb fa57 	bl	80005c8 <__aeabi_dmul>
 800511a:	4682      	mov	sl, r0
 800511c:	468b      	mov	fp, r1
 800511e:	e7bb      	b.n	8005098 <_dtoa_r+0x5e0>
 8005120:	9e00      	ldr	r6, [sp, #0]
 8005122:	4652      	mov	r2, sl
 8005124:	465b      	mov	r3, fp
 8005126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800512a:	f7fb fb77 	bl	800081c <__aeabi_ddiv>
 800512e:	f7fb fcfb 	bl	8000b28 <__aeabi_d2iz>
 8005132:	4607      	mov	r7, r0
 8005134:	f7fb f9de 	bl	80004f4 <__aeabi_i2d>
 8005138:	4652      	mov	r2, sl
 800513a:	465b      	mov	r3, fp
 800513c:	f7fb fa44 	bl	80005c8 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005148:	f7fb f886 	bl	8000258 <__aeabi_dsub>
 800514c:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8005150:	9c00      	ldr	r4, [sp, #0]
 8005152:	f806 cb01 	strb.w	ip, [r6], #1
 8005156:	eba6 0c04 	sub.w	ip, r6, r4
 800515a:	9c04      	ldr	r4, [sp, #16]
 800515c:	4564      	cmp	r4, ip
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	d133      	bne.n	80051cc <_dtoa_r+0x714>
 8005164:	f7fb f87a 	bl	800025c <__adddf3>
 8005168:	4652      	mov	r2, sl
 800516a:	465b      	mov	r3, fp
 800516c:	4604      	mov	r4, r0
 800516e:	460d      	mov	r5, r1
 8005170:	f7fb fcba 	bl	8000ae8 <__aeabi_dcmpgt>
 8005174:	b9c0      	cbnz	r0, 80051a8 <_dtoa_r+0x6f0>
 8005176:	4652      	mov	r2, sl
 8005178:	465b      	mov	r3, fp
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fb fc8b 	bl	8000a98 <__aeabi_dcmpeq>
 8005182:	b108      	cbz	r0, 8005188 <_dtoa_r+0x6d0>
 8005184:	07fb      	lsls	r3, r7, #31
 8005186:	d40f      	bmi.n	80051a8 <_dtoa_r+0x6f0>
 8005188:	9901      	ldr	r1, [sp, #4]
 800518a:	4648      	mov	r0, r9
 800518c:	f000 fbba 	bl	8005904 <_Bfree>
 8005190:	2300      	movs	r3, #0
 8005192:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005194:	7033      	strb	r3, [r6, #0]
 8005196:	f108 0301 	add.w	r3, r8, #1
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f43f acda 	beq.w	8004b58 <_dtoa_r+0xa0>
 80051a4:	601e      	str	r6, [r3, #0]
 80051a6:	e4d7      	b.n	8004b58 <_dtoa_r+0xa0>
 80051a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80051ac:	4633      	mov	r3, r6
 80051ae:	461e      	mov	r6, r3
 80051b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051b4:	2a39      	cmp	r2, #57	@ 0x39
 80051b6:	d106      	bne.n	80051c6 <_dtoa_r+0x70e>
 80051b8:	9a00      	ldr	r2, [sp, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d1f7      	bne.n	80051ae <_dtoa_r+0x6f6>
 80051be:	9a02      	ldr	r2, [sp, #8]
 80051c0:	3201      	adds	r2, #1
 80051c2:	9202      	str	r2, [sp, #8]
 80051c4:	2230      	movs	r2, #48	@ 0x30
 80051c6:	3201      	adds	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e79f      	b.n	800510c <_dtoa_r+0x654>
 80051cc:	4b74      	ldr	r3, [pc, #464]	@ (80053a0 <_dtoa_r+0x8e8>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	f7fb f9fa 	bl	80005c8 <__aeabi_dmul>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	f7fb fc5a 	bl	8000a98 <__aeabi_dcmpeq>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d09c      	beq.n	8005122 <_dtoa_r+0x66a>
 80051e8:	e7ce      	b.n	8005188 <_dtoa_r+0x6d0>
 80051ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	f000 80e3 	beq.w	80053b8 <_dtoa_r+0x900>
 80051f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	f300 80c2 	bgt.w	800537e <_dtoa_r+0x8c6>
 80051fa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	f000 80ba 	beq.w	8005376 <_dtoa_r+0x8be>
 8005202:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005206:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005208:	463e      	mov	r6, r7
 800520a:	9a08      	ldr	r2, [sp, #32]
 800520c:	2101      	movs	r1, #1
 800520e:	441a      	add	r2, r3
 8005210:	4648      	mov	r0, r9
 8005212:	441f      	add	r7, r3
 8005214:	9208      	str	r2, [sp, #32]
 8005216:	f000 fc29 	bl	8005a6c <__i2b>
 800521a:	4604      	mov	r4, r0
 800521c:	b156      	cbz	r6, 8005234 <_dtoa_r+0x77c>
 800521e:	9b08      	ldr	r3, [sp, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	dd07      	ble.n	8005234 <_dtoa_r+0x77c>
 8005224:	42b3      	cmp	r3, r6
 8005226:	9a08      	ldr	r2, [sp, #32]
 8005228:	bfa8      	it	ge
 800522a:	4633      	movge	r3, r6
 800522c:	1aff      	subs	r7, r7, r3
 800522e:	1af6      	subs	r6, r6, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	9308      	str	r3, [sp, #32]
 8005234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005236:	b30b      	cbz	r3, 800527c <_dtoa_r+0x7c4>
 8005238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80c3 	beq.w	80053c6 <_dtoa_r+0x90e>
 8005240:	2d00      	cmp	r5, #0
 8005242:	f000 80bd 	beq.w	80053c0 <_dtoa_r+0x908>
 8005246:	4621      	mov	r1, r4
 8005248:	462a      	mov	r2, r5
 800524a:	4648      	mov	r0, r9
 800524c:	f000 fcce 	bl	8005bec <__pow5mult>
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	4601      	mov	r1, r0
 8005254:	4604      	mov	r4, r0
 8005256:	4648      	mov	r0, r9
 8005258:	f000 fc1e 	bl	8005a98 <__multiply>
 800525c:	9901      	ldr	r1, [sp, #4]
 800525e:	4682      	mov	sl, r0
 8005260:	4648      	mov	r0, r9
 8005262:	f000 fb4f 	bl	8005904 <_Bfree>
 8005266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005268:	1b5b      	subs	r3, r3, r5
 800526a:	9309      	str	r3, [sp, #36]	@ 0x24
 800526c:	f000 80ae 	beq.w	80053cc <_dtoa_r+0x914>
 8005270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005272:	4651      	mov	r1, sl
 8005274:	4648      	mov	r0, r9
 8005276:	f000 fcb9 	bl	8005bec <__pow5mult>
 800527a:	9001      	str	r0, [sp, #4]
 800527c:	2101      	movs	r1, #1
 800527e:	4648      	mov	r0, r9
 8005280:	f000 fbf4 	bl	8005a6c <__i2b>
 8005284:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005286:	4605      	mov	r5, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 81d7 	beq.w	800563c <_dtoa_r+0xb84>
 800528e:	461a      	mov	r2, r3
 8005290:	4601      	mov	r1, r0
 8005292:	4648      	mov	r0, r9
 8005294:	f000 fcaa 	bl	8005bec <__pow5mult>
 8005298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800529a:	2b01      	cmp	r3, #1
 800529c:	4605      	mov	r5, r0
 800529e:	f300 809d 	bgt.w	80053dc <_dtoa_r+0x924>
 80052a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 8094 	bne.w	80053d2 <_dtoa_r+0x91a>
 80052aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 808e 	bne.w	80053d2 <_dtoa_r+0x91a>
 80052b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052bc:	0d1b      	lsrs	r3, r3, #20
 80052be:	051b      	lsls	r3, r3, #20
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8089 	beq.w	80053d8 <_dtoa_r+0x920>
 80052c6:	9b08      	ldr	r3, [sp, #32]
 80052c8:	3301      	adds	r3, #1
 80052ca:	3701      	adds	r7, #1
 80052cc:	9308      	str	r3, [sp, #32]
 80052ce:	f04f 0a01 	mov.w	sl, #1
 80052d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 81b7 	beq.w	8005648 <_dtoa_r+0xb90>
 80052da:	692b      	ldr	r3, [r5, #16]
 80052dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80052e0:	6918      	ldr	r0, [r3, #16]
 80052e2:	f000 fb77 	bl	80059d4 <__hi0bits>
 80052e6:	f1c0 0020 	rsb	r0, r0, #32
 80052ea:	9b08      	ldr	r3, [sp, #32]
 80052ec:	4418      	add	r0, r3
 80052ee:	f010 001f 	ands.w	r0, r0, #31
 80052f2:	d07e      	beq.n	80053f2 <_dtoa_r+0x93a>
 80052f4:	f1c0 0320 	rsb	r3, r0, #32
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	dd72      	ble.n	80053e2 <_dtoa_r+0x92a>
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	f1c0 001c 	rsb	r0, r0, #28
 8005302:	4403      	add	r3, r0
 8005304:	4407      	add	r7, r0
 8005306:	4406      	add	r6, r0
 8005308:	9308      	str	r3, [sp, #32]
 800530a:	2f00      	cmp	r7, #0
 800530c:	dd05      	ble.n	800531a <_dtoa_r+0x862>
 800530e:	9901      	ldr	r1, [sp, #4]
 8005310:	463a      	mov	r2, r7
 8005312:	4648      	mov	r0, r9
 8005314:	f000 fcc6 	bl	8005ca4 <__lshift>
 8005318:	9001      	str	r0, [sp, #4]
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd05      	ble.n	800532c <_dtoa_r+0x874>
 8005320:	4629      	mov	r1, r5
 8005322:	461a      	mov	r2, r3
 8005324:	4648      	mov	r0, r9
 8005326:	f000 fcbd 	bl	8005ca4 <__lshift>
 800532a:	4605      	mov	r5, r0
 800532c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800532e:	2b00      	cmp	r3, #0
 8005330:	d061      	beq.n	80053f6 <_dtoa_r+0x93e>
 8005332:	9801      	ldr	r0, [sp, #4]
 8005334:	4629      	mov	r1, r5
 8005336:	f000 fd23 	bl	8005d80 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	da5b      	bge.n	80053f6 <_dtoa_r+0x93e>
 800533e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005342:	9302      	str	r3, [sp, #8]
 8005344:	9901      	ldr	r1, [sp, #4]
 8005346:	2300      	movs	r3, #0
 8005348:	220a      	movs	r2, #10
 800534a:	4648      	mov	r0, r9
 800534c:	f000 fafc 	bl	8005948 <__multadd>
 8005350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005352:	9001      	str	r0, [sp, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8179 	beq.w	800564c <_dtoa_r+0xb94>
 800535a:	2300      	movs	r3, #0
 800535c:	4621      	mov	r1, r4
 800535e:	220a      	movs	r2, #10
 8005360:	4648      	mov	r0, r9
 8005362:	f000 faf1 	bl	8005948 <__multadd>
 8005366:	9b05      	ldr	r3, [sp, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	dc72      	bgt.n	8005454 <_dtoa_r+0x99c>
 800536e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005370:	2b02      	cmp	r3, #2
 8005372:	dc49      	bgt.n	8005408 <_dtoa_r+0x950>
 8005374:	e06e      	b.n	8005454 <_dtoa_r+0x99c>
 8005376:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005378:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800537c:	e743      	b.n	8005206 <_dtoa_r+0x74e>
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	1e5d      	subs	r5, r3, #1
 8005382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005384:	42ab      	cmp	r3, r5
 8005386:	db0d      	blt.n	80053a4 <_dtoa_r+0x8ec>
 8005388:	1b5d      	subs	r5, r3, r5
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f6bf af3b 	bge.w	8005208 <_dtoa_r+0x750>
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	1afe      	subs	r6, r7, r3
 8005396:	2300      	movs	r3, #0
 8005398:	e737      	b.n	800520a <_dtoa_r+0x752>
 800539a:	bf00      	nop
 800539c:	3fe00000 	.word	0x3fe00000
 80053a0:	40240000 	.word	0x40240000
 80053a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053a8:	9509      	str	r5, [sp, #36]	@ 0x24
 80053aa:	1aeb      	subs	r3, r5, r3
 80053ac:	441a      	add	r2, r3
 80053ae:	920d      	str	r2, [sp, #52]	@ 0x34
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	463e      	mov	r6, r7
 80053b4:	2500      	movs	r5, #0
 80053b6:	e728      	b.n	800520a <_dtoa_r+0x752>
 80053b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80053ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053bc:	463e      	mov	r6, r7
 80053be:	e72d      	b.n	800521c <_dtoa_r+0x764>
 80053c0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80053c4:	e754      	b.n	8005270 <_dtoa_r+0x7b8>
 80053c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053c8:	9901      	ldr	r1, [sp, #4]
 80053ca:	e753      	b.n	8005274 <_dtoa_r+0x7bc>
 80053cc:	f8cd a004 	str.w	sl, [sp, #4]
 80053d0:	e754      	b.n	800527c <_dtoa_r+0x7c4>
 80053d2:	f04f 0a00 	mov.w	sl, #0
 80053d6:	e77c      	b.n	80052d2 <_dtoa_r+0x81a>
 80053d8:	469a      	mov	sl, r3
 80053da:	e77a      	b.n	80052d2 <_dtoa_r+0x81a>
 80053dc:	f04f 0a00 	mov.w	sl, #0
 80053e0:	e77b      	b.n	80052da <_dtoa_r+0x822>
 80053e2:	d092      	beq.n	800530a <_dtoa_r+0x852>
 80053e4:	9a08      	ldr	r2, [sp, #32]
 80053e6:	331c      	adds	r3, #28
 80053e8:	441a      	add	r2, r3
 80053ea:	441f      	add	r7, r3
 80053ec:	441e      	add	r6, r3
 80053ee:	9208      	str	r2, [sp, #32]
 80053f0:	e78b      	b.n	800530a <_dtoa_r+0x852>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e7f6      	b.n	80053e4 <_dtoa_r+0x92c>
 80053f6:	9b04      	ldr	r3, [sp, #16]
 80053f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dc23      	bgt.n	8005448 <_dtoa_r+0x990>
 8005400:	9305      	str	r3, [sp, #20]
 8005402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005404:	2b02      	cmp	r3, #2
 8005406:	dd21      	ble.n	800544c <_dtoa_r+0x994>
 8005408:	9b05      	ldr	r3, [sp, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f47f adb0 	bne.w	8004f70 <_dtoa_r+0x4b8>
 8005410:	4629      	mov	r1, r5
 8005412:	2205      	movs	r2, #5
 8005414:	4648      	mov	r0, r9
 8005416:	f000 fa97 	bl	8005948 <__multadd>
 800541a:	4601      	mov	r1, r0
 800541c:	4605      	mov	r5, r0
 800541e:	9801      	ldr	r0, [sp, #4]
 8005420:	f000 fcae 	bl	8005d80 <__mcmp>
 8005424:	2800      	cmp	r0, #0
 8005426:	f77f ada3 	ble.w	8004f70 <_dtoa_r+0x4b8>
 800542a:	9e00      	ldr	r6, [sp, #0]
 800542c:	2331      	movs	r3, #49	@ 0x31
 800542e:	f806 3b01 	strb.w	r3, [r6], #1
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	3301      	adds	r3, #1
 8005436:	9302      	str	r3, [sp, #8]
 8005438:	e59e      	b.n	8004f78 <_dtoa_r+0x4c0>
 800543a:	4635      	mov	r5, r6
 800543c:	462c      	mov	r4, r5
 800543e:	e7f4      	b.n	800542a <_dtoa_r+0x972>
 8005440:	9d04      	ldr	r5, [sp, #16]
 8005442:	f8cd 8008 	str.w	r8, [sp, #8]
 8005446:	e7f9      	b.n	800543c <_dtoa_r+0x984>
 8005448:	9b04      	ldr	r3, [sp, #16]
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8100 	beq.w	8005654 <_dtoa_r+0xb9c>
 8005454:	2e00      	cmp	r6, #0
 8005456:	dd05      	ble.n	8005464 <_dtoa_r+0x9ac>
 8005458:	4621      	mov	r1, r4
 800545a:	4632      	mov	r2, r6
 800545c:	4648      	mov	r0, r9
 800545e:	f000 fc21 	bl	8005ca4 <__lshift>
 8005462:	4604      	mov	r4, r0
 8005464:	f1ba 0f00 	cmp.w	sl, #0
 8005468:	d05a      	beq.n	8005520 <_dtoa_r+0xa68>
 800546a:	6861      	ldr	r1, [r4, #4]
 800546c:	4648      	mov	r0, r9
 800546e:	f000 fa0b 	bl	8005888 <_Balloc>
 8005472:	4606      	mov	r6, r0
 8005474:	b928      	cbnz	r0, 8005482 <_dtoa_r+0x9ca>
 8005476:	4b82      	ldr	r3, [pc, #520]	@ (8005680 <_dtoa_r+0xbc8>)
 8005478:	4602      	mov	r2, r0
 800547a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800547e:	f7ff bb32 	b.w	8004ae6 <_dtoa_r+0x2e>
 8005482:	6922      	ldr	r2, [r4, #16]
 8005484:	3202      	adds	r2, #2
 8005486:	0092      	lsls	r2, r2, #2
 8005488:	f104 010c 	add.w	r1, r4, #12
 800548c:	300c      	adds	r0, #12
 800548e:	f000 ffb3 	bl	80063f8 <memcpy>
 8005492:	2201      	movs	r2, #1
 8005494:	4631      	mov	r1, r6
 8005496:	4648      	mov	r0, r9
 8005498:	f000 fc04 	bl	8005ca4 <__lshift>
 800549c:	4607      	mov	r7, r0
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	9a00      	ldr	r2, [sp, #0]
 80054a2:	f103 0b01 	add.w	fp, r3, #1
 80054a6:	9b05      	ldr	r3, [sp, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	9306      	str	r3, [sp, #24]
 80054ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	9308      	str	r3, [sp, #32]
 80054b4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80054b8:	4629      	mov	r1, r5
 80054ba:	9801      	ldr	r0, [sp, #4]
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	f7ff fa72 	bl	80049a6 <quorem>
 80054c2:	4621      	mov	r1, r4
 80054c4:	9005      	str	r0, [sp, #20]
 80054c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80054ca:	9801      	ldr	r0, [sp, #4]
 80054cc:	f000 fc58 	bl	8005d80 <__mcmp>
 80054d0:	463a      	mov	r2, r7
 80054d2:	4680      	mov	r8, r0
 80054d4:	4629      	mov	r1, r5
 80054d6:	4648      	mov	r0, r9
 80054d8:	f000 fc6e 	bl	8005db8 <__mdiff>
 80054dc:	68c2      	ldr	r2, [r0, #12]
 80054de:	4606      	mov	r6, r0
 80054e0:	bb02      	cbnz	r2, 8005524 <_dtoa_r+0xa6c>
 80054e2:	4601      	mov	r1, r0
 80054e4:	9801      	ldr	r0, [sp, #4]
 80054e6:	f000 fc4b 	bl	8005d80 <__mcmp>
 80054ea:	4602      	mov	r2, r0
 80054ec:	4631      	mov	r1, r6
 80054ee:	4648      	mov	r0, r9
 80054f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80054f2:	f000 fa07 	bl	8005904 <_Bfree>
 80054f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
 80054fe:	9b08      	ldr	r3, [sp, #32]
 8005500:	4319      	orrs	r1, r3
 8005502:	465e      	mov	r6, fp
 8005504:	d110      	bne.n	8005528 <_dtoa_r+0xa70>
 8005506:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800550a:	d02b      	beq.n	8005564 <_dtoa_r+0xaac>
 800550c:	f1b8 0f00 	cmp.w	r8, #0
 8005510:	dd02      	ble.n	8005518 <_dtoa_r+0xa60>
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	f883 a000 	strb.w	sl, [r3]
 800551e:	e52d      	b.n	8004f7c <_dtoa_r+0x4c4>
 8005520:	4627      	mov	r7, r4
 8005522:	e7bc      	b.n	800549e <_dtoa_r+0x9e6>
 8005524:	2201      	movs	r2, #1
 8005526:	e7e1      	b.n	80054ec <_dtoa_r+0xa34>
 8005528:	f1b8 0f00 	cmp.w	r8, #0
 800552c:	db06      	blt.n	800553c <_dtoa_r+0xa84>
 800552e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005530:	ea48 0803 	orr.w	r8, r8, r3
 8005534:	9b08      	ldr	r3, [sp, #32]
 8005536:	ea58 0803 	orrs.w	r8, r8, r3
 800553a:	d120      	bne.n	800557e <_dtoa_r+0xac6>
 800553c:	2a00      	cmp	r2, #0
 800553e:	ddeb      	ble.n	8005518 <_dtoa_r+0xa60>
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	4648      	mov	r0, r9
 8005546:	f000 fbad 	bl	8005ca4 <__lshift>
 800554a:	4629      	mov	r1, r5
 800554c:	9001      	str	r0, [sp, #4]
 800554e:	f000 fc17 	bl	8005d80 <__mcmp>
 8005552:	2800      	cmp	r0, #0
 8005554:	dc03      	bgt.n	800555e <_dtoa_r+0xaa6>
 8005556:	d1df      	bne.n	8005518 <_dtoa_r+0xa60>
 8005558:	f01a 0f01 	tst.w	sl, #1
 800555c:	d0dc      	beq.n	8005518 <_dtoa_r+0xa60>
 800555e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005562:	d1d6      	bne.n	8005512 <_dtoa_r+0xa5a>
 8005564:	9a04      	ldr	r2, [sp, #16]
 8005566:	2339      	movs	r3, #57	@ 0x39
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	4633      	mov	r3, r6
 800556c:	461e      	mov	r6, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005574:	2a39      	cmp	r2, #57	@ 0x39
 8005576:	d052      	beq.n	800561e <_dtoa_r+0xb66>
 8005578:	3201      	adds	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e4fe      	b.n	8004f7c <_dtoa_r+0x4c4>
 800557e:	2a00      	cmp	r2, #0
 8005580:	dd07      	ble.n	8005592 <_dtoa_r+0xada>
 8005582:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005586:	d0ed      	beq.n	8005564 <_dtoa_r+0xaac>
 8005588:	9a04      	ldr	r2, [sp, #16]
 800558a:	f10a 0301 	add.w	r3, sl, #1
 800558e:	7013      	strb	r3, [r2, #0]
 8005590:	e4f4      	b.n	8004f7c <_dtoa_r+0x4c4>
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	f80b ac01 	strb.w	sl, [fp, #-1]
 8005598:	455b      	cmp	r3, fp
 800559a:	d02a      	beq.n	80055f2 <_dtoa_r+0xb3a>
 800559c:	9901      	ldr	r1, [sp, #4]
 800559e:	2300      	movs	r3, #0
 80055a0:	220a      	movs	r2, #10
 80055a2:	4648      	mov	r0, r9
 80055a4:	f000 f9d0 	bl	8005948 <__multadd>
 80055a8:	42bc      	cmp	r4, r7
 80055aa:	9001      	str	r0, [sp, #4]
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	f04f 020a 	mov.w	r2, #10
 80055b4:	4621      	mov	r1, r4
 80055b6:	4648      	mov	r0, r9
 80055b8:	d106      	bne.n	80055c8 <_dtoa_r+0xb10>
 80055ba:	f000 f9c5 	bl	8005948 <__multadd>
 80055be:	4604      	mov	r4, r0
 80055c0:	4607      	mov	r7, r0
 80055c2:	f10b 0b01 	add.w	fp, fp, #1
 80055c6:	e775      	b.n	80054b4 <_dtoa_r+0x9fc>
 80055c8:	f000 f9be 	bl	8005948 <__multadd>
 80055cc:	4639      	mov	r1, r7
 80055ce:	4604      	mov	r4, r0
 80055d0:	2300      	movs	r3, #0
 80055d2:	220a      	movs	r2, #10
 80055d4:	4648      	mov	r0, r9
 80055d6:	f000 f9b7 	bl	8005948 <__multadd>
 80055da:	4607      	mov	r7, r0
 80055dc:	e7f1      	b.n	80055c2 <_dtoa_r+0xb0a>
 80055de:	9b05      	ldr	r3, [sp, #20]
 80055e0:	1e5e      	subs	r6, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	9b00      	ldr	r3, [sp, #0]
 80055e6:	bfd8      	it	le
 80055e8:	2600      	movle	r6, #0
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	4627      	mov	r7, r4
 80055ee:	4416      	add	r6, r2
 80055f0:	2400      	movs	r4, #0
 80055f2:	9901      	ldr	r1, [sp, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4648      	mov	r0, r9
 80055f8:	f000 fb54 	bl	8005ca4 <__lshift>
 80055fc:	4629      	mov	r1, r5
 80055fe:	9001      	str	r0, [sp, #4]
 8005600:	f000 fbbe 	bl	8005d80 <__mcmp>
 8005604:	2800      	cmp	r0, #0
 8005606:	dcb0      	bgt.n	800556a <_dtoa_r+0xab2>
 8005608:	d102      	bne.n	8005610 <_dtoa_r+0xb58>
 800560a:	f01a 0f01 	tst.w	sl, #1
 800560e:	d1ac      	bne.n	800556a <_dtoa_r+0xab2>
 8005610:	4633      	mov	r3, r6
 8005612:	461e      	mov	r6, r3
 8005614:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005618:	2a30      	cmp	r2, #48	@ 0x30
 800561a:	d0fa      	beq.n	8005612 <_dtoa_r+0xb5a>
 800561c:	e4ae      	b.n	8004f7c <_dtoa_r+0x4c4>
 800561e:	9a00      	ldr	r2, [sp, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d1a3      	bne.n	800556c <_dtoa_r+0xab4>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	3301      	adds	r3, #1
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	2331      	movs	r3, #49	@ 0x31
 800562c:	e7af      	b.n	800558e <_dtoa_r+0xad6>
 800562e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f aa8c 	bne.w	8004b4e <_dtoa_r+0x96>
 8005636:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <_dtoa_r+0xbcc>)
 8005638:	f7ff baab 	b.w	8004b92 <_dtoa_r+0xda>
 800563c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800563e:	2b01      	cmp	r3, #1
 8005640:	f77f ae2f 	ble.w	80052a2 <_dtoa_r+0x7ea>
 8005644:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005648:	2001      	movs	r0, #1
 800564a:	e64e      	b.n	80052ea <_dtoa_r+0x832>
 800564c:	9b05      	ldr	r3, [sp, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f77f aed7 	ble.w	8005402 <_dtoa_r+0x94a>
 8005654:	9e00      	ldr	r6, [sp, #0]
 8005656:	9801      	ldr	r0, [sp, #4]
 8005658:	4629      	mov	r1, r5
 800565a:	f7ff f9a4 	bl	80049a6 <quorem>
 800565e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005662:	9b00      	ldr	r3, [sp, #0]
 8005664:	f806 ab01 	strb.w	sl, [r6], #1
 8005668:	1af2      	subs	r2, r6, r3
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	4293      	cmp	r3, r2
 800566e:	ddb6      	ble.n	80055de <_dtoa_r+0xb26>
 8005670:	9901      	ldr	r1, [sp, #4]
 8005672:	2300      	movs	r3, #0
 8005674:	220a      	movs	r2, #10
 8005676:	4648      	mov	r0, r9
 8005678:	f000 f966 	bl	8005948 <__multadd>
 800567c:	9001      	str	r0, [sp, #4]
 800567e:	e7ea      	b.n	8005656 <_dtoa_r+0xb9e>
 8005680:	080070f6 	.word	0x080070f6
 8005684:	08007090 	.word	0x08007090

08005688 <_free_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4605      	mov	r5, r0
 800568c:	2900      	cmp	r1, #0
 800568e:	d041      	beq.n	8005714 <_free_r+0x8c>
 8005690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005694:	1f0c      	subs	r4, r1, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfb8      	it	lt
 800569a:	18e4      	addlt	r4, r4, r3
 800569c:	f000 f8e8 	bl	8005870 <__malloc_lock>
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <_free_r+0x90>)
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	b933      	cbnz	r3, 80056b4 <_free_r+0x2c>
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6014      	str	r4, [r2, #0]
 80056aa:	4628      	mov	r0, r5
 80056ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b0:	f000 b8e4 	b.w	800587c <__malloc_unlock>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d908      	bls.n	80056ca <_free_r+0x42>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	1821      	adds	r1, r4, r0
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1809      	addeq	r1, r1, r0
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	e7ed      	b.n	80056a6 <_free_r+0x1e>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x4c>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x42>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1850      	adds	r0, r2, r1
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x6c>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	4401      	add	r1, r0
 80056e0:	1850      	adds	r0, r2, r1
 80056e2:	4283      	cmp	r3, r0
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1e0      	bne.n	80056aa <_free_r+0x22>
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	4408      	add	r0, r1
 80056f0:	6010      	str	r0, [r2, #0]
 80056f2:	e7da      	b.n	80056aa <_free_r+0x22>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x74>
 80056f6:	230c      	movs	r3, #12
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	e7d6      	b.n	80056aa <_free_r+0x22>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	1821      	adds	r1, r4, r0
 8005700:	428b      	cmp	r3, r1
 8005702:	bf04      	itt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6054      	str	r4, [r2, #4]
 8005712:	e7ca      	b.n	80056aa <_free_r+0x22>
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	bf00      	nop
 8005718:	20000448 	.word	0x20000448

0800571c <malloc>:
 800571c:	4b02      	ldr	r3, [pc, #8]	@ (8005728 <malloc+0xc>)
 800571e:	4601      	mov	r1, r0
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	f000 b825 	b.w	8005770 <_malloc_r>
 8005726:	bf00      	nop
 8005728:	20000018 	.word	0x20000018

0800572c <sbrk_aligned>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4e0f      	ldr	r6, [pc, #60]	@ (800576c <sbrk_aligned+0x40>)
 8005730:	460c      	mov	r4, r1
 8005732:	6831      	ldr	r1, [r6, #0]
 8005734:	4605      	mov	r5, r0
 8005736:	b911      	cbnz	r1, 800573e <sbrk_aligned+0x12>
 8005738:	f000 fe4e 	bl	80063d8 <_sbrk_r>
 800573c:	6030      	str	r0, [r6, #0]
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 fe49 	bl	80063d8 <_sbrk_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d103      	bne.n	8005752 <sbrk_aligned+0x26>
 800574a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800574e:	4620      	mov	r0, r4
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	1cc4      	adds	r4, r0, #3
 8005754:	f024 0403 	bic.w	r4, r4, #3
 8005758:	42a0      	cmp	r0, r4
 800575a:	d0f8      	beq.n	800574e <sbrk_aligned+0x22>
 800575c:	1a21      	subs	r1, r4, r0
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fe3a 	bl	80063d8 <_sbrk_r>
 8005764:	3001      	adds	r0, #1
 8005766:	d1f2      	bne.n	800574e <sbrk_aligned+0x22>
 8005768:	e7ef      	b.n	800574a <sbrk_aligned+0x1e>
 800576a:	bf00      	nop
 800576c:	20000444 	.word	0x20000444

08005770 <_malloc_r>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	1ccd      	adds	r5, r1, #3
 8005776:	f025 0503 	bic.w	r5, r5, #3
 800577a:	3508      	adds	r5, #8
 800577c:	2d0c      	cmp	r5, #12
 800577e:	bf38      	it	cc
 8005780:	250c      	movcc	r5, #12
 8005782:	2d00      	cmp	r5, #0
 8005784:	4606      	mov	r6, r0
 8005786:	db01      	blt.n	800578c <_malloc_r+0x1c>
 8005788:	42a9      	cmp	r1, r5
 800578a:	d904      	bls.n	8005796 <_malloc_r+0x26>
 800578c:	230c      	movs	r3, #12
 800578e:	6033      	str	r3, [r6, #0]
 8005790:	2000      	movs	r0, #0
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800586c <_malloc_r+0xfc>
 800579a:	f000 f869 	bl	8005870 <__malloc_lock>
 800579e:	f8d8 3000 	ldr.w	r3, [r8]
 80057a2:	461c      	mov	r4, r3
 80057a4:	bb44      	cbnz	r4, 80057f8 <_malloc_r+0x88>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff ffbf 	bl	800572c <sbrk_aligned>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	4604      	mov	r4, r0
 80057b2:	d158      	bne.n	8005866 <_malloc_r+0xf6>
 80057b4:	f8d8 4000 	ldr.w	r4, [r8]
 80057b8:	4627      	mov	r7, r4
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	d143      	bne.n	8005846 <_malloc_r+0xd6>
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d04b      	beq.n	800585a <_malloc_r+0xea>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	4639      	mov	r1, r7
 80057c6:	4630      	mov	r0, r6
 80057c8:	eb04 0903 	add.w	r9, r4, r3
 80057cc:	f000 fe04 	bl	80063d8 <_sbrk_r>
 80057d0:	4581      	cmp	r9, r0
 80057d2:	d142      	bne.n	800585a <_malloc_r+0xea>
 80057d4:	6821      	ldr	r1, [r4, #0]
 80057d6:	1a6d      	subs	r5, r5, r1
 80057d8:	4629      	mov	r1, r5
 80057da:	4630      	mov	r0, r6
 80057dc:	f7ff ffa6 	bl	800572c <sbrk_aligned>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d03a      	beq.n	800585a <_malloc_r+0xea>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	442b      	add	r3, r5
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	f8d8 3000 	ldr.w	r3, [r8]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	bb62      	cbnz	r2, 800584c <_malloc_r+0xdc>
 80057f2:	f8c8 7000 	str.w	r7, [r8]
 80057f6:	e00f      	b.n	8005818 <_malloc_r+0xa8>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	1b52      	subs	r2, r2, r5
 80057fc:	d420      	bmi.n	8005840 <_malloc_r+0xd0>
 80057fe:	2a0b      	cmp	r2, #11
 8005800:	d917      	bls.n	8005832 <_malloc_r+0xc2>
 8005802:	1961      	adds	r1, r4, r5
 8005804:	42a3      	cmp	r3, r4
 8005806:	6025      	str	r5, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	6059      	strne	r1, [r3, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	bf08      	it	eq
 8005810:	f8c8 1000 	streq.w	r1, [r8]
 8005814:	5162      	str	r2, [r4, r5]
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	4630      	mov	r0, r6
 800581a:	f000 f82f 	bl	800587c <__malloc_unlock>
 800581e:	f104 000b 	add.w	r0, r4, #11
 8005822:	1d23      	adds	r3, r4, #4
 8005824:	f020 0007 	bic.w	r0, r0, #7
 8005828:	1ac2      	subs	r2, r0, r3
 800582a:	bf1c      	itt	ne
 800582c:	1a1b      	subne	r3, r3, r0
 800582e:	50a3      	strne	r3, [r4, r2]
 8005830:	e7af      	b.n	8005792 <_malloc_r+0x22>
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	42a3      	cmp	r3, r4
 8005836:	bf0c      	ite	eq
 8005838:	f8c8 2000 	streq.w	r2, [r8]
 800583c:	605a      	strne	r2, [r3, #4]
 800583e:	e7eb      	b.n	8005818 <_malloc_r+0xa8>
 8005840:	4623      	mov	r3, r4
 8005842:	6864      	ldr	r4, [r4, #4]
 8005844:	e7ae      	b.n	80057a4 <_malloc_r+0x34>
 8005846:	463c      	mov	r4, r7
 8005848:	687f      	ldr	r7, [r7, #4]
 800584a:	e7b6      	b.n	80057ba <_malloc_r+0x4a>
 800584c:	461a      	mov	r2, r3
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	42a3      	cmp	r3, r4
 8005852:	d1fb      	bne.n	800584c <_malloc_r+0xdc>
 8005854:	2300      	movs	r3, #0
 8005856:	6053      	str	r3, [r2, #4]
 8005858:	e7de      	b.n	8005818 <_malloc_r+0xa8>
 800585a:	230c      	movs	r3, #12
 800585c:	6033      	str	r3, [r6, #0]
 800585e:	4630      	mov	r0, r6
 8005860:	f000 f80c 	bl	800587c <__malloc_unlock>
 8005864:	e794      	b.n	8005790 <_malloc_r+0x20>
 8005866:	6005      	str	r5, [r0, #0]
 8005868:	e7d6      	b.n	8005818 <_malloc_r+0xa8>
 800586a:	bf00      	nop
 800586c:	20000448 	.word	0x20000448

08005870 <__malloc_lock>:
 8005870:	4801      	ldr	r0, [pc, #4]	@ (8005878 <__malloc_lock+0x8>)
 8005872:	f7ff b896 	b.w	80049a2 <__retarget_lock_acquire_recursive>
 8005876:	bf00      	nop
 8005878:	20000440 	.word	0x20000440

0800587c <__malloc_unlock>:
 800587c:	4801      	ldr	r0, [pc, #4]	@ (8005884 <__malloc_unlock+0x8>)
 800587e:	f7ff b891 	b.w	80049a4 <__retarget_lock_release_recursive>
 8005882:	bf00      	nop
 8005884:	20000440 	.word	0x20000440

08005888 <_Balloc>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	69c4      	ldr	r4, [r0, #28]
 800588c:	4605      	mov	r5, r0
 800588e:	460e      	mov	r6, r1
 8005890:	b984      	cbnz	r4, 80058b4 <_Balloc+0x2c>
 8005892:	2010      	movs	r0, #16
 8005894:	f7ff ff42 	bl	800571c <malloc>
 8005898:	4604      	mov	r4, r0
 800589a:	61e8      	str	r0, [r5, #28]
 800589c:	b928      	cbnz	r0, 80058aa <_Balloc+0x22>
 800589e:	4602      	mov	r2, r0
 80058a0:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <_Balloc+0x74>)
 80058a2:	4817      	ldr	r0, [pc, #92]	@ (8005900 <_Balloc+0x78>)
 80058a4:	216b      	movs	r1, #107	@ 0x6b
 80058a6:	f000 fdb5 	bl	8006414 <__assert_func>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	60c3      	str	r3, [r0, #12]
 80058b4:	68e3      	ldr	r3, [r4, #12]
 80058b6:	b953      	cbnz	r3, 80058ce <_Balloc+0x46>
 80058b8:	2221      	movs	r2, #33	@ 0x21
 80058ba:	2104      	movs	r1, #4
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 fdc7 	bl	8006450 <_calloc_r>
 80058c2:	69eb      	ldr	r3, [r5, #28]
 80058c4:	60e0      	str	r0, [r4, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	b90b      	cbnz	r3, 80058ce <_Balloc+0x46>
 80058ca:	2000      	movs	r0, #0
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058d2:	b130      	cbz	r0, 80058e2 <_Balloc+0x5a>
 80058d4:	6802      	ldr	r2, [r0, #0]
 80058d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80058da:	2300      	movs	r3, #0
 80058dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058e0:	e7f4      	b.n	80058cc <_Balloc+0x44>
 80058e2:	2101      	movs	r1, #1
 80058e4:	fa01 f406 	lsl.w	r4, r1, r6
 80058e8:	1d62      	adds	r2, r4, #5
 80058ea:	0092      	lsls	r2, r2, #2
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fdaf 	bl	8006450 <_calloc_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d0e9      	beq.n	80058ca <_Balloc+0x42>
 80058f6:	e9c0 6401 	strd	r6, r4, [r0, #4]
 80058fa:	e7ee      	b.n	80058da <_Balloc+0x52>
 80058fc:	0800709d 	.word	0x0800709d
 8005900:	08007107 	.word	0x08007107

08005904 <_Bfree>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	69c6      	ldr	r6, [r0, #28]
 8005908:	4605      	mov	r5, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b976      	cbnz	r6, 800592c <_Bfree+0x28>
 800590e:	2010      	movs	r0, #16
 8005910:	f7ff ff04 	bl	800571c <malloc>
 8005914:	4602      	mov	r2, r0
 8005916:	61e8      	str	r0, [r5, #28]
 8005918:	b920      	cbnz	r0, 8005924 <_Bfree+0x20>
 800591a:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <_Bfree+0x3c>)
 800591c:	4809      	ldr	r0, [pc, #36]	@ (8005944 <_Bfree+0x40>)
 800591e:	218f      	movs	r1, #143	@ 0x8f
 8005920:	f000 fd78 	bl	8006414 <__assert_func>
 8005924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005928:	6006      	str	r6, [r0, #0]
 800592a:	60c6      	str	r6, [r0, #12]
 800592c:	b13c      	cbz	r4, 800593e <_Bfree+0x3a>
 800592e:	69eb      	ldr	r3, [r5, #28]
 8005930:	6862      	ldr	r2, [r4, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005938:	6021      	str	r1, [r4, #0]
 800593a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	0800709d 	.word	0x0800709d
 8005944:	08007107 	.word	0x08007107

08005948 <__multadd>:
 8005948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	690d      	ldr	r5, [r1, #16]
 800594e:	4607      	mov	r7, r0
 8005950:	460c      	mov	r4, r1
 8005952:	461e      	mov	r6, r3
 8005954:	f101 0c14 	add.w	ip, r1, #20
 8005958:	2000      	movs	r0, #0
 800595a:	f8dc 3000 	ldr.w	r3, [ip]
 800595e:	b299      	uxth	r1, r3
 8005960:	fb02 6101 	mla	r1, r2, r1, r6
 8005964:	0c1e      	lsrs	r6, r3, #16
 8005966:	0c0b      	lsrs	r3, r1, #16
 8005968:	fb02 3306 	mla	r3, r2, r6, r3
 800596c:	b289      	uxth	r1, r1
 800596e:	3001      	adds	r0, #1
 8005970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005974:	4285      	cmp	r5, r0
 8005976:	f84c 1b04 	str.w	r1, [ip], #4
 800597a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800597e:	dcec      	bgt.n	800595a <__multadd+0x12>
 8005980:	b30e      	cbz	r6, 80059c6 <__multadd+0x7e>
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	42ab      	cmp	r3, r5
 8005986:	dc19      	bgt.n	80059bc <__multadd+0x74>
 8005988:	6861      	ldr	r1, [r4, #4]
 800598a:	4638      	mov	r0, r7
 800598c:	3101      	adds	r1, #1
 800598e:	f7ff ff7b 	bl	8005888 <_Balloc>
 8005992:	4680      	mov	r8, r0
 8005994:	b928      	cbnz	r0, 80059a2 <__multadd+0x5a>
 8005996:	4602      	mov	r2, r0
 8005998:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <__multadd+0x84>)
 800599a:	480d      	ldr	r0, [pc, #52]	@ (80059d0 <__multadd+0x88>)
 800599c:	21ba      	movs	r1, #186	@ 0xba
 800599e:	f000 fd39 	bl	8006414 <__assert_func>
 80059a2:	6922      	ldr	r2, [r4, #16]
 80059a4:	3202      	adds	r2, #2
 80059a6:	f104 010c 	add.w	r1, r4, #12
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	300c      	adds	r0, #12
 80059ae:	f000 fd23 	bl	80063f8 <memcpy>
 80059b2:	4621      	mov	r1, r4
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ffa5 	bl	8005904 <_Bfree>
 80059ba:	4644      	mov	r4, r8
 80059bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059c0:	3501      	adds	r5, #1
 80059c2:	615e      	str	r6, [r3, #20]
 80059c4:	6125      	str	r5, [r4, #16]
 80059c6:	4620      	mov	r0, r4
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059cc:	080070f6 	.word	0x080070f6
 80059d0:	08007107 	.word	0x08007107

080059d4 <__hi0bits>:
 80059d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059d8:	4603      	mov	r3, r0
 80059da:	bf36      	itet	cc
 80059dc:	0403      	lslcc	r3, r0, #16
 80059de:	2000      	movcs	r0, #0
 80059e0:	2010      	movcc	r0, #16
 80059e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e6:	bf3c      	itt	cc
 80059e8:	021b      	lslcc	r3, r3, #8
 80059ea:	3008      	addcc	r0, #8
 80059ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f0:	bf3c      	itt	cc
 80059f2:	011b      	lslcc	r3, r3, #4
 80059f4:	3004      	addcc	r0, #4
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fa:	bf3c      	itt	cc
 80059fc:	009b      	lslcc	r3, r3, #2
 80059fe:	3002      	addcc	r0, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db05      	blt.n	8005a10 <__hi0bits+0x3c>
 8005a04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a08:	f100 0001 	add.w	r0, r0, #1
 8005a0c:	bf08      	it	eq
 8005a0e:	2020      	moveq	r0, #32
 8005a10:	4770      	bx	lr

08005a12 <__lo0bits>:
 8005a12:	6803      	ldr	r3, [r0, #0]
 8005a14:	4602      	mov	r2, r0
 8005a16:	f013 0007 	ands.w	r0, r3, #7
 8005a1a:	d00b      	beq.n	8005a34 <__lo0bits+0x22>
 8005a1c:	07d9      	lsls	r1, r3, #31
 8005a1e:	d421      	bmi.n	8005a64 <__lo0bits+0x52>
 8005a20:	0798      	lsls	r0, r3, #30
 8005a22:	bf49      	itett	mi
 8005a24:	085b      	lsrmi	r3, r3, #1
 8005a26:	089b      	lsrpl	r3, r3, #2
 8005a28:	2001      	movmi	r0, #1
 8005a2a:	6013      	strmi	r3, [r2, #0]
 8005a2c:	bf5c      	itt	pl
 8005a2e:	6013      	strpl	r3, [r2, #0]
 8005a30:	2002      	movpl	r0, #2
 8005a32:	4770      	bx	lr
 8005a34:	b299      	uxth	r1, r3
 8005a36:	b909      	cbnz	r1, 8005a3c <__lo0bits+0x2a>
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	b2d9      	uxtb	r1, r3
 8005a3e:	b909      	cbnz	r1, 8005a44 <__lo0bits+0x32>
 8005a40:	3008      	adds	r0, #8
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	0719      	lsls	r1, r3, #28
 8005a46:	bf04      	itt	eq
 8005a48:	091b      	lsreq	r3, r3, #4
 8005a4a:	3004      	addeq	r0, #4
 8005a4c:	0799      	lsls	r1, r3, #30
 8005a4e:	bf04      	itt	eq
 8005a50:	089b      	lsreq	r3, r3, #2
 8005a52:	3002      	addeq	r0, #2
 8005a54:	07d9      	lsls	r1, r3, #31
 8005a56:	d403      	bmi.n	8005a60 <__lo0bits+0x4e>
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f100 0001 	add.w	r0, r0, #1
 8005a5e:	d003      	beq.n	8005a68 <__lo0bits+0x56>
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4770      	bx	lr
 8005a64:	2000      	movs	r0, #0
 8005a66:	4770      	bx	lr
 8005a68:	2020      	movs	r0, #32
 8005a6a:	4770      	bx	lr

08005a6c <__i2b>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	460c      	mov	r4, r1
 8005a70:	2101      	movs	r1, #1
 8005a72:	f7ff ff09 	bl	8005888 <_Balloc>
 8005a76:	4602      	mov	r2, r0
 8005a78:	b928      	cbnz	r0, 8005a86 <__i2b+0x1a>
 8005a7a:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <__i2b+0x24>)
 8005a7c:	4805      	ldr	r0, [pc, #20]	@ (8005a94 <__i2b+0x28>)
 8005a7e:	f240 1145 	movw	r1, #325	@ 0x145
 8005a82:	f000 fcc7 	bl	8006414 <__assert_func>
 8005a86:	2301      	movs	r3, #1
 8005a88:	6144      	str	r4, [r0, #20]
 8005a8a:	6103      	str	r3, [r0, #16]
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	bf00      	nop
 8005a90:	080070f6 	.word	0x080070f6
 8005a94:	08007107 	.word	0x08007107

08005a98 <__multiply>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005aa0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005aa4:	45d1      	cmp	r9, sl
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	4688      	mov	r8, r1
 8005aaa:	4614      	mov	r4, r2
 8005aac:	db04      	blt.n	8005ab8 <__multiply+0x20>
 8005aae:	4653      	mov	r3, sl
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	46ca      	mov	sl, r9
 8005ab4:	4690      	mov	r8, r2
 8005ab6:	4699      	mov	r9, r3
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	6861      	ldr	r1, [r4, #4]
 8005abc:	eb0a 0609 	add.w	r6, sl, r9
 8005ac0:	42b3      	cmp	r3, r6
 8005ac2:	bfb8      	it	lt
 8005ac4:	3101      	addlt	r1, #1
 8005ac6:	f7ff fedf 	bl	8005888 <_Balloc>
 8005aca:	b930      	cbnz	r0, 8005ada <__multiply+0x42>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <__multiply+0x14c>)
 8005ad0:	4845      	ldr	r0, [pc, #276]	@ (8005be8 <__multiply+0x150>)
 8005ad2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ad6:	f000 fc9d 	bl	8006414 <__assert_func>
 8005ada:	f100 0514 	add.w	r5, r0, #20
 8005ade:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	42bb      	cmp	r3, r7
 8005ae8:	d31f      	bcc.n	8005b2a <__multiply+0x92>
 8005aea:	f104 0c14 	add.w	ip, r4, #20
 8005aee:	f108 0114 	add.w	r1, r8, #20
 8005af2:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 8005af6:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	1b1a      	subs	r2, r3, r4
 8005afe:	3a15      	subs	r2, #21
 8005b00:	f022 0203 	bic.w	r2, r2, #3
 8005b04:	3415      	adds	r4, #21
 8005b06:	429c      	cmp	r4, r3
 8005b08:	bf88      	it	hi
 8005b0a:	2200      	movhi	r2, #0
 8005b0c:	9201      	str	r2, [sp, #4]
 8005b0e:	9a02      	ldr	r2, [sp, #8]
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	428a      	cmp	r2, r1
 8005b14:	d80c      	bhi.n	8005b30 <__multiply+0x98>
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	dd03      	ble.n	8005b22 <__multiply+0x8a>
 8005b1a:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d05d      	beq.n	8005bde <__multiply+0x146>
 8005b22:	6106      	str	r6, [r0, #16]
 8005b24:	b005      	add	sp, #20
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	f843 2b04 	str.w	r2, [r3], #4
 8005b2e:	e7da      	b.n	8005ae6 <__multiply+0x4e>
 8005b30:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b34:	f1ba 0f00 	cmp.w	sl, #0
 8005b38:	d024      	beq.n	8005b84 <__multiply+0xec>
 8005b3a:	46e0      	mov	r8, ip
 8005b3c:	46a9      	mov	r9, r5
 8005b3e:	f04f 0e00 	mov.w	lr, #0
 8005b42:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b46:	f8d9 4000 	ldr.w	r4, [r9]
 8005b4a:	fa1f fb82 	uxth.w	fp, r2
 8005b4e:	b2a4      	uxth	r4, r4
 8005b50:	fb0a 440b 	mla	r4, sl, fp, r4
 8005b54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b58:	f8d9 2000 	ldr.w	r2, [r9]
 8005b5c:	4474      	add	r4, lr
 8005b5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b62:	fb0a e20b 	mla	r2, sl, fp, lr
 8005b66:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005b6a:	b2a4      	uxth	r4, r4
 8005b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005b70:	4543      	cmp	r3, r8
 8005b72:	f849 4b04 	str.w	r4, [r9], #4
 8005b76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b7a:	d8e2      	bhi.n	8005b42 <__multiply+0xaa>
 8005b7c:	9a01      	ldr	r2, [sp, #4]
 8005b7e:	18aa      	adds	r2, r5, r2
 8005b80:	f8c2 e004 	str.w	lr, [r2, #4]
 8005b84:	9a03      	ldr	r2, [sp, #12]
 8005b86:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8005b8a:	3104      	adds	r1, #4
 8005b8c:	f1b8 0f00 	cmp.w	r8, #0
 8005b90:	d023      	beq.n	8005bda <__multiply+0x142>
 8005b92:	682a      	ldr	r2, [r5, #0]
 8005b94:	46e6      	mov	lr, ip
 8005b96:	4691      	mov	r9, r2
 8005b98:	46aa      	mov	sl, r5
 8005b9a:	f04f 0b00 	mov.w	fp, #0
 8005b9e:	f8be 4000 	ldrh.w	r4, [lr]
 8005ba2:	fb08 b404 	mla	r4, r8, r4, fp
 8005ba6:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 8005baa:	b292      	uxth	r2, r2
 8005bac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bb0:	f84a 2b04 	str.w	r2, [sl], #4
 8005bb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005bb8:	f8da 9000 	ldr.w	r9, [sl]
 8005bbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005bc0:	fa1f f289 	uxth.w	r2, r9
 8005bc4:	fb08 220b 	mla	r2, r8, fp, r2
 8005bc8:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005bcc:	4573      	cmp	r3, lr
 8005bce:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005bd2:	d8e4      	bhi.n	8005b9e <__multiply+0x106>
 8005bd4:	9c01      	ldr	r4, [sp, #4]
 8005bd6:	192c      	adds	r4, r5, r4
 8005bd8:	6062      	str	r2, [r4, #4]
 8005bda:	3504      	adds	r5, #4
 8005bdc:	e797      	b.n	8005b0e <__multiply+0x76>
 8005bde:	3e01      	subs	r6, #1
 8005be0:	e799      	b.n	8005b16 <__multiply+0x7e>
 8005be2:	bf00      	nop
 8005be4:	080070f6 	.word	0x080070f6
 8005be8:	08007107 	.word	0x08007107

08005bec <__pow5mult>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	4617      	mov	r7, r2
 8005bf2:	f012 0203 	ands.w	r2, r2, #3
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	d007      	beq.n	8005c0c <__pow5mult+0x20>
 8005bfc:	4c26      	ldr	r4, [pc, #152]	@ (8005c98 <__pow5mult+0xac>)
 8005bfe:	3a01      	subs	r2, #1
 8005c00:	2300      	movs	r3, #0
 8005c02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c06:	f7ff fe9f 	bl	8005948 <__multadd>
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	10bf      	asrs	r7, r7, #2
 8005c0e:	d03f      	beq.n	8005c90 <__pow5mult+0xa4>
 8005c10:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8005c14:	b994      	cbnz	r4, 8005c3c <__pow5mult+0x50>
 8005c16:	2010      	movs	r0, #16
 8005c18:	f7ff fd80 	bl	800571c <malloc>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	f8c8 001c 	str.w	r0, [r8, #28]
 8005c22:	b930      	cbnz	r0, 8005c32 <__pow5mult+0x46>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <__pow5mult+0xb0>)
 8005c28:	481d      	ldr	r0, [pc, #116]	@ (8005ca0 <__pow5mult+0xb4>)
 8005c2a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c2e:	f000 fbf1 	bl	8006414 <__assert_func>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	60c3      	str	r3, [r0, #12]
 8005c3c:	68a6      	ldr	r6, [r4, #8]
 8005c3e:	b946      	cbnz	r6, 8005c52 <__pow5mult+0x66>
 8005c40:	f240 2171 	movw	r1, #625	@ 0x271
 8005c44:	4640      	mov	r0, r8
 8005c46:	f7ff ff11 	bl	8005a6c <__i2b>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60a0      	str	r0, [r4, #8]
 8005c4e:	4606      	mov	r6, r0
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	462c      	mov	r4, r5
 8005c54:	f04f 0900 	mov.w	r9, #0
 8005c58:	f007 0301 	and.w	r3, r7, #1
 8005c5c:	107f      	asrs	r7, r7, #1
 8005c5e:	b153      	cbz	r3, 8005c76 <__pow5mult+0x8a>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4632      	mov	r2, r6
 8005c64:	4640      	mov	r0, r8
 8005c66:	f7ff ff17 	bl	8005a98 <__multiply>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	4640      	mov	r0, r8
 8005c70:	f7ff fe48 	bl	8005904 <_Bfree>
 8005c74:	b167      	cbz	r7, 8005c90 <__pow5mult+0xa4>
 8005c76:	6830      	ldr	r0, [r6, #0]
 8005c78:	b938      	cbnz	r0, 8005c8a <__pow5mult+0x9e>
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff ff0a 	bl	8005a98 <__multiply>
 8005c84:	6030      	str	r0, [r6, #0]
 8005c86:	f8c0 9000 	str.w	r9, [r0]
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	462c      	mov	r4, r5
 8005c8e:	e7e3      	b.n	8005c58 <__pow5mult+0x6c>
 8005c90:	4628      	mov	r0, r5
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	bf00      	nop
 8005c98:	080071a4 	.word	0x080071a4
 8005c9c:	0800709d 	.word	0x0800709d
 8005ca0:	08007107 	.word	0x08007107

08005ca4 <__lshift>:
 8005ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6849      	ldr	r1, [r1, #4]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	4615      	mov	r5, r2
 8005cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cbc:	f108 0901 	add.w	r9, r8, #1
 8005cc0:	454b      	cmp	r3, r9
 8005cc2:	db0b      	blt.n	8005cdc <__lshift+0x38>
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f7ff fddf 	bl	8005888 <_Balloc>
 8005cca:	4606      	mov	r6, r0
 8005ccc:	b948      	cbnz	r0, 8005ce2 <__lshift+0x3e>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <__lshift+0xd4>)
 8005cd2:	482a      	ldr	r0, [pc, #168]	@ (8005d7c <__lshift+0xd8>)
 8005cd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005cd8:	f000 fb9c 	bl	8006414 <__assert_func>
 8005cdc:	3101      	adds	r1, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__lshift+0x1c>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f100 0c14 	add.w	ip, r0, #20
 8005ce8:	f100 0210 	add.w	r2, r0, #16
 8005cec:	4619      	mov	r1, r3
 8005cee:	4553      	cmp	r3, sl
 8005cf0:	db35      	blt.n	8005d5e <__lshift+0xba>
 8005cf2:	6922      	ldr	r2, [r4, #16]
 8005cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cf8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005cfc:	f104 0314 	add.w	r3, r4, #20
 8005d00:	f015 0e1f 	ands.w	lr, r5, #31
 8005d04:	4661      	mov	r1, ip
 8005d06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005d0a:	d02c      	beq.n	8005d66 <__lshift+0xc2>
 8005d0c:	f1ce 0a20 	rsb	sl, lr, #32
 8005d10:	2500      	movs	r5, #0
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	468b      	mov	fp, r1
 8005d16:	fa00 f00e 	lsl.w	r0, r0, lr
 8005d1a:	4328      	orrs	r0, r5
 8005d1c:	f8cb 0000 	str.w	r0, [fp]
 8005d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f101 0104 	add.w	r1, r1, #4
 8005d2a:	fa25 f50a 	lsr.w	r5, r5, sl
 8005d2e:	d8f0      	bhi.n	8005d12 <__lshift+0x6e>
 8005d30:	1b13      	subs	r3, r2, r4
 8005d32:	3b15      	subs	r3, #21
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	f104 0115 	add.w	r1, r4, #21
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	bf38      	it	cc
 8005d40:	2300      	movcc	r3, #0
 8005d42:	449c      	add	ip, r3
 8005d44:	f8cc 5004 	str.w	r5, [ip, #4]
 8005d48:	b905      	cbnz	r5, 8005d4c <__lshift+0xa8>
 8005d4a:	46c1      	mov	r9, r8
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f8c6 9010 	str.w	r9, [r6, #16]
 8005d52:	4621      	mov	r1, r4
 8005d54:	f7ff fdd6 	bl	8005904 <_Bfree>
 8005d58:	4630      	mov	r0, r6
 8005d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d62:	3301      	adds	r3, #1
 8005d64:	e7c3      	b.n	8005cee <__lshift+0x4a>
 8005d66:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d6a:	600d      	str	r5, [r1, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	f101 0104 	add.w	r1, r1, #4
 8005d72:	d8f8      	bhi.n	8005d66 <__lshift+0xc2>
 8005d74:	e7e9      	b.n	8005d4a <__lshift+0xa6>
 8005d76:	bf00      	nop
 8005d78:	080070f6 	.word	0x080070f6
 8005d7c:	08007107 	.word	0x08007107

08005d80 <__mcmp>:
 8005d80:	690a      	ldr	r2, [r1, #16]
 8005d82:	4603      	mov	r3, r0
 8005d84:	6900      	ldr	r0, [r0, #16]
 8005d86:	1a80      	subs	r0, r0, r2
 8005d88:	b530      	push	{r4, r5, lr}
 8005d8a:	d10e      	bne.n	8005daa <__mcmp+0x2a>
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	3114      	adds	r1, #20
 8005d90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005da0:	4295      	cmp	r5, r2
 8005da2:	d003      	beq.n	8005dac <__mcmp+0x2c>
 8005da4:	d205      	bcs.n	8005db2 <__mcmp+0x32>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005daa:	bd30      	pop	{r4, r5, pc}
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d3f3      	bcc.n	8005d98 <__mcmp+0x18>
 8005db0:	e7fb      	b.n	8005daa <__mcmp+0x2a>
 8005db2:	2001      	movs	r0, #1
 8005db4:	e7f9      	b.n	8005daa <__mcmp+0x2a>
	...

08005db8 <__mdiff>:
 8005db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	468a      	mov	sl, r1
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	f7ff ffdb 	bl	8005d80 <__mcmp>
 8005dca:	1e05      	subs	r5, r0, #0
 8005dcc:	d112      	bne.n	8005df4 <__mdiff+0x3c>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff fd59 	bl	8005888 <_Balloc>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	b928      	cbnz	r0, 8005de6 <__mdiff+0x2e>
 8005dda:	4b41      	ldr	r3, [pc, #260]	@ (8005ee0 <__mdiff+0x128>)
 8005ddc:	f240 2137 	movw	r1, #567	@ 0x237
 8005de0:	4840      	ldr	r0, [pc, #256]	@ (8005ee4 <__mdiff+0x12c>)
 8005de2:	f000 fb17 	bl	8006414 <__assert_func>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dec:	4610      	mov	r0, r2
 8005dee:	b003      	add	sp, #12
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	bfbc      	itt	lt
 8005df6:	4653      	movlt	r3, sl
 8005df8:	46a2      	movlt	sl, r4
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005e00:	bfba      	itte	lt
 8005e02:	461c      	movlt	r4, r3
 8005e04:	2501      	movlt	r5, #1
 8005e06:	2500      	movge	r5, #0
 8005e08:	f7ff fd3e 	bl	8005888 <_Balloc>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	b918      	cbnz	r0, 8005e18 <__mdiff+0x60>
 8005e10:	4b33      	ldr	r3, [pc, #204]	@ (8005ee0 <__mdiff+0x128>)
 8005e12:	f240 2145 	movw	r1, #581	@ 0x245
 8005e16:	e7e3      	b.n	8005de0 <__mdiff+0x28>
 8005e18:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005e1c:	6926      	ldr	r6, [r4, #16]
 8005e1e:	60c5      	str	r5, [r0, #12]
 8005e20:	f10a 0914 	add.w	r9, sl, #20
 8005e24:	f104 0e14 	add.w	lr, r4, #20
 8005e28:	f100 0514 	add.w	r5, r0, #20
 8005e2c:	f10a 0310 	add.w	r3, sl, #16
 8005e30:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 8005e34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	46ab      	mov	fp, r5
 8005e3c:	f04f 0c00 	mov.w	ip, #0
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	fa1f f38a 	uxth.w	r3, sl
 8005e50:	4619      	mov	r1, r3
 8005e52:	b283      	uxth	r3, r0
 8005e54:	1acb      	subs	r3, r1, r3
 8005e56:	0c00      	lsrs	r0, r0, #16
 8005e58:	4463      	add	r3, ip
 8005e5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e68:	4576      	cmp	r6, lr
 8005e6a:	f84b 3b04 	str.w	r3, [fp], #4
 8005e6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e72:	d8e5      	bhi.n	8005e40 <__mdiff+0x88>
 8005e74:	1b33      	subs	r3, r6, r4
 8005e76:	3b15      	subs	r3, #21
 8005e78:	3415      	adds	r4, #21
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	bf38      	it	cc
 8005e82:	2300      	movcc	r3, #0
 8005e84:	18e8      	adds	r0, r5, r3
 8005e86:	444b      	add	r3, r9
 8005e88:	1d1c      	adds	r4, r3, #4
 8005e8a:	3004      	adds	r0, #4
 8005e8c:	4626      	mov	r6, r4
 8005e8e:	eba5 0509 	sub.w	r5, r5, r9
 8005e92:	4546      	cmp	r6, r8
 8005e94:	eb06 0e05 	add.w	lr, r6, r5
 8005e98:	d30e      	bcc.n	8005eb8 <__mdiff+0x100>
 8005e9a:	f108 0103 	add.w	r1, r8, #3
 8005e9e:	1b09      	subs	r1, r1, r4
 8005ea0:	f021 0103 	bic.w	r1, r1, #3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4598      	cmp	r8, r3
 8005ea8:	bf38      	it	cc
 8005eaa:	2100      	movcc	r1, #0
 8005eac:	4401      	add	r1, r0
 8005eae:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005eb2:	b19b      	cbz	r3, 8005edc <__mdiff+0x124>
 8005eb4:	6117      	str	r7, [r2, #16]
 8005eb6:	e799      	b.n	8005dec <__mdiff+0x34>
 8005eb8:	f856 1b04 	ldr.w	r1, [r6], #4
 8005ebc:	46e2      	mov	sl, ip
 8005ebe:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005ec2:	fa1c fc81 	uxtah	ip, ip, r1
 8005ec6:	4451      	add	r1, sl
 8005ec8:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8005ecc:	b289      	uxth	r1, r1
 8005ece:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8005ed2:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8005ed6:	f8ce 1000 	str.w	r1, [lr]
 8005eda:	e7da      	b.n	8005e92 <__mdiff+0xda>
 8005edc:	3f01      	subs	r7, #1
 8005ede:	e7e6      	b.n	8005eae <__mdiff+0xf6>
 8005ee0:	080070f6 	.word	0x080070f6
 8005ee4:	08007107 	.word	0x08007107

08005ee8 <__d2b>:
 8005ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	460f      	mov	r7, r1
 8005eee:	2101      	movs	r1, #1
 8005ef0:	ec59 8b10 	vmov	r8, r9, d0
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	f7ff fcc7 	bl	8005888 <_Balloc>
 8005efa:	4604      	mov	r4, r0
 8005efc:	b930      	cbnz	r0, 8005f0c <__d2b+0x24>
 8005efe:	4602      	mov	r2, r0
 8005f00:	4b23      	ldr	r3, [pc, #140]	@ (8005f90 <__d2b+0xa8>)
 8005f02:	4824      	ldr	r0, [pc, #144]	@ (8005f94 <__d2b+0xac>)
 8005f04:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f08:	f000 fa84 	bl	8006414 <__assert_func>
 8005f0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f14:	b10d      	cbz	r5, 8005f1a <__d2b+0x32>
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8005f20:	d023      	beq.n	8005f6a <__d2b+0x82>
 8005f22:	4668      	mov	r0, sp
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	f7ff fd74 	bl	8005a12 <__lo0bits>
 8005f2a:	9900      	ldr	r1, [sp, #0]
 8005f2c:	b1d8      	cbz	r0, 8005f66 <__d2b+0x7e>
 8005f2e:	9a01      	ldr	r2, [sp, #4]
 8005f30:	f1c0 0320 	rsb	r3, r0, #32
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	40c2      	lsrs	r2, r0
 8005f3c:	6163      	str	r3, [r4, #20]
 8005f3e:	9201      	str	r2, [sp, #4]
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	61a3      	str	r3, [r4, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf0c      	ite	eq
 8005f48:	2201      	moveq	r2, #1
 8005f4a:	2202      	movne	r2, #2
 8005f4c:	6122      	str	r2, [r4, #16]
 8005f4e:	b1a5      	cbz	r5, 8005f7a <__d2b+0x92>
 8005f50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f54:	4405      	add	r5, r0
 8005f56:	603d      	str	r5, [r7, #0]
 8005f58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f5c:	6030      	str	r0, [r6, #0]
 8005f5e:	4620      	mov	r0, r4
 8005f60:	b003      	add	sp, #12
 8005f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f66:	6161      	str	r1, [r4, #20]
 8005f68:	e7ea      	b.n	8005f40 <__d2b+0x58>
 8005f6a:	a801      	add	r0, sp, #4
 8005f6c:	f7ff fd51 	bl	8005a12 <__lo0bits>
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	3020      	adds	r0, #32
 8005f76:	2201      	movs	r2, #1
 8005f78:	e7e8      	b.n	8005f4c <__d2b+0x64>
 8005f7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f82:	6038      	str	r0, [r7, #0]
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	f7ff fd25 	bl	80059d4 <__hi0bits>
 8005f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f8e:	e7e5      	b.n	8005f5c <__d2b+0x74>
 8005f90:	080070f6 	.word	0x080070f6
 8005f94:	08007107 	.word	0x08007107

08005f98 <__ssputs_r>:
 8005f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f9c:	688e      	ldr	r6, [r1, #8]
 8005f9e:	461f      	mov	r7, r3
 8005fa0:	42be      	cmp	r6, r7
 8005fa2:	4682      	mov	sl, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	4690      	mov	r8, r2
 8005fa8:	4633      	mov	r3, r6
 8005faa:	d853      	bhi.n	8006054 <__ssputs_r+0xbc>
 8005fac:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005fb0:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8005fb4:	d02b      	beq.n	800600e <__ssputs_r+0x76>
 8005fb6:	6965      	ldr	r5, [r4, #20]
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	6909      	ldr	r1, [r1, #16]
 8005fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc0:	eba3 0901 	sub.w	r9, r3, r1
 8005fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fc8:	1c7b      	adds	r3, r7, #1
 8005fca:	106d      	asrs	r5, r5, #1
 8005fcc:	444b      	add	r3, r9
 8005fce:	42ab      	cmp	r3, r5
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	bf84      	itt	hi
 8005fd4:	461d      	movhi	r5, r3
 8005fd6:	462a      	movhi	r2, r5
 8005fd8:	0543      	lsls	r3, r0, #21
 8005fda:	d527      	bpl.n	800602c <__ssputs_r+0x94>
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4650      	mov	r0, sl
 8005fe0:	f7ff fbc6 	bl	8005770 <_malloc_r>
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	b358      	cbz	r0, 8006040 <__ssputs_r+0xa8>
 8005fe8:	6921      	ldr	r1, [r4, #16]
 8005fea:	464a      	mov	r2, r9
 8005fec:	f000 fa04 	bl	80063f8 <memcpy>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	6126      	str	r6, [r4, #16]
 8005ffe:	6165      	str	r5, [r4, #20]
 8006000:	444e      	add	r6, r9
 8006002:	eba5 0509 	sub.w	r5, r5, r9
 8006006:	6026      	str	r6, [r4, #0]
 8006008:	60a5      	str	r5, [r4, #8]
 800600a:	463e      	mov	r6, r7
 800600c:	463b      	mov	r3, r7
 800600e:	461f      	mov	r7, r3
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	463a      	mov	r2, r7
 8006014:	4641      	mov	r1, r8
 8006016:	f000 f9c5 	bl	80063a4 <memmove>
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	1b9b      	subs	r3, r3, r6
 800601e:	60a3      	str	r3, [r4, #8]
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	443b      	add	r3, r7
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	2000      	movs	r0, #0
 8006028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602c:	4650      	mov	r0, sl
 800602e:	f000 fa35 	bl	800649c <_realloc_r>
 8006032:	4606      	mov	r6, r0
 8006034:	2800      	cmp	r0, #0
 8006036:	d1e1      	bne.n	8005ffc <__ssputs_r+0x64>
 8006038:	6921      	ldr	r1, [r4, #16]
 800603a:	4650      	mov	r0, sl
 800603c:	f7ff fb24 	bl	8005688 <_free_r>
 8006040:	230c      	movs	r3, #12
 8006042:	f8ca 3000 	str.w	r3, [sl]
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006052:	e7e9      	b.n	8006028 <__ssputs_r+0x90>
 8006054:	463e      	mov	r6, r7
 8006056:	e7db      	b.n	8006010 <__ssputs_r+0x78>

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	@ 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d510      	bpl.n	800608e <_svfiprintf_r+0x36>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b973      	cbnz	r3, 800608e <_svfiprintf_r+0x36>
 8006070:	2140      	movs	r1, #64	@ 0x40
 8006072:	f7ff fb7d 	bl	8005770 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b930      	cbnz	r0, 800608a <_svfiprintf_r+0x32>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006084:	b01d      	add	sp, #116	@ 0x74
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	2340      	movs	r3, #64	@ 0x40
 800608c:	616b      	str	r3, [r5, #20]
 800608e:	2300      	movs	r3, #0
 8006090:	9309      	str	r3, [sp, #36]	@ 0x24
 8006092:	2320      	movs	r3, #32
 8006094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006098:	f8cd 800c 	str.w	r8, [sp, #12]
 800609c:	2330      	movs	r3, #48	@ 0x30
 800609e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800623c <_svfiprintf_r+0x1e4>
 80060a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060a6:	f04f 0901 	mov.w	r9, #1
 80060aa:	4623      	mov	r3, r4
 80060ac:	469a      	mov	sl, r3
 80060ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b2:	b10a      	cbz	r2, 80060b8 <_svfiprintf_r+0x60>
 80060b4:	2a25      	cmp	r2, #37	@ 0x25
 80060b6:	d1f9      	bne.n	80060ac <_svfiprintf_r+0x54>
 80060b8:	ebba 0b04 	subs.w	fp, sl, r4
 80060bc:	d00b      	beq.n	80060d6 <_svfiprintf_r+0x7e>
 80060be:	465b      	mov	r3, fp
 80060c0:	4622      	mov	r2, r4
 80060c2:	4629      	mov	r1, r5
 80060c4:	4638      	mov	r0, r7
 80060c6:	f7ff ff67 	bl	8005f98 <__ssputs_r>
 80060ca:	3001      	adds	r0, #1
 80060cc:	f000 80a7 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060d2:	445a      	add	r2, fp
 80060d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 809f 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ea:	f10a 0a01 	add.w	sl, sl, #1
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80060f8:	4654      	mov	r4, sl
 80060fa:	2205      	movs	r2, #5
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	484e      	ldr	r0, [pc, #312]	@ (800623c <_svfiprintf_r+0x1e4>)
 8006102:	f7fa f84d 	bl	80001a0 <memchr>
 8006106:	9a04      	ldr	r2, [sp, #16]
 8006108:	b9d8      	cbnz	r0, 8006142 <_svfiprintf_r+0xea>
 800610a:	06d0      	lsls	r0, r2, #27
 800610c:	bf44      	itt	mi
 800610e:	2320      	movmi	r3, #32
 8006110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006114:	0711      	lsls	r1, r2, #28
 8006116:	bf44      	itt	mi
 8006118:	232b      	movmi	r3, #43	@ 0x2b
 800611a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800611e:	f89a 3000 	ldrb.w	r3, [sl]
 8006122:	2b2a      	cmp	r3, #42	@ 0x2a
 8006124:	d015      	beq.n	8006152 <_svfiprintf_r+0xfa>
 8006126:	9a07      	ldr	r2, [sp, #28]
 8006128:	4654      	mov	r4, sl
 800612a:	2000      	movs	r0, #0
 800612c:	f04f 0c0a 	mov.w	ip, #10
 8006130:	4621      	mov	r1, r4
 8006132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006136:	3b30      	subs	r3, #48	@ 0x30
 8006138:	2b09      	cmp	r3, #9
 800613a:	d94b      	bls.n	80061d4 <_svfiprintf_r+0x17c>
 800613c:	b1b0      	cbz	r0, 800616c <_svfiprintf_r+0x114>
 800613e:	9207      	str	r2, [sp, #28]
 8006140:	e014      	b.n	800616c <_svfiprintf_r+0x114>
 8006142:	eba0 0308 	sub.w	r3, r0, r8
 8006146:	fa09 f303 	lsl.w	r3, r9, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	46a2      	mov	sl, r4
 8006150:	e7d2      	b.n	80060f8 <_svfiprintf_r+0xa0>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	9103      	str	r1, [sp, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	bfbb      	ittet	lt
 800615e:	425b      	neglt	r3, r3
 8006160:	f042 0202 	orrlt.w	r2, r2, #2
 8006164:	9307      	strge	r3, [sp, #28]
 8006166:	9307      	strlt	r3, [sp, #28]
 8006168:	bfb8      	it	lt
 800616a:	9204      	strlt	r2, [sp, #16]
 800616c:	7823      	ldrb	r3, [r4, #0]
 800616e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006170:	d10a      	bne.n	8006188 <_svfiprintf_r+0x130>
 8006172:	7863      	ldrb	r3, [r4, #1]
 8006174:	2b2a      	cmp	r3, #42	@ 0x2a
 8006176:	d132      	bne.n	80061de <_svfiprintf_r+0x186>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800624c <_svfiprintf_r+0x1f4>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f805 	bl	80001a0 <memchr>
 8006196:	b138      	cbz	r0, 80061a8 <_svfiprintf_r+0x150>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	4082      	lsls	r2, r0
 80061a2:	4313      	orrs	r3, r2
 80061a4:	3401      	adds	r4, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4824      	ldr	r0, [pc, #144]	@ (8006240 <_svfiprintf_r+0x1e8>)
 80061ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061b2:	2206      	movs	r2, #6
 80061b4:	f7f9 fff4 	bl	80001a0 <memchr>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d036      	beq.n	800622a <_svfiprintf_r+0x1d2>
 80061bc:	4b21      	ldr	r3, [pc, #132]	@ (8006244 <_svfiprintf_r+0x1ec>)
 80061be:	bb1b      	cbnz	r3, 8006208 <_svfiprintf_r+0x1b0>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	3307      	adds	r3, #7
 80061c4:	f023 0307 	bic.w	r3, r3, #7
 80061c8:	3308      	adds	r3, #8
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ce:	4433      	add	r3, r6
 80061d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d2:	e76a      	b.n	80060aa <_svfiprintf_r+0x52>
 80061d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d8:	460c      	mov	r4, r1
 80061da:	2001      	movs	r0, #1
 80061dc:	e7a8      	b.n	8006130 <_svfiprintf_r+0xd8>
 80061de:	2300      	movs	r3, #0
 80061e0:	3401      	adds	r4, #1
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	4619      	mov	r1, r3
 80061e6:	f04f 0c0a 	mov.w	ip, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f0:	3a30      	subs	r2, #48	@ 0x30
 80061f2:	2a09      	cmp	r2, #9
 80061f4:	d903      	bls.n	80061fe <_svfiprintf_r+0x1a6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0c6      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fa:	9105      	str	r1, [sp, #20]
 80061fc:	e7c4      	b.n	8006188 <_svfiprintf_r+0x130>
 80061fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006202:	4604      	mov	r4, r0
 8006204:	2301      	movs	r3, #1
 8006206:	e7f0      	b.n	80061ea <_svfiprintf_r+0x192>
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4b0e      	ldr	r3, [pc, #56]	@ (8006248 <_svfiprintf_r+0x1f0>)
 8006210:	a904      	add	r1, sp, #16
 8006212:	4638      	mov	r0, r7
 8006214:	f7fd fe58 	bl	8003ec8 <_printf_float>
 8006218:	1c42      	adds	r2, r0, #1
 800621a:	4606      	mov	r6, r0
 800621c:	d1d6      	bne.n	80061cc <_svfiprintf_r+0x174>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	065b      	lsls	r3, r3, #25
 8006222:	f53f af2d 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006228:	e72c      	b.n	8006084 <_svfiprintf_r+0x2c>
 800622a:	ab03      	add	r3, sp, #12
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	462a      	mov	r2, r5
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <_svfiprintf_r+0x1f0>)
 8006232:	a904      	add	r1, sp, #16
 8006234:	4638      	mov	r0, r7
 8006236:	f7fe f8dd 	bl	80043f4 <_printf_i>
 800623a:	e7ed      	b.n	8006218 <_svfiprintf_r+0x1c0>
 800623c:	0800714a 	.word	0x0800714a
 8006240:	08007154 	.word	0x08007154
 8006244:	08003ec9 	.word	0x08003ec9
 8006248:	08005f99 	.word	0x08005f99
 800624c:	08007150 	.word	0x08007150

08006250 <__sflush_r>:
 8006250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006258:	0716      	lsls	r6, r2, #28
 800625a:	4605      	mov	r5, r0
 800625c:	460c      	mov	r4, r1
 800625e:	d451      	bmi.n	8006304 <__sflush_r+0xb4>
 8006260:	684b      	ldr	r3, [r1, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	dc02      	bgt.n	800626c <__sflush_r+0x1c>
 8006266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	dd49      	ble.n	8006300 <__sflush_r+0xb0>
 800626c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800626e:	2e00      	cmp	r6, #0
 8006270:	d046      	beq.n	8006300 <__sflush_r+0xb0>
 8006272:	2300      	movs	r3, #0
 8006274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006278:	682f      	ldr	r7, [r5, #0]
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	d031      	beq.n	80062e2 <__sflush_r+0x92>
 800627e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	0759      	lsls	r1, r3, #29
 8006284:	d505      	bpl.n	8006292 <__sflush_r+0x42>
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800628c:	b10b      	cbz	r3, 8006292 <__sflush_r+0x42>
 800628e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006296:	6a21      	ldr	r1, [r4, #32]
 8006298:	4628      	mov	r0, r5
 800629a:	47b0      	blx	r6
 800629c:	1c42      	adds	r2, r0, #1
 800629e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a2:	d106      	bne.n	80062b2 <__sflush_r+0x62>
 80062a4:	6829      	ldr	r1, [r5, #0]
 80062a6:	291d      	cmp	r1, #29
 80062a8:	d846      	bhi.n	8006338 <__sflush_r+0xe8>
 80062aa:	4a29      	ldr	r2, [pc, #164]	@ (8006350 <__sflush_r+0x100>)
 80062ac:	40ca      	lsrs	r2, r1
 80062ae:	07d6      	lsls	r6, r2, #31
 80062b0:	d542      	bpl.n	8006338 <__sflush_r+0xe8>
 80062b2:	2200      	movs	r2, #0
 80062b4:	6062      	str	r2, [r4, #4]
 80062b6:	04d9      	lsls	r1, r3, #19
 80062b8:	6922      	ldr	r2, [r4, #16]
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	d504      	bpl.n	80062c8 <__sflush_r+0x78>
 80062be:	1c42      	adds	r2, r0, #1
 80062c0:	d101      	bne.n	80062c6 <__sflush_r+0x76>
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	b903      	cbnz	r3, 80062c8 <__sflush_r+0x78>
 80062c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80062c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ca:	602f      	str	r7, [r5, #0]
 80062cc:	b1c1      	cbz	r1, 8006300 <__sflush_r+0xb0>
 80062ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062d2:	4299      	cmp	r1, r3
 80062d4:	d002      	beq.n	80062dc <__sflush_r+0x8c>
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7ff f9d6 	bl	8005688 <_free_r>
 80062dc:	2300      	movs	r3, #0
 80062de:	6363      	str	r3, [r4, #52]	@ 0x34
 80062e0:	e00e      	b.n	8006300 <__sflush_r+0xb0>
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	2301      	movs	r3, #1
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b0      	blx	r6
 80062ea:	4602      	mov	r2, r0
 80062ec:	1c50      	adds	r0, r2, #1
 80062ee:	d1c7      	bne.n	8006280 <__sflush_r+0x30>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0c4      	beq.n	8006280 <__sflush_r+0x30>
 80062f6:	2b1d      	cmp	r3, #29
 80062f8:	d001      	beq.n	80062fe <__sflush_r+0xae>
 80062fa:	2b16      	cmp	r3, #22
 80062fc:	d11a      	bne.n	8006334 <__sflush_r+0xe4>
 80062fe:	602f      	str	r7, [r5, #0]
 8006300:	2000      	movs	r0, #0
 8006302:	e01e      	b.n	8006342 <__sflush_r+0xf2>
 8006304:	690f      	ldr	r7, [r1, #16]
 8006306:	2f00      	cmp	r7, #0
 8006308:	d0fa      	beq.n	8006300 <__sflush_r+0xb0>
 800630a:	0793      	lsls	r3, r2, #30
 800630c:	680e      	ldr	r6, [r1, #0]
 800630e:	bf08      	it	eq
 8006310:	694b      	ldreq	r3, [r1, #20]
 8006312:	600f      	str	r7, [r1, #0]
 8006314:	bf18      	it	ne
 8006316:	2300      	movne	r3, #0
 8006318:	eba6 0807 	sub.w	r8, r6, r7
 800631c:	608b      	str	r3, [r1, #8]
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	dded      	ble.n	8006300 <__sflush_r+0xb0>
 8006324:	6a21      	ldr	r1, [r4, #32]
 8006326:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006328:	4643      	mov	r3, r8
 800632a:	463a      	mov	r2, r7
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	2800      	cmp	r0, #0
 8006332:	dc08      	bgt.n	8006346 <__sflush_r+0xf6>
 8006334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633c:	81a3      	strh	r3, [r4, #12]
 800633e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006346:	4407      	add	r7, r0
 8006348:	eba8 0800 	sub.w	r8, r8, r0
 800634c:	e7e7      	b.n	800631e <__sflush_r+0xce>
 800634e:	bf00      	nop
 8006350:	20400001 	.word	0x20400001

08006354 <_fflush_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b913      	cbnz	r3, 8006364 <_fflush_r+0x10>
 800635e:	2500      	movs	r5, #0
 8006360:	4628      	mov	r0, r5
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	b118      	cbz	r0, 800636e <_fflush_r+0x1a>
 8006366:	6a03      	ldr	r3, [r0, #32]
 8006368:	b90b      	cbnz	r3, 800636e <_fflush_r+0x1a>
 800636a:	f7fe f9f1 	bl	8004750 <__sinit>
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f3      	beq.n	800635e <_fflush_r+0xa>
 8006376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006378:	07d0      	lsls	r0, r2, #31
 800637a:	d404      	bmi.n	8006386 <_fflush_r+0x32>
 800637c:	0599      	lsls	r1, r3, #22
 800637e:	d402      	bmi.n	8006386 <_fflush_r+0x32>
 8006380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006382:	f7fe fb0e 	bl	80049a2 <__retarget_lock_acquire_recursive>
 8006386:	4628      	mov	r0, r5
 8006388:	4621      	mov	r1, r4
 800638a:	f7ff ff61 	bl	8006250 <__sflush_r>
 800638e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006390:	07da      	lsls	r2, r3, #31
 8006392:	4605      	mov	r5, r0
 8006394:	d4e4      	bmi.n	8006360 <_fflush_r+0xc>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	059b      	lsls	r3, r3, #22
 800639a:	d4e1      	bmi.n	8006360 <_fflush_r+0xc>
 800639c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800639e:	f7fe fb01 	bl	80049a4 <__retarget_lock_release_recursive>
 80063a2:	e7dd      	b.n	8006360 <_fflush_r+0xc>

080063a4 <memmove>:
 80063a4:	4288      	cmp	r0, r1
 80063a6:	b510      	push	{r4, lr}
 80063a8:	eb01 0402 	add.w	r4, r1, r2
 80063ac:	d902      	bls.n	80063b4 <memmove+0x10>
 80063ae:	4284      	cmp	r4, r0
 80063b0:	4623      	mov	r3, r4
 80063b2:	d807      	bhi.n	80063c4 <memmove+0x20>
 80063b4:	1e43      	subs	r3, r0, #1
 80063b6:	42a1      	cmp	r1, r4
 80063b8:	d007      	beq.n	80063ca <memmove+0x26>
 80063ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063c2:	e7f8      	b.n	80063b6 <memmove+0x12>
 80063c4:	4402      	add	r2, r0
 80063c6:	4282      	cmp	r2, r0
 80063c8:	d100      	bne.n	80063cc <memmove+0x28>
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80063d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80063d4:	e7f7      	b.n	80063c6 <memmove+0x22>
	...

080063d8 <_sbrk_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d06      	ldr	r5, [pc, #24]	@ (80063f4 <_sbrk_r+0x1c>)
 80063dc:	2300      	movs	r3, #0
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	f7fd fb4a 	bl	8003a7c <_sbrk>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d102      	bne.n	80063f2 <_sbrk_r+0x1a>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	b103      	cbz	r3, 80063f2 <_sbrk_r+0x1a>
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	2000043c 	.word	0x2000043c

080063f8 <memcpy>:
 80063f8:	440a      	add	r2, r1
 80063fa:	4291      	cmp	r1, r2
 80063fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006400:	d100      	bne.n	8006404 <memcpy+0xc>
 8006402:	4770      	bx	lr
 8006404:	b510      	push	{r4, lr}
 8006406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800640a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640e:	4291      	cmp	r1, r2
 8006410:	d1f9      	bne.n	8006406 <memcpy+0xe>
 8006412:	bd10      	pop	{r4, pc}

08006414 <__assert_func>:
 8006414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006416:	4614      	mov	r4, r2
 8006418:	461a      	mov	r2, r3
 800641a:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <__assert_func+0x2c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4605      	mov	r5, r0
 8006420:	68d8      	ldr	r0, [r3, #12]
 8006422:	b14c      	cbz	r4, 8006438 <__assert_func+0x24>
 8006424:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <__assert_func+0x30>)
 8006426:	9100      	str	r1, [sp, #0]
 8006428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800642c:	4906      	ldr	r1, [pc, #24]	@ (8006448 <__assert_func+0x34>)
 800642e:	462b      	mov	r3, r5
 8006430:	f000 f870 	bl	8006514 <fiprintf>
 8006434:	f000 f880 	bl	8006538 <abort>
 8006438:	4b04      	ldr	r3, [pc, #16]	@ (800644c <__assert_func+0x38>)
 800643a:	461c      	mov	r4, r3
 800643c:	e7f3      	b.n	8006426 <__assert_func+0x12>
 800643e:	bf00      	nop
 8006440:	20000018 	.word	0x20000018
 8006444:	08007165 	.word	0x08007165
 8006448:	08007172 	.word	0x08007172
 800644c:	080071a0 	.word	0x080071a0

08006450 <_calloc_r>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	fba1 5402 	umull	r5, r4, r1, r2
 8006456:	b934      	cbnz	r4, 8006466 <_calloc_r+0x16>
 8006458:	4629      	mov	r1, r5
 800645a:	f7ff f989 	bl	8005770 <_malloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	b928      	cbnz	r0, 800646e <_calloc_r+0x1e>
 8006462:	4630      	mov	r0, r6
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	220c      	movs	r2, #12
 8006468:	6002      	str	r2, [r0, #0]
 800646a:	2600      	movs	r6, #0
 800646c:	e7f9      	b.n	8006462 <_calloc_r+0x12>
 800646e:	462a      	mov	r2, r5
 8006470:	4621      	mov	r1, r4
 8006472:	f7fe fa09 	bl	8004888 <memset>
 8006476:	e7f4      	b.n	8006462 <_calloc_r+0x12>

08006478 <__ascii_mbtowc>:
 8006478:	b082      	sub	sp, #8
 800647a:	b901      	cbnz	r1, 800647e <__ascii_mbtowc+0x6>
 800647c:	a901      	add	r1, sp, #4
 800647e:	b142      	cbz	r2, 8006492 <__ascii_mbtowc+0x1a>
 8006480:	b14b      	cbz	r3, 8006496 <__ascii_mbtowc+0x1e>
 8006482:	7813      	ldrb	r3, [r2, #0]
 8006484:	600b      	str	r3, [r1, #0]
 8006486:	7812      	ldrb	r2, [r2, #0]
 8006488:	1e10      	subs	r0, r2, #0
 800648a:	bf18      	it	ne
 800648c:	2001      	movne	r0, #1
 800648e:	b002      	add	sp, #8
 8006490:	4770      	bx	lr
 8006492:	4610      	mov	r0, r2
 8006494:	e7fb      	b.n	800648e <__ascii_mbtowc+0x16>
 8006496:	f06f 0001 	mvn.w	r0, #1
 800649a:	e7f8      	b.n	800648e <__ascii_mbtowc+0x16>

0800649c <_realloc_r>:
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	4607      	mov	r7, r0
 80064a2:	4614      	mov	r4, r2
 80064a4:	460d      	mov	r5, r1
 80064a6:	b921      	cbnz	r1, 80064b2 <_realloc_r+0x16>
 80064a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	4611      	mov	r1, r2
 80064ae:	f7ff b95f 	b.w	8005770 <_malloc_r>
 80064b2:	b92a      	cbnz	r2, 80064c0 <_realloc_r+0x24>
 80064b4:	f7ff f8e8 	bl	8005688 <_free_r>
 80064b8:	4625      	mov	r5, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c0:	f000 f841 	bl	8006546 <_malloc_usable_size_r>
 80064c4:	4284      	cmp	r4, r0
 80064c6:	4606      	mov	r6, r0
 80064c8:	d802      	bhi.n	80064d0 <_realloc_r+0x34>
 80064ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064ce:	d8f4      	bhi.n	80064ba <_realloc_r+0x1e>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff f94c 	bl	8005770 <_malloc_r>
 80064d8:	4680      	mov	r8, r0
 80064da:	b908      	cbnz	r0, 80064e0 <_realloc_r+0x44>
 80064dc:	4645      	mov	r5, r8
 80064de:	e7ec      	b.n	80064ba <_realloc_r+0x1e>
 80064e0:	42b4      	cmp	r4, r6
 80064e2:	4622      	mov	r2, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	bf28      	it	cs
 80064e8:	4632      	movcs	r2, r6
 80064ea:	f7ff ff85 	bl	80063f8 <memcpy>
 80064ee:	4629      	mov	r1, r5
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff f8c9 	bl	8005688 <_free_r>
 80064f6:	e7f1      	b.n	80064dc <_realloc_r+0x40>

080064f8 <__ascii_wctomb>:
 80064f8:	4603      	mov	r3, r0
 80064fa:	4608      	mov	r0, r1
 80064fc:	b141      	cbz	r1, 8006510 <__ascii_wctomb+0x18>
 80064fe:	2aff      	cmp	r2, #255	@ 0xff
 8006500:	d904      	bls.n	800650c <__ascii_wctomb+0x14>
 8006502:	228a      	movs	r2, #138	@ 0x8a
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800650a:	4770      	bx	lr
 800650c:	700a      	strb	r2, [r1, #0]
 800650e:	2001      	movs	r0, #1
 8006510:	4770      	bx	lr
	...

08006514 <fiprintf>:
 8006514:	b40e      	push	{r1, r2, r3}
 8006516:	b503      	push	{r0, r1, lr}
 8006518:	4601      	mov	r1, r0
 800651a:	ab03      	add	r3, sp, #12
 800651c:	4805      	ldr	r0, [pc, #20]	@ (8006534 <fiprintf+0x20>)
 800651e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006522:	6800      	ldr	r0, [r0, #0]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	f000 f83f 	bl	80065a8 <_vfiprintf_r>
 800652a:	b002      	add	sp, #8
 800652c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006530:	b003      	add	sp, #12
 8006532:	4770      	bx	lr
 8006534:	20000018 	.word	0x20000018

08006538 <abort>:
 8006538:	b508      	push	{r3, lr}
 800653a:	2006      	movs	r0, #6
 800653c:	f000 fa06 	bl	800694c <raise>
 8006540:	2001      	movs	r0, #1
 8006542:	f7fd fa6b 	bl	8003a1c <_exit>

08006546 <_malloc_usable_size_r>:
 8006546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800654a:	1f18      	subs	r0, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfbc      	itt	lt
 8006550:	580b      	ldrlt	r3, [r1, r0]
 8006552:	18c0      	addlt	r0, r0, r3
 8006554:	4770      	bx	lr

08006556 <__sfputc_r>:
 8006556:	6893      	ldr	r3, [r2, #8]
 8006558:	3b01      	subs	r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	b410      	push	{r4}
 800655e:	6093      	str	r3, [r2, #8]
 8006560:	da08      	bge.n	8006574 <__sfputc_r+0x1e>
 8006562:	6994      	ldr	r4, [r2, #24]
 8006564:	42a3      	cmp	r3, r4
 8006566:	db01      	blt.n	800656c <__sfputc_r+0x16>
 8006568:	290a      	cmp	r1, #10
 800656a:	d103      	bne.n	8006574 <__sfputc_r+0x1e>
 800656c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006570:	f000 b932 	b.w	80067d8 <__swbuf_r>
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	1c58      	adds	r0, r3, #1
 8006578:	6010      	str	r0, [r2, #0]
 800657a:	7019      	strb	r1, [r3, #0]
 800657c:	4608      	mov	r0, r1
 800657e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006582:	4770      	bx	lr

08006584 <__sfputs_r>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	4614      	mov	r4, r2
 800658c:	18d5      	adds	r5, r2, r3
 800658e:	42ac      	cmp	r4, r5
 8006590:	d101      	bne.n	8006596 <__sfputs_r+0x12>
 8006592:	2000      	movs	r0, #0
 8006594:	e007      	b.n	80065a6 <__sfputs_r+0x22>
 8006596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659a:	463a      	mov	r2, r7
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffda 	bl	8006556 <__sfputc_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d1f3      	bne.n	800658e <__sfputs_r+0xa>
 80065a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065a8 <_vfiprintf_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	460d      	mov	r5, r1
 80065ae:	b09d      	sub	sp, #116	@ 0x74
 80065b0:	4614      	mov	r4, r2
 80065b2:	4698      	mov	r8, r3
 80065b4:	4606      	mov	r6, r0
 80065b6:	b118      	cbz	r0, 80065c0 <_vfiprintf_r+0x18>
 80065b8:	6a03      	ldr	r3, [r0, #32]
 80065ba:	b90b      	cbnz	r3, 80065c0 <_vfiprintf_r+0x18>
 80065bc:	f7fe f8c8 	bl	8004750 <__sinit>
 80065c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x2a>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x2a>
 80065cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ce:	f7fe f9e8 	bl	80049a2 <__retarget_lock_acquire_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d501      	bpl.n	80065dc <_vfiprintf_r+0x34>
 80065d8:	692b      	ldr	r3, [r5, #16]
 80065da:	b99b      	cbnz	r3, 8006604 <_vfiprintf_r+0x5c>
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 f938 	bl	8006854 <__swsetup_r>
 80065e4:	b170      	cbz	r0, 8006604 <_vfiprintf_r+0x5c>
 80065e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e8:	07dc      	lsls	r4, r3, #31
 80065ea:	d504      	bpl.n	80065f6 <_vfiprintf_r+0x4e>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f0:	b01d      	add	sp, #116	@ 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	0598      	lsls	r0, r3, #22
 80065fa:	d4f7      	bmi.n	80065ec <_vfiprintf_r+0x44>
 80065fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fe:	f7fe f9d1 	bl	80049a4 <__retarget_lock_release_recursive>
 8006602:	e7f3      	b.n	80065ec <_vfiprintf_r+0x44>
 8006604:	2300      	movs	r3, #0
 8006606:	9309      	str	r3, [sp, #36]	@ 0x24
 8006608:	2320      	movs	r3, #32
 800660a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800660e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006612:	2330      	movs	r3, #48	@ 0x30
 8006614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067c4 <_vfiprintf_r+0x21c>
 8006618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800661c:	f04f 0901 	mov.w	r9, #1
 8006620:	4623      	mov	r3, r4
 8006622:	469a      	mov	sl, r3
 8006624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006628:	b10a      	cbz	r2, 800662e <_vfiprintf_r+0x86>
 800662a:	2a25      	cmp	r2, #37	@ 0x25
 800662c:	d1f9      	bne.n	8006622 <_vfiprintf_r+0x7a>
 800662e:	ebba 0b04 	subs.w	fp, sl, r4
 8006632:	d00b      	beq.n	800664c <_vfiprintf_r+0xa4>
 8006634:	465b      	mov	r3, fp
 8006636:	4622      	mov	r2, r4
 8006638:	4629      	mov	r1, r5
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ffa2 	bl	8006584 <__sfputs_r>
 8006640:	3001      	adds	r0, #1
 8006642:	f000 80a7 	beq.w	8006794 <_vfiprintf_r+0x1ec>
 8006646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006648:	445a      	add	r2, fp
 800664a:	9209      	str	r2, [sp, #36]	@ 0x24
 800664c:	f89a 3000 	ldrb.w	r3, [sl]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 809f 	beq.w	8006794 <_vfiprintf_r+0x1ec>
 8006656:	2300      	movs	r3, #0
 8006658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800665c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006660:	f10a 0a01 	add.w	sl, sl, #1
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800666c:	931a      	str	r3, [sp, #104]	@ 0x68
 800666e:	4654      	mov	r4, sl
 8006670:	2205      	movs	r2, #5
 8006672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006676:	4853      	ldr	r0, [pc, #332]	@ (80067c4 <_vfiprintf_r+0x21c>)
 8006678:	f7f9 fd92 	bl	80001a0 <memchr>
 800667c:	9a04      	ldr	r2, [sp, #16]
 800667e:	b9d8      	cbnz	r0, 80066b8 <_vfiprintf_r+0x110>
 8006680:	06d1      	lsls	r1, r2, #27
 8006682:	bf44      	itt	mi
 8006684:	2320      	movmi	r3, #32
 8006686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800668a:	0713      	lsls	r3, r2, #28
 800668c:	bf44      	itt	mi
 800668e:	232b      	movmi	r3, #43	@ 0x2b
 8006690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b2a      	cmp	r3, #42	@ 0x2a
 800669a:	d015      	beq.n	80066c8 <_vfiprintf_r+0x120>
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	4654      	mov	r4, sl
 80066a0:	2000      	movs	r0, #0
 80066a2:	f04f 0c0a 	mov.w	ip, #10
 80066a6:	4621      	mov	r1, r4
 80066a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ac:	3b30      	subs	r3, #48	@ 0x30
 80066ae:	2b09      	cmp	r3, #9
 80066b0:	d94b      	bls.n	800674a <_vfiprintf_r+0x1a2>
 80066b2:	b1b0      	cbz	r0, 80066e2 <_vfiprintf_r+0x13a>
 80066b4:	9207      	str	r2, [sp, #28]
 80066b6:	e014      	b.n	80066e2 <_vfiprintf_r+0x13a>
 80066b8:	eba0 0308 	sub.w	r3, r0, r8
 80066bc:	fa09 f303 	lsl.w	r3, r9, r3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	46a2      	mov	sl, r4
 80066c6:	e7d2      	b.n	800666e <_vfiprintf_r+0xc6>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	1d19      	adds	r1, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	9103      	str	r1, [sp, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfbb      	ittet	lt
 80066d4:	425b      	neglt	r3, r3
 80066d6:	f042 0202 	orrlt.w	r2, r2, #2
 80066da:	9307      	strge	r3, [sp, #28]
 80066dc:	9307      	strlt	r3, [sp, #28]
 80066de:	bfb8      	it	lt
 80066e0:	9204      	strlt	r2, [sp, #16]
 80066e2:	7823      	ldrb	r3, [r4, #0]
 80066e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e6:	d10a      	bne.n	80066fe <_vfiprintf_r+0x156>
 80066e8:	7863      	ldrb	r3, [r4, #1]
 80066ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ec:	d132      	bne.n	8006754 <_vfiprintf_r+0x1ac>
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9203      	str	r2, [sp, #12]
 80066f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066fa:	3402      	adds	r4, #2
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067d4 <_vfiprintf_r+0x22c>
 8006702:	7821      	ldrb	r1, [r4, #0]
 8006704:	2203      	movs	r2, #3
 8006706:	4650      	mov	r0, sl
 8006708:	f7f9 fd4a 	bl	80001a0 <memchr>
 800670c:	b138      	cbz	r0, 800671e <_vfiprintf_r+0x176>
 800670e:	9b04      	ldr	r3, [sp, #16]
 8006710:	eba0 000a 	sub.w	r0, r0, sl
 8006714:	2240      	movs	r2, #64	@ 0x40
 8006716:	4082      	lsls	r2, r0
 8006718:	4313      	orrs	r3, r2
 800671a:	3401      	adds	r4, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4829      	ldr	r0, [pc, #164]	@ (80067c8 <_vfiprintf_r+0x220>)
 8006724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006728:	2206      	movs	r2, #6
 800672a:	f7f9 fd39 	bl	80001a0 <memchr>
 800672e:	2800      	cmp	r0, #0
 8006730:	d03f      	beq.n	80067b2 <_vfiprintf_r+0x20a>
 8006732:	4b26      	ldr	r3, [pc, #152]	@ (80067cc <_vfiprintf_r+0x224>)
 8006734:	bb1b      	cbnz	r3, 800677e <_vfiprintf_r+0x1d6>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	3307      	adds	r3, #7
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	3308      	adds	r3, #8
 8006740:	9303      	str	r3, [sp, #12]
 8006742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006744:	443b      	add	r3, r7
 8006746:	9309      	str	r3, [sp, #36]	@ 0x24
 8006748:	e76a      	b.n	8006620 <_vfiprintf_r+0x78>
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	e7a8      	b.n	80066a6 <_vfiprintf_r+0xfe>
 8006754:	2300      	movs	r3, #0
 8006756:	3401      	adds	r4, #1
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0c0a 	mov.w	ip, #10
 8006760:	4620      	mov	r0, r4
 8006762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006766:	3a30      	subs	r2, #48	@ 0x30
 8006768:	2a09      	cmp	r2, #9
 800676a:	d903      	bls.n	8006774 <_vfiprintf_r+0x1cc>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c6      	beq.n	80066fe <_vfiprintf_r+0x156>
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	e7c4      	b.n	80066fe <_vfiprintf_r+0x156>
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	e7f0      	b.n	8006760 <_vfiprintf_r+0x1b8>
 800677e:	ab03      	add	r3, sp, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	462a      	mov	r2, r5
 8006784:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <_vfiprintf_r+0x228>)
 8006786:	a904      	add	r1, sp, #16
 8006788:	4630      	mov	r0, r6
 800678a:	f7fd fb9d 	bl	8003ec8 <_printf_float>
 800678e:	4607      	mov	r7, r0
 8006790:	1c78      	adds	r0, r7, #1
 8006792:	d1d6      	bne.n	8006742 <_vfiprintf_r+0x19a>
 8006794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006796:	07d9      	lsls	r1, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_vfiprintf_r+0x1fe>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	059a      	lsls	r2, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_vfiprintf_r+0x1fe>
 80067a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067a2:	f7fe f8ff 	bl	80049a4 <__retarget_lock_release_recursive>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	065b      	lsls	r3, r3, #25
 80067aa:	f53f af1f 	bmi.w	80065ec <_vfiprintf_r+0x44>
 80067ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067b0:	e71e      	b.n	80065f0 <_vfiprintf_r+0x48>
 80067b2:	ab03      	add	r3, sp, #12
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	462a      	mov	r2, r5
 80067b8:	4b05      	ldr	r3, [pc, #20]	@ (80067d0 <_vfiprintf_r+0x228>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	4630      	mov	r0, r6
 80067be:	f7fd fe19 	bl	80043f4 <_printf_i>
 80067c2:	e7e4      	b.n	800678e <_vfiprintf_r+0x1e6>
 80067c4:	0800714a 	.word	0x0800714a
 80067c8:	08007154 	.word	0x08007154
 80067cc:	08003ec9 	.word	0x08003ec9
 80067d0:	08006585 	.word	0x08006585
 80067d4:	08007150 	.word	0x08007150

080067d8 <__swbuf_r>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	460e      	mov	r6, r1
 80067dc:	4614      	mov	r4, r2
 80067de:	4605      	mov	r5, r0
 80067e0:	b118      	cbz	r0, 80067ea <__swbuf_r+0x12>
 80067e2:	6a03      	ldr	r3, [r0, #32]
 80067e4:	b90b      	cbnz	r3, 80067ea <__swbuf_r+0x12>
 80067e6:	f7fd ffb3 	bl	8004750 <__sinit>
 80067ea:	69a3      	ldr	r3, [r4, #24]
 80067ec:	60a3      	str	r3, [r4, #8]
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	071a      	lsls	r2, r3, #28
 80067f2:	d501      	bpl.n	80067f8 <__swbuf_r+0x20>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	b943      	cbnz	r3, 800680a <__swbuf_r+0x32>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f82a 	bl	8006854 <__swsetup_r>
 8006800:	b118      	cbz	r0, 800680a <__swbuf_r+0x32>
 8006802:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006806:	4638      	mov	r0, r7
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	1a98      	subs	r0, r3, r2
 8006810:	6963      	ldr	r3, [r4, #20]
 8006812:	b2f6      	uxtb	r6, r6
 8006814:	4283      	cmp	r3, r0
 8006816:	4637      	mov	r7, r6
 8006818:	dc05      	bgt.n	8006826 <__swbuf_r+0x4e>
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f7ff fd99 	bl	8006354 <_fflush_r>
 8006822:	2800      	cmp	r0, #0
 8006824:	d1ed      	bne.n	8006802 <__swbuf_r+0x2a>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	701e      	strb	r6, [r3, #0]
 8006834:	6962      	ldr	r2, [r4, #20]
 8006836:	1c43      	adds	r3, r0, #1
 8006838:	429a      	cmp	r2, r3
 800683a:	d004      	beq.n	8006846 <__swbuf_r+0x6e>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d5e1      	bpl.n	8006806 <__swbuf_r+0x2e>
 8006842:	2e0a      	cmp	r6, #10
 8006844:	d1df      	bne.n	8006806 <__swbuf_r+0x2e>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff fd83 	bl	8006354 <_fflush_r>
 800684e:	2800      	cmp	r0, #0
 8006850:	d0d9      	beq.n	8006806 <__swbuf_r+0x2e>
 8006852:	e7d6      	b.n	8006802 <__swbuf_r+0x2a>

08006854 <__swsetup_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4b28      	ldr	r3, [pc, #160]	@ (80068f8 <__swsetup_r+0xa4>)
 8006858:	4605      	mov	r5, r0
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	460c      	mov	r4, r1
 800685e:	b118      	cbz	r0, 8006868 <__swsetup_r+0x14>
 8006860:	6a03      	ldr	r3, [r0, #32]
 8006862:	b90b      	cbnz	r3, 8006868 <__swsetup_r+0x14>
 8006864:	f7fd ff74 	bl	8004750 <__sinit>
 8006868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686c:	0719      	lsls	r1, r3, #28
 800686e:	d421      	bmi.n	80068b4 <__swsetup_r+0x60>
 8006870:	06da      	lsls	r2, r3, #27
 8006872:	d407      	bmi.n	8006884 <__swsetup_r+0x30>
 8006874:	2209      	movs	r2, #9
 8006876:	602a      	str	r2, [r5, #0]
 8006878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006882:	e031      	b.n	80068e8 <__swsetup_r+0x94>
 8006884:	0758      	lsls	r0, r3, #29
 8006886:	d512      	bpl.n	80068ae <__swsetup_r+0x5a>
 8006888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800688a:	b141      	cbz	r1, 800689e <__swsetup_r+0x4a>
 800688c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__swsetup_r+0x46>
 8006894:	4628      	mov	r0, r5
 8006896:	f7fe fef7 	bl	8005688 <_free_r>
 800689a:	2300      	movs	r3, #0
 800689c:	6363      	str	r3, [r4, #52]	@ 0x34
 800689e:	2200      	movs	r2, #0
 80068a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a4:	6062      	str	r2, [r4, #4]
 80068a6:	6922      	ldr	r2, [r4, #16]
 80068a8:	6022      	str	r2, [r4, #0]
 80068aa:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	b942      	cbnz	r2, 80068ca <__swsetup_r+0x76>
 80068b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c0:	d003      	beq.n	80068ca <__swsetup_r+0x76>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f881 	bl	80069cc <__smakebuf_r>
 80068ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ce:	f013 0201 	ands.w	r2, r3, #1
 80068d2:	d00a      	beq.n	80068ea <__swsetup_r+0x96>
 80068d4:	2200      	movs	r2, #0
 80068d6:	60a2      	str	r2, [r4, #8]
 80068d8:	6962      	ldr	r2, [r4, #20]
 80068da:	4252      	negs	r2, r2
 80068dc:	61a2      	str	r2, [r4, #24]
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	b942      	cbnz	r2, 80068f4 <__swsetup_r+0xa0>
 80068e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068e6:	d1c7      	bne.n	8006878 <__swsetup_r+0x24>
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	0799      	lsls	r1, r3, #30
 80068ec:	bf58      	it	pl
 80068ee:	6962      	ldrpl	r2, [r4, #20]
 80068f0:	60a2      	str	r2, [r4, #8]
 80068f2:	e7f4      	b.n	80068de <__swsetup_r+0x8a>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7f7      	b.n	80068e8 <__swsetup_r+0x94>
 80068f8:	20000018 	.word	0x20000018

080068fc <_raise_r>:
 80068fc:	291f      	cmp	r1, #31
 80068fe:	b538      	push	{r3, r4, r5, lr}
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	d904      	bls.n	8006910 <_raise_r+0x14>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006912:	b112      	cbz	r2, 800691a <_raise_r+0x1e>
 8006914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006918:	b94b      	cbnz	r3, 800692e <_raise_r+0x32>
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f830 	bl	8006980 <_getpid_r>
 8006920:	4622      	mov	r2, r4
 8006922:	4601      	mov	r1, r0
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b817 	b.w	800695c <_kill_r>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d00a      	beq.n	8006948 <_raise_r+0x4c>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	d103      	bne.n	800693e <_raise_r+0x42>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	e7e7      	b.n	800690e <_raise_r+0x12>
 800693e:	2100      	movs	r1, #0
 8006940:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006944:	4620      	mov	r0, r4
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	e7e0      	b.n	800690e <_raise_r+0x12>

0800694c <raise>:
 800694c:	4b02      	ldr	r3, [pc, #8]	@ (8006958 <raise+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bfd3 	b.w	80068fc <_raise_r>
 8006956:	bf00      	nop
 8006958:	20000018 	.word	0x20000018

0800695c <_kill_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	@ (800697c <_kill_r+0x20>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	f7fd f84f 	bl	8003a0c <_kill>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_kill_r+0x1c>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	b103      	cbz	r3, 8006978 <_kill_r+0x1c>
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	2000043c 	.word	0x2000043c

08006980 <_getpid_r>:
 8006980:	f7fd b842 	b.w	8003a08 <_getpid>

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2900      	cmp	r1, #0
 800698e:	b096      	sub	sp, #88	@ 0x58
 8006990:	4615      	mov	r5, r2
 8006992:	461e      	mov	r6, r3
 8006994:	da0a      	bge.n	80069ac <__swhatbuf_r+0x28>
 8006996:	89a1      	ldrh	r1, [r4, #12]
 8006998:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800699c:	d113      	bne.n	80069c6 <__swhatbuf_r+0x42>
 800699e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069a2:	2000      	movs	r0, #0
 80069a4:	6031      	str	r1, [r6, #0]
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	b016      	add	sp, #88	@ 0x58
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	466a      	mov	r2, sp
 80069ae:	f000 f847 	bl	8006a40 <_fstat_r>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	dbef      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069b6:	9901      	ldr	r1, [sp, #4]
 80069b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069c0:	4259      	negs	r1, r3
 80069c2:	4159      	adcs	r1, r3
 80069c4:	e7eb      	b.n	800699e <__swhatbuf_r+0x1a>
 80069c6:	2100      	movs	r1, #0
 80069c8:	2240      	movs	r2, #64	@ 0x40
 80069ca:	e7ea      	b.n	80069a2 <__swhatbuf_r+0x1e>

080069cc <__smakebuf_r>:
 80069cc:	898b      	ldrh	r3, [r1, #12]
 80069ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d0:	079e      	lsls	r6, r3, #30
 80069d2:	4605      	mov	r5, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	d507      	bpl.n	80069e8 <__smakebuf_r+0x1c>
 80069d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	2301      	movs	r3, #1
 80069e2:	6163      	str	r3, [r4, #20]
 80069e4:	b002      	add	sp, #8
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
 80069e8:	ab01      	add	r3, sp, #4
 80069ea:	466a      	mov	r2, sp
 80069ec:	f7ff ffca 	bl	8006984 <__swhatbuf_r>
 80069f0:	9e00      	ldr	r6, [sp, #0]
 80069f2:	4628      	mov	r0, r5
 80069f4:	4631      	mov	r1, r6
 80069f6:	f7fe febb 	bl	8005770 <_malloc_r>
 80069fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fe:	b938      	cbnz	r0, 8006a10 <__smakebuf_r+0x44>
 8006a00:	059a      	lsls	r2, r3, #22
 8006a02:	d4ef      	bmi.n	80069e4 <__smakebuf_r+0x18>
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	f043 0302 	orr.w	r3, r3, #2
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	e7e3      	b.n	80069d8 <__smakebuf_r+0xc>
 8006a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	6020      	str	r0, [r4, #0]
 8006a1a:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e0      	beq.n	80069e4 <__smakebuf_r+0x18>
 8006a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f81c 	bl	8006a64 <_isatty_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d0d9      	beq.n	80069e4 <__smakebuf_r+0x18>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	e7d2      	b.n	80069e4 <__smakebuf_r+0x18>
	...

08006a40 <_fstat_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d07      	ldr	r5, [pc, #28]	@ (8006a60 <_fstat_r+0x20>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	f7fd f80c 	bl	8003a6a <_fstat>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d102      	bne.n	8006a5c <_fstat_r+0x1c>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	b103      	cbz	r3, 8006a5c <_fstat_r+0x1c>
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	bf00      	nop
 8006a60:	2000043c 	.word	0x2000043c

08006a64 <_isatty_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d06      	ldr	r5, [pc, #24]	@ (8006a80 <_isatty_r+0x1c>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7fd f800 	bl	8003a74 <_isatty>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_isatty_r+0x1a>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_isatty_r+0x1a>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	2000043c 	.word	0x2000043c

08006a84 <__udivmoddi4>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	468c      	mov	ip, r1
 8006a8a:	468e      	mov	lr, r1
 8006a8c:	9e08      	ldr	r6, [sp, #32]
 8006a8e:	4615      	mov	r5, r2
 8006a90:	4604      	mov	r4, r0
 8006a92:	4619      	mov	r1, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 80d0 	bne.w	8006c3a <__udivmoddi4+0x1b6>
 8006a9a:	4572      	cmp	r2, lr
 8006a9c:	d947      	bls.n	8006b2e <__udivmoddi4+0xaa>
 8006a9e:	fab2 f782 	clz	r7, r2
 8006aa2:	b14f      	cbz	r7, 8006ab8 <__udivmoddi4+0x34>
 8006aa4:	f1c7 0320 	rsb	r3, r7, #32
 8006aa8:	fa0e fc07 	lsl.w	ip, lr, r7
 8006aac:	fa20 f303 	lsr.w	r3, r0, r3
 8006ab0:	40bd      	lsls	r5, r7
 8006ab2:	ea43 0c0c 	orr.w	ip, r3, ip
 8006ab6:	40bc      	lsls	r4, r7
 8006ab8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006abc:	b2a8      	uxth	r0, r5
 8006abe:	fbbc f8fe 	udiv	r8, ip, lr
 8006ac2:	0c23      	lsrs	r3, r4, #16
 8006ac4:	fb0e cc18 	mls	ip, lr, r8, ip
 8006ac8:	fb08 f900 	mul.w	r9, r8, r0
 8006acc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006ad0:	4599      	cmp	r9, r3
 8006ad2:	d928      	bls.n	8006b26 <__udivmoddi4+0xa2>
 8006ad4:	18eb      	adds	r3, r5, r3
 8006ad6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006ada:	d204      	bcs.n	8006ae6 <__udivmoddi4+0x62>
 8006adc:	4599      	cmp	r9, r3
 8006ade:	d902      	bls.n	8006ae6 <__udivmoddi4+0x62>
 8006ae0:	f1a8 0202 	sub.w	r2, r8, #2
 8006ae4:	442b      	add	r3, r5
 8006ae6:	eba3 0309 	sub.w	r3, r3, r9
 8006aea:	b2a4      	uxth	r4, r4
 8006aec:	fbb3 fcfe 	udiv	ip, r3, lr
 8006af0:	fb0e 331c 	mls	r3, lr, ip, r3
 8006af4:	fb0c f000 	mul.w	r0, ip, r0
 8006af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d914      	bls.n	8006b2a <__udivmoddi4+0xa6>
 8006b00:	192c      	adds	r4, r5, r4
 8006b02:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006b06:	d204      	bcs.n	8006b12 <__udivmoddi4+0x8e>
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	d902      	bls.n	8006b12 <__udivmoddi4+0x8e>
 8006b0c:	f1ac 0302 	sub.w	r3, ip, #2
 8006b10:	442c      	add	r4, r5
 8006b12:	1a24      	subs	r4, r4, r0
 8006b14:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8006b18:	b11e      	cbz	r6, 8006b22 <__udivmoddi4+0x9e>
 8006b1a:	40fc      	lsrs	r4, r7
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6034      	str	r4, [r6, #0]
 8006b20:	6073      	str	r3, [r6, #4]
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	4642      	mov	r2, r8
 8006b28:	e7dd      	b.n	8006ae6 <__udivmoddi4+0x62>
 8006b2a:	4663      	mov	r3, ip
 8006b2c:	e7f1      	b.n	8006b12 <__udivmoddi4+0x8e>
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d079      	beq.n	8006c26 <__udivmoddi4+0x1a2>
 8006b32:	fab2 f382 	clz	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d03f      	beq.n	8006bba <__udivmoddi4+0x136>
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f1c1 0320 	rsb	r3, r1, #32
 8006b40:	fa02 f501 	lsl.w	r5, r2, r1
 8006b44:	fa2e f203 	lsr.w	r2, lr, r3
 8006b48:	fa0e fe01 	lsl.w	lr, lr, r1
 8006b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8006b50:	ea43 030e 	orr.w	r3, r3, lr
 8006b54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006b58:	fa00 f401 	lsl.w	r4, r0, r1
 8006b5c:	fbb2 fcfe 	udiv	ip, r2, lr
 8006b60:	b2af      	uxth	r7, r5
 8006b62:	fb0e 201c 	mls	r0, lr, ip, r2
 8006b66:	0c1a      	lsrs	r2, r3, #16
 8006b68:	fb0c f807 	mul.w	r8, ip, r7
 8006b6c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b70:	4590      	cmp	r8, r2
 8006b72:	d95a      	bls.n	8006c2a <__udivmoddi4+0x1a6>
 8006b74:	18aa      	adds	r2, r5, r2
 8006b76:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006b7a:	d204      	bcs.n	8006b86 <__udivmoddi4+0x102>
 8006b7c:	4590      	cmp	r8, r2
 8006b7e:	d902      	bls.n	8006b86 <__udivmoddi4+0x102>
 8006b80:	f1ac 0002 	sub.w	r0, ip, #2
 8006b84:	442a      	add	r2, r5
 8006b86:	eba2 0208 	sub.w	r2, r2, r8
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	fbb2 fcfe 	udiv	ip, r2, lr
 8006b90:	fb0e 221c 	mls	r2, lr, ip, r2
 8006b94:	fb0c f707 	mul.w	r7, ip, r7
 8006b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b9c:	429f      	cmp	r7, r3
 8006b9e:	d946      	bls.n	8006c2e <__udivmoddi4+0x1aa>
 8006ba0:	18eb      	adds	r3, r5, r3
 8006ba2:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8006ba6:	d204      	bcs.n	8006bb2 <__udivmoddi4+0x12e>
 8006ba8:	429f      	cmp	r7, r3
 8006baa:	d902      	bls.n	8006bb2 <__udivmoddi4+0x12e>
 8006bac:	f1ac 0202 	sub.w	r2, ip, #2
 8006bb0:	442b      	add	r3, r5
 8006bb2:	1bdb      	subs	r3, r3, r7
 8006bb4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bb8:	e002      	b.n	8006bc0 <__udivmoddi4+0x13c>
 8006bba:	ebae 0302 	sub.w	r3, lr, r2
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006bc4:	b2af      	uxth	r7, r5
 8006bc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8006bca:	0c20      	lsrs	r0, r4, #16
 8006bcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8006bd0:	fb0c f807 	mul.w	r8, ip, r7
 8006bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8006bd8:	4598      	cmp	r8, r3
 8006bda:	d92a      	bls.n	8006c32 <__udivmoddi4+0x1ae>
 8006bdc:	18eb      	adds	r3, r5, r3
 8006bde:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006be2:	d204      	bcs.n	8006bee <__udivmoddi4+0x16a>
 8006be4:	4598      	cmp	r8, r3
 8006be6:	d902      	bls.n	8006bee <__udivmoddi4+0x16a>
 8006be8:	f1ac 0002 	sub.w	r0, ip, #2
 8006bec:	442b      	add	r3, r5
 8006bee:	eba3 0308 	sub.w	r3, r3, r8
 8006bf2:	b2a4      	uxth	r4, r4
 8006bf4:	fbb3 fcfe 	udiv	ip, r3, lr
 8006bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8006bfc:	fb0c f707 	mul.w	r7, ip, r7
 8006c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006c04:	42a7      	cmp	r7, r4
 8006c06:	d916      	bls.n	8006c36 <__udivmoddi4+0x1b2>
 8006c08:	192c      	adds	r4, r5, r4
 8006c0a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006c0e:	d204      	bcs.n	8006c1a <__udivmoddi4+0x196>
 8006c10:	42a7      	cmp	r7, r4
 8006c12:	d902      	bls.n	8006c1a <__udivmoddi4+0x196>
 8006c14:	f1ac 0302 	sub.w	r3, ip, #2
 8006c18:	442c      	add	r4, r5
 8006c1a:	1be4      	subs	r4, r4, r7
 8006c1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006c20:	460f      	mov	r7, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	e778      	b.n	8006b18 <__udivmoddi4+0x94>
 8006c26:	211f      	movs	r1, #31
 8006c28:	e788      	b.n	8006b3c <__udivmoddi4+0xb8>
 8006c2a:	4660      	mov	r0, ip
 8006c2c:	e7ab      	b.n	8006b86 <__udivmoddi4+0x102>
 8006c2e:	4662      	mov	r2, ip
 8006c30:	e7bf      	b.n	8006bb2 <__udivmoddi4+0x12e>
 8006c32:	4660      	mov	r0, ip
 8006c34:	e7db      	b.n	8006bee <__udivmoddi4+0x16a>
 8006c36:	4663      	mov	r3, ip
 8006c38:	e7ef      	b.n	8006c1a <__udivmoddi4+0x196>
 8006c3a:	4573      	cmp	r3, lr
 8006c3c:	d906      	bls.n	8006c4c <__udivmoddi4+0x1c8>
 8006c3e:	b916      	cbnz	r6, 8006c46 <__udivmoddi4+0x1c2>
 8006c40:	2100      	movs	r1, #0
 8006c42:	4608      	mov	r0, r1
 8006c44:	e76d      	b.n	8006b22 <__udivmoddi4+0x9e>
 8006c46:	e9c6 0e00 	strd	r0, lr, [r6]
 8006c4a:	e7f9      	b.n	8006c40 <__udivmoddi4+0x1bc>
 8006c4c:	fab3 f783 	clz	r7, r3
 8006c50:	b987      	cbnz	r7, 8006c74 <__udivmoddi4+0x1f0>
 8006c52:	4573      	cmp	r3, lr
 8006c54:	d301      	bcc.n	8006c5a <__udivmoddi4+0x1d6>
 8006c56:	4282      	cmp	r2, r0
 8006c58:	d807      	bhi.n	8006c6a <__udivmoddi4+0x1e6>
 8006c5a:	1a84      	subs	r4, r0, r2
 8006c5c:	eb6e 0303 	sbc.w	r3, lr, r3
 8006c60:	2001      	movs	r0, #1
 8006c62:	469c      	mov	ip, r3
 8006c64:	b91e      	cbnz	r6, 8006c6e <__udivmoddi4+0x1ea>
 8006c66:	2100      	movs	r1, #0
 8006c68:	e75b      	b.n	8006b22 <__udivmoddi4+0x9e>
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	e7fa      	b.n	8006c64 <__udivmoddi4+0x1e0>
 8006c6e:	e9c6 4c00 	strd	r4, ip, [r6]
 8006c72:	e7f8      	b.n	8006c66 <__udivmoddi4+0x1e2>
 8006c74:	f1c7 0c20 	rsb	ip, r7, #32
 8006c78:	40bb      	lsls	r3, r7
 8006c7a:	fa22 f50c 	lsr.w	r5, r2, ip
 8006c7e:	431d      	orrs	r5, r3
 8006c80:	fa20 f10c 	lsr.w	r1, r0, ip
 8006c84:	fa2e f30c 	lsr.w	r3, lr, ip
 8006c88:	fa0e fe07 	lsl.w	lr, lr, r7
 8006c8c:	ea41 010e 	orr.w	r1, r1, lr
 8006c90:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8006c94:	fa00 f407 	lsl.w	r4, r0, r7
 8006c98:	fbb3 f8f9 	udiv	r8, r3, r9
 8006c9c:	fa1f fe85 	uxth.w	lr, r5
 8006ca0:	fb09 3018 	mls	r0, r9, r8, r3
 8006ca4:	0c0b      	lsrs	r3, r1, #16
 8006ca6:	fb08 fa0e 	mul.w	sl, r8, lr
 8006caa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cae:	459a      	cmp	sl, r3
 8006cb0:	fa02 f207 	lsl.w	r2, r2, r7
 8006cb4:	d940      	bls.n	8006d38 <__udivmoddi4+0x2b4>
 8006cb6:	18eb      	adds	r3, r5, r3
 8006cb8:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006cbc:	d204      	bcs.n	8006cc8 <__udivmoddi4+0x244>
 8006cbe:	459a      	cmp	sl, r3
 8006cc0:	d902      	bls.n	8006cc8 <__udivmoddi4+0x244>
 8006cc2:	f1a8 0002 	sub.w	r0, r8, #2
 8006cc6:	442b      	add	r3, r5
 8006cc8:	eba3 030a 	sub.w	r3, r3, sl
 8006ccc:	b289      	uxth	r1, r1
 8006cce:	fbb3 f8f9 	udiv	r8, r3, r9
 8006cd2:	fb09 3318 	mls	r3, r9, r8, r3
 8006cd6:	fb08 fe0e 	mul.w	lr, r8, lr
 8006cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006cde:	458e      	cmp	lr, r1
 8006ce0:	d92c      	bls.n	8006d3c <__udivmoddi4+0x2b8>
 8006ce2:	1869      	adds	r1, r5, r1
 8006ce4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006ce8:	d204      	bcs.n	8006cf4 <__udivmoddi4+0x270>
 8006cea:	458e      	cmp	lr, r1
 8006cec:	d902      	bls.n	8006cf4 <__udivmoddi4+0x270>
 8006cee:	f1a8 0302 	sub.w	r3, r8, #2
 8006cf2:	4429      	add	r1, r5
 8006cf4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006cf8:	fba0 9802 	umull	r9, r8, r0, r2
 8006cfc:	eba1 010e 	sub.w	r1, r1, lr
 8006d00:	4541      	cmp	r1, r8
 8006d02:	46ce      	mov	lr, r9
 8006d04:	4643      	mov	r3, r8
 8006d06:	d302      	bcc.n	8006d0e <__udivmoddi4+0x28a>
 8006d08:	d106      	bne.n	8006d18 <__udivmoddi4+0x294>
 8006d0a:	454c      	cmp	r4, r9
 8006d0c:	d204      	bcs.n	8006d18 <__udivmoddi4+0x294>
 8006d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8006d12:	eb68 0305 	sbc.w	r3, r8, r5
 8006d16:	3801      	subs	r0, #1
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	d0a4      	beq.n	8006c66 <__udivmoddi4+0x1e2>
 8006d1c:	ebb4 020e 	subs.w	r2, r4, lr
 8006d20:	eb61 0103 	sbc.w	r1, r1, r3
 8006d24:	fa01 fc0c 	lsl.w	ip, r1, ip
 8006d28:	fa22 f307 	lsr.w	r3, r2, r7
 8006d2c:	ea4c 0303 	orr.w	r3, ip, r3
 8006d30:	40f9      	lsrs	r1, r7
 8006d32:	e9c6 3100 	strd	r3, r1, [r6]
 8006d36:	e796      	b.n	8006c66 <__udivmoddi4+0x1e2>
 8006d38:	4640      	mov	r0, r8
 8006d3a:	e7c5      	b.n	8006cc8 <__udivmoddi4+0x244>
 8006d3c:	4643      	mov	r3, r8
 8006d3e:	e7d9      	b.n	8006cf4 <__udivmoddi4+0x270>

08006d40 <_init>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr

08006d4c <_fini>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr
