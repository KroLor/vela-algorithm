
build/debug/Vela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08006d98  08006d98  00007d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08007424  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000274  200001d4  080075f8  000091d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000448  080075f8  00009448  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f5a  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008c0c  00000000  00000000  0003b15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00013324  00000000  00000000  00043d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019b0  00000000  00000000  00057090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001419  00000000  00000000  00058a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cd23  00000000  00000000  00059e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00006ff5  00000000  00000000  00076b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000003c  00000000  00000000  0007db71  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e50  00000000  00000000  0007dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000189  00000000  00000000  00081a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_ldivmod>:
 8000b78:	b97b      	cbnz	r3, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7a:	b972      	cbnz	r2, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bfbe      	ittt	lt
 8000b80:	2000      	movlt	r0, #0
 8000b82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b86:	e006      	blt.n	8000b96 <__aeabi_ldivmod+0x1e>
 8000b88:	bf08      	it	eq
 8000b8a:	2800      	cmpeq	r0, #0
 8000b8c:	bf1c      	itt	ne
 8000b8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b92:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b96:	f000 b857 	b.w	8000c48 <__aeabi_idiv0>
 8000b9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	db09      	blt.n	8000bba <__aeabi_ldivmod+0x42>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db1a      	blt.n	8000be0 <__aeabi_ldivmod+0x68>
 8000baa:	f005 ff8b 	bl	8006ac4 <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4770      	bx	lr
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db1b      	blt.n	8000bfc <__aeabi_ldivmod+0x84>
 8000bc4:	f005 ff7e 	bl	8006ac4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	f005 ff6d 	bl	8006ac4 <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfa:	4770      	bx	lr
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	f005 ff5f 	bl	8006ac4 <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 b80c 	b.w	8000c48 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f005 ff44 	bl	8006ac4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__do_global_dtors_aux>:
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4c05      	ldr	r4, [pc, #20]	@ (8000c64 <__do_global_dtors_aux+0x18>)
 8000c50:	7823      	ldrb	r3, [r4, #0]
 8000c52:	b933      	cbnz	r3, 8000c62 <__do_global_dtors_aux+0x16>
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__do_global_dtors_aux+0x1c>)
 8000c56:	b113      	cbz	r3, 8000c5e <__do_global_dtors_aux+0x12>
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <__do_global_dtors_aux+0x20>)
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	2301      	movs	r3, #1
 8000c60:	7023      	strb	r3, [r4, #0]
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	200001d4 	.word	0x200001d4
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	08006d80 	.word	0x08006d80

08000c70 <frame_dummy>:
 8000c70:	b508      	push	{r3, lr}
 8000c72:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <frame_dummy+0x10>)
 8000c74:	b11b      	cbz	r3, 8000c7e <frame_dummy+0xe>
 8000c76:	4903      	ldr	r1, [pc, #12]	@ (8000c84 <frame_dummy+0x14>)
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <frame_dummy+0x18>)
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	08006d80 	.word	0x08006d80

08000c8c <check_acc_identity>:

static const uint8_t dev_address = 0b11010100; //адрес устройства по линии I2C
static const uint32_t timeout_default = 0xFF; //Таймаут, 255 мс

short check_acc_identity()
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	b092      	sub	sp, #72	@ 0x48
	uint16_t register_address = 0x0F; //Адрес регистра в котором хранится значение ID
	uint8_t data; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, register_address, I2C_MEMADD_SIZE_8BIT, &data, Size_, timeout_default), "WHO AM I");
 8000c90:	23ff      	movs	r3, #255	@ 0xff
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2301      	movs	r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8000c9c:	9200      	str	r2, [sp, #0]
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	21d4      	movs	r1, #212	@ 0xd4
 8000ca2:	4817      	ldr	r0, [pc, #92]	@ (8000d00 <check_acc_identity+0x74>)
 8000ca4:	f001 fc38 	bl	8002518 <HAL_I2C_Mem_Read>
 8000ca8:	4916      	ldr	r1, [pc, #88]	@ (8000d04 <check_acc_identity+0x78>)
 8000caa:	f000 fbd3 	bl	8001454 <send_reg_log>
	if (data == 0x69)
 8000cae:	f89d 3047 	ldrb.w	r3, [sp, #71]	@ 0x47
 8000cb2:	2b69      	cmp	r3, #105	@ 0x69
 8000cb4:	d102      	bne.n	8000cbc <check_acc_identity+0x30>
	{
        //successfuly read register
        return 1;
 8000cb6:	2001      	movs	r0, #1
	{
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
		send_message(buffer, PRIORITY_HIGH);
		return 0;
    }
}
 8000cb8:	b012      	add	sp, #72	@ 0x48
 8000cba:	bd10      	pop	{r4, pc}
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 8000cbc:	f10d 0c14 	add.w	ip, sp, #20
 8000cc0:	4c11      	ldr	r4, [pc, #68]	@ (8000d08 <check_acc_identity+0x7c>)
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ccc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000cd0:	f82c 2b02 	strh.w	r2, [ip], #2
 8000cd4:	0c12      	lsrs	r2, r2, #16
 8000cd6:	f88c 2000 	strb.w	r2, [ip]
 8000cda:	2400      	movs	r4, #0
 8000cdc:	f8cd 402f 	str.w	r4, [sp, #47]	@ 0x2f
 8000ce0:	f8cd 4033 	str.w	r4, [sp, #51]	@ 0x33
 8000ce4:	f8cd 4037 	str.w	r4, [sp, #55]	@ 0x37
 8000ce8:	f8cd 403b 	str.w	r4, [sp, #59]	@ 0x3b
 8000cec:	f8cd 403f 	str.w	r4, [sp, #63]	@ 0x3f
 8000cf0:	f8cd 4042 	str.w	r4, [sp, #66]	@ 0x42
		send_message(buffer, PRIORITY_HIGH);
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	a805      	add	r0, sp, #20
 8000cf8:	f000 fb9e 	bl	8001438 <send_message>
		return 0;
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	e7db      	b.n	8000cb8 <check_acc_identity+0x2c>
 8000d00:	2000020c 	.word	0x2000020c
 8000d04:	08006ebc 	.word	0x08006ebc
 8000d08:	08006d98 	.word	0x08006d98

08000d0c <acc_power_on>:

short acc_power_on()
{
 8000d0c:	b500      	push	{lr}
 8000d0e:	b087      	sub	sp, #28
	uint8_t acc_power_mode = 0b01000100;
 8000d10:	2344      	movs	r3, #68	@ 0x44
 8000d12:	f88d 3017 	strb.w	r3, [sp, #23]
	send_reg_log(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, timeout_default), "ctrl_meas");
 8000d16:	23ff      	movs	r3, #255	@ 0xff
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f10d 0217 	add.w	r2, sp, #23
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	2210      	movs	r2, #16
 8000d26:	21d4      	movs	r1, #212	@ 0xd4
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <acc_power_on+0x30>)
 8000d2a:	f001 fb45 	bl	80023b8 <HAL_I2C_Mem_Write>
 8000d2e:	4904      	ldr	r1, [pc, #16]	@ (8000d40 <acc_power_on+0x34>)
 8000d30:	f000 fb90 	bl	8001454 <send_reg_log>

    return 0;
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	b007      	add	sp, #28
 8000d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	08006ec8 	.word	0x08006ec8
 8000d44:	00000000 	.word	0x00000000

08000d48 <read_acceleration_xyz>:

void read_acceleration_xyz(double* buffer_xyz)
{
 8000d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d4c:	b089      	sub	sp, #36	@ 0x24
 8000d4e:	4680      	mov	r8, r0
	uint16_t raw_val[2];

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x28, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, timeout_default), "OUTX_L_XL");
 8000d50:	4e5d      	ldr	r6, [pc, #372]	@ (8000ec8 <read_acceleration_xyz+0x180>)
 8000d52:	27ff      	movs	r7, #255	@ 0xff
 8000d54:	9702      	str	r7, [sp, #8]
 8000d56:	2401      	movs	r4, #1
 8000d58:	9401      	str	r4, [sp, #4]
 8000d5a:	f10d 0b1c 	add.w	fp, sp, #28
 8000d5e:	f8cd b000 	str.w	fp, [sp]
 8000d62:	4623      	mov	r3, r4
 8000d64:	2228      	movs	r2, #40	@ 0x28
 8000d66:	21d4      	movs	r1, #212	@ 0xd4
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f001 fbd5 	bl	8002518 <HAL_I2C_Mem_Read>
 8000d6e:	4957      	ldr	r1, [pc, #348]	@ (8000ecc <read_acceleration_xyz+0x184>)
 8000d70:	f000 fb70 	bl	8001454 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x29, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, timeout_default), "OUTX_H_XL");
 8000d74:	9702      	str	r7, [sp, #8]
 8000d76:	9401      	str	r4, [sp, #4]
 8000d78:	f10d 0a1d 	add.w	sl, sp, #29
 8000d7c:	f8cd a000 	str.w	sl, [sp]
 8000d80:	4623      	mov	r3, r4
 8000d82:	2229      	movs	r2, #41	@ 0x29
 8000d84:	21d4      	movs	r1, #212	@ 0xd4
 8000d86:	4630      	mov	r0, r6
 8000d88:	f001 fbc6 	bl	8002518 <HAL_I2C_Mem_Read>
 8000d8c:	4950      	ldr	r1, [pc, #320]	@ (8000ed0 <read_acceleration_xyz+0x188>)
 8000d8e:	f000 fb61 	bl	8001454 <send_reg_log>

	int16_t x_val = raw_val[1] << 8 | raw_val[0];
 8000d92:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 8000d96:	022d      	lsls	r5, r5, #8
 8000d98:	b22d      	sxth	r5, r5
 8000d9a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8000d9e:	431d      	orrs	r5, r3
	raw_val[0] = raw_val[1] = 0;
 8000da0:	f04f 0900 	mov.w	r9, #0
 8000da4:	f8ad 901e 	strh.w	r9, [sp, #30]
 8000da8:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, timeout_default), "OUTY_L_XL");
 8000dac:	9702      	str	r7, [sp, #8]
 8000dae:	9401      	str	r4, [sp, #4]
 8000db0:	f8cd b000 	str.w	fp, [sp]
 8000db4:	4623      	mov	r3, r4
 8000db6:	222a      	movs	r2, #42	@ 0x2a
 8000db8:	21d4      	movs	r1, #212	@ 0xd4
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f001 fbac 	bl	8002518 <HAL_I2C_Mem_Read>
 8000dc0:	4944      	ldr	r1, [pc, #272]	@ (8000ed4 <read_acceleration_xyz+0x18c>)
 8000dc2:	f000 fb47 	bl	8001454 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, timeout_default), "OUTY_H_XL");
 8000dc6:	9702      	str	r7, [sp, #8]
 8000dc8:	9401      	str	r4, [sp, #4]
 8000dca:	f8cd a000 	str.w	sl, [sp]
 8000dce:	4623      	mov	r3, r4
 8000dd0:	222b      	movs	r2, #43	@ 0x2b
 8000dd2:	21d4      	movs	r1, #212	@ 0xd4
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f001 fb9f 	bl	8002518 <HAL_I2C_Mem_Read>
 8000dda:	493f      	ldr	r1, [pc, #252]	@ (8000ed8 <read_acceleration_xyz+0x190>)
 8000ddc:	f000 fb3a 	bl	8001454 <send_reg_log>

	int16_t y_val = raw_val[1] << 8 | raw_val[0];
 8000de0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	9305      	str	r3, [sp, #20]
	raw_val[0] = raw_val[1] = 0;
 8000df0:	f8ad 901e 	strh.w	r9, [sp, #30]
 8000df4:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, timeout_default), "OUTZ_L_XL");
 8000df8:	9702      	str	r7, [sp, #8]
 8000dfa:	9401      	str	r4, [sp, #4]
 8000dfc:	f8cd b000 	str.w	fp, [sp]
 8000e00:	4623      	mov	r3, r4
 8000e02:	222c      	movs	r2, #44	@ 0x2c
 8000e04:	21d4      	movs	r1, #212	@ 0xd4
 8000e06:	4630      	mov	r0, r6
 8000e08:	f001 fb86 	bl	8002518 <HAL_I2C_Mem_Read>
 8000e0c:	4933      	ldr	r1, [pc, #204]	@ (8000edc <read_acceleration_xyz+0x194>)
 8000e0e:	f000 fb21 	bl	8001454 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2D, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, timeout_default), "OUTZ_H_XL");
 8000e12:	9702      	str	r7, [sp, #8]
 8000e14:	9401      	str	r4, [sp, #4]
 8000e16:	f8cd a000 	str.w	sl, [sp]
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	222d      	movs	r2, #45	@ 0x2d
 8000e1e:	21d4      	movs	r1, #212	@ 0xd4
 8000e20:	4630      	mov	r0, r6
 8000e22:	f001 fb79 	bl	8002518 <HAL_I2C_Mem_Read>
 8000e26:	492e      	ldr	r1, [pc, #184]	@ (8000ee0 <read_acceleration_xyz+0x198>)
 8000e28:	f000 fb14 	bl	8001454 <send_reg_log>

	int16_t z_val = raw_val[1] << 8 | raw_val[0];
 8000e2c:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 8000e30:	0224      	lsls	r4, r4, #8
 8000e32:	b224      	sxth	r4, r4
 8000e34:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8000e38:	431c      	orrs	r4, r3

	buffer_xyz[0] = ((double)x_val * 0.488/1000)*9.81;
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f7ff fb5a 	bl	80004f4 <__aeabi_i2d>
 8000e40:	a31d      	add	r3, pc, #116	@ (adr r3, 8000eb8 <read_acceleration_xyz+0x170>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff fbbf 	bl	80005c8 <__aeabi_dmul>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <read_acceleration_xyz+0x19c>)
 8000e4e:	f7ff fce5 	bl	800081c <__aeabi_ddiv>
 8000e52:	a31b      	add	r3, pc, #108	@ (adr r3, 8000ec0 <read_acceleration_xyz+0x178>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fbb6 	bl	80005c8 <__aeabi_dmul>
 8000e5c:	e9c8 0100 	strd	r0, r1, [r8]
	buffer_xyz[1] = ((double)y_val * 0.488/1000)*9.81;
 8000e60:	9805      	ldr	r0, [sp, #20]
 8000e62:	f7ff fb47 	bl	80004f4 <__aeabi_i2d>
 8000e66:	a314      	add	r3, pc, #80	@ (adr r3, 8000eb8 <read_acceleration_xyz+0x170>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fbac 	bl	80005c8 <__aeabi_dmul>
 8000e70:	2200      	movs	r2, #0
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <read_acceleration_xyz+0x19c>)
 8000e74:	f7ff fcd2 	bl	800081c <__aeabi_ddiv>
 8000e78:	a311      	add	r3, pc, #68	@ (adr r3, 8000ec0 <read_acceleration_xyz+0x178>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fba3 	bl	80005c8 <__aeabi_dmul>
 8000e82:	e9c8 0102 	strd	r0, r1, [r8, #8]
	buffer_xyz[2] = ((double)z_val * 0.488/1000)*9.81;
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff fb34 	bl	80004f4 <__aeabi_i2d>
 8000e8c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000eb8 <read_acceleration_xyz+0x170>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fb99 	bl	80005c8 <__aeabi_dmul>
 8000e96:	2200      	movs	r2, #0
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <read_acceleration_xyz+0x19c>)
 8000e9a:	f7ff fcbf 	bl	800081c <__aeabi_ddiv>
 8000e9e:	a308      	add	r3, pc, #32	@ (adr r3, 8000ec0 <read_acceleration_xyz+0x178>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fb90 	bl	80005c8 <__aeabi_dmul>
 8000ea8:	e9c8 0104 	strd	r0, r1, [r8, #16]
 8000eac:	b009      	add	sp, #36	@ 0x24
 8000eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eb2:	bf00      	nop
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	5a1cac08 	.word	0x5a1cac08
 8000ebc:	3fdf3b64 	.word	0x3fdf3b64
 8000ec0:	51eb851f 	.word	0x51eb851f
 8000ec4:	40239eb8 	.word	0x40239eb8
 8000ec8:	2000020c 	.word	0x2000020c
 8000ecc:	08006ed4 	.word	0x08006ed4
 8000ed0:	08006ee0 	.word	0x08006ee0
 8000ed4:	08006eec 	.word	0x08006eec
 8000ed8:	08006ef8 	.word	0x08006ef8
 8000edc:	08006f04 	.word	0x08006f04
 8000ee0:	08006f10 	.word	0x08006f10
 8000ee4:	408f4000 	.word	0x408f4000

08000ee8 <check_barometer_identity>:
    int32_t actual_temp = bmp280_compensate_T_int32(temp_raw_32);
	return actual_temp;
}

short check_barometer_identity()
{
 8000ee8:	b500      	push	{lr}
 8000eea:	b087      	sub	sp, #28
	uint16_t Register_ID = 0xD0; //Адрес регистра в котором хранится значение ID
	uint8_t Data[1]; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр

	HAL_I2C_Mem_Read(&hi2c1, dev_address, Register_ID, I2C_MEMADD_SIZE_8BIT, Data, Size_, timeout_default);
 8000eec:	23ff      	movs	r3, #255	@ 0xff
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	aa05      	add	r2, sp, #20
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	22d0      	movs	r2, #208	@ 0xd0
 8000efa:	21ec      	movs	r1, #236	@ 0xec
 8000efc:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <check_barometer_identity+0x30>)
 8000efe:	f001 fb0b 	bl	8002518 <HAL_I2C_Mem_Read>
	if (Data[0] == 0x58)
 8000f02:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000f06:	2b58      	cmp	r3, #88	@ 0x58
 8000f08:	d003      	beq.n	8000f12 <check_barometer_identity+0x2a>
	{
        return 1;
	} else
	{
        return 0;
 8000f0a:	2000      	movs	r0, #0
	}

    return 0;
}
 8000f0c:	b007      	add	sp, #28
 8000f0e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e7fa      	b.n	8000f0c <check_barometer_identity+0x24>
 8000f16:	bf00      	nop
 8000f18:	2000020c 	.word	0x2000020c

08000f1c <read_dig_variables>:

void read_dig_variables()
{
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	b084      	sub	sp, #16
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T1, 2, timeout_default), "dig_T1");
 8000f20:	4c50      	ldr	r4, [pc, #320]	@ (8001064 <read_dig_variables+0x148>)
 8000f22:	26ff      	movs	r6, #255	@ 0xff
 8000f24:	9602      	str	r6, [sp, #8]
 8000f26:	2502      	movs	r5, #2
 8000f28:	9501      	str	r5, [sp, #4]
 8000f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001068 <read_dig_variables+0x14c>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2288      	movs	r2, #136	@ 0x88
 8000f32:	21ec      	movs	r1, #236	@ 0xec
 8000f34:	4620      	mov	r0, r4
 8000f36:	f001 faef 	bl	8002518 <HAL_I2C_Mem_Read>
 8000f3a:	494c      	ldr	r1, [pc, #304]	@ (800106c <read_dig_variables+0x150>)
 8000f3c:	f000 fa8a 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x8A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T2, 2, timeout_default), "dig_T2");
 8000f40:	9602      	str	r6, [sp, #8]
 8000f42:	9501      	str	r5, [sp, #4]
 8000f44:	4b4a      	ldr	r3, [pc, #296]	@ (8001070 <read_dig_variables+0x154>)
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	228a      	movs	r2, #138	@ 0x8a
 8000f4c:	21ec      	movs	r1, #236	@ 0xec
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f001 fae2 	bl	8002518 <HAL_I2C_Mem_Read>
 8000f54:	4947      	ldr	r1, [pc, #284]	@ (8001074 <read_dig_variables+0x158>)
 8000f56:	f000 fa7d 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x8C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T3, 2, timeout_default), "dig_T3");
 8000f5a:	9602      	str	r6, [sp, #8]
 8000f5c:	9501      	str	r5, [sp, #4]
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <read_dig_variables+0x15c>)
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	228c      	movs	r2, #140	@ 0x8c
 8000f66:	21ec      	movs	r1, #236	@ 0xec
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f001 fad5 	bl	8002518 <HAL_I2C_Mem_Read>
 8000f6e:	4943      	ldr	r1, [pc, #268]	@ (800107c <read_dig_variables+0x160>)
 8000f70:	f000 fa70 	bl	8001454 <send_reg_log>
  
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x8E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P1, 2, timeout_default), "dig_P1");
 8000f74:	9602      	str	r6, [sp, #8]
 8000f76:	9501      	str	r5, [sp, #4]
 8000f78:	4b41      	ldr	r3, [pc, #260]	@ (8001080 <read_dig_variables+0x164>)
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	228e      	movs	r2, #142	@ 0x8e
 8000f80:	21ec      	movs	r1, #236	@ 0xec
 8000f82:	4620      	mov	r0, r4
 8000f84:	f001 fac8 	bl	8002518 <HAL_I2C_Mem_Read>
 8000f88:	493e      	ldr	r1, [pc, #248]	@ (8001084 <read_dig_variables+0x168>)
 8000f8a:	f000 fa63 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x90, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P2, 2, timeout_default), "dig_P2");
 8000f8e:	9602      	str	r6, [sp, #8]
 8000f90:	9501      	str	r5, [sp, #4]
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <read_dig_variables+0x16c>)
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2290      	movs	r2, #144	@ 0x90
 8000f9a:	21ec      	movs	r1, #236	@ 0xec
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f001 fabb 	bl	8002518 <HAL_I2C_Mem_Read>
 8000fa2:	493a      	ldr	r1, [pc, #232]	@ (800108c <read_dig_variables+0x170>)
 8000fa4:	f000 fa56 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x92, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P3, 2, timeout_default), "dig_P3");
 8000fa8:	9602      	str	r6, [sp, #8]
 8000faa:	9501      	str	r5, [sp, #4]
 8000fac:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <read_dig_variables+0x174>)
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2292      	movs	r2, #146	@ 0x92
 8000fb4:	21ec      	movs	r1, #236	@ 0xec
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f001 faae 	bl	8002518 <HAL_I2C_Mem_Read>
 8000fbc:	4935      	ldr	r1, [pc, #212]	@ (8001094 <read_dig_variables+0x178>)
 8000fbe:	f000 fa49 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x94, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P4, 2, timeout_default), "dig_P4");
 8000fc2:	9602      	str	r6, [sp, #8]
 8000fc4:	9501      	str	r5, [sp, #4]
 8000fc6:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <read_dig_variables+0x17c>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2294      	movs	r2, #148	@ 0x94
 8000fce:	21ec      	movs	r1, #236	@ 0xec
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f001 faa1 	bl	8002518 <HAL_I2C_Mem_Read>
 8000fd6:	4931      	ldr	r1, [pc, #196]	@ (800109c <read_dig_variables+0x180>)
 8000fd8:	f000 fa3c 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x96, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P5, 2, timeout_default), "dig_P5");
 8000fdc:	9602      	str	r6, [sp, #8]
 8000fde:	9501      	str	r5, [sp, #4]
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <read_dig_variables+0x184>)
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2296      	movs	r2, #150	@ 0x96
 8000fe8:	21ec      	movs	r1, #236	@ 0xec
 8000fea:	4620      	mov	r0, r4
 8000fec:	f001 fa94 	bl	8002518 <HAL_I2C_Mem_Read>
 8000ff0:	492c      	ldr	r1, [pc, #176]	@ (80010a4 <read_dig_variables+0x188>)
 8000ff2:	f000 fa2f 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x98, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P6, 2, timeout_default), "dig_P6");
 8000ff6:	9602      	str	r6, [sp, #8]
 8000ff8:	9501      	str	r5, [sp, #4]
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <read_dig_variables+0x18c>)
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	2298      	movs	r2, #152	@ 0x98
 8001002:	21ec      	movs	r1, #236	@ 0xec
 8001004:	4620      	mov	r0, r4
 8001006:	f001 fa87 	bl	8002518 <HAL_I2C_Mem_Read>
 800100a:	4928      	ldr	r1, [pc, #160]	@ (80010ac <read_dig_variables+0x190>)
 800100c:	f000 fa22 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x9A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P7, 2, timeout_default), "dig_P7");
 8001010:	9602      	str	r6, [sp, #8]
 8001012:	9501      	str	r5, [sp, #4]
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <read_dig_variables+0x194>)
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	229a      	movs	r2, #154	@ 0x9a
 800101c:	21ec      	movs	r1, #236	@ 0xec
 800101e:	4620      	mov	r0, r4
 8001020:	f001 fa7a 	bl	8002518 <HAL_I2C_Mem_Read>
 8001024:	4923      	ldr	r1, [pc, #140]	@ (80010b4 <read_dig_variables+0x198>)
 8001026:	f000 fa15 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x9C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P8, 2, timeout_default), "dig_P8");
 800102a:	9602      	str	r6, [sp, #8]
 800102c:	9501      	str	r5, [sp, #4]
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <read_dig_variables+0x19c>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	229c      	movs	r2, #156	@ 0x9c
 8001036:	21ec      	movs	r1, #236	@ 0xec
 8001038:	4620      	mov	r0, r4
 800103a:	f001 fa6d 	bl	8002518 <HAL_I2C_Mem_Read>
 800103e:	491f      	ldr	r1, [pc, #124]	@ (80010bc <read_dig_variables+0x1a0>)
 8001040:	f000 fa08 	bl	8001454 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x9E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P9, 2, timeout_default), "dig_P9");
 8001044:	9602      	str	r6, [sp, #8]
 8001046:	9501      	str	r5, [sp, #4]
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <read_dig_variables+0x1a4>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	229e      	movs	r2, #158	@ 0x9e
 8001050:	21ec      	movs	r1, #236	@ 0xec
 8001052:	4620      	mov	r0, r4
 8001054:	f001 fa60 	bl	8002518 <HAL_I2C_Mem_Read>
 8001058:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <read_dig_variables+0x1a8>)
 800105a:	f000 f9fb 	bl	8001454 <send_reg_log>
}
 800105e:	b004      	add	sp, #16
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	bf00      	nop
 8001064:	2000020c 	.word	0x2000020c
 8001068:	2000020a 	.word	0x2000020a
 800106c:	08006f1c 	.word	0x08006f1c
 8001070:	20000208 	.word	0x20000208
 8001074:	08006f24 	.word	0x08006f24
 8001078:	20000206 	.word	0x20000206
 800107c:	08006f2c 	.word	0x08006f2c
 8001080:	20000204 	.word	0x20000204
 8001084:	08006f34 	.word	0x08006f34
 8001088:	20000202 	.word	0x20000202
 800108c:	08006f3c 	.word	0x08006f3c
 8001090:	20000200 	.word	0x20000200
 8001094:	08006f44 	.word	0x08006f44
 8001098:	200001fe 	.word	0x200001fe
 800109c:	08006f4c 	.word	0x08006f4c
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	08006f54 	.word	0x08006f54
 80010a8:	200001fa 	.word	0x200001fa
 80010ac:	08006f5c 	.word	0x08006f5c
 80010b0:	200001f8 	.word	0x200001f8
 80010b4:	08006f64 	.word	0x08006f64
 80010b8:	200001f6 	.word	0x200001f6
 80010bc:	08006f6c 	.word	0x08006f6c
 80010c0:	200001f4 	.word	0x200001f4
 80010c4:	08006f74 	.word	0x08006f74

080010c8 <barometer_power_on>:

short barometer_power_on()
{
 80010c8:	b500      	push	{lr}
 80010ca:	b087      	sub	sp, #28
	read_dig_variables();
 80010cc:	f7ff ff26 	bl	8000f1c <read_dig_variables>

	//datasheet page 25, register ctrl_meas
	uint8_t ctrl_meas = 0b01001001;
 80010d0:	2349      	movs	r3, #73	@ 0x49
 80010d2:	f88d 3017 	strb.w	r3, [sp, #23]
	send_reg_log(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0xF4, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, 1, timeout_default), "ctrl_meas");
 80010d6:	23ff      	movs	r3, #255	@ 0xff
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f10d 0217 	add.w	r2, sp, #23
 80010e2:	9200      	str	r2, [sp, #0]
 80010e4:	22f4      	movs	r2, #244	@ 0xf4
 80010e6:	21ec      	movs	r1, #236	@ 0xec
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <barometer_power_on+0x34>)
 80010ea:	f001 f965 	bl	80023b8 <HAL_I2C_Mem_Write>
 80010ee:	4904      	ldr	r1, [pc, #16]	@ (8001100 <barometer_power_on+0x38>)
 80010f0:	f000 f9b0 	bl	8001454 <send_reg_log>

    return 0;
}
 80010f4:	2000      	movs	r0, #0
 80010f6:	b007      	add	sp, #28
 80010f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	08006ec8 	.word	0x08006ec8

08001104 <bmp280_compensate_T_int32>:

static int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <bmp280_compensate_T_int32+0x3c>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	005a      	lsls	r2, r3, #1
 800110a:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <bmp280_compensate_T_int32+0x40>)
 8001110:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001114:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8001118:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 800111c:	fb00 f000 	mul.w	r0, r0, r0
	>> 12) *
 8001120:	1300      	asrs	r0, r0, #12
	((int32_t)dig_T3)) >> 14;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <bmp280_compensate_T_int32+0x44>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
	>> 12) *
 8001128:	fb03 f000 	mul.w	r0, r3, r0
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 800112c:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 800112e:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <bmp280_compensate_T_int32+0x48>)
 8001134:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001136:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800113a:	3080      	adds	r0, #128	@ 0x80
	return T;
}
 800113c:	1200      	asrs	r0, r0, #8
 800113e:	4770      	bx	lr
 8001140:	2000020a 	.word	0x2000020a
 8001144:	20000208 	.word	0x20000208
 8001148:	20000206 	.word	0x20000206
 800114c:	200001f0 	.word	0x200001f0

08001150 <read_temp>:
{
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	b086      	sub	sp, #24
    temp_raw[0] = temp_raw[1] = temp_raw[2]  = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f88d 3016 	strb.w	r3, [sp, #22]
 800115a:	f88d 3015 	strb.w	r3, [sp, #21]
 800115e:	f88d 3014 	strb.w	r3, [sp, #20]
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xFA, I2C_MEMADD_SIZE_8BIT, temp_raw, 1, timeout_default), "temp_msb");
 8001162:	4d1d      	ldr	r5, [pc, #116]	@ (80011d8 <read_temp+0x88>)
 8001164:	26ff      	movs	r6, #255	@ 0xff
 8001166:	9602      	str	r6, [sp, #8]
 8001168:	2401      	movs	r4, #1
 800116a:	9401      	str	r4, [sp, #4]
 800116c:	ab05      	add	r3, sp, #20
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4623      	mov	r3, r4
 8001172:	22fa      	movs	r2, #250	@ 0xfa
 8001174:	21ec      	movs	r1, #236	@ 0xec
 8001176:	4628      	mov	r0, r5
 8001178:	f001 f9ce 	bl	8002518 <HAL_I2C_Mem_Read>
 800117c:	4917      	ldr	r1, [pc, #92]	@ (80011dc <read_temp+0x8c>)
 800117e:	f000 f969 	bl	8001454 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xFB, I2C_MEMADD_SIZE_8BIT, temp_raw+1, 1, timeout_default), "temp_lsb");
 8001182:	9602      	str	r6, [sp, #8]
 8001184:	9401      	str	r4, [sp, #4]
 8001186:	f10d 0315 	add.w	r3, sp, #21
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4623      	mov	r3, r4
 800118e:	22fb      	movs	r2, #251	@ 0xfb
 8001190:	21ec      	movs	r1, #236	@ 0xec
 8001192:	4628      	mov	r0, r5
 8001194:	f001 f9c0 	bl	8002518 <HAL_I2C_Mem_Read>
 8001198:	4911      	ldr	r1, [pc, #68]	@ (80011e0 <read_temp+0x90>)
 800119a:	f000 f95b 	bl	8001454 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xFC, I2C_MEMADD_SIZE_8BIT, temp_raw+2, 1, timeout_default), "temp_xlsb");
 800119e:	9602      	str	r6, [sp, #8]
 80011a0:	9401      	str	r4, [sp, #4]
 80011a2:	f10d 0316 	add.w	r3, sp, #22
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4623      	mov	r3, r4
 80011aa:	22fc      	movs	r2, #252	@ 0xfc
 80011ac:	21ec      	movs	r1, #236	@ 0xec
 80011ae:	4628      	mov	r0, r5
 80011b0:	f001 f9b2 	bl	8002518 <HAL_I2C_Mem_Read>
 80011b4:	490b      	ldr	r1, [pc, #44]	@ (80011e4 <read_temp+0x94>)
 80011b6:	f000 f94d 	bl	8001454 <send_reg_log>
    int32_t temp_raw_32 = (int32_t) ( ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | ((uint32_t)temp_raw[2] >> 4) );
 80011ba:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80011be:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80011c8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    int32_t actual_temp = bmp280_compensate_T_int32(temp_raw_32);
 80011cc:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 80011d0:	f7ff ff98 	bl	8001104 <bmp280_compensate_T_int32>
}
 80011d4:	b006      	add	sp, #24
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	2000020c 	.word	0x2000020c
 80011dc:	08006f7c 	.word	0x08006f7c
 80011e0:	08006f88 	.word	0x08006f88
 80011e4:	08006f94 	.word	0x08006f94

080011e8 <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80011ea:	4b66      	ldr	r3, [pc, #408]	@ (8001384 <bmp280_compensate_P_int64+0x19c>)
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	17cb      	asrs	r3, r1, #31
 80011f0:	f5b1 31fa 	subs.w	r1, r1, #128000	@ 0x1f400
 80011f4:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
	var2 = var1 * var1 * (int64_t)dig_P6;
 80011f8:	fb01 f403 	mul.w	r4, r1, r3
 80011fc:	fba1 2601 	umull	r2, r6, r1, r1
 8001200:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8001204:	4c60      	ldr	r4, [pc, #384]	@ (8001388 <bmp280_compensate_P_int64+0x1a0>)
 8001206:	f9b4 5000 	ldrsh.w	r5, [r4]
 800120a:	17ec      	asrs	r4, r5, #31
 800120c:	fb02 f404 	mul.w	r4, r2, r4
 8001210:	fb05 4406 	mla	r4, r5, r6, r4
 8001214:	fba2 7505 	umull	r7, r5, r2, r5
 8001218:	442c      	add	r4, r5
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800121a:	4d5c      	ldr	r5, [pc, #368]	@ (800138c <bmp280_compensate_P_int64+0x1a4>)
 800121c:	f9b5 c000 	ldrsh.w	ip, [r5]
 8001220:	ea4f 75ec 	mov.w	r5, ip, asr #31
 8001224:	fb0c fe03 	mul.w	lr, ip, r3
 8001228:	fb01 ee05 	mla	lr, r1, r5, lr
 800122c:	fbac c501 	umull	ip, r5, ip, r1
 8001230:	44ae      	add	lr, r5
 8001232:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 8001236:	ea4e 3edc 	orr.w	lr, lr, ip, lsr #15
 800123a:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 800123e:	eb1c 0c07 	adds.w	ip, ip, r7
 8001242:	eb44 040e 	adc.w	r4, r4, lr
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001246:	4d52      	ldr	r5, [pc, #328]	@ (8001390 <bmp280_compensate_P_int64+0x1a8>)
 8001248:	f9b5 5000 	ldrsh.w	r5, [r5]
 800124c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001250:	4d50      	ldr	r5, [pc, #320]	@ (8001394 <bmp280_compensate_P_int64+0x1ac>)
 8001252:	f9b5 e000 	ldrsh.w	lr, [r5]
 8001256:	ea4f 75ee 	mov.w	r5, lr, asr #31
 800125a:	fb02 f505 	mul.w	r5, r2, r5
 800125e:	fb0e 5506 	mla	r5, lr, r6, r5
 8001262:	fba2 2e0e 	umull	r2, lr, r2, lr
 8001266:	4475      	add	r5, lr
 8001268:	0a12      	lsrs	r2, r2, #8
 800126a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800126e:	4e4a      	ldr	r6, [pc, #296]	@ (8001398 <bmp280_compensate_P_int64+0x1b0>)
 8001270:	f9b6 e000 	ldrsh.w	lr, [r6]
 8001274:	ea4f 76ee 	mov.w	r6, lr, asr #31
 8001278:	fb0e f303 	mul.w	r3, lr, r3
 800127c:	fb01 3306 	mla	r3, r1, r6, r3
 8001280:	fbae e101 	umull	lr, r1, lr, r1
 8001284:	440b      	add	r3, r1
 8001286:	031b      	lsls	r3, r3, #12
 8001288:	ea43 531e 	orr.w	r3, r3, lr, lsr #20
 800128c:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 8001290:	eb12 020e 	adds.w	r2, r2, lr
 8001294:	eb43 2325 	adc.w	r3, r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001298:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800129c:	493f      	ldr	r1, [pc, #252]	@ (800139c <bmp280_compensate_P_int64+0x1b4>)
 800129e:	880d      	ldrh	r5, [r1, #0]
 80012a0:	fba2 2105 	umull	r2, r1, r2, r5
 80012a4:	fb05 1103 	mla	r1, r5, r3, r1
 80012a8:	104a      	asrs	r2, r1, #1
 80012aa:	17cb      	asrs	r3, r1, #31

	if (var1 == 0)
 80012ac:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 80012b0:	d065      	beq.n	800137e <bmp280_compensate_P_int64+0x196>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576-adc_P;
 80012b2:	f5c0 1e80 	rsb	lr, r0, #1048576	@ 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 80012b6:	ea4f 016e 	mov.w	r1, lr, asr #1
 80012ba:	ea4f 7ece 	mov.w	lr, lr, lsl #31
 80012be:	ebbe 0e0c 	subs.w	lr, lr, ip
 80012c2:	eb61 0404 	sbc.w	r4, r1, r4
 80012c6:	eb1e 0c0e 	adds.w	ip, lr, lr
 80012ca:	eb44 0104 	adc.w	r1, r4, r4
 80012ce:	eb1c 0c0e 	adds.w	ip, ip, lr
 80012d2:	eb44 0101 	adc.w	r1, r4, r1
 80012d6:	0188      	lsls	r0, r1, #6
 80012d8:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 80012dc:	ea4f 158c 	mov.w	r5, ip, lsl #6
 80012e0:	eb1c 0c05 	adds.w	ip, ip, r5
 80012e4:	eb41 0100 	adc.w	r1, r1, r0
 80012e8:	0089      	lsls	r1, r1, #2
 80012ea:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 80012ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012f2:	eb1c 0c0e 	adds.w	ip, ip, lr
 80012f6:	eb44 0101 	adc.w	r1, r4, r1
 80012fa:	0089      	lsls	r1, r1, #2
 80012fc:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001300:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8001304:	eb10 000e 	adds.w	r0, r0, lr
 8001308:	eb44 0101 	adc.w	r1, r4, r1
 800130c:	f7ff fc34 	bl	8000b78 <__aeabi_ldivmod>
 8001310:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001312:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <bmp280_compensate_P_int64+0x1b8>)
 8001314:	f9b2 5000 	ldrsh.w	r5, [r2]
 8001318:	17ef      	asrs	r7, r5, #31
 800131a:	0b42      	lsrs	r2, r0, #13
 800131c:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001320:	134e      	asrs	r6, r1, #13
 8001322:	fb05 f406 	mul.w	r4, r5, r6
 8001326:	fb02 4407 	mla	r4, r2, r7, r4
 800132a:	fba5 5702 	umull	r5, r7, r5, r2
 800132e:	443c      	add	r4, r7
 8001330:	fb02 f404 	mul.w	r4, r2, r4
 8001334:	fb05 4406 	mla	r4, r5, r6, r4
 8001338:	fba2 2505 	umull	r2, r5, r2, r5
 800133c:	442c      	add	r4, r5
 800133e:	0e52      	lsrs	r2, r2, #25
 8001340:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001344:	4d17      	ldr	r5, [pc, #92]	@ (80013a4 <bmp280_compensate_P_int64+0x1bc>)
 8001346:	f9b5 5000 	ldrsh.w	r5, [r5]
 800134a:	17ef      	asrs	r7, r5, #31
 800134c:	fb05 f601 	mul.w	r6, r5, r1
 8001350:	fb07 6000 	mla	r0, r7, r0, r6
 8001354:	fba5 5603 	umull	r5, r6, r5, r3
 8001358:	4430      	add	r0, r6
 800135a:	0ced      	lsrs	r5, r5, #19
 800135c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001360:	189b      	adds	r3, r3, r2
 8001362:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 8001366:	195b      	adds	r3, r3, r5
 8001368:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 800136c:	0a18      	lsrs	r0, r3, #8
 800136e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <bmp280_compensate_P_int64+0x1c0>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 8001378:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0; // avoid exception caused by division by zero
 800137e:	2000      	movs	r0, #0
 8001380:	e7fc      	b.n	800137c <bmp280_compensate_P_int64+0x194>
 8001382:	bf00      	nop
 8001384:	200001f0 	.word	0x200001f0
 8001388:	200001fa 	.word	0x200001fa
 800138c:	200001fc 	.word	0x200001fc
 8001390:	200001fe 	.word	0x200001fe
 8001394:	20000200 	.word	0x20000200
 8001398:	20000202 	.word	0x20000202
 800139c:	20000204 	.word	0x20000204
 80013a0:	200001f4 	.word	0x200001f4
 80013a4:	200001f6 	.word	0x200001f6
 80013a8:	200001f8 	.word	0x200001f8

080013ac <read_pressure>:
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	b086      	sub	sp, #24
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xF7, I2C_MEMADD_SIZE_8BIT, pressure_raw, 1, timeout_default), "press_msb");
 80013b0:	4d1d      	ldr	r5, [pc, #116]	@ (8001428 <read_pressure+0x7c>)
 80013b2:	26ff      	movs	r6, #255	@ 0xff
 80013b4:	9602      	str	r6, [sp, #8]
 80013b6:	2401      	movs	r4, #1
 80013b8:	9401      	str	r4, [sp, #4]
 80013ba:	ab05      	add	r3, sp, #20
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	22f7      	movs	r2, #247	@ 0xf7
 80013c2:	21ec      	movs	r1, #236	@ 0xec
 80013c4:	4628      	mov	r0, r5
 80013c6:	f001 f8a7 	bl	8002518 <HAL_I2C_Mem_Read>
 80013ca:	4918      	ldr	r1, [pc, #96]	@ (800142c <read_pressure+0x80>)
 80013cc:	f000 f842 	bl	8001454 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xF8, I2C_MEMADD_SIZE_8BIT, pressure_raw+1, 1, timeout_default), "press_lsb");
 80013d0:	9602      	str	r6, [sp, #8]
 80013d2:	9401      	str	r4, [sp, #4]
 80013d4:	f10d 0315 	add.w	r3, sp, #21
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4623      	mov	r3, r4
 80013dc:	22f8      	movs	r2, #248	@ 0xf8
 80013de:	21ec      	movs	r1, #236	@ 0xec
 80013e0:	4628      	mov	r0, r5
 80013e2:	f001 f899 	bl	8002518 <HAL_I2C_Mem_Read>
 80013e6:	4912      	ldr	r1, [pc, #72]	@ (8001430 <read_pressure+0x84>)
 80013e8:	f000 f834 	bl	8001454 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0xF9, I2C_MEMADD_SIZE_8BIT, pressure_raw+2, 1, timeout_default), "press_xlsb");
 80013ec:	9602      	str	r6, [sp, #8]
 80013ee:	9401      	str	r4, [sp, #4]
 80013f0:	f10d 0316 	add.w	r3, sp, #22
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4623      	mov	r3, r4
 80013f8:	22f9      	movs	r2, #249	@ 0xf9
 80013fa:	21ec      	movs	r1, #236	@ 0xec
 80013fc:	4628      	mov	r0, r5
 80013fe:	f001 f88b 	bl	8002518 <HAL_I2C_Mem_Read>
 8001402:	490c      	ldr	r1, [pc, #48]	@ (8001434 <read_pressure+0x88>)
 8001404:	f000 f826 	bl	8001454 <send_reg_log>
    int32_t pressure_raw_32 = (int32_t) ( ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | ((uint32_t)pressure_raw[2] >> 4) );
 8001408:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800140c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001416:	f89d 0016 	ldrb.w	r0, [sp, #22]
    uint32_t actual_pressure = bmp280_compensate_P_int64(pressure_raw_32);
 800141a:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 800141e:	f7ff fee3 	bl	80011e8 <bmp280_compensate_P_int64>
}
 8001422:	b006      	add	sp, #24
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	bf00      	nop
 8001428:	2000020c 	.word	0x2000020c
 800142c:	08006fa0 	.word	0x08006fa0
 8001430:	08006fac 	.word	0x08006fac
 8001434:	08006fb8 	.word	0x08006fb8

08001438 <send_message>:

  send_message(buffer, PRIORITY_LOW);
}

void send_message(char *msg, Msg_Priority priority)
{
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), timeout_default);
 800143c:	f7fe ff00 	bl	8000240 <strlen>
 8001440:	23ff      	movs	r3, #255	@ 0xff
 8001442:	b282      	uxth	r2, r0
 8001444:	4621      	mov	r1, r4
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <send_message+0x18>)
 8001448:	f002 fa6f 	bl	800392a <HAL_UART_Transmit>
}
 800144c:	bd10      	pop	{r4, pc}
 800144e:	bf00      	nop
 8001450:	200002b4 	.word	0x200002b4

08001454 <send_reg_log>:
{
 8001454:	b530      	push	{r4, r5, lr}
 8001456:	b09b      	sub	sp, #108	@ 0x6c
  switch (status)
 8001458:	2803      	cmp	r0, #3
 800145a:	d803      	bhi.n	8001464 <send_reg_log+0x10>
 800145c:	e8df f000 	tbb	[pc, r0]
 8001460:	27250429 	.word	0x27250429
 8001464:	2500      	movs	r5, #0
 8001466:	e000      	b.n	800146a <send_reg_log+0x16>
      message = "ERROR";
 8001468:	4d13      	ldr	r5, [pc, #76]	@ (80014b8 <send_reg_log+0x64>)
  strcat(buffer, reg);
 800146a:	ac01      	add	r4, sp, #4
 800146c:	4620      	mov	r0, r4
 800146e:	f003 fa33 	bl	80048d8 <strcat>
  strcat(buffer, ": ");
 8001472:	4620      	mov	r0, r4
 8001474:	f7fe fee4 	bl	8000240 <strlen>
 8001478:	1822      	adds	r2, r4, r0
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <send_reg_log+0x68>)
 800147c:	8819      	ldrh	r1, [r3, #0]
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	5221      	strh	r1, [r4, r0]
 8001482:	7093      	strb	r3, [r2, #2]
  strcat(buffer, message);
 8001484:	4629      	mov	r1, r5
 8001486:	4620      	mov	r0, r4
 8001488:	f003 fa26 	bl	80048d8 <strcat>
  strcat(buffer, "\n\r\0");
 800148c:	4620      	mov	r0, r4
 800148e:	f7fe fed7 	bl	8000240 <strlen>
 8001492:	1822      	adds	r2, r4, r0
 8001494:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <send_reg_log+0x6c>)
 8001496:	8819      	ldrh	r1, [r3, #0]
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	5221      	strh	r1, [r4, r0]
 800149c:	7093      	strb	r3, [r2, #2]
  send_message(buffer, PRIORITY_LOW);
 800149e:	2100      	movs	r1, #0
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff ffc9 	bl	8001438 <send_message>
}
 80014a6:	b01b      	add	sp, #108	@ 0x6c
 80014a8:	bd30      	pop	{r4, r5, pc}
      message = "BUSY";
 80014aa:	4d06      	ldr	r5, [pc, #24]	@ (80014c4 <send_reg_log+0x70>)
      break;
 80014ac:	e7dd      	b.n	800146a <send_reg_log+0x16>
      message = "TIMEOUT";
 80014ae:	4d06      	ldr	r5, [pc, #24]	@ (80014c8 <send_reg_log+0x74>)
      break;
 80014b0:	e7db      	b.n	800146a <send_reg_log+0x16>
      message = "OK";
 80014b2:	4d06      	ldr	r5, [pc, #24]	@ (80014cc <send_reg_log+0x78>)
 80014b4:	e7d9      	b.n	800146a <send_reg_log+0x16>
 80014b6:	bf00      	nop
 80014b8:	08006fc8 	.word	0x08006fc8
 80014bc:	08006fe0 	.word	0x08006fe0
 80014c0:	08006dcc 	.word	0x08006dcc
 80014c4:	08006fd0 	.word	0x08006fd0
 80014c8:	08006fd8 	.word	0x08006fd8
 80014cc:	08006fc4 	.word	0x08006fc4

080014d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d0:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2100      	movs	r1, #0
 80014d4:	9100      	str	r1, [sp, #0]
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_GPIO_Init+0x34>)
 80014d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e2:	f002 0201 	and.w	r2, r2, #1
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	9101      	str	r1, [sp, #4]
 80014ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ee:	f042 0202 	orr.w	r2, r2, #2
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	9b01      	ldr	r3, [sp, #4]

}
 80014fe:	b002      	add	sp, #8
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150a:	480b      	ldr	r0, [pc, #44]	@ (8001538 <MX_I2C1_Init+0x30>)
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_I2C1_Init+0x34>)
 800150e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_I2C1_Init+0x38>)
 8001512:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001514:	2300      	movs	r3, #0
 8001516:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800151e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001522:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001528:	f000 fe68 	bl	80021fc <HAL_I2C_Init>
 800152c:	b900      	cbnz	r0, 8001530 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001530:	f000 f840 	bl	80015b4 <Error_Handler>
}
 8001534:	e7fb      	b.n	800152e <MX_I2C1_Init+0x26>
 8001536:	bf00      	nop
 8001538:	2000020c 	.word	0x2000020c
 800153c:	40005400 	.word	0x40005400
 8001540:	000186a0 	.word	0x000186a0

08001544 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001544:	b530      	push	{r4, r5, lr}
 8001546:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	2300      	movs	r3, #0
 800154a:	9303      	str	r3, [sp, #12]
 800154c:	9304      	str	r3, [sp, #16]
 800154e:	9305      	str	r3, [sp, #20]
 8001550:	9306      	str	r3, [sp, #24]
 8001552:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_I2C_MspInit+0x64>)
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800155c:	b009      	add	sp, #36	@ 0x24
 800155e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	2500      	movs	r5, #0
 8001562:	9501      	str	r5, [sp, #4]
 8001564:	4c11      	ldr	r4, [pc, #68]	@ (80015ac <HAL_I2C_MspInit+0x68>)
 8001566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6323      	str	r3, [r4, #48]	@ 0x30
 800156e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001578:	23c0      	movs	r3, #192	@ 0xc0
 800157a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001584:	2304      	movs	r3, #4
 8001586:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	a903      	add	r1, sp, #12
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <HAL_I2C_MspInit+0x6c>)
 800158c:	f000 fac8 	bl	8001b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	9502      	str	r5, [sp, #8]
 8001592:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001598:	6423      	str	r3, [r4, #64]	@ 0x40
 800159a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	9b02      	ldr	r3, [sp, #8]
}
 80015a4:	e7da      	b.n	800155c <HAL_I2C_MspInit+0x18>
 80015a6:	bf00      	nop
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400

080015b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <Error_Handler+0x2>

080015b8 <SystemClock_Config>:
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015bc:	ac08      	add	r4, sp, #32
 80015be:	2230      	movs	r2, #48	@ 0x30
 80015c0:	2100      	movs	r1, #0
 80015c2:	4620      	mov	r0, r4
 80015c4:	f003 f980 	bl	80048c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	2300      	movs	r3, #0
 80015ca:	9303      	str	r3, [sp, #12]
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	9305      	str	r3, [sp, #20]
 80015d0:	9306      	str	r3, [sp, #24]
 80015d2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <SystemClock_Config+0x98>)
 80015d8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80015da:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80015de:	6411      	str	r1, [r2, #64]	@ 0x40
 80015e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015e2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <SystemClock_Config+0x9c>)
 80015ee:	6811      	ldr	r1, [r2, #0]
 80015f0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80015f4:	6011      	str	r1, [r2, #0]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2202      	movs	r2, #2
 8001602:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2101      	movs	r1, #1
 8001606:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2110      	movs	r1, #16
 800160a:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160e:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161a:	2304      	movs	r3, #4
 800161c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161e:	4620      	mov	r0, r4
 8001620:	f001 f912 	bl	8002848 <HAL_RCC_OscConfig>
 8001624:	b980      	cbnz	r0, 8001648 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001626:	230f      	movs	r3, #15
 8001628:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162a:	2302      	movs	r3, #2
 800162c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001632:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001636:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001638:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800163a:	2103      	movs	r1, #3
 800163c:	a803      	add	r0, sp, #12
 800163e:	f001 fb53 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8001642:	b918      	cbnz	r0, 800164c <SystemClock_Config+0x94>
}
 8001644:	b014      	add	sp, #80	@ 0x50
 8001646:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001648:	f7ff ffb4 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800164c:	f7ff ffb2 	bl	80015b4 <Error_Handler>
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <main>:
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	f5ad 7d3b 	sub.w	sp, sp, #748	@ 0x2ec
  char data[100] =  "F411 says: I'm alive\n\r\0";
 800165e:	4da8      	ldr	r5, [pc, #672]	@ (8001900 <main+0x2a8>)
 8001660:	aca1      	add	r4, sp, #644	@ 0x284
 8001662:	6828      	ldr	r0, [r5, #0]
 8001664:	6869      	ldr	r1, [r5, #4]
 8001666:	68aa      	ldr	r2, [r5, #8]
 8001668:	68eb      	ldr	r3, [r5, #12]
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	6928      	ldr	r0, [r5, #16]
 800166e:	6969      	ldr	r1, [r5, #20]
 8001670:	c403      	stmia	r4!, {r0, r1}
 8001672:	224c      	movs	r2, #76	@ 0x4c
 8001674:	2100      	movs	r1, #0
 8001676:	4620      	mov	r0, r4
 8001678:	f003 f926 	bl	80048c8 <memset>
  send_message(data, PRIORITY_HIGH);
 800167c:	2102      	movs	r1, #2
 800167e:	a8a1      	add	r0, sp, #644	@ 0x284
 8001680:	f7ff feda 	bl	8001438 <send_message>
  HAL_Init();
 8001684:	f000 f990 	bl	80019a8 <HAL_Init>
  SystemClock_Config();
 8001688:	f7ff ff96 	bl	80015b8 <SystemClock_Config>
  MX_GPIO_Init();
 800168c:	f7ff ff20 	bl	80014d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001690:	f7ff ff3a 	bl	8001508 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001694:	f002 fb1c 	bl	8003cd0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001698:	f002 faa6 	bl	8003be8 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800169c:	2100      	movs	r1, #0
 800169e:	4899      	ldr	r0, [pc, #612]	@ (8001904 <main+0x2ac>)
 80016a0:	f001 ff3e 	bl	8003520 <HAL_TIM_PWM_Start>
  char str_buf[100] =  "--------------------LSM6DS33 init--------------------------\n\r";
 80016a4:	4c98      	ldr	r4, [pc, #608]	@ (8001908 <main+0x2b0>)
 80016a6:	ae88      	add	r6, sp, #544	@ 0x220
 80016a8:	f104 0730 	add.w	r7, r4, #48	@ 0x30
 80016ac:	4635      	mov	r5, r6
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	6861      	ldr	r1, [r4, #4]
 80016b2:	68a2      	ldr	r2, [r4, #8]
 80016b4:	68e3      	ldr	r3, [r4, #12]
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	3410      	adds	r4, #16
 80016ba:	462e      	mov	r6, r5
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d1f5      	bne.n	80016ac <main+0x54>
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	6861      	ldr	r1, [r4, #4]
 80016c4:	68a2      	ldr	r2, [r4, #8]
 80016c6:	c607      	stmia	r6!, {r0, r1, r2}
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	8033      	strh	r3, [r6, #0]
 80016cc:	2226      	movs	r2, #38	@ 0x26
 80016ce:	2100      	movs	r1, #0
 80016d0:	f20d 205e 	addw	r0, sp, #606	@ 0x25e
 80016d4:	f003 f8f8 	bl	80048c8 <memset>
  send_message(str_buf, PRIORITY_HIGH);
 80016d8:	2102      	movs	r1, #2
 80016da:	a888      	add	r0, sp, #544	@ 0x220
 80016dc:	f7ff feac 	bl	8001438 <send_message>
  if (check_acc_identity())
 80016e0:	f7ff fad4 	bl	8000c8c <check_acc_identity>
 80016e4:	b300      	cbz	r0, 8001728 <main+0xd0>
		char buffer [100] = "ACCELEROMETER READ SUCCESSFULLY (nice)\n\r";
 80016e6:	af6f      	add	r7, sp, #444	@ 0x1bc
 80016e8:	4c88      	ldr	r4, [pc, #544]	@ (800190c <main+0x2b4>)
 80016ea:	463e      	mov	r6, r7
 80016ec:	f104 0c20 	add.w	ip, r4, #32
 80016f0:	4635      	mov	r5, r6
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	6861      	ldr	r1, [r4, #4]
 80016f6:	68a2      	ldr	r2, [r4, #8]
 80016f8:	68e3      	ldr	r3, [r4, #12]
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	3410      	adds	r4, #16
 80016fe:	462e      	mov	r6, r5
 8001700:	4564      	cmp	r4, ip
 8001702:	d1f5      	bne.n	80016f0 <main+0x98>
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	6861      	ldr	r1, [r4, #4]
 8001708:	c603      	stmia	r6!, {r0, r1}
 800170a:	7a23      	ldrb	r3, [r4, #8]
 800170c:	7033      	strb	r3, [r6, #0]
 800170e:	223b      	movs	r2, #59	@ 0x3b
 8001710:	2100      	movs	r1, #0
 8001712:	f107 0029 	add.w	r0, r7, #41	@ 0x29
 8001716:	f003 f8d7 	bl	80048c8 <memset>
		send_message(buffer, PRIORITY_HIGH);
 800171a:	2102      	movs	r1, #2
 800171c:	a86f      	add	r0, sp, #444	@ 0x1bc
 800171e:	f7ff fe8b 	bl	8001438 <send_message>
    acc_power_on();
 8001722:	f7ff faf3 	bl	8000d0c <acc_power_on>
 8001726:	e01c      	b.n	8001762 <main+0x10a>
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 8001728:	ae6f      	add	r6, sp, #444	@ 0x1bc
 800172a:	4634      	mov	r4, r6
 800172c:	4d78      	ldr	r5, [pc, #480]	@ (8001910 <main+0x2b8>)
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001736:	c403      	stmia	r4!, {r0, r1}
 8001738:	f824 2b02 	strh.w	r2, [r4], #2
 800173c:	0c12      	lsrs	r2, r2, #16
 800173e:	7022      	strb	r2, [r4, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	f8cd 21d7 	str.w	r2, [sp, #471]	@ 0x1d7
 8001746:	f8cd 21db 	str.w	r2, [sp, #475]	@ 0x1db
 800174a:	f8cd 21df 	str.w	r2, [sp, #479]	@ 0x1df
 800174e:	f8cd 21e3 	str.w	r2, [sp, #483]	@ 0x1e3
 8001752:	f8cd 21e7 	str.w	r2, [sp, #487]	@ 0x1e7
 8001756:	f8cd 21ea 	str.w	r2, [sp, #490]	@ 0x1ea
		send_message(buffer, PRIORITY_HIGH);
 800175a:	2102      	movs	r1, #2
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff fe6b 	bl	8001438 <send_message>
  if (check_barometer_identity())
 8001762:	f7ff fbc1 	bl	8000ee8 <check_barometer_identity>
 8001766:	b190      	cbz	r0, 800178e <main+0x136>
		char buffer [28] = "BMP READ SUCCESSFULLY\n\r";
 8001768:	ae6f      	add	r6, sp, #444	@ 0x1bc
 800176a:	4634      	mov	r4, r6
 800176c:	4d69      	ldr	r5, [pc, #420]	@ (8001914 <main+0x2bc>)
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	e884 0003 	stmia.w	r4, {r0, r1}
 800177a:	2300      	movs	r3, #0
 800177c:	9375      	str	r3, [sp, #468]	@ 0x1d4
		send_message(buffer, PRIORITY_HIGH);
 800177e:	2102      	movs	r1, #2
 8001780:	4630      	mov	r0, r6
 8001782:	f7ff fe59 	bl	8001438 <send_message>
  barometer_power_on();
 8001786:	f7ff fc9f 	bl	80010c8 <barometer_power_on>
  short pwm_switch = 0;
 800178a:	2500      	movs	r5, #0
 800178c:	e084      	b.n	8001898 <main+0x240>
		char buffer [20] = "BMP READ ERROR\n\r";
 800178e:	ae6f      	add	r6, sp, #444	@ 0x1bc
 8001790:	4634      	mov	r4, r6
 8001792:	4d61      	ldr	r5, [pc, #388]	@ (8001918 <main+0x2c0>)
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	7023      	strb	r3, [r4, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	f8ad 21cd 	strh.w	r2, [sp, #461]	@ 0x1cd
 80017a2:	f88d 21cf 	strb.w	r2, [sp, #463]	@ 0x1cf
		send_message(buffer, PRIORITY_HIGH);
 80017a6:	2102      	movs	r1, #2
 80017a8:	4630      	mov	r0, r6
 80017aa:	f7ff fe45 	bl	8001438 <send_message>
 80017ae:	e7ea      	b.n	8001786 <main+0x12e>
      servo_turn_min();
 80017b0:	f000 f8ce 	bl	8001950 <servo_turn_min>
      pwm_switch = 0;
 80017b4:	2500      	movs	r5, #0
    int32_t actual_temp = read_temp();
 80017b6:	f7ff fccb 	bl	8001150 <read_temp>
 80017ba:	ee07 0a90 	vmov	s15, r0
    sprintf(temp_str, "Temperature: %.2f Celsius\n\n\r", ((float)actual_temp)/100);
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800191c <main+0x2c4>
 80017c6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80017ca:	ee17 0a90 	vmov	r0, s15
 80017ce:	f7fe fea3 	bl	8000518 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ac24      	add	r4, sp, #144	@ 0x90
 80017d8:	4951      	ldr	r1, [pc, #324]	@ (8001920 <main+0x2c8>)
 80017da:	4620      	mov	r0, r4
 80017dc:	f003 f80e 	bl	80047fc <siprintf>
    send_message(temp_str, PRIORITY_HIGH);
 80017e0:	2102      	movs	r1, #2
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff fe28 	bl	8001438 <send_message>
    uint32_t actual_pressure = read_pressure();
 80017e8:	f7ff fde0 	bl	80013ac <read_pressure>
 80017ec:	ee07 0a90 	vmov	s15, r0
    sprintf(pressure_str, "Pressure: %.4f Pa\n\n\r",  ((float)actual_pressure)/256);
 80017f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001924 <main+0x2cc>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	ee17 0a90 	vmov	r0, s15
 8001800:	f7fe fe8a 	bl	8000518 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ac3d      	add	r4, sp, #244	@ 0xf4
 800180a:	4947      	ldr	r1, [pc, #284]	@ (8001928 <main+0x2d0>)
 800180c:	4620      	mov	r0, r4
 800180e:	f002 fff5 	bl	80047fc <siprintf>
    send_message(pressure_str, PRIORITY_HIGH);
 8001812:	2102      	movs	r1, #2
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fe0f 	bl	8001438 <send_message>
    char data1[100] =  "------------------------ACC----------------------\n\r\0";
 800181a:	af56      	add	r7, sp, #344	@ 0x158
 800181c:	4c38      	ldr	r4, [pc, #224]	@ (8001900 <main+0x2a8>)
 800181e:	f104 0cb4 	add.w	ip, r4, #180	@ 0xb4
 8001822:	463e      	mov	r6, r7
 8001824:	34e4      	adds	r4, #228	@ 0xe4
 8001826:	46b6      	mov	lr, r6
 8001828:	f8dc 0000 	ldr.w	r0, [ip]
 800182c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001830:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8001834:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001838:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800183c:	f10c 0c10 	add.w	ip, ip, #16
 8001840:	4676      	mov	r6, lr
 8001842:	45a4      	cmp	ip, r4
 8001844:	d1ef      	bne.n	8001826 <main+0x1ce>
 8001846:	f8dc 0000 	ldr.w	r0, [ip]
 800184a:	f8ce 0000 	str.w	r0, [lr]
 800184e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8001852:	f88e 3004 	strb.w	r3, [lr, #4]
 8001856:	222f      	movs	r2, #47	@ 0x2f
 8001858:	2100      	movs	r1, #0
 800185a:	f107 0035 	add.w	r0, r7, #53	@ 0x35
 800185e:	f003 f833 	bl	80048c8 <memset>
    send_message(data1, PRIORITY_HIGH);
 8001862:	2102      	movs	r1, #2
 8001864:	a856      	add	r0, sp, #344	@ 0x158
 8001866:	f7ff fde7 	bl	8001438 <send_message>
    read_acceleration_xyz(acc_vals);
 800186a:	ac04      	add	r4, sp, #16
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fa6b 	bl	8000d48 <read_acceleration_xyz>
    sprintf(acc_str, "Acceleration: (%0.4f, %0.4f, %0.4f) \n\n\r", acc_vals[0], acc_vals[1], acc_vals[2]);
 8001872:	ae6f      	add	r6, sp, #444	@ 0x1bc
 8001874:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001878:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800187c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001880:	e9cd 2300 	strd	r2, r3, [sp]
 8001884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001888:	4928      	ldr	r1, [pc, #160]	@ (800192c <main+0x2d4>)
 800188a:	4630      	mov	r0, r6
 800188c:	f002 ffb6 	bl	80047fc <siprintf>
    send_message(acc_str, PRIORITY_HIGH);
 8001890:	2102      	movs	r1, #2
 8001892:	4630      	mov	r0, r6
 8001894:	f7ff fdd0 	bl	8001438 <send_message>
    HAL_Delay(500);
 8001898:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800189c:	f000 f8b0 	bl	8001a00 <HAL_Delay>
    char data[100] =  "------------------------BMP----------------------\n\r\0";
 80018a0:	af0b      	add	r7, sp, #44	@ 0x2c
 80018a2:	4c17      	ldr	r4, [pc, #92]	@ (8001900 <main+0x2a8>)
 80018a4:	f104 0c7c 	add.w	ip, r4, #124	@ 0x7c
 80018a8:	463e      	mov	r6, r7
 80018aa:	34ac      	adds	r4, #172	@ 0xac
 80018ac:	46b6      	mov	lr, r6
 80018ae:	f8dc 0000 	ldr.w	r0, [ip]
 80018b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80018b6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80018ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80018be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80018c2:	f10c 0c10 	add.w	ip, ip, #16
 80018c6:	4676      	mov	r6, lr
 80018c8:	45a4      	cmp	ip, r4
 80018ca:	d1ef      	bne.n	80018ac <main+0x254>
 80018cc:	f8dc 0000 	ldr.w	r0, [ip]
 80018d0:	f8ce 0000 	str.w	r0, [lr]
 80018d4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80018d8:	f88e 3004 	strb.w	r3, [lr, #4]
 80018dc:	222f      	movs	r2, #47	@ 0x2f
 80018de:	2100      	movs	r1, #0
 80018e0:	f107 0035 	add.w	r0, r7, #53	@ 0x35
 80018e4:	f002 fff0 	bl	80048c8 <memset>
    send_message(data, PRIORITY_HIGH);
 80018e8:	2102      	movs	r1, #2
 80018ea:	a80b      	add	r0, sp, #44	@ 0x2c
 80018ec:	f7ff fda4 	bl	8001438 <send_message>
    if (pwm_switch)
 80018f0:	2d00      	cmp	r5, #0
 80018f2:	f47f af5d 	bne.w	80017b0 <main+0x158>
      servo_turn_max();
 80018f6:	f000 f825 	bl	8001944 <servo_turn_max>
      pwm_switch = 1;
 80018fa:	2501      	movs	r5, #1
 80018fc:	e75b      	b.n	80017b6 <main+0x15e>
 80018fe:	bf00      	nop
 8001900:	08006dd0 	.word	0x08006dd0
 8001904:	2000026c 	.word	0x2000026c
 8001908:	08007044 	.word	0x08007044
 800190c:	08007084 	.word	0x08007084
 8001910:	08006de8 	.word	0x08006de8
 8001914:	08006e1c 	.word	0x08006e1c
 8001918:	08006e38 	.word	0x08006e38
 800191c:	42c80000 	.word	0x42c80000
 8001920:	08006fe4 	.word	0x08006fe4
 8001924:	3b800000 	.word	0x3b800000
 8001928:	08007004 	.word	0x08007004
 800192c:	0800701c 	.word	0x0800701c

08001930 <set_pulse>:
    return 0;
}

void set_pulse(uint16_t pulse)
{
    curr_pulse = pulse;
 8001930:	4b02      	ldr	r3, [pc, #8]	@ (800193c <set_pulse+0xc>)
 8001932:	8018      	strh	r0, [r3, #0]
    TIM1->CCR1 = pulse;
 8001934:	4b02      	ldr	r3, [pc, #8]	@ (8001940 <set_pulse+0x10>)
 8001936:	6358      	str	r0, [r3, #52]	@ 0x34
    //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 19);
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000260 	.word	0x20000260
 8001940:	40010000 	.word	0x40010000

08001944 <servo_turn_max>:
{
 8001944:	b508      	push	{r3, lr}
    set_pulse(max_pulse);
 8001946:	2019      	movs	r0, #25
 8001948:	f7ff fff2 	bl	8001930 <set_pulse>
}
 800194c:	2000      	movs	r0, #0
 800194e:	bd08      	pop	{r3, pc}

08001950 <servo_turn_min>:
{
 8001950:	b508      	push	{r3, lr}
    set_pulse(min_pulse);
 8001952:	2005      	movs	r0, #5
 8001954:	f7ff ffec 	bl	8001930 <set_pulse>
}
 8001958:	2000      	movs	r0, #0
 800195a:	bd08      	pop	{r3, pc}

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_InitTick+0x40>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001968:	fbb3 f3f2 	udiv	r3, r3, r2
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_InitTick+0x44>)
 800196e:	6810      	ldr	r0, [r2, #0]
 8001970:	fbb0 f0f3 	udiv	r0, r0, r3
 8001974:	f000 f8c0 	bl	8001af8 <HAL_SYSTICK_Config>
 8001978:	b968      	cbnz	r0, 8001996 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	2c0f      	cmp	r4, #15
 800197c:	d901      	bls.n	8001982 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e00a      	b.n	8001998 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	4621      	mov	r1, r4
 8001986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800198a:	f000 f8a1 	bl	8001ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_InitTick+0x48>)
 8001990:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
}
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_Init>:
{
 80019a8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_Init+0x30>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f871 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f7ff ffc6 	bl	800195c <HAL_InitTick>
  HAL_MspInit();
 80019d0:	f000 ff1e 	bl	8002810 <HAL_MspInit>
}
 80019d4:	2000      	movs	r0, #0
 80019d6:	bd08      	pop	{r3, pc}
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019dc:	4a03      	ldr	r2, [pc, #12]	@ (80019ec <HAL_IncTick+0x10>)
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_IncTick+0x14>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	440b      	add	r3, r1
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000264 	.word	0x20000264
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019f4:	4b01      	ldr	r3, [pc, #4]	@ (80019fc <HAL_GetTick+0x8>)
 80019f6:	6818      	ldr	r0, [r3, #0]
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000264 	.word	0x20000264

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fff6 	bl	80019f4 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001a0e:	d002      	beq.n	8001a16 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <HAL_Delay+0x24>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a16:	f7ff ffed 	bl	80019f4 <HAL_GetTick>
 8001a1a:	1b40      	subs	r0, r0, r5
 8001a1c:	42a0      	cmp	r0, r4
 8001a1e:	d3fa      	bcc.n	8001a16 <HAL_Delay+0x16>
  {
  }
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	db07      	blt.n	8001a3c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2c:	f000 021f 	and.w	r2, r0, #31
 8001a30:	0940      	lsrs	r0, r0, #5
 8001a32:	2301      	movs	r3, #1
 8001a34:	4093      	lsls	r3, r2
 8001a36:	4a02      	ldr	r2, [pc, #8]	@ (8001a40 <__NVIC_EnableIRQ+0x18>)
 8001a38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a44:	2800      	cmp	r0, #0
 8001a46:	db08      	blt.n	8001a5a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	0109      	lsls	r1, r1, #4
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a50:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a54:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001a58:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	f000 000f 	and.w	r0, r0, #15
 8001a5e:	0109      	lsls	r1, r1, #4
 8001a60:	b2c9      	uxtb	r1, r1
 8001a62:	4b01      	ldr	r3, [pc, #4]	@ (8001a68 <__NVIC_SetPriority+0x24>)
 8001a64:	5419      	strb	r1, [r3, r0]
  }
}
 8001a66:	4770      	bx	lr
 8001a68:	e000ed14 	.word	0xe000ed14

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a72:	f1c0 0c07 	rsb	ip, r0, #7
 8001a76:	f1bc 0f04 	cmp.w	ip, #4
 8001a7a:	bf28      	it	cs
 8001a7c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a80:	1d03      	adds	r3, r0, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d90f      	bls.n	8001aa6 <NVIC_EncodePriority+0x3a>
 8001a86:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001a8c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001a90:	ea21 0100 	bic.w	r1, r1, r0
 8001a94:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a96:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a9a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001a9e:	ea41 0002 	orr.w	r0, r1, r2
 8001aa2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e7ee      	b.n	8001a88 <NVIC_EncodePriority+0x1c>
	...

08001aac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	0200      	lsls	r0, r0, #8
 8001aba:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001ac8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_NVIC_SetPriority+0x1c>)
 8001ad6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001adc:	f7ff ffc6 	bl	8001a6c <NVIC_EncodePriority>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ffae 	bl	8001a44 <__NVIC_SetPriority>
}
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af2:	f7ff ff99 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001af6:	bd08      	pop	{r3, pc}

08001af8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	3801      	subs	r0, #1
 8001afa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001afe:	d20b      	bcs.n	8001b18 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <HAL_SYSTICK_Config+0x24>)
 8001b08:	21f0      	movs	r1, #240	@ 0xf0
 8001b0a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0e:	2000      	movs	r0, #0
 8001b10:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	2207      	movs	r2, #7
 8001b14:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f200 80d7 	bhi.w	8001cd6 <HAL_GPIO_Init+0x1b6>
{
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	e065      	b.n	8001bfa <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b34:	2403      	movs	r4, #3
 8001b36:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b3a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	68cc      	ldr	r4, [r1, #12]
 8001b40:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b44:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001b46:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b48:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4e:	684a      	ldr	r2, [r1, #4]
 8001b50:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001b58:	6042      	str	r2, [r0, #4]
 8001b5a:	e05c      	b.n	8001c16 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	08dc      	lsrs	r4, r3, #3
 8001b5e:	3408      	adds	r4, #8
 8001b60:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b64:	f003 0507 	and.w	r5, r3, #7
 8001b68:	00ad      	lsls	r5, r5, #2
 8001b6a:	f04f 0e0f 	mov.w	lr, #15
 8001b6e:	fa0e fe05 	lsl.w	lr, lr, r5
 8001b72:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b76:	690a      	ldr	r2, [r1, #16]
 8001b78:	40aa      	lsls	r2, r5
 8001b7a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b82:	e05c      	b.n	8001c3e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b84:	2204      	movs	r2, #4
 8001b86:	e000      	b.n	8001b8a <HAL_GPIO_Init+0x6a>
 8001b88:	2200      	movs	r2, #0
 8001b8a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b8e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	3402      	adds	r4, #2
 8001b92:	4d51      	ldr	r5, [pc, #324]	@ (8001cd8 <HAL_GPIO_Init+0x1b8>)
 8001b94:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b98:	4a50      	ldr	r2, [pc, #320]	@ (8001cdc <HAL_GPIO_Init+0x1bc>)
 8001b9a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	ea6f 020c 	mvn.w	r2, ip
 8001ba0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba4:	684e      	ldr	r6, [r1, #4]
 8001ba6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001baa:	d001      	beq.n	8001bb0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001bac:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001bb0:	4c4a      	ldr	r4, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x1bc>)
 8001bb2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001bb4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bba:	684e      	ldr	r6, [r1, #4]
 8001bbc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001bc0:	d001      	beq.n	8001bc6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001bc2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001bc6:	4c45      	ldr	r4, [pc, #276]	@ (8001cdc <HAL_GPIO_Init+0x1bc>)
 8001bc8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001bca:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd0:	684e      	ldr	r6, [r1, #4]
 8001bd2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001bd6:	d001      	beq.n	8001bdc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001bd8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001bdc:	4c3f      	ldr	r4, [pc, #252]	@ (8001cdc <HAL_GPIO_Init+0x1bc>)
 8001bde:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	684d      	ldr	r5, [r1, #4]
 8001be6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001bea:	d001      	beq.n	8001bf0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001bec:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001bf0:	4c3a      	ldr	r4, [pc, #232]	@ (8001cdc <HAL_GPIO_Init+0x1bc>)
 8001bf2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	d86b      	bhi.n	8001cd2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	680c      	ldr	r4, [r1, #0]
 8001c00:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001c04:	ea32 0404 	bics.w	r4, r2, r4
 8001c08:	d1f4      	bne.n	8001bf4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	684c      	ldr	r4, [r1, #4]
 8001c0c:	f004 0403 	and.w	r4, r4, #3
 8001c10:	3c01      	subs	r4, #1
 8001c12:	2c01      	cmp	r4, #1
 8001c14:	d98b      	bls.n	8001b2e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c16:	684a      	ldr	r2, [r1, #4]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	2a03      	cmp	r2, #3
 8001c1e:	d009      	beq.n	8001c34 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001c20:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	005d      	lsls	r5, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	40aa      	lsls	r2, r5
 8001c28:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	688a      	ldr	r2, [r1, #8]
 8001c2e:	40aa      	lsls	r2, r5
 8001c30:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001c32:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	2a02      	cmp	r2, #2
 8001c3c:	d08e      	beq.n	8001b5c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001c3e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c40:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c4a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4e:	684a      	ldr	r2, [r1, #4]
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c58:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001c5a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	684a      	ldr	r2, [r1, #4]
 8001c5e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001c62:	d0c7      	beq.n	8001bf4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	2200      	movs	r2, #0
 8001c66:	9201      	str	r2, [sp, #4]
 8001c68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce0 <HAL_GPIO_Init+0x1c0>)
 8001c6a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001c6c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c70:	6454      	str	r4, [r2, #68]	@ 0x44
 8001c72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c74:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c78:	9201      	str	r2, [sp, #4]
 8001c7a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7c:	089c      	lsrs	r4, r3, #2
 8001c7e:	1ca5      	adds	r5, r4, #2
 8001c80:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <HAL_GPIO_Init+0x1b8>)
 8001c82:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c86:	f003 0e03 	and.w	lr, r3, #3
 8001c8a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c94:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c98:	4a12      	ldr	r2, [pc, #72]	@ (8001ce4 <HAL_GPIO_Init+0x1c4>)
 8001c9a:	4290      	cmp	r0, r2
 8001c9c:	f43f af74 	beq.w	8001b88 <HAL_GPIO_Init+0x68>
 8001ca0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ca4:	4290      	cmp	r0, r2
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_GPIO_Init+0x1a6>
 8001ca8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cac:	4290      	cmp	r0, r2
 8001cae:	d00c      	beq.n	8001cca <HAL_GPIO_Init+0x1aa>
 8001cb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cb4:	4290      	cmp	r0, r2
 8001cb6:	d00a      	beq.n	8001cce <HAL_GPIO_Init+0x1ae>
 8001cb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cbc:	4290      	cmp	r0, r2
 8001cbe:	f43f af61 	beq.w	8001b84 <HAL_GPIO_Init+0x64>
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	e761      	b.n	8001b8a <HAL_GPIO_Init+0x6a>
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	e75f      	b.n	8001b8a <HAL_GPIO_Init+0x6a>
 8001cca:	2202      	movs	r2, #2
 8001ccc:	e75d      	b.n	8001b8a <HAL_GPIO_Init+0x6a>
 8001cce:	2203      	movs	r2, #3
 8001cd0:	e75b      	b.n	8001b8a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd70      	pop	{r4, r5, r6, pc}
 8001cd6:	4770      	bx	lr
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40013c00 	.word	0x40013c00
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce8:	6803      	ldr	r3, [r0, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cf0:	d101      	bne.n	8001cf6 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
}
 8001cf4:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cfa:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d00:	2220      	movs	r2, #32
 8001d02:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d06:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d0a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001d0c:	f042 0204 	orr.w	r2, r2, #4
 8001d10:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001d12:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	4770      	bx	lr

08001d1a <I2C_WaitOnFlagUntilTimeout>:
{
 8001d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1e:	4606      	mov	r6, r0
 8001d20:	460c      	mov	r4, r1
 8001d22:	4617      	mov	r7, r2
 8001d24:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d26:	e03b      	b.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7ff fe64 	bl	80019f4 <HAL_GetTick>
 8001d2c:	9b06      	ldr	r3, [sp, #24]
 8001d2e:	1ac0      	subs	r0, r0, r3
 8001d30:	4540      	cmp	r0, r8
 8001d32:	d802      	bhi.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x20>
 8001d34:	f1b8 0f00 	cmp.w	r8, #0
 8001d38:	d132      	bne.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d3a:	2d01      	cmp	r5, #1
 8001d3c:	d018      	beq.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	ea24 0303 	bic.w	r3, r4, r3
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	429f      	cmp	r7, r3
 8001d50:	d126      	bne.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d56:	2220      	movs	r2, #32
 8001d58:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d5c:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001d68:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	e027      	b.n	8001dc0 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d70:	6833      	ldr	r3, [r6, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	ea24 0303 	bic.w	r3, r4, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	e7e5      	b.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	ea24 0c03 	bic.w	ip, r4, r3
 8001d8a:	fa1f fc8c 	uxth.w	ip, ip
 8001d8e:	fabc fc8c 	clz	ip, ip
 8001d92:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001d96:	4567      	cmp	r7, ip
 8001d98:	d111      	bne.n	8001dbe <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d9e:	d1c3      	bne.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001da0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001da4:	2d01      	cmp	r5, #1
 8001da6:	d0ec      	beq.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0x68>
 8001da8:	6833      	ldr	r3, [r6, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	ea24 0c03 	bic.w	ip, r4, r3
 8001db0:	fa1f fc8c 	uxth.w	ip, ip
 8001db4:	fabc fc8c 	clz	ip, ip
 8001db8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001dbc:	e7eb      	b.n	8001d96 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	4605      	mov	r5, r0
 8001dca:	460e      	mov	r6, r1
 8001dcc:	4690      	mov	r8, r2
 8001dce:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dd0:	e053      	b.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001de0:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001de6:	2220      	movs	r2, #32
 8001de8:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dec:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001df0:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001df2:	f042 0204 	orr.w	r2, r2, #4
 8001df6:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001df8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	e04a      	b.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e00:	f7ff fdf8 	bl	80019f4 <HAL_GetTick>
 8001e04:	eba0 0009 	sub.w	r0, r0, r9
 8001e08:	4540      	cmp	r0, r8
 8001e0a:	d802      	bhi.n	8001e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001e0c:	f1b8 0f00 	cmp.w	r8, #0
 8001e10:	d133      	bne.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e12:	2f01      	cmp	r7, #1
 8001e14:	d017      	beq.n	8001e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001e16:	682b      	ldr	r3, [r5, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	ea26 0303 	bic.w	r3, r6, r3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b00      	subs	r3, #0
 8001e22:	bf18      	it	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	b343      	cbz	r3, 8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e32:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e36:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001e38:	f042 0220 	orr.w	r2, r2, #32
 8001e3c:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e3e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e027      	b.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e46:	682b      	ldr	r3, [r5, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	ea26 0303 	bic.w	r3, r6, r3
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b00      	subs	r3, #0
 8001e52:	bf18      	it	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	e7e6      	b.n	8001e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	699c      	ldr	r4, [r3, #24]
 8001e5c:	ea26 0404 	bic.w	r4, r6, r4
 8001e60:	b2a4      	uxth	r4, r4
 8001e62:	3c00      	subs	r4, #0
 8001e64:	bf18      	it	ne
 8001e66:	2401      	movne	r4, #1
 8001e68:	b1a4      	cbz	r4, 8001e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001e72:	d1ae      	bne.n	8001dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001e78:	d1c2      	bne.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e7a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001e7e:	2f01      	cmp	r7, #1
 8001e80:	d1ea      	bne.n	8001e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001e82:	682b      	ldr	r3, [r5, #0]
 8001e84:	695c      	ldr	r4, [r3, #20]
 8001e86:	ea26 0404 	bic.w	r4, r6, r4
 8001e8a:	b2a4      	uxth	r4, r4
 8001e8c:	3c00      	subs	r4, #0
 8001e8e:	bf18      	it	ne
 8001e90:	2401      	movne	r4, #1
 8001e92:	e7e9      	b.n	8001e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001e94:	2000      	movs	r0, #0
}
 8001e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e9a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	460d      	mov	r5, r1
 8001ea0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001eaa:	d121      	bne.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff ff1b 	bl	8001ce8 <I2C_IsAcknowledgeFailed>
 8001eb2:	b9f8      	cbnz	r0, 8001ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001eb4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001eb8:	d0f3      	beq.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff fd9b 	bl	80019f4 <HAL_GetTick>
 8001ebe:	1b80      	subs	r0, r0, r6
 8001ec0:	42a8      	cmp	r0, r5
 8001ec2:	d801      	bhi.n	8001ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001ec4:	2d00      	cmp	r5, #0
 8001ec6:	d1ec      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ed0:	d1e7      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001edc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ee8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
 8001eee:	e000      	b.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
}
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	e7fc      	b.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001ef8 <I2C_RequestMemoryWrite>:
{
 8001ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001efc:	b085      	sub	sp, #20
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
 8001f02:	4691      	mov	r9, r2
 8001f04:	461f      	mov	r7, r3
 8001f06:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001f0a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001f14:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f16:	9600      	str	r6, [sp, #0]
 8001f18:	4643      	mov	r3, r8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f20:	f7ff fefb 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 8001f24:	b960      	cbnz	r0, 8001f40 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001f2c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f2e:	4633      	mov	r3, r6
 8001f30:	4642      	mov	r2, r8
 8001f32:	4926      	ldr	r1, [pc, #152]	@ (8001fcc <I2C_RequestMemoryWrite+0xd4>)
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff45 	bl	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f3a:	b168      	cbz	r0, 8001f58 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	e008      	b.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f48:	d002      	beq.n	8001f50 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001f50:	2003      	movs	r0, #3
}
 8001f52:	b005      	add	sp, #20
 8001f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	9203      	str	r2, [sp, #12]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	9303      	str	r3, [sp, #12]
 8001f66:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f68:	4632      	mov	r2, r6
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f7ff ff94 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 8001f72:	b930      	cbnz	r0, 8001f82 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f74:	2f01      	cmp	r7, #1
 8001f76:	d10f      	bne.n	8001f98 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	fa5f f689 	uxtb.w	r6, r9
 8001f7e:	611e      	str	r6, [r3, #16]
 8001f80:	e7e7      	b.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d001      	beq.n	8001f8c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
 8001f8a:	e7e2      	b.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e7f7      	b.n	8001f88 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001f9e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff ff78 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 8001faa:	b920      	cbnz	r0, 8001fb6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	fa5f f689 	uxtb.w	r6, r9
 8001fb2:	611e      	str	r6, [r3, #16]
 8001fb4:	e7cd      	b.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d001      	beq.n	8001fc0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	e7c8      	b.n	8001f52 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	6822      	ldr	r2, [r4, #0]
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e7f7      	b.n	8001fbc <I2C_RequestMemoryWrite+0xc4>
 8001fcc:	00010002 	.word	0x00010002

08001fd0 <I2C_RequestMemoryRead>:
{
 8001fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	460d      	mov	r5, r1
 8001fda:	4616      	mov	r6, r2
 8001fdc:	4699      	mov	r9, r3
 8001fde:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001fe0:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe4:	6802      	ldr	r2, [r0, #0]
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fec:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	6803      	ldr	r3, [r0, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001ff6:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	f8cd 8000 	str.w	r8, [sp]
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002004:	f7ff fe89 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 8002008:	b970      	cbnz	r0, 8002028 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800200a:	fa5f fa85 	uxtb.w	sl, r5
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002014:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002016:	4643      	mov	r3, r8
 8002018:	463a      	mov	r2, r7
 800201a:	4941      	ldr	r1, [pc, #260]	@ (8002120 <I2C_RequestMemoryRead+0x150>)
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fed1 	bl	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002022:	b168      	cbz	r0, 8002040 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
 8002026:	e008      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002030:	d002      	beq.n	8002038 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002036:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002038:	2003      	movs	r0, #3
}
 800203a:	b004      	add	sp, #16
 800203c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	2300      	movs	r3, #0
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	9203      	str	r2, [sp, #12]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	9303      	str	r3, [sp, #12]
 800204e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002050:	4642      	mov	r2, r8
 8002052:	4639      	mov	r1, r7
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ff20 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 800205a:	b980      	cbnz	r0, 800207e <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800205c:	f1b9 0f01 	cmp.w	r9, #1
 8002060:	d118      	bne.n	8002094 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	b2f6      	uxtb	r6, r6
 8002066:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002068:	4642      	mov	r2, r8
 800206a:	4639      	mov	r1, r7
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ff14 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 8002072:	b368      	cbz	r0, 80020d0 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002076:	2b04      	cmp	r3, #4
 8002078:	d024      	beq.n	80020c4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
 800207c:	e7dd      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002080:	2b04      	cmp	r3, #4
 8002082:	d001      	beq.n	8002088 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
 8002086:	e7d8      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e7f7      	b.n	8002084 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	0a32      	lsrs	r2, r6, #8
 8002098:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209a:	4642      	mov	r2, r8
 800209c:	4639      	mov	r1, r7
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff fefb 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 80020a4:	b918      	cbnz	r0, 80020ae <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	b2f6      	uxtb	r6, r6
 80020aa:	611e      	str	r6, [r3, #16]
 80020ac:	e7dc      	b.n	8002068 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d001      	beq.n	80020b8 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
 80020b6:	e7c0      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e7f7      	b.n	80020b4 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e7d4      	b.n	800207a <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020da:	f8cd 8000 	str.w	r8, [sp]
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fe17 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 80020ec:	b968      	cbnz	r0, 800210a <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	f04a 0301 	orr.w	r3, sl, #1
 80020f4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f6:	4643      	mov	r3, r8
 80020f8:	463a      	mov	r2, r7
 80020fa:	4909      	ldr	r1, [pc, #36]	@ (8002120 <I2C_RequestMemoryRead+0x150>)
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff fe61 	bl	8001dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002102:	2800      	cmp	r0, #0
 8002104:	d099      	beq.n	800203a <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8002106:	2001      	movs	r0, #1
 8002108:	e797      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002112:	d002      	beq.n	800211a <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002118:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800211a:	2003      	movs	r0, #3
 800211c:	e78d      	b.n	800203a <I2C_RequestMemoryRead+0x6a>
 800211e:	bf00      	nop
 8002120:	00010002 	.word	0x00010002

08002124 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4604      	mov	r4, r0
 8002128:	460d      	mov	r5, r1
 800212a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f013 0f04 	tst.w	r3, #4
 8002134:	d121      	bne.n	800217a <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002136:	4620      	mov	r0, r4
 8002138:	f7ff fdd6 	bl	8001ce8 <I2C_IsAcknowledgeFailed>
 800213c:	b9f8      	cbnz	r0, 800217e <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800213e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002142:	d0f3      	beq.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff fc56 	bl	80019f4 <HAL_GetTick>
 8002148:	1b80      	subs	r0, r0, r6
 800214a:	42a8      	cmp	r0, r5
 800214c:	d801      	bhi.n	8002152 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800214e:	2d00      	cmp	r5, #0
 8002150:	d1ec      	bne.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f013 0f04 	tst.w	r3, #4
 800215a:	d1e7      	bne.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800215c:	2300      	movs	r3, #0
 800215e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	2220      	movs	r2, #32
 8002162:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002166:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002172:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002176:	2001      	movs	r0, #1
 8002178:	e000      	b.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800217a:	2000      	movs	r0, #0
}
 800217c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800217e:	2001      	movs	r0, #1
 8002180:	e7fc      	b.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08002182 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002182:	b570      	push	{r4, r5, r6, lr}
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800218a:	e014      	b.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218c:	f06f 0210 	mvn.w	r2, #16
 8002190:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002192:	2300      	movs	r3, #0
 8002194:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	2220      	movs	r2, #32
 8002198:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021a0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021a2:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80021a4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e025      	b.n	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80021b4:	d010      	beq.n	80021d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	6958      	ldr	r0, [r3, #20]
 80021ba:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80021be:	d11a      	bne.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021c0:	6958      	ldr	r0, [r3, #20]
 80021c2:	f010 0f10 	tst.w	r0, #16
 80021c6:	d1e1      	bne.n	800218c <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c8:	f7ff fc14 	bl	80019f4 <HAL_GetTick>
 80021cc:	1b80      	subs	r0, r0, r6
 80021ce:	42a8      	cmp	r0, r5
 80021d0:	d8ec      	bhi.n	80021ac <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80021d2:	2d00      	cmp	r5, #0
 80021d4:	d1ef      	bne.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80021d6:	e7e9      	b.n	80021ac <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d8:	2300      	movs	r3, #0
 80021da:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021dc:	2220      	movs	r2, #32
 80021de:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021e8:	f042 0220 	orr.w	r2, r2, #32
 80021ec:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80021ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
 80021f4:	e000      	b.n	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80021f6:	2000      	movs	r0, #0
}
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080021fc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80021fc:	2800      	cmp	r0, #0
 80021fe:	f000 80cc 	beq.w	800239a <HAL_I2C_Init+0x19e>
{
 8002202:	b570      	push	{r4, r5, r6, lr}
 8002204:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800220a:	2b00      	cmp	r3, #0
 800220c:	d077      	beq.n	80022fe <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800220e:	2324      	movs	r3, #36	@ 0x24
 8002210:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002226:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002230:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002232:	f000 fe0f 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002236:	6862      	ldr	r2, [r4, #4]
 8002238:	4b5a      	ldr	r3, [pc, #360]	@ (80023a4 <HAL_I2C_Init+0x1a8>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d864      	bhi.n	8002308 <HAL_I2C_Init+0x10c>
 800223e:	4b5a      	ldr	r3, [pc, #360]	@ (80023a8 <HAL_I2C_Init+0x1ac>)
 8002240:	4298      	cmp	r0, r3
 8002242:	bf8c      	ite	hi
 8002244:	2300      	movhi	r3, #0
 8002246:	2301      	movls	r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 80a8 	bne.w	800239e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800224e:	4957      	ldr	r1, [pc, #348]	@ (80023ac <HAL_I2C_Init+0x1b0>)
 8002250:	fba1 3100 	umull	r3, r1, r1, r0
 8002254:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002256:	6825      	ldr	r5, [r4, #0]
 8002258:	686a      	ldr	r2, [r5, #4]
 800225a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800225e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002262:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002264:	6821      	ldr	r1, [r4, #0]
 8002266:	6a0a      	ldr	r2, [r1, #32]
 8002268:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800226c:	6866      	ldr	r6, [r4, #4]
 800226e:	4d4d      	ldr	r5, [pc, #308]	@ (80023a4 <HAL_I2C_Init+0x1a8>)
 8002270:	42ae      	cmp	r6, r5
 8002272:	d84f      	bhi.n	8002314 <HAL_I2C_Init+0x118>
 8002274:	3301      	adds	r3, #1
 8002276:	4313      	orrs	r3, r2
 8002278:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800227a:	6821      	ldr	r1, [r4, #0]
 800227c:	69ca      	ldr	r2, [r1, #28]
 800227e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002282:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002286:	6865      	ldr	r5, [r4, #4]
 8002288:	4b46      	ldr	r3, [pc, #280]	@ (80023a4 <HAL_I2C_Init+0x1a8>)
 800228a:	429d      	cmp	r5, r3
 800228c:	d84c      	bhi.n	8002328 <HAL_I2C_Init+0x12c>
 800228e:	1e43      	subs	r3, r0, #1
 8002290:	006d      	lsls	r5, r5, #1
 8002292:	fbb3 f3f5 	udiv	r3, r3, r5
 8002296:	3301      	adds	r3, #1
 8002298:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800229c:	4203      	tst	r3, r0
 800229e:	d078      	beq.n	8002392 <HAL_I2C_Init+0x196>
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	431a      	orrs	r2, r3
 80022a6:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a8:	6821      	ldr	r1, [r4, #0]
 80022aa:	680b      	ldr	r3, [r1, #0]
 80022ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022b0:	69e2      	ldr	r2, [r4, #28]
 80022b2:	6a20      	ldr	r0, [r4, #32]
 80022b4:	4302      	orrs	r2, r0
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022ba:	6821      	ldr	r1, [r4, #0]
 80022bc:	688b      	ldr	r3, [r1, #8]
 80022be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022c6:	6922      	ldr	r2, [r4, #16]
 80022c8:	68e0      	ldr	r0, [r4, #12]
 80022ca:	4302      	orrs	r2, r0
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022d0:	6821      	ldr	r1, [r4, #0]
 80022d2:	68cb      	ldr	r3, [r1, #12]
 80022d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022d8:	6962      	ldr	r2, [r4, #20]
 80022da:	69a0      	ldr	r0, [r4, #24]
 80022dc:	4302      	orrs	r2, r0
 80022de:	4313      	orrs	r3, r2
 80022e0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	2000      	movs	r0, #0
 80022ee:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	2320      	movs	r3, #32
 80022f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022fe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002302:	f7ff f91f 	bl	8001544 <HAL_I2C_MspInit>
 8002306:	e782      	b.n	800220e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <HAL_I2C_Init+0x1b4>)
 800230a:	4298      	cmp	r0, r3
 800230c:	bf8c      	ite	hi
 800230e:	2300      	movhi	r3, #0
 8002310:	2301      	movls	r3, #1
 8002312:	e799      	b.n	8002248 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002314:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002318:	fb05 f303 	mul.w	r3, r5, r3
 800231c:	4d25      	ldr	r5, [pc, #148]	@ (80023b4 <HAL_I2C_Init+0x1b8>)
 800231e:	fba5 5303 	umull	r5, r3, r5, r3
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	3301      	adds	r3, #1
 8002326:	e7a6      	b.n	8002276 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002328:	68a6      	ldr	r6, [r4, #8]
 800232a:	b9be      	cbnz	r6, 800235c <HAL_I2C_Init+0x160>
 800232c:	1e43      	subs	r3, r0, #1
 800232e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002332:	fbb3 f3fc 	udiv	r3, r3, ip
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	bb43      	cbnz	r3, 8002396 <HAL_I2C_Init+0x19a>
 8002344:	b9c6      	cbnz	r6, 8002378 <HAL_I2C_Init+0x17c>
 8002346:	1e43      	subs	r3, r0, #1
 8002348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800234c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002350:	3301      	adds	r3, #1
 8002352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235a:	e7a3      	b.n	80022a4 <HAL_I2C_Init+0xa8>
 800235c:	1e43      	subs	r3, r0, #1
 800235e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002362:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002366:	fbb3 f3fc 	udiv	r3, r3, ip
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	e7e4      	b.n	8002342 <HAL_I2C_Init+0x146>
 8002378:	1e43      	subs	r3, r0, #1
 800237a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800237e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002382:	fbb3 f3f5 	udiv	r3, r3, r5
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002390:	e788      	b.n	80022a4 <HAL_I2C_Init+0xa8>
 8002392:	2304      	movs	r3, #4
 8002394:	e786      	b.n	80022a4 <HAL_I2C_Init+0xa8>
 8002396:	2301      	movs	r3, #1
 8002398:	e784      	b.n	80022a4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800239a:	2001      	movs	r0, #1
}
 800239c:	4770      	bx	lr
    return HAL_ERROR;
 800239e:	2001      	movs	r0, #1
 80023a0:	e7ac      	b.n	80022fc <HAL_I2C_Init+0x100>
 80023a2:	bf00      	nop
 80023a4:	000186a0 	.word	0x000186a0
 80023a8:	001e847f 	.word	0x001e847f
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	10624dd3 	.word	0x10624dd3

080023b8 <HAL_I2C_Mem_Write>:
{
 80023b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023bc:	b083      	sub	sp, #12
 80023be:	4604      	mov	r4, r0
 80023c0:	460f      	mov	r7, r1
 80023c2:	4690      	mov	r8, r2
 80023c4:	4699      	mov	r9, r3
 80023c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fb14 	bl	80019f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023cc:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80023d0:	2a20      	cmp	r2, #32
 80023d2:	d003      	beq.n	80023dc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80023d4:	2002      	movs	r0, #2
}
 80023d6:	b003      	add	sp, #12
 80023d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023dc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023de:	9000      	str	r0, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	494a      	ldr	r1, [pc, #296]	@ (8002510 <HAL_I2C_Mem_Write+0x158>)
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff fc97 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 80023ec:	2800      	cmp	r0, #0
 80023ee:	f040 8089 	bne.w	8002504 <HAL_I2C_Mem_Write+0x14c>
    __HAL_LOCK(hi2c);
 80023f2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	f000 8086 	beq.w	8002508 <HAL_I2C_Mem_Write+0x150>
 80023fc:	2301      	movs	r3, #1
 80023fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f012 0f01 	tst.w	r2, #1
 800240a:	d103      	bne.n	8002414 <HAL_I2C_Mem_Write+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	6813      	ldr	r3, [r2, #0]
 8002418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800241c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800241e:	2321      	movs	r3, #33	@ 0x21
 8002420:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002424:	2340      	movs	r3, #64	@ 0x40
 8002426:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800242e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002430:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002432:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002436:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002438:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800243a:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243c:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <HAL_I2C_Mem_Write+0x15c>)
 800243e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002440:	9501      	str	r5, [sp, #4]
 8002442:	9600      	str	r6, [sp, #0]
 8002444:	464b      	mov	r3, r9
 8002446:	4642      	mov	r2, r8
 8002448:	4639      	mov	r1, r7
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff fd54 	bl	8001ef8 <I2C_RequestMemoryWrite>
 8002450:	2800      	cmp	r0, #0
 8002452:	d15b      	bne.n	800250c <HAL_I2C_Mem_Write+0x154>
    while (hi2c->XferSize > 0U)
 8002454:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d035      	beq.n	80024c6 <HAL_I2C_Mem_Write+0x10e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	462a      	mov	r2, r5
 800245c:	4631      	mov	r1, r6
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff fd1b 	bl	8001e9a <I2C_WaitOnTXEFlagUntilTimeout>
 8002464:	bb20      	cbnz	r0, 80024b0 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002466:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800246e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002470:	1c53      	adds	r3, r2, #1
 8002472:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002474:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002476:	3901      	subs	r1, #1
 8002478:	b289      	uxth	r1, r1
 800247a:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800247c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	6958      	ldr	r0, [r3, #20]
 800248a:	f010 0f04 	tst.w	r0, #4
 800248e:	d0e1      	beq.n	8002454 <HAL_I2C_Mem_Write+0x9c>
 8002490:	2900      	cmp	r1, #0
 8002492:	d0df      	beq.n	8002454 <HAL_I2C_Mem_Write+0x9c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002494:	7852      	ldrb	r2, [r2, #1]
 8002496:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002498:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800249a:	3301      	adds	r3, #1
 800249c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800249e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80024a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80024ae:	e7d1      	b.n	8002454 <HAL_I2C_Mem_Write+0x9c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	e78d      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e7f7      	b.n	80024b6 <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	462a      	mov	r2, r5
 80024c8:	4631      	mov	r1, r6
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff fe2a 	bl	8002124 <I2C_WaitOnBTFFlagUntilTimeout>
 80024d0:	b150      	cbz	r0, 80024e8 <HAL_I2C_Mem_Write+0x130>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Write+0x124>
      return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e77c      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e7f7      	b.n	80024d8 <HAL_I2C_Mem_Write+0x120>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	6822      	ldr	r2, [r4, #0]
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	2320      	movs	r3, #32
 80024f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80024fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002502:	e768      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8002504:	2002      	movs	r0, #2
 8002506:	e766      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8002508:	2002      	movs	r0, #2
 800250a:	e764      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 800250c:	2001      	movs	r0, #1
 800250e:	e762      	b.n	80023d6 <HAL_I2C_Mem_Write+0x1e>
 8002510:	00100002 	.word	0x00100002
 8002514:	ffff0000 	.word	0xffff0000

08002518 <HAL_I2C_Mem_Read>:
{
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800251c:	b087      	sub	sp, #28
 800251e:	4604      	mov	r4, r0
 8002520:	460f      	mov	r7, r1
 8002522:	4690      	mov	r8, r2
 8002524:	4699      	mov	r9, r3
 8002526:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fa64 	bl	80019f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800252c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002530:	2a20      	cmp	r2, #32
 8002532:	d004      	beq.n	800253e <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8002534:	2702      	movs	r7, #2
}
 8002536:	4638      	mov	r0, r7
 8002538:	b007      	add	sp, #28
 800253a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800253e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002540:	9000      	str	r0, [sp, #0]
 8002542:	2319      	movs	r3, #25
 8002544:	2201      	movs	r2, #1
 8002546:	4989      	ldr	r1, [pc, #548]	@ (800276c <HAL_I2C_Mem_Read+0x254>)
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fbe6 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 800254e:	2800      	cmp	r0, #0
 8002550:	f040 814e 	bne.w	80027f0 <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 8002554:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	f000 814b 	beq.w	80027f4 <HAL_I2C_Mem_Read+0x2dc>
 800255e:	2301      	movs	r3, #1
 8002560:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f012 0f01 	tst.w	r2, #1
 800256c:	d103      	bne.n	8002576 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800257e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002580:	2322      	movs	r3, #34	@ 0x22
 8002582:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002586:	2340      	movs	r3, #64	@ 0x40
 8002588:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002592:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002594:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8002598:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800259c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259e:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_I2C_Mem_Read+0x258>)
 80025a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a2:	9501      	str	r5, [sp, #4]
 80025a4:	9600      	str	r6, [sp, #0]
 80025a6:	464b      	mov	r3, r9
 80025a8:	4642      	mov	r2, r8
 80025aa:	4639      	mov	r1, r7
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff fd0f 	bl	8001fd0 <I2C_RequestMemoryRead>
 80025b2:	4607      	mov	r7, r0
 80025b4:	2800      	cmp	r0, #0
 80025b6:	f040 811f 	bne.w	80027f8 <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 80025ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025bc:	b95b      	cbnz	r3, 80025d6 <HAL_I2C_Mem_Read+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	9202      	str	r2, [sp, #8]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	9202      	str	r2, [sp, #8]
 80025ca:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e075      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
    else if (hi2c->XferSize == 1U)
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d00a      	beq.n	80025f0 <HAL_I2C_Mem_Read+0xd8>
    else if (hi2c->XferSize == 2U)
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d01a      	beq.n	8002614 <HAL_I2C_Mem_Read+0xfc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	9305      	str	r3, [sp, #20]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	9205      	str	r2, [sp, #20]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	9305      	str	r3, [sp, #20]
 80025ec:	9b05      	ldr	r3, [sp, #20]
 80025ee:	e068      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	6822      	ldr	r2, [r4, #0]
 80025f2:	6813      	ldr	r3, [r2, #0]
 80025f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025f8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fa:	2300      	movs	r3, #0
 80025fc:	9303      	str	r3, [sp, #12]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	9203      	str	r2, [sp, #12]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	9203      	str	r2, [sp, #12]
 8002608:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e056      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002614:	6822      	ldr	r2, [r4, #0]
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800261c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261e:	6822      	ldr	r2, [r4, #0]
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002626:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	9304      	str	r3, [sp, #16]
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	9204      	str	r2, [sp, #16]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	9b04      	ldr	r3, [sp, #16]
 8002638:	e043      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263a:	462a      	mov	r2, r5
 800263c:	4631      	mov	r1, r6
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff fd9f 	bl	8002182 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002644:	2800      	cmp	r0, #0
 8002646:	f040 80d9 	bne.w	80027fc <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002650:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002652:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002658:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800265e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002668:	e02b      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266a:	9500      	str	r5, [sp, #0]
 800266c:	4633      	mov	r3, r6
 800266e:	2200      	movs	r2, #0
 8002670:	4940      	ldr	r1, [pc, #256]	@ (8002774 <HAL_I2C_Mem_Read+0x25c>)
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fb51 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 8002678:	2800      	cmp	r0, #0
 800267a:	f040 80c1 	bne.w	8002800 <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6813      	ldr	r3, [r2, #0]
 8002682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002686:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800268e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002690:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002692:	1c53      	adds	r3, r2, #1
 8002694:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002696:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800269c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80026ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026ae:	3301      	adds	r3, #1
 80026b0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026b2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026b4:	3b01      	subs	r3, #1
 80026b6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808a 	beq.w	80027de <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d854      	bhi.n	8002778 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0b3      	beq.n	800263a <HAL_I2C_Mem_Read+0x122>
        else if (hi2c->XferSize == 2U)
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d0c9      	beq.n	800266a <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026d6:	9500      	str	r5, [sp, #0]
 80026d8:	4633      	mov	r3, r6
 80026da:	2200      	movs	r2, #0
 80026dc:	4925      	ldr	r1, [pc, #148]	@ (8002774 <HAL_I2C_Mem_Read+0x25c>)
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff fb1b 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	f040 808d 	bne.w	8002804 <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026f2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026fa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026fe:	3301      	adds	r3, #1
 8002700:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002702:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002708:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	9500      	str	r5, [sp, #0]
 8002714:	4633      	mov	r3, r6
 8002716:	2200      	movs	r2, #0
 8002718:	4916      	ldr	r1, [pc, #88]	@ (8002774 <HAL_I2C_Mem_Read+0x25c>)
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fafd 	bl	8001d1a <I2C_WaitOnFlagUntilTimeout>
 8002720:	2800      	cmp	r0, #0
 8002722:	d171      	bne.n	8002808 <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800272c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002734:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002736:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002738:	1c53      	adds	r3, r2, #1
 800273a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800273c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002742:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002752:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002758:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800275e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002768:	e7ab      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000
 8002774:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002778:	462a      	mov	r2, r5
 800277a:	4631      	mov	r1, r6
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fd00 	bl	8002182 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002782:	2800      	cmp	r0, #0
 8002784:	d142      	bne.n	800280c <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800278c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800278e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002790:	3301      	adds	r3, #1
 8002792:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002794:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002796:	3a01      	subs	r2, #1
 8002798:	b292      	uxth	r2, r2
 800279a:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800279c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	6959      	ldr	r1, [r3, #20]
 80027aa:	f011 0f04 	tst.w	r1, #4
 80027ae:	d088      	beq.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
          if (hi2c->XferSize == 3U)
 80027b0:	2a03      	cmp	r2, #3
 80027b2:	d00f      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027ba:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027be:	3301      	adds	r3, #1
 80027c0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80027c2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80027d2:	e776      	b.n	80026c2 <HAL_I2C_Mem_Read+0x1aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e7ea      	b.n	80027b4 <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80027de:	2320      	movs	r3, #32
 80027e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80027ea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80027ee:	e6a2      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80027f0:	2702      	movs	r7, #2
 80027f2:	e6a0      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80027f4:	2702      	movs	r7, #2
 80027f6:	e69e      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80027f8:	2701      	movs	r7, #1
 80027fa:	e69c      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027fc:	2701      	movs	r7, #1
 80027fe:	e69a      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002800:	2701      	movs	r7, #1
 8002802:	e698      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002804:	2701      	movs	r7, #1
 8002806:	e696      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002808:	2701      	movs	r7, #1
 800280a:	e694      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 800280c:	2701      	movs	r7, #1
 800280e:	e692      	b.n	8002536 <HAL_I2C_Mem_Read+0x1e>

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2100      	movs	r1, #0
 8002814:	9100      	str	r1, [sp, #0]
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_MspInit+0x34>)
 8002818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800281a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002822:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002826:	9200      	str	r2, [sp, #0]
 8002828:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	9101      	str	r1, [sp, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283e:	b002      	add	sp, #8
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	2800      	cmp	r0, #0
 800284a:	f000 81e0 	beq.w	8002c0e <HAL_RCC_OscConfig+0x3c6>
{
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	f013 0f01 	tst.w	r3, #1
 800285a:	d03b      	beq.n	80028d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285c:	4b9f      	ldr	r3, [pc, #636]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d02c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002868:	4b9c      	ldr	r3, [pc, #624]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002870:	2b08      	cmp	r3, #8
 8002872:	d021      	beq.n	80028b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287a:	d04f      	beq.n	800291c <HAL_RCC_OscConfig+0xd4>
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002880:	d052      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
 8002882:	4b96      	ldr	r3, [pc, #600]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002892:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d050      	beq.n	800293c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff f8ab 	bl	80019f4 <HAL_GetTick>
 800289e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a0:	4b8e      	ldr	r3, [pc, #568]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028a8:	d114      	bne.n	80028d4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028aa:	f7ff f8a3 	bl	80019f4 <HAL_GetTick>
 80028ae:	1b40      	subs	r0, r0, r5
 80028b0:	2864      	cmp	r0, #100	@ 0x64
 80028b2:	d9f5      	bls.n	80028a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80028b4:	2003      	movs	r0, #3
 80028b6:	e1b1      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b8:	4b88      	ldr	r3, [pc, #544]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80028c0:	d0d8      	beq.n	8002874 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b86      	ldr	r3, [pc, #536]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028ca:	d003      	beq.n	80028d4 <HAL_RCC_OscConfig+0x8c>
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 819f 	beq.w	8002c12 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	f013 0f02 	tst.w	r3, #2
 80028da:	d054      	beq.n	8002986 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028dc:	4b7f      	ldr	r3, [pc, #508]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f013 0f0c 	tst.w	r3, #12
 80028e4:	d03e      	beq.n	8002964 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b7d      	ldr	r3, [pc, #500]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d033      	beq.n	800295a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f2:	68e3      	ldr	r3, [r4, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d068      	beq.n	80029ca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_OscConfig+0x298>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7ff f879 	bl	80019f4 <HAL_GetTick>
 8002902:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b75      	ldr	r3, [pc, #468]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f013 0f02 	tst.w	r3, #2
 800290c:	d154      	bne.n	80029b8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290e:	f7ff f871 	bl	80019f4 <HAL_GetTick>
 8002912:	1b40      	subs	r0, r0, r5
 8002914:	2802      	cmp	r0, #2
 8002916:	d9f5      	bls.n	8002904 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002918:	2003      	movs	r0, #3
 800291a:	e17f      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	4a6f      	ldr	r2, [pc, #444]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 800291e:	6813      	ldr	r3, [r2, #0]
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e7b5      	b.n	8002894 <HAL_RCC_OscConfig+0x4c>
 8002928:	4b6c      	ldr	r3, [pc, #432]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e7ab      	b.n	8002894 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800293c:	f7ff f85a 	bl	80019f4 <HAL_GetTick>
 8002940:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800294a:	d0c3      	beq.n	80028d4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f852 	bl	80019f4 <HAL_GetTick>
 8002950:	1b40      	subs	r0, r0, r5
 8002952:	2864      	cmp	r0, #100	@ 0x64
 8002954:	d9f5      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
 8002958:	e160      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002962:	d1c6      	bne.n	80028f2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002964:	4b5d      	ldr	r3, [pc, #372]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f013 0f02 	tst.w	r3, #2
 800296c:	d003      	beq.n	8002976 <HAL_RCC_OscConfig+0x12e>
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	f040 8150 	bne.w	8002c16 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4a59      	ldr	r2, [pc, #356]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800297e:	6921      	ldr	r1, [r4, #16]
 8002980:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002984:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f013 0f08 	tst.w	r3, #8
 800298c:	d042      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298e:	6963      	ldr	r3, [r4, #20]
 8002990:	b36b      	cbz	r3, 80029ee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <HAL_RCC_OscConfig+0x298>)
 8002994:	2201      	movs	r2, #1
 8002996:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff f82b 	bl	80019f4 <HAL_GetTick>
 800299e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a0:	4b4e      	ldr	r3, [pc, #312]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80029a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a4:	f013 0f02 	tst.w	r3, #2
 80029a8:	d134      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff f823 	bl	80019f4 <HAL_GetTick>
 80029ae:	1b40      	subs	r0, r0, r5
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d9f5      	bls.n	80029a0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80029b4:	2003      	movs	r0, #3
 80029b6:	e131      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4a48      	ldr	r2, [pc, #288]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029c0:	6921      	ldr	r1, [r4, #16]
 80029c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e7dd      	b.n	8002986 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b45      	ldr	r3, [pc, #276]	@ (8002ae0 <HAL_RCC_OscConfig+0x298>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029d0:	f7ff f810 	bl	80019f4 <HAL_GetTick>
 80029d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b41      	ldr	r3, [pc, #260]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f013 0f02 	tst.w	r3, #2
 80029de:	d0d2      	beq.n	8002986 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff f808 	bl	80019f4 <HAL_GetTick>
 80029e4:	1b40      	subs	r0, r0, r5
 80029e6:	2802      	cmp	r0, #2
 80029e8:	d9f5      	bls.n	80029d6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80029ea:	2003      	movs	r0, #3
 80029ec:	e116      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae0 <HAL_RCC_OscConfig+0x298>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fffd 	bl	80019f4 <HAL_GetTick>
 80029fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 80029fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a00:	f013 0f02 	tst.w	r3, #2
 8002a04:	d006      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe fff5 	bl	80019f4 <HAL_GetTick>
 8002a0a:	1b40      	subs	r0, r0, r5
 8002a0c:	2802      	cmp	r0, #2
 8002a0e:	d9f5      	bls.n	80029fc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002a10:	2003      	movs	r0, #3
 8002a12:	e103      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f013 0f04 	tst.w	r3, #4
 8002a1a:	d077      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a24:	d133      	bne.n	8002a8e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a3e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <HAL_RCC_OscConfig+0x29c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a48:	d023      	beq.n	8002a92 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d034      	beq.n	8002aba <HAL_RCC_OscConfig+0x272>
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d038      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x27e>
 8002a54:	4b21      	ldr	r3, [pc, #132]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002a56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a60:	f022 0204 	bic.w	r2, r2, #4
 8002a64:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a66:	68a3      	ldr	r3, [r4, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d03d      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe ffc2 	bl	80019f4 <HAL_GetTick>
 8002a70:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	f013 0f02 	tst.w	r3, #2
 8002a7a:	d146      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe ffba 	bl	80019f4 <HAL_GetTick>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a86:	4298      	cmp	r0, r3
 8002a88:	d9f3      	bls.n	8002a72 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	e0c6      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2500      	movs	r5, #0
 8002a90:	e7d6      	b.n	8002a40 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_RCC_OscConfig+0x29c>)
 8002a94:	6813      	ldr	r3, [r2, #0]
 8002a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a9c:	f7fe ffaa 	bl	80019f4 <HAL_GetTick>
 8002aa0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <HAL_RCC_OscConfig+0x29c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002aaa:	d1ce      	bne.n	8002a4a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe ffa2 	bl	80019f4 <HAL_GetTick>
 8002ab0:	1b80      	subs	r0, r0, r6
 8002ab2:	2802      	cmp	r0, #2
 8002ab4:	d9f5      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	e0b0      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002abc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac4:	e7cf      	b.n	8002a66 <HAL_RCC_OscConfig+0x21e>
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_OscConfig+0x294>)
 8002ac8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aca:	f042 0204 	orr.w	r2, r2, #4
 8002ace:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ad0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ad8:	e7c5      	b.n	8002a66 <HAL_RCC_OscConfig+0x21e>
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	42470000 	.word	0x42470000
 8002ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe ff84 	bl	80019f4 <HAL_GetTick>
 8002aec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aee:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	f013 0f02 	tst.w	r3, #2
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe ff7c 	bl	80019f4 <HAL_GetTick>
 8002afc:	1b80      	subs	r0, r0, r6
 8002afe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d9f3      	bls.n	8002aee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002b06:	2003      	movs	r0, #3
 8002b08:	e088      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0a:	b9ed      	cbnz	r5, 8002b48 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0c:	69a3      	ldr	r3, [r4, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8083 	beq.w	8002c1a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b14:	4a48      	ldr	r2, [pc, #288]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002b16:	6892      	ldr	r2, [r2, #8]
 8002b18:	f002 020c 	and.w	r2, r2, #12
 8002b1c:	2a08      	cmp	r2, #8
 8002b1e:	d051      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d017      	beq.n	8002b54 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4b45      	ldr	r3, [pc, #276]	@ (8002c3c <HAL_RCC_OscConfig+0x3f4>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff63 	bl	80019f4 <HAL_GetTick>
 8002b2e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b30:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b38:	d042      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe ff5b 	bl	80019f4 <HAL_GetTick>
 8002b3e:	1b00      	subs	r0, r0, r4
 8002b40:	2802      	cmp	r0, #2
 8002b42:	d9f5      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b44:	2003      	movs	r0, #3
 8002b46:	e069      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4a3b      	ldr	r2, [pc, #236]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002b4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	e7db      	b.n	8002b0c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b39      	ldr	r3, [pc, #228]	@ (8002c3c <HAL_RCC_OscConfig+0x3f4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b5a:	f7fe ff4b 	bl	80019f4 <HAL_GetTick>
 8002b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b60:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b68:	d006      	beq.n	8002b78 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe ff43 	bl	80019f4 <HAL_GetTick>
 8002b6e:	1b40      	subs	r0, r0, r5
 8002b70:	2802      	cmp	r0, #2
 8002b72:	d9f5      	bls.n	8002b60 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b74:	2003      	movs	r0, #3
 8002b76:	e051      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b78:	69e3      	ldr	r3, [r4, #28]
 8002b7a:	6a22      	ldr	r2, [r4, #32]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b84:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b94:	4a28      	ldr	r2, [pc, #160]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002b96:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_RCC_OscConfig+0x3f4>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b9e:	f7fe ff29 	bl	80019f4 <HAL_GetTick>
 8002ba2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe ff21 	bl	80019f4 <HAL_GetTick>
 8002bb2:	1b00      	subs	r0, r0, r4
 8002bb4:	2802      	cmp	r0, #2
 8002bb6:	d9f5      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002bb8:	2003      	movs	r0, #3
 8002bba:	e02f      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	e02d      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e02b      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d02b      	beq.n	8002c20 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x3f0>)
 8002bca:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bcc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002bd0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	4291      	cmp	r1, r2
 8002bd4:	d126      	bne.n	8002c24 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bda:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	428a      	cmp	r2, r1
 8002bde:	d123      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002be6:	401a      	ands	r2, r3
 8002be8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002bec:	d11e      	bne.n	8002c2c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002bf2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002c02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002c08:	d114      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e006      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
}
 8002c10:	4770      	bx	lr
        return HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
 8002c14:	e002      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
}
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
 8002c22:	e7fb      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002c24:	2001      	movs	r0, #1
 8002c26:	e7f9      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e7f7      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	e7f5      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002c30:	2001      	movs	r0, #1
 8002c32:	e7f3      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002c34:	2001      	movs	r0, #1
 8002c36:	e7f1      	b.n	8002c1c <HAL_RCC_OscConfig+0x3d4>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c42:	4b26      	ldr	r3, [pc, #152]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d041      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x92>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d141      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c60:	d012      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c6a:	481d      	ldr	r0, [pc, #116]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	fba1 0100 	umull	r0, r1, r1, r0
 8002c72:	f7fd ffd1 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002c82:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c86:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c8a:	6858      	ldr	r0, [r3, #4]
 8002c8c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c90:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c94:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c98:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c9c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002ca0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ca4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002ca8:	ebb1 010c 	subs.w	r1, r1, ip
 8002cac:	eb63 030e 	sbc.w	r3, r3, lr
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	00c9      	lsls	r1, r1, #3
 8002cb8:	eb11 0c00 	adds.w	ip, r1, r0
 8002cbc:	f143 0300 	adc.w	r3, r3, #0
 8002cc0:	0299      	lsls	r1, r3, #10
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002cc8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002ccc:	f7fd ffa4 	bl	8000c18 <__aeabi_uldivmod>
 8002cd0:	e7d1      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002cd2:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd4:	e7d7      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002cd8:	e7d5      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x46>
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	017d7840 	.word	0x017d7840
 8002ce4:	00f42400 	.word	0x00f42400

08002ce8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	f000 809b 	beq.w	8002e24 <HAL_RCC_ClockConfig+0x13c>
{
 8002cee:	b570      	push	{r4, r5, r6, lr}
 8002cf0:	460d      	mov	r5, r1
 8002cf2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e34 <HAL_RCC_ClockConfig+0x14c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d208      	bcs.n	8002d12 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d00:	b2cb      	uxtb	r3, r1
 8002d02:	4a4c      	ldr	r2, [pc, #304]	@ (8002e34 <HAL_RCC_ClockConfig+0x14c>)
 8002d04:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	f040 808b 	bne.w	8002e28 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	f013 0f02 	tst.w	r3, #2
 8002d18:	d017      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	f013 0f04 	tst.w	r3, #4
 8002d1e:	d004      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4a45      	ldr	r2, [pc, #276]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d22:	6893      	ldr	r3, [r2, #8]
 8002d24:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d28:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	f013 0f08 	tst.w	r3, #8
 8002d30:	d004      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d32:	4a41      	ldr	r2, [pc, #260]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d34:	6893      	ldr	r3, [r2, #8]
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d3e:	6893      	ldr	r3, [r2, #8]
 8002d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d44:	68a1      	ldr	r1, [r4, #8]
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f013 0f01 	tst.w	r3, #1
 8002d50:	d032      	beq.n	8002db8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d021      	beq.n	8002d9c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d58:	1e9a      	subs	r2, r3, #2
 8002d5a:	2a01      	cmp	r2, #1
 8002d5c:	d925      	bls.n	8002daa <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4a36      	ldr	r2, [pc, #216]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f012 0f02 	tst.w	r2, #2
 8002d66:	d061      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d68:	4933      	ldr	r1, [pc, #204]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d6a:	688a      	ldr	r2, [r1, #8]
 8002d6c:	f022 0203 	bic.w	r2, r2, #3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d74:	f7fe fe3e 	bl	80019f4 <HAL_GetTick>
 8002d78:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	6862      	ldr	r2, [r4, #4]
 8002d84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	f7fe fe33 	bl	80019f4 <HAL_GetTick>
 8002d8e:	1b80      	subs	r0, r0, r6
 8002d90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d94:	4298      	cmp	r0, r3
 8002d96:	d9f0      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002d98:	2003      	movs	r0, #3
 8002d9a:	e042      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9c:	4a26      	ldr	r2, [pc, #152]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002da4:	d1e0      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
 8002da8:	e03b      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002db2:	d1d9      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e034      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <HAL_RCC_ClockConfig+0x14c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	42ab      	cmp	r3, r5
 8002dc2:	d907      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc4:	b2ea      	uxtb	r2, r5
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <HAL_RCC_ClockConfig+0x14c>)
 8002dc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	42ab      	cmp	r3, r5
 8002dd2:	d12d      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f013 0f04 	tst.w	r3, #4
 8002dda:	d006      	beq.n	8002dea <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4a16      	ldr	r2, [pc, #88]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002dde:	6893      	ldr	r3, [r2, #8]
 8002de0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002de4:	68e1      	ldr	r1, [r4, #12]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	f013 0f08 	tst.w	r3, #8
 8002df0:	d007      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df2:	4a11      	ldr	r2, [pc, #68]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002df4:	6893      	ldr	r3, [r2, #8]
 8002df6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002dfa:	6921      	ldr	r1, [r4, #16]
 8002dfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f7ff ff1d 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <HAL_RCC_ClockConfig+0x150>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <HAL_RCC_ClockConfig+0x154>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	40d8      	lsrs	r0, r3
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_RCC_ClockConfig+0x158>)
 8002e16:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x15c>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	f7fe fd9e 	bl	800195c <HAL_InitTick>
  return HAL_OK;
 8002e20:	2000      	movs	r0, #0
}
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
}
 8002e26:	4770      	bx	lr
      return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e7fa      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	e7f8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e30:	2001      	movs	r0, #1
 8002e32:	e7f6      	b.n	8002e22 <HAL_RCC_ClockConfig+0x13a>
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	080070b8 	.word	0x080070b8
 8002e40:	20000008 	.word	0x20000008
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e48:	4b01      	ldr	r3, [pc, #4]	@ (8002e50 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000008 	.word	0x20000008

08002e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e56:	f7ff fff7 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e62:	4a03      	ldr	r2, [pc, #12]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e66:	40d8      	lsrs	r0, r3
 8002e68:	bd08      	pop	{r3, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	080070b0 	.word	0x080070b0

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e76:	f7ff ffe7 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e7a:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e82:	4a03      	ldr	r2, [pc, #12]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e86:	40d8      	lsrs	r0, r3
 8002e88:	bd08      	pop	{r3, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	080070b0 	.word	0x080070b0

08002e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e98:	6a03      	ldr	r3, [r0, #32]
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea8:	680c      	ldr	r4, [r1, #0]
 8002eaa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eac:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb0:	688b      	ldr	r3, [r1, #8]
 8002eb2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <TIM_OC1_SetConfig+0x50>)
 8002eb6:	4290      	cmp	r0, r2
 8002eb8:	d006      	beq.n	8002ec8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ebc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ebe:	684a      	ldr	r2, [r1, #4]
 8002ec0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec2:	6203      	str	r3, [r0, #32]
}
 8002ec4:	bc30      	pop	{r4, r5}
 8002ec6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002ecc:	68ca      	ldr	r2, [r1, #12]
 8002ece:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002ed8:	694a      	ldr	r2, [r1, #20]
 8002eda:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002edc:	698d      	ldr	r5, [r1, #24]
 8002ede:	4315      	orrs	r5, r2
 8002ee0:	e7eb      	b.n	8002eba <TIM_OC1_SetConfig+0x26>
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eec:	6a02      	ldr	r2, [r0, #32]
 8002eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ef6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ef8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	680d      	ldr	r5, [r1, #0]
 8002efe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f04:	688a      	ldr	r2, [r1, #8]
 8002f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f40 <TIM_OC3_SetConfig+0x58>)
 8002f0c:	4290      	cmp	r0, r2
 8002f0e:	d006      	beq.n	8002f1e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f12:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f14:	684a      	ldr	r2, [r1, #4]
 8002f16:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	6203      	str	r3, [r0, #32]
}
 8002f1a:	bc30      	pop	{r4, r5}
 8002f1c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f22:	68ca      	ldr	r2, [r1, #12]
 8002f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f30:	694a      	ldr	r2, [r1, #20]
 8002f32:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f36:	698a      	ldr	r2, [r1, #24]
 8002f38:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002f3c:	e7e8      	b.n	8002f10 <TIM_OC3_SetConfig+0x28>
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000

08002f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f44:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f48:	6a02      	ldr	r2, [r0, #32]
 8002f4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f4e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f58:	680d      	ldr	r5, [r1, #0]
 8002f5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f62:	688d      	ldr	r5, [r1, #8]
 8002f64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f68:	4d07      	ldr	r5, [pc, #28]	@ (8002f88 <TIM_OC4_SetConfig+0x44>)
 8002f6a:	42a8      	cmp	r0, r5
 8002f6c:	d006      	beq.n	8002f7c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f72:	684a      	ldr	r2, [r1, #4]
 8002f74:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f76:	6203      	str	r3, [r0, #32]
}
 8002f78:	bc30      	pop	{r4, r5}
 8002f7a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f7c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f80:	694d      	ldr	r5, [r1, #20]
 8002f82:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002f86:	e7f2      	b.n	8002f6e <TIM_OC4_SetConfig+0x2a>
 8002f88:	40010000 	.word	0x40010000

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f90:	6a04      	ldr	r4, [r0, #32]
 8002f92:	f024 0401 	bic.w	r4, r4, #1
 8002f96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f9a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002fa6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002faa:	6203      	str	r3, [r0, #32]
}
 8002fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb6:	6a04      	ldr	r4, [r0, #32]
 8002fb8:	f024 0410 	bic.w	r4, r4, #16
 8002fbc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fcc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fd2:	6203      	str	r3, [r0, #32]
}
 8002fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fda:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	6083      	str	r3, [r0, #8]
}
 8002fe8:	4770      	bx	lr

08002fea <HAL_TIM_PWM_MspInit>:
}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_PeriodElapsedCallback>:
}
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_IC_CaptureCallback>:
}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_TriggerCallback>:
}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIM_IRQHandler>:
{
 8002ff6:	b570      	push	{r4, r5, r6, lr}
 8002ff8:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002ffa:	6803      	ldr	r3, [r0, #0]
 8002ffc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ffe:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003000:	f015 0f02 	tst.w	r5, #2
 8003004:	d010      	beq.n	8003028 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003006:	f016 0f02 	tst.w	r6, #2
 800300a:	d00d      	beq.n	8003028 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800300c:	f06f 0202 	mvn.w	r2, #2
 8003010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003012:	2301      	movs	r3, #1
 8003014:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f013 0f03 	tst.w	r3, #3
 800301e:	d05e      	beq.n	80030de <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003020:	f7ff ffe6 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003024:	2300      	movs	r3, #0
 8003026:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003028:	f015 0f04 	tst.w	r5, #4
 800302c:	d012      	beq.n	8003054 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800302e:	f016 0f04 	tst.w	r6, #4
 8003032:	d00f      	beq.n	8003054 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	f06f 0204 	mvn.w	r2, #4
 800303a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303c:	2302      	movs	r3, #2
 800303e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003048:	d04f      	beq.n	80030ea <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff ffd0 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003050:	2300      	movs	r3, #0
 8003052:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003054:	f015 0f08 	tst.w	r5, #8
 8003058:	d012      	beq.n	8003080 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800305a:	f016 0f08 	tst.w	r6, #8
 800305e:	d00f      	beq.n	8003080 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	f06f 0208 	mvn.w	r2, #8
 8003066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003068:	2304      	movs	r3, #4
 800306a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f013 0f03 	tst.w	r3, #3
 8003074:	d040      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	4620      	mov	r0, r4
 8003078:	f7ff ffba 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307c:	2300      	movs	r3, #0
 800307e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003080:	f015 0f10 	tst.w	r5, #16
 8003084:	d012      	beq.n	80030ac <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003086:	f016 0f10 	tst.w	r6, #16
 800308a:	d00f      	beq.n	80030ac <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f06f 0210 	mvn.w	r2, #16
 8003092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003094:	2308      	movs	r3, #8
 8003096:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80030a0:	d031      	beq.n	8003106 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff ffa4 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	2300      	movs	r3, #0
 80030aa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030ac:	f015 0f01 	tst.w	r5, #1
 80030b0:	d002      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030b2:	f016 0f01 	tst.w	r6, #1
 80030b6:	d12d      	bne.n	8003114 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80030bc:	d002      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030be:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80030c2:	d12f      	bne.n	8003124 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80030c8:	d002      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ca:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80030ce:	d131      	bne.n	8003134 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030d0:	f015 0f20 	tst.w	r5, #32
 80030d4:	d002      	beq.n	80030dc <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030d6:	f016 0f20 	tst.w	r6, #32
 80030da:	d133      	bne.n	8003144 <HAL_TIM_IRQHandler+0x14e>
}
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	f7ff ff86 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff85 	bl	8002ff2 <HAL_TIM_PWM_PulseFinishedCallback>
 80030e8:	e79c      	b.n	8003024 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff ff7f 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff ff7e 	bl	8002ff2 <HAL_TIM_PWM_PulseFinishedCallback>
 80030f6:	e7ab      	b.n	8003050 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff78 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff ff77 	bl	8002ff2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003104:	e7ba      	b.n	800307c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff ff71 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	4620      	mov	r0, r4
 800310e:	f7ff ff70 	bl	8002ff2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003112:	e7c9      	b.n	80030a8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f06f 0201 	mvn.w	r2, #1
 800311a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800311c:	4620      	mov	r0, r4
 800311e:	f7ff ff65 	bl	8002fec <HAL_TIM_PeriodElapsedCallback>
 8003122:	e7c9      	b.n	80030b8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800312a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800312c:	4620      	mov	r0, r4
 800312e:	f000 fad1 	bl	80036d4 <HAL_TIMEx_BreakCallback>
 8003132:	e7c7      	b.n	80030c4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800313a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800313c:	4620      	mov	r0, r4
 800313e:	f7ff ff59 	bl	8002ff4 <HAL_TIM_TriggerCallback>
 8003142:	e7c5      	b.n	80030d0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f06f 0220 	mvn.w	r2, #32
 800314a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800314c:	4620      	mov	r0, r4
 800314e:	f000 fac0 	bl	80036d2 <HAL_TIMEx_CommutCallback>
}
 8003152:	e7c3      	b.n	80030dc <HAL_TIM_IRQHandler+0xe6>

08003154 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003154:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003156:	4a29      	ldr	r2, [pc, #164]	@ (80031fc <TIM_Base_SetConfig+0xa8>)
 8003158:	4290      	cmp	r0, r2
 800315a:	d00e      	beq.n	800317a <TIM_Base_SetConfig+0x26>
 800315c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0x26>
 8003162:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003166:	4290      	cmp	r0, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0x26>
 800316a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800316e:	4290      	cmp	r0, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0x26>
 8003172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003176:	4290      	cmp	r0, r2
 8003178:	d103      	bne.n	8003182 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800317e:	684a      	ldr	r2, [r1, #4]
 8003180:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <TIM_Base_SetConfig+0xa8>)
 8003184:	4290      	cmp	r0, r2
 8003186:	d01a      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 8003188:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 800318e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003192:	4290      	cmp	r0, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 8003196:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800319a:	4290      	cmp	r0, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 800319e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031a2:	4290      	cmp	r0, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 80031a6:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80031aa:	4290      	cmp	r0, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 80031ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031b2:	4290      	cmp	r0, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0x6a>
 80031b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d103      	bne.n	80031c6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	68ca      	ldr	r2, [r1, #12]
 80031c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ca:	694a      	ldr	r2, [r1, #20]
 80031cc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d0:	688b      	ldr	r3, [r1, #8]
 80031d2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031d4:	680b      	ldr	r3, [r1, #0]
 80031d6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <TIM_Base_SetConfig+0xa8>)
 80031da:	4298      	cmp	r0, r3
 80031dc:	d00a      	beq.n	80031f4 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 80031de:	2301      	movs	r3, #1
 80031e0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e2:	6903      	ldr	r3, [r0, #16]
 80031e4:	f013 0f01 	tst.w	r3, #1
 80031e8:	d003      	beq.n	80031f2 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ea:	6903      	ldr	r3, [r0, #16]
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6103      	str	r3, [r0, #16]
}
 80031f2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	690b      	ldr	r3, [r1, #16]
 80031f6:	6303      	str	r3, [r0, #48]	@ 0x30
 80031f8:	e7f1      	b.n	80031de <TIM_Base_SetConfig+0x8a>
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000

08003200 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003200:	b340      	cbz	r0, 8003254 <HAL_TIM_Base_Init+0x54>
{
 8003202:	b510      	push	{r4, lr}
 8003204:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800320a:	b1f3      	cbz	r3, 800324a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003212:	4621      	mov	r1, r4
 8003214:	f851 0b04 	ldr.w	r0, [r1], #4
 8003218:	f7ff ff9c 	bl	8003154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	2301      	movs	r3, #1
 800321e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003226:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800322a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800322e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800323a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800323e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003242:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003246:	2000      	movs	r0, #0
}
 8003248:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800324a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800324e:	f000 fc65 	bl	8003b1c <HAL_TIM_Base_MspInit>
 8003252:	e7db      	b.n	800320c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003254:	2001      	movs	r0, #1
}
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003258:	b340      	cbz	r0, 80032ac <HAL_TIM_PWM_Init+0x54>
{
 800325a:	b510      	push	{r4, lr}
 800325c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800325e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003262:	b1f3      	cbz	r3, 80032a2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326a:	4621      	mov	r1, r4
 800326c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003270:	f7ff ff70 	bl	8003154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003274:	2301      	movs	r3, #1
 8003276:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800327e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003282:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003286:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800328e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003292:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003296:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800329a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800329e:	2000      	movs	r0, #0
}
 80032a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80032a6:	f7ff fea0 	bl	8002fea <HAL_TIM_PWM_MspInit>
 80032aa:	e7db      	b.n	8003264 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	4770      	bx	lr

080032b0 <TIM_OC2_SetConfig>:
{
 80032b0:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80032b2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b4:	6a02      	ldr	r2, [r0, #32]
 80032b6:	f022 0210 	bic.w	r2, r2, #16
 80032ba:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80032bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80032be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	680d      	ldr	r5, [r1, #0]
 80032c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80032ca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032ce:	688d      	ldr	r5, [r1, #8]
 80032d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003308 <TIM_OC2_SetConfig+0x58>)
 80032d6:	42a8      	cmp	r0, r5
 80032d8:	d006      	beq.n	80032e8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80032da:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032dc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80032de:	684a      	ldr	r2, [r1, #4]
 80032e0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80032e2:	6203      	str	r3, [r0, #32]
}
 80032e4:	bc30      	pop	{r4, r5}
 80032e6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032ec:	68cd      	ldr	r5, [r1, #12]
 80032ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80032f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032f6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032fa:	694d      	ldr	r5, [r1, #20]
 80032fc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003300:	698d      	ldr	r5, [r1, #24]
 8003302:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003306:	e7e8      	b.n	80032da <TIM_OC2_SetConfig+0x2a>
 8003308:	40010000 	.word	0x40010000

0800330c <HAL_TIM_PWM_ConfigChannel>:
{
 800330c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800330e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d066      	beq.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
 800331a:	2301      	movs	r3, #1
 800331c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003320:	2a0c      	cmp	r2, #12
 8003322:	d85a      	bhi.n	80033da <HAL_TIM_PWM_ConfigChannel+0xce>
 8003324:	e8df f002 	tbb	[pc, r2]
 8003328:	59595907 	.word	0x59595907
 800332c:	5959591b 	.word	0x5959591b
 8003330:	59595930 	.word	0x59595930
 8003334:	44          	.byte	0x44
 8003335:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003336:	6800      	ldr	r0, [r0, #0]
 8003338:	f7ff fdac 	bl	8002e94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	6993      	ldr	r3, [r2, #24]
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	6993      	ldr	r3, [r2, #24]
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	6993      	ldr	r3, [r2, #24]
 8003354:	6929      	ldr	r1, [r5, #16]
 8003356:	430b      	orrs	r3, r1
 8003358:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2000      	movs	r0, #0
      break;
 800335c:	e03e      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335e:	6800      	ldr	r0, [r0, #0]
 8003360:	f7ff ffa6 	bl	80032b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003364:	6822      	ldr	r2, [r4, #0]
 8003366:	6993      	ldr	r3, [r2, #24]
 8003368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800336c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	6993      	ldr	r3, [r2, #24]
 8003372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003376:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	6993      	ldr	r3, [r2, #24]
 800337c:	6929      	ldr	r1, [r5, #16]
 800337e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003382:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2000      	movs	r0, #0
      break;
 8003386:	e029      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003388:	6800      	ldr	r0, [r0, #0]
 800338a:	f7ff fdad 	bl	8002ee8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	69d3      	ldr	r3, [r2, #28]
 8003392:	f043 0308 	orr.w	r3, r3, #8
 8003396:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	69d3      	ldr	r3, [r2, #28]
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	69d3      	ldr	r3, [r2, #28]
 80033a6:	6929      	ldr	r1, [r5, #16]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2000      	movs	r0, #0
      break;
 80033ae:	e015      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b0:	6800      	ldr	r0, [r0, #0]
 80033b2:	f7ff fdc7 	bl	8002f44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	69d3      	ldr	r3, [r2, #28]
 80033ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	69d3      	ldr	r3, [r2, #28]
 80033c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	69d3      	ldr	r3, [r2, #28]
 80033ce:	6929      	ldr	r1, [r5, #16]
 80033d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033d4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2000      	movs	r0, #0
      break;
 80033d8:	e000      	b.n	80033dc <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80033da:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80033dc:	2300      	movs	r3, #0
 80033de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80033e4:	2002      	movs	r0, #2
 80033e6:	e7fc      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080033e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80033f4:	430a      	orrs	r2, r1
 80033f6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fa:	6082      	str	r2, [r0, #8]
}
 80033fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003402:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d078      	beq.n	80034fc <HAL_TIM_ConfigClockSource+0xfa>
{
 800340a:	b510      	push	{r4, lr}
 800340c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800340e:	2301      	movs	r3, #1
 8003410:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800341a:	6802      	ldr	r2, [r0, #0]
 800341c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003426:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003428:	680b      	ldr	r3, [r1, #0]
 800342a:	2b60      	cmp	r3, #96	@ 0x60
 800342c:	d04c      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xc6>
 800342e:	d823      	bhi.n	8003478 <HAL_TIM_ConfigClockSource+0x76>
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d054      	beq.n	80034de <HAL_TIM_ConfigClockSource+0xdc>
 8003434:	d811      	bhi.n	800345a <HAL_TIM_ConfigClockSource+0x58>
 8003436:	2b20      	cmp	r3, #32
 8003438:	d003      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x40>
 800343a:	d80a      	bhi.n	8003452 <HAL_TIM_ConfigClockSource+0x50>
 800343c:	b10b      	cbz	r3, 8003442 <HAL_TIM_ConfigClockSource+0x40>
 800343e:	2b10      	cmp	r3, #16
 8003440:	d105      	bne.n	800344e <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003442:	4619      	mov	r1, r3
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	f7ff fdc8 	bl	8002fda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2000      	movs	r0, #0
      break;
 800344c:	e028      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800344e:	2001      	movs	r0, #1
 8003450:	e026      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003452:	2b30      	cmp	r3, #48	@ 0x30
 8003454:	d0f5      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003456:	2001      	movs	r0, #1
 8003458:	e022      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800345a:	2b50      	cmp	r3, #80	@ 0x50
 800345c:	d10a      	bne.n	8003474 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	68ca      	ldr	r2, [r1, #12]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	6800      	ldr	r0, [r0, #0]
 8003464:	f7ff fd92 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003468:	2150      	movs	r1, #80	@ 0x50
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	f7ff fdb5 	bl	8002fda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2000      	movs	r0, #0
      break;
 8003472:	e015      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003474:	2001      	movs	r0, #1
 8003476:	e013      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	d03a      	beq.n	80034f4 <HAL_TIM_ConfigClockSource+0xf2>
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003482:	d014      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xac>
 8003484:	2b70      	cmp	r3, #112	@ 0x70
 8003486:	d137      	bne.n	80034f8 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	68cb      	ldr	r3, [r1, #12]
 800348a:	684a      	ldr	r2, [r1, #4]
 800348c:	6889      	ldr	r1, [r1, #8]
 800348e:	6800      	ldr	r0, [r0, #0]
 8003490:	f7ff ffaa 	bl	80033e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800349c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80034a6:	2300      	movs	r3, #0
 80034a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80034ac:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80034ae:	68cb      	ldr	r3, [r1, #12]
 80034b0:	684a      	ldr	r2, [r1, #4]
 80034b2:	6889      	ldr	r1, [r1, #8]
 80034b4:	6800      	ldr	r0, [r0, #0]
 80034b6:	f7ff ff97 	bl	80033e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	6893      	ldr	r3, [r2, #8]
 80034be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034c2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2000      	movs	r0, #0
      break;
 80034c6:	e7eb      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c8:	68ca      	ldr	r2, [r1, #12]
 80034ca:	6849      	ldr	r1, [r1, #4]
 80034cc:	6800      	ldr	r0, [r0, #0]
 80034ce:	f7ff fd70 	bl	8002fb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d2:	2160      	movs	r1, #96	@ 0x60
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	f7ff fd80 	bl	8002fda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2000      	movs	r0, #0
      break;
 80034dc:	e7e0      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	68ca      	ldr	r2, [r1, #12]
 80034e0:	6849      	ldr	r1, [r1, #4]
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	f7ff fd52 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e8:	2140      	movs	r1, #64	@ 0x40
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	f7ff fd75 	bl	8002fda <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2000      	movs	r0, #0
      break;
 80034f2:	e7d5      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80034f4:	2000      	movs	r0, #0
 80034f6:	e7d3      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7d1      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80034fc:	2002      	movs	r0, #2
}
 80034fe:	4770      	bx	lr

08003500 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003500:	f001 011f 	and.w	r1, r1, #31
 8003504:	f04f 0c01 	mov.w	ip, #1
 8003508:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350c:	6a03      	ldr	r3, [r0, #32]
 800350e:	ea23 030c 	bic.w	r3, r3, ip
 8003512:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003514:	6a03      	ldr	r3, [r0, #32]
 8003516:	408a      	lsls	r2, r1
 8003518:	4313      	orrs	r3, r2
 800351a:	6203      	str	r3, [r0, #32]
}
 800351c:	4770      	bx	lr
	...

08003520 <HAL_TIM_PWM_Start>:
{
 8003520:	b510      	push	{r4, lr}
 8003522:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003524:	4608      	mov	r0, r1
 8003526:	bb89      	cbnz	r1, 800358c <HAL_TIM_PWM_Start+0x6c>
 8003528:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800352c:	3b01      	subs	r3, #1
 800352e:	bf18      	it	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d160      	bne.n	80035f8 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003536:	2800      	cmp	r0, #0
 8003538:	d13e      	bne.n	80035b8 <HAL_TIM_PWM_Start+0x98>
 800353a:	2302      	movs	r3, #2
 800353c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003540:	2201      	movs	r2, #1
 8003542:	4601      	mov	r1, r0
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f7ff ffdb 	bl	8003500 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <HAL_TIM_PWM_Start+0xe0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d042      	beq.n	80035d8 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	4a2a      	ldr	r2, [pc, #168]	@ (8003600 <HAL_TIM_PWM_Start+0xe0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d043      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d040      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
 8003560:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003564:	4293      	cmp	r3, r2
 8003566:	d03c      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
 8003568:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800356c:	4293      	cmp	r3, r2
 800356e:	d038      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
 8003570:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003574:	4293      	cmp	r3, r2
 8003576:	d034      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
 8003578:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800357c:	4293      	cmp	r3, r2
 800357e:	d030      	beq.n	80035e2 <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003588:	2000      	movs	r0, #0
 800358a:	e034      	b.n	80035f6 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358c:	2904      	cmp	r1, #4
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_PWM_Start+0x80>
 8003590:	2908      	cmp	r1, #8
 8003592:	d00b      	beq.n	80035ac <HAL_TIM_PWM_Start+0x8c>
 8003594:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003598:	3b01      	subs	r3, #1
 800359a:	bf18      	it	ne
 800359c:	2301      	movne	r3, #1
 800359e:	e7c8      	b.n	8003532 <HAL_TIM_PWM_Start+0x12>
 80035a0:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80035a4:	3b01      	subs	r3, #1
 80035a6:	bf18      	it	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	e7c2      	b.n	8003532 <HAL_TIM_PWM_Start+0x12>
 80035ac:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80035b0:	3b01      	subs	r3, #1
 80035b2:	bf18      	it	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	e7bc      	b.n	8003532 <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b8:	2804      	cmp	r0, #4
 80035ba:	d005      	beq.n	80035c8 <HAL_TIM_PWM_Start+0xa8>
 80035bc:	2808      	cmp	r0, #8
 80035be:	d007      	beq.n	80035d0 <HAL_TIM_PWM_Start+0xb0>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80035c6:	e7bb      	b.n	8003540 <HAL_TIM_PWM_Start+0x20>
 80035c8:	2302      	movs	r3, #2
 80035ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80035ce:	e7b7      	b.n	8003540 <HAL_TIM_PWM_Start+0x20>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80035d6:	e7b3      	b.n	8003540 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 80035d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
 80035e0:	e7b7      	b.n	8003552 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	2a06      	cmp	r2, #6
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035f4:	2000      	movs	r0, #0
}
 80035f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035f8:	2001      	movs	r0, #1
 80035fa:	e7fc      	b.n	80035f6 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 80035fc:	2000      	movs	r0, #0
 80035fe:	e7fa      	b.n	80035f6 <HAL_TIM_PWM_Start+0xd6>
 8003600:	40010000 	.word	0x40010000

08003604 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003604:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003608:	2a01      	cmp	r2, #1
 800360a:	d035      	beq.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 800360c:	b410      	push	{r4}
 800360e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003610:	2201      	movs	r2, #1
 8003612:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	2202      	movs	r2, #2
 8003618:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	6802      	ldr	r2, [r0, #0]
 800361e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003620:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003622:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003626:	6808      	ldr	r0, [r1, #0]
 8003628:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4812      	ldr	r0, [pc, #72]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003632:	4282      	cmp	r2, r0
 8003634:	d012      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003636:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800363a:	d00f      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800363c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003640:	4282      	cmp	r2, r0
 8003642:	d00b      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003644:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003648:	4282      	cmp	r2, r0
 800364a:	d007      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800364c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003650:	4282      	cmp	r2, r0
 8003652:	d003      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003654:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003658:	4282      	cmp	r2, r0
 800365a:	d104      	bne.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800365c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003660:	6849      	ldr	r1, [r1, #4]
 8003662:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003664:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800366c:	2000      	movs	r0, #0
 800366e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003676:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003678:	2002      	movs	r0, #2
}
 800367a:	4770      	bx	lr
 800367c:	40010000 	.word	0x40010000

08003680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003680:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d021      	beq.n	80036ce <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800368a:	2301      	movs	r3, #1
 800368c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003690:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003696:	6888      	ldr	r0, [r1, #8]
 8003698:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800369a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800369e:	6848      	ldr	r0, [r1, #4]
 80036a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036a6:	6808      	ldr	r0, [r1, #0]
 80036a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036ae:	6908      	ldr	r0, [r1, #16]
 80036b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036b6:	6948      	ldr	r0, [r1, #20]
 80036b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036be:	69c9      	ldr	r1, [r1, #28]
 80036c0:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80036cc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80036ce:	2002      	movs	r0, #2
}
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d4:	4770      	bx	lr

080036d6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	f102 030c 	add.w	r3, r2, #12
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	320c      	adds	r2, #12
 80036e6:	e842 3100 	strex	r1, r3, [r2]
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d1f3      	bne.n	80036d6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	f102 0314 	add.w	r3, r2, #20
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	3214      	adds	r2, #20
 80036fe:	e842 3100 	strex	r1, r3, [r2]
 8003702:	2900      	cmp	r1, #0
 8003704:	d1f3      	bne.n	80036ee <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003706:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	d005      	beq.n	8003718 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370c:	2320      	movs	r3, #32
 800370e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	2300      	movs	r3, #0
 8003714:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003716:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	f102 030c 	add.w	r3, r2, #12
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	320c      	adds	r2, #12
 8003728:	e842 3100 	strex	r1, r3, [r2]
 800372c:	2900      	cmp	r1, #0
 800372e:	d1f3      	bne.n	8003718 <UART_EndRxTransfer+0x42>
 8003730:	e7ec      	b.n	800370c <UART_EndRxTransfer+0x36>
	...

08003734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	b510      	push	{r4, lr}
 8003736:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	6913      	ldr	r3, [r2, #16]
 800373c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003740:	68c1      	ldr	r1, [r0, #12]
 8003742:	430b      	orrs	r3, r1
 8003744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003746:	6883      	ldr	r3, [r0, #8]
 8003748:	6902      	ldr	r2, [r0, #16]
 800374a:	431a      	orrs	r2, r3
 800374c:	6943      	ldr	r3, [r0, #20]
 800374e:	431a      	orrs	r2, r3
 8003750:	69c3      	ldr	r3, [r0, #28]
 8003752:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	68cb      	ldr	r3, [r1, #12]
 8003758:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800375c:	f023 030c 	bic.w	r3, r3, #12
 8003760:	4313      	orrs	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003764:	6802      	ldr	r2, [r0, #0]
 8003766:	6953      	ldr	r3, [r2, #20]
 8003768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800376c:	6981      	ldr	r1, [r0, #24]
 800376e:	430b      	orrs	r3, r1
 8003770:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003772:	6803      	ldr	r3, [r0, #0]
 8003774:	4a31      	ldr	r2, [pc, #196]	@ (800383c <UART_SetConfig+0x108>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d006      	beq.n	8003788 <UART_SetConfig+0x54>
 800377a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800377e:	4293      	cmp	r3, r2
 8003780:	d002      	beq.n	8003788 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7ff fb67 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 8003786:	e001      	b.n	800378c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7ff fb74 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378c:	69e3      	ldr	r3, [r4, #28]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003792:	d029      	beq.n	80037e8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003794:	2100      	movs	r1, #0
 8003796:	1803      	adds	r3, r0, r0
 8003798:	4149      	adcs	r1, r1
 800379a:	181b      	adds	r3, r3, r0
 800379c:	f141 0100 	adc.w	r1, r1, #0
 80037a0:	00c9      	lsls	r1, r1, #3
 80037a2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1818      	adds	r0, r3, r0
 80037aa:	6863      	ldr	r3, [r4, #4]
 80037ac:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80037b0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80037b4:	f141 0100 	adc.w	r1, r1, #0
 80037b8:	f7fd fa2e 	bl	8000c18 <__aeabi_uldivmod>
 80037bc:	4a20      	ldr	r2, [pc, #128]	@ (8003840 <UART_SetConfig+0x10c>)
 80037be:	fba2 3100 	umull	r3, r1, r2, r0
 80037c2:	0949      	lsrs	r1, r1, #5
 80037c4:	2364      	movs	r3, #100	@ 0x64
 80037c6:	fb03 0311 	mls	r3, r3, r1, r0
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	3332      	adds	r3, #50	@ 0x32
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037d8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	6821      	ldr	r1, [r4, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }
}
 80037e6:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e8:	2300      	movs	r3, #0
 80037ea:	1802      	adds	r2, r0, r0
 80037ec:	eb43 0103 	adc.w	r1, r3, r3
 80037f0:	1812      	adds	r2, r2, r0
 80037f2:	f141 0100 	adc.w	r1, r1, #0
 80037f6:	00c9      	lsls	r1, r1, #3
 80037f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037fc:	00d2      	lsls	r2, r2, #3
 80037fe:	1810      	adds	r0, r2, r0
 8003800:	f141 0100 	adc.w	r1, r1, #0
 8003804:	6862      	ldr	r2, [r4, #4]
 8003806:	1892      	adds	r2, r2, r2
 8003808:	415b      	adcs	r3, r3
 800380a:	f7fd fa05 	bl	8000c18 <__aeabi_uldivmod>
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <UART_SetConfig+0x10c>)
 8003810:	fba2 3100 	umull	r3, r1, r2, r0
 8003814:	0949      	lsrs	r1, r1, #5
 8003816:	2364      	movs	r3, #100	@ 0x64
 8003818:	fb03 0311 	mls	r3, r3, r1, r0
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	3332      	adds	r3, #50	@ 0x32
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	005a      	lsls	r2, r3, #1
 8003828:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800382c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	6821      	ldr	r1, [r4, #0]
 8003836:	4413      	add	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
 800383a:	e7d4      	b.n	80037e6 <UART_SetConfig+0xb2>
 800383c:	40011000 	.word	0x40011000
 8003840:	51eb851f 	.word	0x51eb851f

08003844 <UART_WaitOnFlagUntilTimeout>:
{
 8003844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003848:	b083      	sub	sp, #12
 800384a:	4605      	mov	r5, r0
 800384c:	460e      	mov	r6, r1
 800384e:	4617      	mov	r7, r2
 8003850:	4699      	mov	r9, r3
 8003852:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003856:	682b      	ldr	r3, [r5, #0]
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	ea36 0404 	bics.w	r4, r6, r4
 800385e:	bf0c      	ite	eq
 8003860:	2401      	moveq	r4, #1
 8003862:	2400      	movne	r4, #0
 8003864:	42bc      	cmp	r4, r7
 8003866:	d128      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003868:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800386c:	d0f3      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe f8c1 	bl	80019f4 <HAL_GetTick>
 8003872:	eba0 0009 	sub.w	r0, r0, r9
 8003876:	4540      	cmp	r0, r8
 8003878:	d823      	bhi.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x7e>
 800387a:	f1b8 0f00 	cmp.w	r8, #0
 800387e:	d022      	beq.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	f012 0f04 	tst.w	r2, #4
 8003888:	d0e5      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
 800388a:	2e80      	cmp	r6, #128	@ 0x80
 800388c:	d0e3      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
 800388e:	2e40      	cmp	r6, #64	@ 0x40
 8003890:	d0e1      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	f012 0f08 	tst.w	r2, #8
 8003898:	d0dd      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800389a:	2400      	movs	r4, #0
 800389c:	9401      	str	r4, [sp, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	9201      	str	r2, [sp, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80038a8:	4628      	mov	r0, r5
 80038aa:	f7ff ff14 	bl	80036d6 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ae:	2308      	movs	r3, #8
 80038b0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80038b2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
 80038b8:	e000      	b.n	80038bc <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80038ba:	2000      	movs	r0, #0
}
 80038bc:	b003      	add	sp, #12
 80038be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80038c2:	2003      	movs	r0, #3
 80038c4:	e7fa      	b.n	80038bc <UART_WaitOnFlagUntilTimeout+0x78>
 80038c6:	2003      	movs	r0, #3
 80038c8:	e7f8      	b.n	80038bc <UART_WaitOnFlagUntilTimeout+0x78>

080038ca <HAL_UART_Init>:
  if (huart == NULL)
 80038ca:	b360      	cbz	r0, 8003926 <HAL_UART_Init+0x5c>
{
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80038d0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80038d4:	b313      	cbz	r3, 800391c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80038d6:	2324      	movs	r3, #36	@ 0x24
 80038d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	68d3      	ldr	r3, [r2, #12]
 80038e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038e4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ff24 	bl	8003734 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	6913      	ldr	r3, [r2, #16]
 80038f0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80038f4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	6953      	ldr	r3, [r2, #20]
 80038fa:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80038fe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	68d3      	ldr	r3, [r2, #12]
 8003904:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003908:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	2000      	movs	r0, #0
 800390c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800390e:	2320      	movs	r3, #32
 8003910:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800391a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800391c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003920:	f000 f9f0 	bl	8003d04 <HAL_UART_MspInit>
 8003924:	e7d7      	b.n	80038d6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
}
 8003928:	4770      	bx	lr

0800392a <HAL_UART_Transmit>:
{
 800392a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003932:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003936:	2b20      	cmp	r3, #32
 8003938:	d156      	bne.n	80039e8 <HAL_UART_Transmit+0xbe>
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003940:	2900      	cmp	r1, #0
 8003942:	d055      	beq.n	80039f0 <HAL_UART_Transmit+0xc6>
 8003944:	b90a      	cbnz	r2, 800394a <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8003946:	2001      	movs	r0, #1
 8003948:	e04f      	b.n	80039ea <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394a:	2300      	movs	r3, #0
 800394c:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	2321      	movs	r3, #33	@ 0x21
 8003950:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003954:	f7fe f84e 	bl	80019f4 <HAL_GetTick>
 8003958:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800395a:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800395e:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003962:	68a3      	ldr	r3, [r4, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003968:	d002      	beq.n	8003970 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 800396a:	f04f 0800 	mov.w	r8, #0
 800396e:	e014      	b.n	800399a <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	b32b      	cbz	r3, 80039c0 <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8003974:	f04f 0800 	mov.w	r8, #0
 8003978:	e00f      	b.n	800399a <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 800397a:	2320      	movs	r3, #32
 800397c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003980:	2003      	movs	r0, #3
 8003982:	e032      	b.n	80039ea <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003984:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003990:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003992:	b292      	uxth	r2, r2
 8003994:	3a01      	subs	r2, #1
 8003996:	b292      	uxth	r2, r2
 8003998:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800399a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800399c:	b29b      	uxth	r3, r3
 800399e:	b193      	cbz	r3, 80039c6 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a0:	9600      	str	r6, [sp, #0]
 80039a2:	463b      	mov	r3, r7
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	@ 0x80
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff ff4b 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d1e3      	bne.n	800397a <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d0e6      	beq.n	8003984 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039be:	e7e7      	b.n	8003990 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 80039c0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80039c2:	2500      	movs	r5, #0
 80039c4:	e7e9      	b.n	800399a <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	9600      	str	r6, [sp, #0]
 80039c8:	463b      	mov	r3, r7
 80039ca:	2200      	movs	r2, #0
 80039cc:	2140      	movs	r1, #64	@ 0x40
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff ff38 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 80039d4:	b918      	cbnz	r0, 80039de <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80039d6:	2320      	movs	r3, #32
 80039d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80039dc:	e005      	b.n	80039ea <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 80039de:	2320      	movs	r3, #32
 80039e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80039e4:	2003      	movs	r0, #3
 80039e6:	e000      	b.n	80039ea <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80039e8:	2002      	movs	r0, #2
}
 80039ea:	b002      	add	sp, #8
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80039f0:	2001      	movs	r0, #1
 80039f2:	e7fa      	b.n	80039ea <HAL_UART_Transmit+0xc0>

080039f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039f4:	e7fe      	b.n	80039f4 <NMI_Handler>

080039f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <HardFault_Handler>

080039f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <MemManage_Handler>

080039fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039fa:	e7fe      	b.n	80039fa <BusFault_Handler>

080039fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <UsageFault_Handler>

080039fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039fe:	4770      	bx	lr

08003a00 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a00:	4770      	bx	lr

08003a02 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a06:	f7fd ffe9 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a0a:	bd08      	pop	{r3, pc}

08003a0c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a0e:	4802      	ldr	r0, [pc, #8]	@ (8003a18 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8003a10:	f7ff faf1 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003a14:	bd08      	pop	{r3, pc}
 8003a16:	bf00      	nop
 8003a18:	2000026c 	.word	0x2000026c

08003a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a1e:	4802      	ldr	r0, [pc, #8]	@ (8003a28 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003a20:	f7ff fae9 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a24:	bd08      	pop	{r3, pc}
 8003a26:	bf00      	nop
 8003a28:	2000026c 	.word	0x2000026c

08003a2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a2e:	4802      	ldr	r0, [pc, #8]	@ (8003a38 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8003a30:	f7ff fae1 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a34:	bd08      	pop	{r3, pc}
 8003a36:	bf00      	nop
 8003a38:	2000026c 	.word	0x2000026c

08003a3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a3e:	4802      	ldr	r0, [pc, #8]	@ (8003a48 <TIM1_CC_IRQHandler+0xc>)
 8003a40:	f7ff fad9 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a44:	bd08      	pop	{r3, pc}
 8003a46:	bf00      	nop
 8003a48:	2000026c 	.word	0x2000026c

08003a4c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	4770      	bx	lr

08003a50 <_kill>:

int _kill(int pid, int sig)
{
 8003a50:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a52:	f000 ff9b 	bl	800498c <__errno>
 8003a56:	2316      	movs	r3, #22
 8003a58:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a5e:	bd08      	pop	{r3, pc}

08003a60 <_exit>:

void _exit (int status)
{
 8003a60:	b508      	push	{r3, lr}
  _kill(status, -1);
 8003a62:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a66:	f7ff fff3 	bl	8003a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a6a:	e7fe      	b.n	8003a6a <_exit+0xa>

08003a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	460c      	mov	r4, r1
 8003a70:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	2500      	movs	r5, #0
 8003a74:	e006      	b.n	8003a84 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8003a76:	f3af 8000 	nop.w
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a80:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003a82:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a84:	42b5      	cmp	r5, r6
 8003a86:	dbf6      	blt.n	8003a76 <_read+0xa>
  }

  return len;
}
 8003a88:	4630      	mov	r0, r6
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	460c      	mov	r4, r1
 8003a90:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	2500      	movs	r5, #0
 8003a94:	e004      	b.n	8003aa0 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003a96:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	3501      	adds	r5, #1
 8003aa0:	42b5      	cmp	r5, r6
 8003aa2:	dbf8      	blt.n	8003a96 <_write+0xa>
  }
  return len;
}
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}

08003aa8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aac:	4770      	bx	lr

08003aae <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ab2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	4770      	bx	lr

08003ab8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003ab8:	2001      	movs	r0, #1
 8003aba:	4770      	bx	lr

08003abc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003abc:	2000      	movs	r0, #0
 8003abe:	4770      	bx	lr

08003ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <_sbrk+0x38>)
 8003ac6:	490d      	ldr	r1, [pc, #52]	@ (8003afc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac8:	480d      	ldr	r0, [pc, #52]	@ (8003b00 <_sbrk+0x40>)
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	b140      	cbz	r0, 8003ae0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ace:	480c      	ldr	r0, [pc, #48]	@ (8003b00 <_sbrk+0x40>)
 8003ad0:	6800      	ldr	r0, [r0, #0]
 8003ad2:	4403      	add	r3, r0
 8003ad4:	1a52      	subs	r2, r2, r1
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d806      	bhi.n	8003ae8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003ada:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <_sbrk+0x40>)
 8003adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003ade:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003ae0:	4807      	ldr	r0, [pc, #28]	@ (8003b00 <_sbrk+0x40>)
 8003ae2:	4c08      	ldr	r4, [pc, #32]	@ (8003b04 <_sbrk+0x44>)
 8003ae4:	6004      	str	r4, [r0, #0]
 8003ae6:	e7f2      	b.n	8003ace <_sbrk+0xe>
    errno = ENOMEM;
 8003ae8:	f000 ff50 	bl	800498c <__errno>
 8003aec:	230c      	movs	r3, #12
 8003aee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af4:	e7f3      	b.n	8003ade <_sbrk+0x1e>
 8003af6:	bf00      	nop
 8003af8:	20020000 	.word	0x20020000
 8003afc:	00000400 	.word	0x00000400
 8003b00:	20000268 	.word	0x20000268
 8003b04:	20000448 	.word	0x20000448

08003b08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b08:	4a03      	ldr	r2, [pc, #12]	@ (8003b18 <SystemInit+0x10>)
 8003b0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003b0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003b1c:	6802      	ldr	r2, [r0, #0]
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <HAL_TIM_Base_MspInit+0x6c>)
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d000      	beq.n	8003b26 <HAL_TIM_Base_MspInit+0xa>
 8003b24:	4770      	bx	lr
{
 8003b26:	b510      	push	{r4, lr}
 8003b28:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b2a:	2400      	movs	r4, #0
 8003b2c:	9401      	str	r4, [sp, #4]
 8003b2e:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003b44:	4622      	mov	r2, r4
 8003b46:	4621      	mov	r1, r4
 8003b48:	2018      	movs	r0, #24
 8003b4a:	f7fd ffc1 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b4e:	2018      	movs	r0, #24
 8003b50:	f7fd ffce 	bl	8001af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b54:	4622      	mov	r2, r4
 8003b56:	4621      	mov	r1, r4
 8003b58:	2019      	movs	r0, #25
 8003b5a:	f7fd ffb9 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b5e:	2019      	movs	r0, #25
 8003b60:	f7fd ffc6 	bl	8001af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003b64:	4622      	mov	r2, r4
 8003b66:	4621      	mov	r1, r4
 8003b68:	201a      	movs	r0, #26
 8003b6a:	f7fd ffb1 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b6e:	201a      	movs	r0, #26
 8003b70:	f7fd ffbe 	bl	8001af0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003b74:	4622      	mov	r2, r4
 8003b76:	4621      	mov	r1, r4
 8003b78:	201b      	movs	r0, #27
 8003b7a:	f7fd ffa9 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003b7e:	201b      	movs	r0, #27
 8003b80:	f7fd ffb6 	bl	8001af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b84:	b002      	add	sp, #8
 8003b86:	bd10      	pop	{r4, pc}
 8003b88:	40010000 	.word	0x40010000

08003b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b8c:	b500      	push	{lr}
 8003b8e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	2300      	movs	r3, #0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_TIM_MspPostInit+0x50>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d002      	beq.n	8003baa <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ba4:	b007      	add	sp, #28
 8003ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <HAL_TIM_MspPostInit+0x54>)
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	a901      	add	r1, sp, #4
 8003bd2:	4804      	ldr	r0, [pc, #16]	@ (8003be4 <HAL_TIM_MspPostInit+0x58>)
 8003bd4:	f7fd ffa4 	bl	8001b20 <HAL_GPIO_Init>
}
 8003bd8:	e7e4      	b.n	8003ba4 <HAL_TIM_MspPostInit+0x18>
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40020000 	.word	0x40020000

08003be8 <MX_TIM1_Init>:
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bec:	2400      	movs	r4, #0
 8003bee:	9412      	str	r4, [sp, #72]	@ 0x48
 8003bf0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003bf2:	9414      	str	r4, [sp, #80]	@ 0x50
 8003bf4:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf6:	9410      	str	r4, [sp, #64]	@ 0x40
 8003bf8:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bfa:	9409      	str	r4, [sp, #36]	@ 0x24
 8003bfc:	940a      	str	r4, [sp, #40]	@ 0x28
 8003bfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003c00:	940c      	str	r4, [sp, #48]	@ 0x30
 8003c02:	940d      	str	r4, [sp, #52]	@ 0x34
 8003c04:	940e      	str	r4, [sp, #56]	@ 0x38
 8003c06:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c08:	2220      	movs	r2, #32
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	a801      	add	r0, sp, #4
 8003c0e:	f000 fe5b 	bl	80048c8 <memset>
  htim1.Instance = TIM1;
 8003c12:	482d      	ldr	r0, [pc, #180]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <MX_TIM1_Init+0xe4>)
 8003c16:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 9999;
 8003c18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c1c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1e:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 199;
 8003c20:	23c7      	movs	r3, #199	@ 0xc7
 8003c22:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c24:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c26:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c28:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c2a:	f7ff fae9 	bl	8003200 <HAL_TIM_Base_Init>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d138      	bne.n	8003ca4 <MX_TIM1_Init+0xbc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c36:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c38:	a912      	add	r1, sp, #72	@ 0x48
 8003c3a:	4823      	ldr	r0, [pc, #140]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c3c:	f7ff fbe1 	bl	8003402 <HAL_TIM_ConfigClockSource>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d132      	bne.n	8003caa <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c44:	4820      	ldr	r0, [pc, #128]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c46:	f7ff fb07 	bl	8003258 <HAL_TIM_PWM_Init>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d130      	bne.n	8003cb0 <MX_TIM1_Init+0xc8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c52:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c54:	a910      	add	r1, sp, #64	@ 0x40
 8003c56:	481c      	ldr	r0, [pc, #112]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c58:	f7ff fcd4 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 8003c5c:	bb58      	cbnz	r0, 8003cb6 <MX_TIM1_Init+0xce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c5e:	2360      	movs	r3, #96	@ 0x60
 8003c60:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 19;
 8003c62:	2313      	movs	r3, #19
 8003c64:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c66:	2200      	movs	r2, #0
 8003c68:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c6a:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6c:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c6e:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c70:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c72:	a909      	add	r1, sp, #36	@ 0x24
 8003c74:	4814      	ldr	r0, [pc, #80]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c76:	f7ff fb49 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8003c7a:	b9f8      	cbnz	r0, 8003cbc <MX_TIM1_Init+0xd4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c80:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c82:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c84:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c86:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c8c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c8e:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c90:	a901      	add	r1, sp, #4
 8003c92:	480d      	ldr	r0, [pc, #52]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c94:	f7ff fcf4 	bl	8003680 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c98:	b998      	cbnz	r0, 8003cc2 <MX_TIM1_Init+0xda>
  HAL_TIM_MspPostInit(&htim1);
 8003c9a:	480b      	ldr	r0, [pc, #44]	@ (8003cc8 <MX_TIM1_Init+0xe0>)
 8003c9c:	f7ff ff76 	bl	8003b8c <HAL_TIM_MspPostInit>
}
 8003ca0:	b016      	add	sp, #88	@ 0x58
 8003ca2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ca4:	f7fd fc86 	bl	80015b4 <Error_Handler>
 8003ca8:	e7c3      	b.n	8003c32 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8003caa:	f7fd fc83 	bl	80015b4 <Error_Handler>
 8003cae:	e7c9      	b.n	8003c44 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003cb0:	f7fd fc80 	bl	80015b4 <Error_Handler>
 8003cb4:	e7cb      	b.n	8003c4e <MX_TIM1_Init+0x66>
    Error_Handler();
 8003cb6:	f7fd fc7d 	bl	80015b4 <Error_Handler>
 8003cba:	e7d0      	b.n	8003c5e <MX_TIM1_Init+0x76>
    Error_Handler();
 8003cbc:	f7fd fc7a 	bl	80015b4 <Error_Handler>
 8003cc0:	e7dc      	b.n	8003c7c <MX_TIM1_Init+0x94>
    Error_Handler();
 8003cc2:	f7fd fc77 	bl	80015b4 <Error_Handler>
 8003cc6:	e7e8      	b.n	8003c9a <MX_TIM1_Init+0xb2>
 8003cc8:	2000026c 	.word	0x2000026c
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003cd0:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cd2:	480a      	ldr	r0, [pc, #40]	@ (8003cfc <MX_USART1_UART_Init+0x2c>)
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <MX_USART1_UART_Init+0x30>)
 8003cd6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003cd8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003cdc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ce2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ce4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cea:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cee:	f7ff fdec 	bl	80038ca <HAL_UART_Init>
 8003cf2:	b900      	cbnz	r0, 8003cf6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cf4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cf6:	f7fd fc5d 	bl	80015b4 <Error_Handler>
}
 8003cfa:	e7fb      	b.n	8003cf4 <MX_USART1_UART_Init+0x24>
 8003cfc:	200002b4 	.word	0x200002b4
 8003d00:	40011000 	.word	0x40011000

08003d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d04:	b500      	push	{lr}
 8003d06:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	9304      	str	r3, [sp, #16]
 8003d0e:	9305      	str	r3, [sp, #20]
 8003d10:	9306      	str	r3, [sp, #24]
 8003d12:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003d14:	6802      	ldr	r2, [r0, #0]
 8003d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d1a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d22:	b009      	add	sp, #36	@ 0x24
 8003d24:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d28:	2100      	movs	r1, #0
 8003d2a:	9101      	str	r1, [sp, #4]
 8003d2c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8003d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d32:	f042 0210 	orr.w	r2, r2, #16
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d3a:	f002 0210 	and.w	r2, r2, #16
 8003d3e:	9201      	str	r2, [sp, #4]
 8003d40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	9102      	str	r1, [sp, #8]
 8003d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	9302      	str	r3, [sp, #8]
 8003d54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d60:	2303      	movs	r3, #3
 8003d62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d64:	2307      	movs	r3, #7
 8003d66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	a903      	add	r1, sp, #12
 8003d6a:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <HAL_UART_MspInit+0x70>)
 8003d6c:	f7fd fed8 	bl	8001b20 <HAL_GPIO_Init>
}
 8003d70:	e7d7      	b.n	8003d22 <HAL_UART_MspInit+0x1e>
 8003d72:	bf00      	nop
 8003d74:	40020000 	.word	0x40020000

08003d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d7c:	f7ff fec4 	bl	8003b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d80:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d82:	490d      	ldr	r1, [pc, #52]	@ (8003db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d84:	4a0d      	ldr	r2, [pc, #52]	@ (8003dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d88:	e002      	b.n	8003d90 <LoopCopyDataInit>

08003d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d8e:	3304      	adds	r3, #4

08003d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d94:	d3f9      	bcc.n	8003d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d96:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d98:	4c0a      	ldr	r4, [pc, #40]	@ (8003dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d9c:	e001      	b.n	8003da2 <LoopFillZerobss>

08003d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da0:	3204      	adds	r2, #4

08003da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003da4:	d3fb      	bcc.n	8003d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003da6:	f000 fdf7 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003daa:	f7fd fc55 	bl	8001658 <main>
  bx  lr    
 8003dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003db8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003dbc:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 8003dc0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003dc4:	20000448 	.word	0x20000448

08003dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dc8:	e7fe      	b.n	8003dc8 <ADC_IRQHandler>

08003dca <__cvt>:
 8003dca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dce:	ec57 6b10 	vmov	r6, r7, d0
 8003dd2:	2f00      	cmp	r7, #0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	463b      	mov	r3, r7
 8003dda:	bfbb      	ittet	lt
 8003ddc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003de0:	461f      	movlt	r7, r3
 8003de2:	2300      	movge	r3, #0
 8003de4:	232d      	movlt	r3, #45	@ 0x2d
 8003de6:	700b      	strb	r3, [r1, #0]
 8003de8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dea:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dee:	4691      	mov	r9, r2
 8003df0:	f023 0820 	bic.w	r8, r3, #32
 8003df4:	bfbc      	itt	lt
 8003df6:	4632      	movlt	r2, r6
 8003df8:	4616      	movlt	r6, r2
 8003dfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dfe:	d005      	beq.n	8003e0c <__cvt+0x42>
 8003e00:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e04:	d100      	bne.n	8003e08 <__cvt+0x3e>
 8003e06:	3401      	adds	r4, #1
 8003e08:	2102      	movs	r1, #2
 8003e0a:	e000      	b.n	8003e0e <__cvt+0x44>
 8003e0c:	2103      	movs	r1, #3
 8003e0e:	ab03      	add	r3, sp, #12
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	ab02      	add	r3, sp, #8
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	ec47 6b10 	vmov	d0, r6, r7
 8003e1a:	4653      	mov	r3, sl
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	f000 fe6b 	bl	8004af8 <_dtoa_r>
 8003e22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e26:	4605      	mov	r5, r0
 8003e28:	d119      	bne.n	8003e5e <__cvt+0x94>
 8003e2a:	f019 0f01 	tst.w	r9, #1
 8003e2e:	d00e      	beq.n	8003e4e <__cvt+0x84>
 8003e30:	eb00 0904 	add.w	r9, r0, r4
 8003e34:	2200      	movs	r2, #0
 8003e36:	2300      	movs	r3, #0
 8003e38:	4630      	mov	r0, r6
 8003e3a:	4639      	mov	r1, r7
 8003e3c:	f7fc fe2c 	bl	8000a98 <__aeabi_dcmpeq>
 8003e40:	b108      	cbz	r0, 8003e46 <__cvt+0x7c>
 8003e42:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e46:	2230      	movs	r2, #48	@ 0x30
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	454b      	cmp	r3, r9
 8003e4c:	d31e      	bcc.n	8003e8c <__cvt+0xc2>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e52:	1b5b      	subs	r3, r3, r5
 8003e54:	4628      	mov	r0, r5
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	b004      	add	sp, #16
 8003e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e62:	eb00 0904 	add.w	r9, r0, r4
 8003e66:	d1e5      	bne.n	8003e34 <__cvt+0x6a>
 8003e68:	7803      	ldrb	r3, [r0, #0]
 8003e6a:	2b30      	cmp	r3, #48	@ 0x30
 8003e6c:	d10a      	bne.n	8003e84 <__cvt+0xba>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2300      	movs	r3, #0
 8003e72:	4630      	mov	r0, r6
 8003e74:	4639      	mov	r1, r7
 8003e76:	f7fc fe0f 	bl	8000a98 <__aeabi_dcmpeq>
 8003e7a:	b918      	cbnz	r0, 8003e84 <__cvt+0xba>
 8003e7c:	f1c4 0401 	rsb	r4, r4, #1
 8003e80:	f8ca 4000 	str.w	r4, [sl]
 8003e84:	f8da 3000 	ldr.w	r3, [sl]
 8003e88:	4499      	add	r9, r3
 8003e8a:	e7d3      	b.n	8003e34 <__cvt+0x6a>
 8003e8c:	1c59      	adds	r1, r3, #1
 8003e8e:	9103      	str	r1, [sp, #12]
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e7d9      	b.n	8003e48 <__cvt+0x7e>

08003e94 <__exponent>:
 8003e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e96:	2900      	cmp	r1, #0
 8003e98:	bfba      	itte	lt
 8003e9a:	4249      	neglt	r1, r1
 8003e9c:	232d      	movlt	r3, #45	@ 0x2d
 8003e9e:	232b      	movge	r3, #43	@ 0x2b
 8003ea0:	2909      	cmp	r1, #9
 8003ea2:	7002      	strb	r2, [r0, #0]
 8003ea4:	7043      	strb	r3, [r0, #1]
 8003ea6:	dd29      	ble.n	8003efc <__exponent+0x68>
 8003ea8:	f10d 0407 	add.w	r4, sp, #7
 8003eac:	4625      	mov	r5, r4
 8003eae:	270a      	movs	r7, #10
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	fbb1 f6f7 	udiv	r6, r1, r7
 8003eb6:	fb07 1316 	mls	r3, r7, r6, r1
 8003eba:	3330      	adds	r3, #48	@ 0x30
 8003ebc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	2b63      	cmp	r3, #99	@ 0x63
 8003ec4:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8003ec8:	4631      	mov	r1, r6
 8003eca:	dcf1      	bgt.n	8003eb0 <__exponent+0x1c>
 8003ecc:	3130      	adds	r1, #48	@ 0x30
 8003ece:	1e93      	subs	r3, r2, #2
 8003ed0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ed4:	1c41      	adds	r1, r0, #1
 8003ed6:	461c      	mov	r4, r3
 8003ed8:	42ab      	cmp	r3, r5
 8003eda:	d30a      	bcc.n	8003ef2 <__exponent+0x5e>
 8003edc:	f10d 0309 	add.w	r3, sp, #9
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	42a5      	cmp	r5, r4
 8003ee4:	bf38      	it	cc
 8003ee6:	2300      	movcc	r3, #0
 8003ee8:	1c82      	adds	r2, r0, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	1a18      	subs	r0, r3, r0
 8003eee:	b003      	add	sp, #12
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ef6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003efa:	e7ed      	b.n	8003ed8 <__exponent+0x44>
 8003efc:	2330      	movs	r3, #48	@ 0x30
 8003efe:	3130      	adds	r1, #48	@ 0x30
 8003f00:	7083      	strb	r3, [r0, #2]
 8003f02:	70c1      	strb	r1, [r0, #3]
 8003f04:	1d03      	adds	r3, r0, #4
 8003f06:	e7f1      	b.n	8003eec <__exponent+0x58>

08003f08 <_printf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b08d      	sub	sp, #52	@ 0x34
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f14:	4616      	mov	r6, r2
 8003f16:	461f      	mov	r7, r3
 8003f18:	4605      	mov	r5, r0
 8003f1a:	f000 fced 	bl	80048f8 <_localeconv_r>
 8003f1e:	6803      	ldr	r3, [r0, #0]
 8003f20:	9306      	str	r3, [sp, #24]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc f98c 	bl	8000240 <strlen>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f34:	f8d4 b000 	ldr.w	fp, [r4]
 8003f38:	9007      	str	r0, [sp, #28]
 8003f3a:	3307      	adds	r3, #7
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	ecb3 7b02 	vldmia	r3!, {d7}
 8003f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f48:	f8c8 3000 	str.w	r3, [r8]
 8003f4c:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8003f50:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003f54:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8003f58:	4b9c      	ldr	r3, [pc, #624]	@ (80041cc <_printf_float+0x2c4>)
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4649      	mov	r1, r9
 8003f62:	f7fc fdcb 	bl	8000afc <__aeabi_dcmpun>
 8003f66:	bb70      	cbnz	r0, 8003fc6 <_printf_float+0xbe>
 8003f68:	4b98      	ldr	r3, [pc, #608]	@ (80041cc <_printf_float+0x2c4>)
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f6e:	4640      	mov	r0, r8
 8003f70:	4649      	mov	r1, r9
 8003f72:	f7fc fda5 	bl	8000ac0 <__aeabi_dcmple>
 8003f76:	bb30      	cbnz	r0, 8003fc6 <_printf_float+0xbe>
 8003f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f7fc fd94 	bl	8000aac <__aeabi_dcmplt>
 8003f84:	b110      	cbz	r0, 8003f8c <_printf_float+0x84>
 8003f86:	232d      	movs	r3, #45	@ 0x2d
 8003f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f8c:	4a90      	ldr	r2, [pc, #576]	@ (80041d0 <_printf_float+0x2c8>)
 8003f8e:	4b91      	ldr	r3, [pc, #580]	@ (80041d4 <_printf_float+0x2cc>)
 8003f90:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f94:	bf8c      	ite	hi
 8003f96:	4690      	movhi	r8, r2
 8003f98:	4698      	movls	r8, r3
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	6123      	str	r3, [r4, #16]
 8003f9e:	f02b 0304 	bic.w	r3, fp, #4
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	f04f 0900 	mov.w	r9, #0
 8003fa8:	9700      	str	r7, [sp, #0]
 8003faa:	4633      	mov	r3, r6
 8003fac:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003fae:	4621      	mov	r1, r4
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	f000 f9d1 	bl	8004358 <_printf_common>
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f040 808c 	bne.w	80040d4 <_printf_float+0x1cc>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fc0:	b00d      	add	sp, #52	@ 0x34
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f7fc fd95 	bl	8000afc <__aeabi_dcmpun>
 8003fd2:	b140      	cbz	r0, 8003fe6 <_printf_float+0xde>
 8003fd4:	9b05      	ldr	r3, [sp, #20]
 8003fd6:	4a80      	ldr	r2, [pc, #512]	@ (80041d8 <_printf_float+0x2d0>)
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bfbc      	itt	lt
 8003fdc:	232d      	movlt	r3, #45	@ 0x2d
 8003fde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80041dc <_printf_float+0x2d4>)
 8003fe4:	e7d4      	b.n	8003f90 <_printf_float+0x88>
 8003fe6:	6863      	ldr	r3, [r4, #4]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 8003fee:	d13b      	bne.n	8004068 <_printf_float+0x160>
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	6063      	str	r3, [r4, #4]
 8003ff4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6022      	str	r2, [r4, #0]
 8003ffc:	9303      	str	r3, [sp, #12]
 8003ffe:	ab0a      	add	r3, sp, #40	@ 0x28
 8004000:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004004:	ab09      	add	r3, sp, #36	@ 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6861      	ldr	r1, [r4, #4]
 800400a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800400e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004012:	4628      	mov	r0, r5
 8004014:	f7ff fed9 	bl	8003dca <__cvt>
 8004018:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800401c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800401e:	4680      	mov	r8, r0
 8004020:	d129      	bne.n	8004076 <_printf_float+0x16e>
 8004022:	1cc8      	adds	r0, r1, #3
 8004024:	db02      	blt.n	800402c <_printf_float+0x124>
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	428b      	cmp	r3, r1
 800402a:	da41      	bge.n	80040b0 <_printf_float+0x1a8>
 800402c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004030:	fa5f fa8a 	uxtb.w	sl, sl
 8004034:	3901      	subs	r1, #1
 8004036:	4652      	mov	r2, sl
 8004038:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800403c:	9109      	str	r1, [sp, #36]	@ 0x24
 800403e:	f7ff ff29 	bl	8003e94 <__exponent>
 8004042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004044:	1813      	adds	r3, r2, r0
 8004046:	2a01      	cmp	r2, #1
 8004048:	4681      	mov	r9, r0
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	dc02      	bgt.n	8004054 <_printf_float+0x14c>
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	07d2      	lsls	r2, r2, #31
 8004052:	d501      	bpl.n	8004058 <_printf_float+0x150>
 8004054:	3301      	adds	r3, #1
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0a3      	beq.n	8003fa8 <_printf_float+0xa0>
 8004060:	232d      	movs	r3, #45	@ 0x2d
 8004062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004066:	e79f      	b.n	8003fa8 <_printf_float+0xa0>
 8004068:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800406c:	d1c2      	bne.n	8003ff4 <_printf_float+0xec>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1c0      	bne.n	8003ff4 <_printf_float+0xec>
 8004072:	2301      	movs	r3, #1
 8004074:	e7bd      	b.n	8003ff2 <_printf_float+0xea>
 8004076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800407a:	d9db      	bls.n	8004034 <_printf_float+0x12c>
 800407c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004080:	d118      	bne.n	80040b4 <_printf_float+0x1ac>
 8004082:	2900      	cmp	r1, #0
 8004084:	6863      	ldr	r3, [r4, #4]
 8004086:	dd0b      	ble.n	80040a0 <_printf_float+0x198>
 8004088:	6121      	str	r1, [r4, #16]
 800408a:	b913      	cbnz	r3, 8004092 <_printf_float+0x18a>
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	07d0      	lsls	r0, r2, #31
 8004090:	d502      	bpl.n	8004098 <_printf_float+0x190>
 8004092:	3301      	adds	r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	65a1      	str	r1, [r4, #88]	@ 0x58
 800409a:	f04f 0900 	mov.w	r9, #0
 800409e:	e7db      	b.n	8004058 <_printf_float+0x150>
 80040a0:	b913      	cbnz	r3, 80040a8 <_printf_float+0x1a0>
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	07d2      	lsls	r2, r2, #31
 80040a6:	d501      	bpl.n	80040ac <_printf_float+0x1a4>
 80040a8:	3302      	adds	r3, #2
 80040aa:	e7f4      	b.n	8004096 <_printf_float+0x18e>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e7f2      	b.n	8004096 <_printf_float+0x18e>
 80040b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040b6:	428b      	cmp	r3, r1
 80040b8:	dc05      	bgt.n	80040c6 <_printf_float+0x1be>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	6121      	str	r1, [r4, #16]
 80040be:	07d8      	lsls	r0, r3, #31
 80040c0:	d5ea      	bpl.n	8004098 <_printf_float+0x190>
 80040c2:	1c4b      	adds	r3, r1, #1
 80040c4:	e7e7      	b.n	8004096 <_printf_float+0x18e>
 80040c6:	2900      	cmp	r1, #0
 80040c8:	bfd4      	ite	le
 80040ca:	f1c1 0202 	rsble	r2, r1, #2
 80040ce:	2201      	movgt	r2, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	e7e0      	b.n	8004096 <_printf_float+0x18e>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	055a      	lsls	r2, r3, #21
 80040d8:	d407      	bmi.n	80040ea <_printf_float+0x1e2>
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	4642      	mov	r2, r8
 80040de:	4631      	mov	r1, r6
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	d12b      	bne.n	8004140 <_printf_float+0x238>
 80040e8:	e768      	b.n	8003fbc <_printf_float+0xb4>
 80040ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040ee:	f240 80dd 	bls.w	80042ac <_printf_float+0x3a4>
 80040f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040f6:	2200      	movs	r2, #0
 80040f8:	2300      	movs	r3, #0
 80040fa:	f7fc fccd 	bl	8000a98 <__aeabi_dcmpeq>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d033      	beq.n	800416a <_printf_float+0x262>
 8004102:	4a37      	ldr	r2, [pc, #220]	@ (80041e0 <_printf_float+0x2d8>)
 8004104:	2301      	movs	r3, #1
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f af55 	beq.w	8003fbc <_printf_float+0xb4>
 8004112:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004116:	4543      	cmp	r3, r8
 8004118:	db02      	blt.n	8004120 <_printf_float+0x218>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	07d8      	lsls	r0, r3, #31
 800411e:	d50f      	bpl.n	8004140 <_printf_float+0x238>
 8004120:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f af46 	beq.w	8003fbc <_printf_float+0xb4>
 8004130:	f04f 0900 	mov.w	r9, #0
 8004134:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004138:	f104 0a1a 	add.w	sl, r4, #26
 800413c:	45c8      	cmp	r8, r9
 800413e:	dc09      	bgt.n	8004154 <_printf_float+0x24c>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	079b      	lsls	r3, r3, #30
 8004144:	f100 8103 	bmi.w	800434e <_printf_float+0x446>
 8004148:	68e0      	ldr	r0, [r4, #12]
 800414a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800414c:	4298      	cmp	r0, r3
 800414e:	bfb8      	it	lt
 8004150:	4618      	movlt	r0, r3
 8004152:	e735      	b.n	8003fc0 <_printf_float+0xb8>
 8004154:	2301      	movs	r3, #1
 8004156:	4652      	mov	r2, sl
 8004158:	4631      	mov	r1, r6
 800415a:	4628      	mov	r0, r5
 800415c:	47b8      	blx	r7
 800415e:	3001      	adds	r0, #1
 8004160:	f43f af2c 	beq.w	8003fbc <_printf_float+0xb4>
 8004164:	f109 0901 	add.w	r9, r9, #1
 8004168:	e7e8      	b.n	800413c <_printf_float+0x234>
 800416a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	dc39      	bgt.n	80041e4 <_printf_float+0x2dc>
 8004170:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <_printf_float+0x2d8>)
 8004172:	2301      	movs	r3, #1
 8004174:	4631      	mov	r1, r6
 8004176:	4628      	mov	r0, r5
 8004178:	47b8      	blx	r7
 800417a:	3001      	adds	r0, #1
 800417c:	f43f af1e 	beq.w	8003fbc <_printf_float+0xb4>
 8004180:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004184:	ea59 0303 	orrs.w	r3, r9, r3
 8004188:	d102      	bne.n	8004190 <_printf_float+0x288>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	07d9      	lsls	r1, r3, #31
 800418e:	d5d7      	bpl.n	8004140 <_printf_float+0x238>
 8004190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	47b8      	blx	r7
 800419a:	3001      	adds	r0, #1
 800419c:	f43f af0e 	beq.w	8003fbc <_printf_float+0xb4>
 80041a0:	f04f 0a00 	mov.w	sl, #0
 80041a4:	f104 0b1a 	add.w	fp, r4, #26
 80041a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041aa:	425b      	negs	r3, r3
 80041ac:	4553      	cmp	r3, sl
 80041ae:	dc01      	bgt.n	80041b4 <_printf_float+0x2ac>
 80041b0:	464b      	mov	r3, r9
 80041b2:	e793      	b.n	80040dc <_printf_float+0x1d4>
 80041b4:	2301      	movs	r3, #1
 80041b6:	465a      	mov	r2, fp
 80041b8:	4631      	mov	r1, r6
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b8      	blx	r7
 80041be:	3001      	adds	r0, #1
 80041c0:	f43f aefc 	beq.w	8003fbc <_printf_float+0xb4>
 80041c4:	f10a 0a01 	add.w	sl, sl, #1
 80041c8:	e7ee      	b.n	80041a8 <_printf_float+0x2a0>
 80041ca:	bf00      	nop
 80041cc:	7fefffff 	.word	0x7fefffff
 80041d0:	080070cc 	.word	0x080070cc
 80041d4:	080070c8 	.word	0x080070c8
 80041d8:	080070d4 	.word	0x080070d4
 80041dc:	080070d0 	.word	0x080070d0
 80041e0:	080070d8 	.word	0x080070d8
 80041e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041ea:	4553      	cmp	r3, sl
 80041ec:	bfa8      	it	ge
 80041ee:	4653      	movge	r3, sl
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	4699      	mov	r9, r3
 80041f4:	dc36      	bgt.n	8004264 <_printf_float+0x35c>
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041fe:	f104 021a 	add.w	r2, r4, #26
 8004202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	eba3 0309 	sub.w	r3, r3, r9
 800420a:	455b      	cmp	r3, fp
 800420c:	dc31      	bgt.n	8004272 <_printf_float+0x36a>
 800420e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004210:	459a      	cmp	sl, r3
 8004212:	dc3a      	bgt.n	800428a <_printf_float+0x382>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	07da      	lsls	r2, r3, #31
 8004218:	d437      	bmi.n	800428a <_printf_float+0x382>
 800421a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800421c:	ebaa 0903 	sub.w	r9, sl, r3
 8004220:	9b04      	ldr	r3, [sp, #16]
 8004222:	ebaa 0303 	sub.w	r3, sl, r3
 8004226:	4599      	cmp	r9, r3
 8004228:	bfa8      	it	ge
 800422a:	4699      	movge	r9, r3
 800422c:	f1b9 0f00 	cmp.w	r9, #0
 8004230:	dc33      	bgt.n	800429a <_printf_float+0x392>
 8004232:	f04f 0800 	mov.w	r8, #0
 8004236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800423a:	f104 0b1a 	add.w	fp, r4, #26
 800423e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004240:	ebaa 0303 	sub.w	r3, sl, r3
 8004244:	eba3 0309 	sub.w	r3, r3, r9
 8004248:	4543      	cmp	r3, r8
 800424a:	f77f af79 	ble.w	8004140 <_printf_float+0x238>
 800424e:	2301      	movs	r3, #1
 8004250:	465a      	mov	r2, fp
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	f43f aeaf 	beq.w	8003fbc <_printf_float+0xb4>
 800425e:	f108 0801 	add.w	r8, r8, #1
 8004262:	e7ec      	b.n	800423e <_printf_float+0x336>
 8004264:	4642      	mov	r2, r8
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	d1c2      	bne.n	80041f6 <_printf_float+0x2ee>
 8004270:	e6a4      	b.n	8003fbc <_printf_float+0xb4>
 8004272:	2301      	movs	r3, #1
 8004274:	4631      	mov	r1, r6
 8004276:	4628      	mov	r0, r5
 8004278:	9204      	str	r2, [sp, #16]
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	f43f ae9d 	beq.w	8003fbc <_printf_float+0xb4>
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	f10b 0b01 	add.w	fp, fp, #1
 8004288:	e7bb      	b.n	8004202 <_printf_float+0x2fa>
 800428a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	47b8      	blx	r7
 8004294:	3001      	adds	r0, #1
 8004296:	d1c0      	bne.n	800421a <_printf_float+0x312>
 8004298:	e690      	b.n	8003fbc <_printf_float+0xb4>
 800429a:	9a04      	ldr	r2, [sp, #16]
 800429c:	464b      	mov	r3, r9
 800429e:	4442      	add	r2, r8
 80042a0:	4631      	mov	r1, r6
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b8      	blx	r7
 80042a6:	3001      	adds	r0, #1
 80042a8:	d1c3      	bne.n	8004232 <_printf_float+0x32a>
 80042aa:	e687      	b.n	8003fbc <_printf_float+0xb4>
 80042ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042b0:	f1ba 0f01 	cmp.w	sl, #1
 80042b4:	dc01      	bgt.n	80042ba <_printf_float+0x3b2>
 80042b6:	07db      	lsls	r3, r3, #31
 80042b8:	d536      	bpl.n	8004328 <_printf_float+0x420>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4642      	mov	r2, r8
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	47b8      	blx	r7
 80042c4:	3001      	adds	r0, #1
 80042c6:	f43f ae79 	beq.w	8003fbc <_printf_float+0xb4>
 80042ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f ae71 	beq.w	8003fbc <_printf_float+0xb4>
 80042da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042de:	2200      	movs	r2, #0
 80042e0:	2300      	movs	r3, #0
 80042e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80042e6:	f7fc fbd7 	bl	8000a98 <__aeabi_dcmpeq>
 80042ea:	b9c0      	cbnz	r0, 800431e <_printf_float+0x416>
 80042ec:	4653      	mov	r3, sl
 80042ee:	f108 0201 	add.w	r2, r8, #1
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	d10c      	bne.n	8004316 <_printf_float+0x40e>
 80042fc:	e65e      	b.n	8003fbc <_printf_float+0xb4>
 80042fe:	2301      	movs	r3, #1
 8004300:	465a      	mov	r2, fp
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	f43f ae57 	beq.w	8003fbc <_printf_float+0xb4>
 800430e:	f108 0801 	add.w	r8, r8, #1
 8004312:	45d0      	cmp	r8, sl
 8004314:	dbf3      	blt.n	80042fe <_printf_float+0x3f6>
 8004316:	464b      	mov	r3, r9
 8004318:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800431c:	e6df      	b.n	80040de <_printf_float+0x1d6>
 800431e:	f04f 0800 	mov.w	r8, #0
 8004322:	f104 0b1a 	add.w	fp, r4, #26
 8004326:	e7f4      	b.n	8004312 <_printf_float+0x40a>
 8004328:	2301      	movs	r3, #1
 800432a:	4642      	mov	r2, r8
 800432c:	e7e1      	b.n	80042f2 <_printf_float+0x3ea>
 800432e:	2301      	movs	r3, #1
 8004330:	464a      	mov	r2, r9
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f ae3f 	beq.w	8003fbc <_printf_float+0xb4>
 800433e:	f108 0801 	add.w	r8, r8, #1
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004346:	1a5b      	subs	r3, r3, r1
 8004348:	4543      	cmp	r3, r8
 800434a:	dcf0      	bgt.n	800432e <_printf_float+0x426>
 800434c:	e6fc      	b.n	8004148 <_printf_float+0x240>
 800434e:	f04f 0800 	mov.w	r8, #0
 8004352:	f104 0919 	add.w	r9, r4, #25
 8004356:	e7f4      	b.n	8004342 <_printf_float+0x43a>

08004358 <_printf_common>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	4616      	mov	r6, r2
 800435e:	4698      	mov	r8, r3
 8004360:	688a      	ldr	r2, [r1, #8]
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004368:	4293      	cmp	r3, r2
 800436a:	bfb8      	it	lt
 800436c:	4613      	movlt	r3, r2
 800436e:	6033      	str	r3, [r6, #0]
 8004370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004374:	4607      	mov	r7, r0
 8004376:	460c      	mov	r4, r1
 8004378:	b10a      	cbz	r2, 800437e <_printf_common+0x26>
 800437a:	3301      	adds	r3, #1
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	0699      	lsls	r1, r3, #26
 8004382:	bf42      	ittt	mi
 8004384:	6833      	ldrmi	r3, [r6, #0]
 8004386:	3302      	addmi	r3, #2
 8004388:	6033      	strmi	r3, [r6, #0]
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f015 0506 	ands.w	r5, r5, #6
 8004390:	d106      	bne.n	80043a0 <_printf_common+0x48>
 8004392:	f104 0a19 	add.w	sl, r4, #25
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	42ab      	cmp	r3, r5
 800439e:	dc26      	bgt.n	80043ee <_printf_common+0x96>
 80043a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	3b00      	subs	r3, #0
 80043a8:	bf18      	it	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	0692      	lsls	r2, r2, #26
 80043ae:	d42b      	bmi.n	8004408 <_printf_common+0xb0>
 80043b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b4:	4641      	mov	r1, r8
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c8      	blx	r9
 80043ba:	3001      	adds	r0, #1
 80043bc:	d01e      	beq.n	80043fc <_printf_common+0xa4>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	f003 0306 	and.w	r3, r3, #6
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	bf02      	ittt	eq
 80043ca:	68e5      	ldreq	r5, [r4, #12]
 80043cc:	6833      	ldreq	r3, [r6, #0]
 80043ce:	1aed      	subeq	r5, r5, r3
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	bf0c      	ite	eq
 80043d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d8:	2500      	movne	r5, #0
 80043da:	4293      	cmp	r3, r2
 80043dc:	bfc4      	itt	gt
 80043de:	1a9b      	subgt	r3, r3, r2
 80043e0:	18ed      	addgt	r5, r5, r3
 80043e2:	2600      	movs	r6, #0
 80043e4:	341a      	adds	r4, #26
 80043e6:	42b5      	cmp	r5, r6
 80043e8:	d11a      	bne.n	8004420 <_printf_common+0xc8>
 80043ea:	2000      	movs	r0, #0
 80043ec:	e008      	b.n	8004400 <_printf_common+0xa8>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4652      	mov	r2, sl
 80043f2:	4641      	mov	r1, r8
 80043f4:	4638      	mov	r0, r7
 80043f6:	47c8      	blx	r9
 80043f8:	3001      	adds	r0, #1
 80043fa:	d103      	bne.n	8004404 <_printf_common+0xac>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	3501      	adds	r5, #1
 8004406:	e7c6      	b.n	8004396 <_printf_common+0x3e>
 8004408:	18e1      	adds	r1, r4, r3
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	2030      	movs	r0, #48	@ 0x30
 800440e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004412:	4422      	add	r2, r4
 8004414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800441c:	3302      	adds	r3, #2
 800441e:	e7c7      	b.n	80043b0 <_printf_common+0x58>
 8004420:	2301      	movs	r3, #1
 8004422:	4622      	mov	r2, r4
 8004424:	4641      	mov	r1, r8
 8004426:	4638      	mov	r0, r7
 8004428:	47c8      	blx	r9
 800442a:	3001      	adds	r0, #1
 800442c:	d0e6      	beq.n	80043fc <_printf_common+0xa4>
 800442e:	3601      	adds	r6, #1
 8004430:	e7d9      	b.n	80043e6 <_printf_common+0x8e>
	...

08004434 <_printf_i>:
 8004434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	7e0f      	ldrb	r7, [r1, #24]
 800443a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443c:	2f78      	cmp	r7, #120	@ 0x78
 800443e:	4691      	mov	r9, r2
 8004440:	4680      	mov	r8, r0
 8004442:	460c      	mov	r4, r1
 8004444:	469a      	mov	sl, r3
 8004446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800444a:	d807      	bhi.n	800445c <_printf_i+0x28>
 800444c:	2f62      	cmp	r7, #98	@ 0x62
 800444e:	d80a      	bhi.n	8004466 <_printf_i+0x32>
 8004450:	2f00      	cmp	r7, #0
 8004452:	f000 80d2 	beq.w	80045fa <_printf_i+0x1c6>
 8004456:	2f58      	cmp	r7, #88	@ 0x58
 8004458:	f000 80b7 	beq.w	80045ca <_printf_i+0x196>
 800445c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004464:	e03a      	b.n	80044dc <_printf_i+0xa8>
 8004466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800446a:	2b15      	cmp	r3, #21
 800446c:	d8f6      	bhi.n	800445c <_printf_i+0x28>
 800446e:	a101      	add	r1, pc, #4	@ (adr r1, 8004474 <_printf_i+0x40>)
 8004470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044e1 	.word	0x080044e1
 800447c:	0800445d 	.word	0x0800445d
 8004480:	0800445d 	.word	0x0800445d
 8004484:	0800445d 	.word	0x0800445d
 8004488:	0800445d 	.word	0x0800445d
 800448c:	080044e1 	.word	0x080044e1
 8004490:	0800445d 	.word	0x0800445d
 8004494:	0800445d 	.word	0x0800445d
 8004498:	0800445d 	.word	0x0800445d
 800449c:	0800445d 	.word	0x0800445d
 80044a0:	080045e1 	.word	0x080045e1
 80044a4:	0800450b 	.word	0x0800450b
 80044a8:	08004597 	.word	0x08004597
 80044ac:	0800445d 	.word	0x0800445d
 80044b0:	0800445d 	.word	0x0800445d
 80044b4:	08004603 	.word	0x08004603
 80044b8:	0800445d 	.word	0x0800445d
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	0800445d 	.word	0x0800445d
 80044c4:	0800445d 	.word	0x0800445d
 80044c8:	0800459f 	.word	0x0800459f
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	1d1a      	adds	r2, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6032      	str	r2, [r6, #0]
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044dc:	2301      	movs	r3, #1
 80044de:	e09d      	b.n	800461c <_printf_i+0x1e8>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6031      	str	r1, [r6, #0]
 80044e8:	0606      	lsls	r6, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xbc>
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	e003      	b.n	80044f8 <_printf_i+0xc4>
 80044f0:	0645      	lsls	r5, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xb8>
 80044f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	da03      	bge.n	8004504 <_printf_i+0xd0>
 80044fc:	232d      	movs	r3, #45	@ 0x2d
 80044fe:	426d      	negs	r5, r5
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004504:	4859      	ldr	r0, [pc, #356]	@ (800466c <_printf_i+0x238>)
 8004506:	230a      	movs	r3, #10
 8004508:	e010      	b.n	800452c <_printf_i+0xf8>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	0608      	lsls	r0, r1, #24
 8004510:	f853 5b04 	ldr.w	r5, [r3], #4
 8004514:	d402      	bmi.n	800451c <_printf_i+0xe8>
 8004516:	0649      	lsls	r1, r1, #25
 8004518:	bf48      	it	mi
 800451a:	b2ad      	uxthmi	r5, r5
 800451c:	2f6f      	cmp	r7, #111	@ 0x6f
 800451e:	4853      	ldr	r0, [pc, #332]	@ (800466c <_printf_i+0x238>)
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	d159      	bne.n	80045d8 <_printf_i+0x1a4>
 8004524:	2308      	movs	r3, #8
 8004526:	2100      	movs	r1, #0
 8004528:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800452c:	6866      	ldr	r6, [r4, #4]
 800452e:	60a6      	str	r6, [r4, #8]
 8004530:	2e00      	cmp	r6, #0
 8004532:	db05      	blt.n	8004540 <_printf_i+0x10c>
 8004534:	6821      	ldr	r1, [r4, #0]
 8004536:	432e      	orrs	r6, r5
 8004538:	f021 0104 	bic.w	r1, r1, #4
 800453c:	6021      	str	r1, [r4, #0]
 800453e:	d04d      	beq.n	80045dc <_printf_i+0x1a8>
 8004540:	4616      	mov	r6, r2
 8004542:	fbb5 f1f3 	udiv	r1, r5, r3
 8004546:	fb03 5711 	mls	r7, r3, r1, r5
 800454a:	5dc7      	ldrb	r7, [r0, r7]
 800454c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004550:	462f      	mov	r7, r5
 8004552:	42bb      	cmp	r3, r7
 8004554:	460d      	mov	r5, r1
 8004556:	d9f4      	bls.n	8004542 <_printf_i+0x10e>
 8004558:	2b08      	cmp	r3, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x140>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07df      	lsls	r7, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x140>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6861      	ldr	r1, [r4, #4]
 8004566:	4299      	cmp	r1, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	@ 0x30
 800456c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004570:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004574:	1b92      	subs	r2, r2, r6
 8004576:	6122      	str	r2, [r4, #16]
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	464b      	mov	r3, r9
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fee8 	bl	8004358 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14c      	bne.n	8004626 <_printf_i+0x1f2>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004590:	b004      	add	sp, #16
 8004592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	4834      	ldr	r0, [pc, #208]	@ (8004670 <_printf_i+0x23c>)
 80045a0:	2778      	movs	r7, #120	@ 0x78
 80045a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6831      	ldr	r1, [r6, #0]
 80045aa:	061f      	lsls	r7, r3, #24
 80045ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0x184>
 80045b2:	065f      	lsls	r7, r3, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	6031      	str	r1, [r6, #0]
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b11d      	cbz	r5, 80045ce <_printf_i+0x19a>
 80045c6:	2310      	movs	r3, #16
 80045c8:	e7ad      	b.n	8004526 <_printf_i+0xf2>
 80045ca:	4828      	ldr	r0, [pc, #160]	@ (800466c <_printf_i+0x238>)
 80045cc:	e7e9      	b.n	80045a2 <_printf_i+0x16e>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	e7f6      	b.n	80045c6 <_printf_i+0x192>
 80045d8:	230a      	movs	r3, #10
 80045da:	e7a4      	b.n	8004526 <_printf_i+0xf2>
 80045dc:	4616      	mov	r6, r2
 80045de:	e7bb      	b.n	8004558 <_printf_i+0x124>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	6825      	ldr	r5, [r4, #0]
 80045e4:	6961      	ldr	r1, [r4, #20]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6030      	str	r0, [r6, #0]
 80045ea:	062e      	lsls	r6, r5, #24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0x1c0>
 80045f0:	6019      	str	r1, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0x1c6>
 80045f4:	0668      	lsls	r0, r5, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0x1bc>
 80045f8:	8019      	strh	r1, [r3, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	4616      	mov	r6, r2
 8004600:	e7ba      	b.n	8004578 <_printf_i+0x144>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	6032      	str	r2, [r6, #0]
 8004608:	681e      	ldr	r6, [r3, #0]
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	2100      	movs	r1, #0
 800460e:	4630      	mov	r0, r6
 8004610:	f7fb fdc6 	bl	80001a0 <memchr>
 8004614:	b108      	cbz	r0, 800461a <_printf_i+0x1e6>
 8004616:	1b80      	subs	r0, r0, r6
 8004618:	6060      	str	r0, [r4, #4]
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	2300      	movs	r3, #0
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004624:	e7a8      	b.n	8004578 <_printf_i+0x144>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	4632      	mov	r2, r6
 800462a:	4649      	mov	r1, r9
 800462c:	4640      	mov	r0, r8
 800462e:	47d0      	blx	sl
 8004630:	3001      	adds	r0, #1
 8004632:	d0ab      	beq.n	800458c <_printf_i+0x158>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	079b      	lsls	r3, r3, #30
 8004638:	d413      	bmi.n	8004662 <_printf_i+0x22e>
 800463a:	68e0      	ldr	r0, [r4, #12]
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	4298      	cmp	r0, r3
 8004640:	bfb8      	it	lt
 8004642:	4618      	movlt	r0, r3
 8004644:	e7a4      	b.n	8004590 <_printf_i+0x15c>
 8004646:	2301      	movs	r3, #1
 8004648:	4632      	mov	r2, r6
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	47d0      	blx	sl
 8004650:	3001      	adds	r0, #1
 8004652:	d09b      	beq.n	800458c <_printf_i+0x158>
 8004654:	3501      	adds	r5, #1
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	9903      	ldr	r1, [sp, #12]
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	42ab      	cmp	r3, r5
 800465e:	dcf2      	bgt.n	8004646 <_printf_i+0x212>
 8004660:	e7eb      	b.n	800463a <_printf_i+0x206>
 8004662:	2500      	movs	r5, #0
 8004664:	f104 0619 	add.w	r6, r4, #25
 8004668:	e7f5      	b.n	8004656 <_printf_i+0x222>
 800466a:	bf00      	nop
 800466c:	080070da 	.word	0x080070da
 8004670:	080070eb 	.word	0x080070eb

08004674 <std>:
 8004674:	2300      	movs	r3, #0
 8004676:	b510      	push	{r4, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	e9c0 3300 	strd	r3, r3, [r0]
 800467e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004682:	6083      	str	r3, [r0, #8]
 8004684:	8181      	strh	r1, [r0, #12]
 8004686:	6643      	str	r3, [r0, #100]	@ 0x64
 8004688:	81c2      	strh	r2, [r0, #14]
 800468a:	6183      	str	r3, [r0, #24]
 800468c:	4619      	mov	r1, r3
 800468e:	2208      	movs	r2, #8
 8004690:	305c      	adds	r0, #92	@ 0x5c
 8004692:	f000 f919 	bl	80048c8 <memset>
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <std+0x58>)
 8004698:	6263      	str	r3, [r4, #36]	@ 0x24
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <std+0x5c>)
 800469c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <std+0x60>)
 80046a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <std+0x64>)
 80046a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <std+0x68>)
 80046a8:	6224      	str	r4, [r4, #32]
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d006      	beq.n	80046bc <std+0x48>
 80046ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046b2:	4294      	cmp	r4, r2
 80046b4:	d002      	beq.n	80046bc <std+0x48>
 80046b6:	33d0      	adds	r3, #208	@ 0xd0
 80046b8:	429c      	cmp	r4, r3
 80046ba:	d105      	bne.n	80046c8 <std+0x54>
 80046bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c4:	f000 b98c 	b.w	80049e0 <__retarget_lock_init_recursive>
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	bf00      	nop
 80046cc:	08004841 	.word	0x08004841
 80046d0:	08004863 	.word	0x08004863
 80046d4:	0800489b 	.word	0x0800489b
 80046d8:	080048c1 	.word	0x080048c1
 80046dc:	200002fc 	.word	0x200002fc

080046e0 <stdio_exit_handler>:
 80046e0:	4a02      	ldr	r2, [pc, #8]	@ (80046ec <stdio_exit_handler+0xc>)
 80046e2:	4903      	ldr	r1, [pc, #12]	@ (80046f0 <stdio_exit_handler+0x10>)
 80046e4:	4803      	ldr	r0, [pc, #12]	@ (80046f4 <stdio_exit_handler+0x14>)
 80046e6:	f000 b86b 	b.w	80047c0 <_fwalk_sglue>
 80046ea:	bf00      	nop
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	08006395 	.word	0x08006395
 80046f4:	2000001c 	.word	0x2000001c

080046f8 <cleanup_stdio>:
 80046f8:	6841      	ldr	r1, [r0, #4]
 80046fa:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <cleanup_stdio+0x34>)
 80046fc:	4299      	cmp	r1, r3
 80046fe:	b510      	push	{r4, lr}
 8004700:	4604      	mov	r4, r0
 8004702:	d001      	beq.n	8004708 <cleanup_stdio+0x10>
 8004704:	f001 fe46 	bl	8006394 <_fflush_r>
 8004708:	68a1      	ldr	r1, [r4, #8]
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <cleanup_stdio+0x38>)
 800470c:	4299      	cmp	r1, r3
 800470e:	d002      	beq.n	8004716 <cleanup_stdio+0x1e>
 8004710:	4620      	mov	r0, r4
 8004712:	f001 fe3f 	bl	8006394 <_fflush_r>
 8004716:	68e1      	ldr	r1, [r4, #12]
 8004718:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <cleanup_stdio+0x3c>)
 800471a:	4299      	cmp	r1, r3
 800471c:	d004      	beq.n	8004728 <cleanup_stdio+0x30>
 800471e:	4620      	mov	r0, r4
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	f001 be36 	b.w	8006394 <_fflush_r>
 8004728:	bd10      	pop	{r4, pc}
 800472a:	bf00      	nop
 800472c:	200002fc 	.word	0x200002fc
 8004730:	20000364 	.word	0x20000364
 8004734:	200003cc 	.word	0x200003cc

08004738 <global_stdio_init.part.0>:
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <global_stdio_init.part.0+0x34>)
 800473a:	4a0d      	ldr	r2, [pc, #52]	@ (8004770 <global_stdio_init.part.0+0x38>)
 800473c:	480d      	ldr	r0, [pc, #52]	@ (8004774 <global_stdio_init.part.0+0x3c>)
 800473e:	b510      	push	{r4, lr}
 8004740:	2104      	movs	r1, #4
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	f7ff ff95 	bl	8004674 <std>
 800474a:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <global_stdio_init.part.0+0x3c>)
 800474c:	2201      	movs	r2, #1
 800474e:	461c      	mov	r4, r3
 8004750:	2109      	movs	r1, #9
 8004752:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8004756:	f7ff ff8d 	bl	8004674 <std>
 800475a:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800475e:	2202      	movs	r2, #2
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	2112      	movs	r1, #18
 8004766:	f7ff bf85 	b.w	8004674 <std>
 800476a:	bf00      	nop
 800476c:	20000434 	.word	0x20000434
 8004770:	080046e1 	.word	0x080046e1
 8004774:	200002fc 	.word	0x200002fc

08004778 <__sfp_lock_acquire>:
 8004778:	4801      	ldr	r0, [pc, #4]	@ (8004780 <__sfp_lock_acquire+0x8>)
 800477a:	f000 b932 	b.w	80049e2 <__retarget_lock_acquire_recursive>
 800477e:	bf00      	nop
 8004780:	2000043d 	.word	0x2000043d

08004784 <__sfp_lock_release>:
 8004784:	4801      	ldr	r0, [pc, #4]	@ (800478c <__sfp_lock_release+0x8>)
 8004786:	f000 b92d 	b.w	80049e4 <__retarget_lock_release_recursive>
 800478a:	bf00      	nop
 800478c:	2000043d 	.word	0x2000043d

08004790 <__sinit>:
 8004790:	b510      	push	{r4, lr}
 8004792:	4604      	mov	r4, r0
 8004794:	f7ff fff0 	bl	8004778 <__sfp_lock_acquire>
 8004798:	6a23      	ldr	r3, [r4, #32]
 800479a:	b11b      	cbz	r3, 80047a4 <__sinit+0x14>
 800479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a0:	f7ff bff0 	b.w	8004784 <__sfp_lock_release>
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <__sinit+0x28>)
 80047a6:	6223      	str	r3, [r4, #32]
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <__sinit+0x2c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f5      	bne.n	800479c <__sinit+0xc>
 80047b0:	f7ff ffc2 	bl	8004738 <global_stdio_init.part.0>
 80047b4:	e7f2      	b.n	800479c <__sinit+0xc>
 80047b6:	bf00      	nop
 80047b8:	080046f9 	.word	0x080046f9
 80047bc:	20000434 	.word	0x20000434

080047c0 <_fwalk_sglue>:
 80047c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4607      	mov	r7, r0
 80047c6:	4688      	mov	r8, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	2600      	movs	r6, #0
 80047cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047d0:	f1b9 0901 	subs.w	r9, r9, #1
 80047d4:	d505      	bpl.n	80047e2 <_fwalk_sglue+0x22>
 80047d6:	6824      	ldr	r4, [r4, #0]
 80047d8:	2c00      	cmp	r4, #0
 80047da:	d1f7      	bne.n	80047cc <_fwalk_sglue+0xc>
 80047dc:	4630      	mov	r0, r6
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d907      	bls.n	80047f8 <_fwalk_sglue+0x38>
 80047e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ec:	3301      	adds	r3, #1
 80047ee:	d003      	beq.n	80047f8 <_fwalk_sglue+0x38>
 80047f0:	4629      	mov	r1, r5
 80047f2:	4638      	mov	r0, r7
 80047f4:	47c0      	blx	r8
 80047f6:	4306      	orrs	r6, r0
 80047f8:	3568      	adds	r5, #104	@ 0x68
 80047fa:	e7e9      	b.n	80047d0 <_fwalk_sglue+0x10>

080047fc <siprintf>:
 80047fc:	b40e      	push	{r1, r2, r3}
 80047fe:	b510      	push	{r4, lr}
 8004800:	b09d      	sub	sp, #116	@ 0x74
 8004802:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004804:	9002      	str	r0, [sp, #8]
 8004806:	9006      	str	r0, [sp, #24]
 8004808:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800480c:	480a      	ldr	r0, [pc, #40]	@ (8004838 <siprintf+0x3c>)
 800480e:	9107      	str	r1, [sp, #28]
 8004810:	9104      	str	r1, [sp, #16]
 8004812:	490a      	ldr	r1, [pc, #40]	@ (800483c <siprintf+0x40>)
 8004814:	f853 2b04 	ldr.w	r2, [r3], #4
 8004818:	9105      	str	r1, [sp, #20]
 800481a:	2400      	movs	r4, #0
 800481c:	a902      	add	r1, sp, #8
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004824:	f001 fc38 	bl	8006098 <_svfiprintf_r>
 8004828:	9b02      	ldr	r3, [sp, #8]
 800482a:	701c      	strb	r4, [r3, #0]
 800482c:	b01d      	add	sp, #116	@ 0x74
 800482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004832:	b003      	add	sp, #12
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000018 	.word	0x20000018
 800483c:	ffff0208 	.word	0xffff0208

08004840 <__sread>:
 8004840:	b510      	push	{r4, lr}
 8004842:	460c      	mov	r4, r1
 8004844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004848:	f000 f87c 	bl	8004944 <_read_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	bfab      	itete	ge
 8004850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004852:	89a3      	ldrhlt	r3, [r4, #12]
 8004854:	181b      	addge	r3, r3, r0
 8004856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800485a:	bfac      	ite	ge
 800485c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800485e:	81a3      	strhlt	r3, [r4, #12]
 8004860:	bd10      	pop	{r4, pc}

08004862 <__swrite>:
 8004862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004866:	461f      	mov	r7, r3
 8004868:	898b      	ldrh	r3, [r1, #12]
 800486a:	05db      	lsls	r3, r3, #23
 800486c:	4605      	mov	r5, r0
 800486e:	460c      	mov	r4, r1
 8004870:	4616      	mov	r6, r2
 8004872:	d505      	bpl.n	8004880 <__swrite+0x1e>
 8004874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004878:	2302      	movs	r3, #2
 800487a:	2200      	movs	r2, #0
 800487c:	f000 f850 	bl	8004920 <_lseek_r>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	4632      	mov	r2, r6
 800488e:	463b      	mov	r3, r7
 8004890:	4628      	mov	r0, r5
 8004892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	f000 b867 	b.w	8004968 <_write_r>

0800489a <__sseek>:
 800489a:	b510      	push	{r4, lr}
 800489c:	460c      	mov	r4, r1
 800489e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a2:	f000 f83d 	bl	8004920 <_lseek_r>
 80048a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048aa:	1c42      	adds	r2, r0, #1
 80048ac:	bf0b      	itete	eq
 80048ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048b6:	81a3      	strheq	r3, [r4, #12]
 80048b8:	81a3      	strhne	r3, [r4, #12]
 80048ba:	bf18      	it	ne
 80048bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048be:	bd10      	pop	{r4, pc}

080048c0 <__sclose>:
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	f000 b81c 	b.w	8004900 <_close_r>

080048c8 <memset>:
 80048c8:	4402      	add	r2, r0
 80048ca:	4603      	mov	r3, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <strcat>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	4602      	mov	r2, r0
 80048dc:	7814      	ldrb	r4, [r2, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	3201      	adds	r2, #1
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	d1fa      	bne.n	80048dc <strcat+0x4>
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	d1f9      	bne.n	80048e8 <strcat+0x10>
 80048f4:	bd10      	pop	{r4, pc}
	...

080048f8 <_localeconv_r>:
 80048f8:	4800      	ldr	r0, [pc, #0]	@ (80048fc <_localeconv_r+0x4>)
 80048fa:	4770      	bx	lr
 80048fc:	20000158 	.word	0x20000158

08004900 <_close_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d06      	ldr	r5, [pc, #24]	@ (800491c <_close_r+0x1c>)
 8004904:	2300      	movs	r3, #0
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	f7ff f8cc 	bl	8003aa8 <_close>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_close_r+0x1a>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_close_r+0x1a>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000438 	.word	0x20000438

08004920 <_lseek_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	@ (8004940 <_lseek_r+0x20>)
 8004924:	4604      	mov	r4, r0
 8004926:	4608      	mov	r0, r1
 8004928:	4611      	mov	r1, r2
 800492a:	2200      	movs	r2, #0
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7ff f8c4 	bl	8003abc <_lseek>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_lseek_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_lseek_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20000438 	.word	0x20000438

08004944 <_read_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4d07      	ldr	r5, [pc, #28]	@ (8004964 <_read_r+0x20>)
 8004948:	4604      	mov	r4, r0
 800494a:	4608      	mov	r0, r1
 800494c:	4611      	mov	r1, r2
 800494e:	2200      	movs	r2, #0
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	f7ff f88a 	bl	8003a6c <_read>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_read_r+0x1e>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_read_r+0x1e>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20000438 	.word	0x20000438

08004968 <_write_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d07      	ldr	r5, [pc, #28]	@ (8004988 <_write_r+0x20>)
 800496c:	4604      	mov	r4, r0
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	2200      	movs	r2, #0
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f7ff f888 	bl	8003a8c <_write>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_write_r+0x1e>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_write_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20000438 	.word	0x20000438

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	@ (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000018 	.word	0x20000018

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <__libc_init_array+0x38>)
 800499c:	4d0d      	ldr	r5, [pc, #52]	@ (80049d4 <__libc_init_array+0x3c>)
 800499e:	1b5b      	subs	r3, r3, r5
 80049a0:	109c      	asrs	r4, r3, #2
 80049a2:	2600      	movs	r6, #0
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	f002 f9ea 	bl	8006d80 <_init>
 80049ac:	4d0a      	ldr	r5, [pc, #40]	@ (80049d8 <__libc_init_array+0x40>)
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <__libc_init_array+0x44>)
 80049b0:	1b5b      	subs	r3, r3, r5
 80049b2:	109c      	asrs	r4, r3, #2
 80049b4:	2600      	movs	r6, #0
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	0800741c 	.word	0x0800741c
 80049d4:	0800741c 	.word	0x0800741c
 80049d8:	0800741c 	.word	0x0800741c
 80049dc:	08007420 	.word	0x08007420

080049e0 <__retarget_lock_init_recursive>:
 80049e0:	4770      	bx	lr

080049e2 <__retarget_lock_acquire_recursive>:
 80049e2:	4770      	bx	lr

080049e4 <__retarget_lock_release_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <quorem>:
 80049e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	690c      	ldr	r4, [r1, #16]
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	4607      	mov	r7, r0
 80049f2:	db7e      	blt.n	8004af2 <quorem+0x10c>
 80049f4:	3c01      	subs	r4, #1
 80049f6:	f101 0814 	add.w	r8, r1, #20
 80049fa:	00a3      	lsls	r3, r4, #2
 80049fc:	f100 0514 	add.w	r5, r0, #20
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a10:	3301      	adds	r3, #1
 8004a12:	429a      	cmp	r2, r3
 8004a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a1c:	d32e      	bcc.n	8004a7c <quorem+0x96>
 8004a1e:	f04f 0a00 	mov.w	sl, #0
 8004a22:	46c4      	mov	ip, r8
 8004a24:	46ae      	mov	lr, r5
 8004a26:	46d3      	mov	fp, sl
 8004a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a2c:	b298      	uxth	r0, r3
 8004a2e:	fb06 a000 	mla	r0, r6, r0, sl
 8004a32:	0c02      	lsrs	r2, r0, #16
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	fb06 2303 	mla	r3, r6, r3, r2
 8004a3a:	f8de 2000 	ldr.w	r2, [lr]
 8004a3e:	b280      	uxth	r0, r0
 8004a40:	b292      	uxth	r2, r2
 8004a42:	1a12      	subs	r2, r2, r0
 8004a44:	445a      	add	r2, fp
 8004a46:	f8de 0000 	ldr.w	r0, [lr]
 8004a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a5e:	45e1      	cmp	r9, ip
 8004a60:	f84e 2b04 	str.w	r2, [lr], #4
 8004a64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a68:	d2de      	bcs.n	8004a28 <quorem+0x42>
 8004a6a:	9b00      	ldr	r3, [sp, #0]
 8004a6c:	58eb      	ldr	r3, [r5, r3]
 8004a6e:	b92b      	cbnz	r3, 8004a7c <quorem+0x96>
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	3b04      	subs	r3, #4
 8004a74:	429d      	cmp	r5, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	d32f      	bcc.n	8004ada <quorem+0xf4>
 8004a7a:	613c      	str	r4, [r7, #16]
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	f001 f99f 	bl	8005dc0 <__mcmp>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	db25      	blt.n	8004ad2 <quorem+0xec>
 8004a86:	4629      	mov	r1, r5
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a8e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a92:	fa1f fe82 	uxth.w	lr, r2
 8004a96:	fa1f f38c 	uxth.w	r3, ip
 8004a9a:	eba3 030e 	sub.w	r3, r3, lr
 8004a9e:	4403      	add	r3, r0
 8004aa0:	0c12      	lsrs	r2, r2, #16
 8004aa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004aa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab0:	45c1      	cmp	r9, r8
 8004ab2:	f841 3b04 	str.w	r3, [r1], #4
 8004ab6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004aba:	d2e6      	bcs.n	8004a8a <quorem+0xa4>
 8004abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ac4:	b922      	cbnz	r2, 8004ad0 <quorem+0xea>
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	429d      	cmp	r5, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	d30b      	bcc.n	8004ae6 <quorem+0x100>
 8004ace:	613c      	str	r4, [r7, #16]
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	b003      	add	sp, #12
 8004ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d1cb      	bne.n	8004a7a <quorem+0x94>
 8004ae2:	3c01      	subs	r4, #1
 8004ae4:	e7c6      	b.n	8004a74 <quorem+0x8e>
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	3b04      	subs	r3, #4
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	d1ef      	bne.n	8004ace <quorem+0xe8>
 8004aee:	3c01      	subs	r4, #1
 8004af0:	e7ea      	b.n	8004ac8 <quorem+0xe2>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e7ee      	b.n	8004ad4 <quorem+0xee>
	...

08004af8 <_dtoa_r>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	b099      	sub	sp, #100	@ 0x64
 8004afe:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8004b02:	920c      	str	r2, [sp, #48]	@ 0x30
 8004b04:	69c2      	ldr	r2, [r0, #28]
 8004b06:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8004b08:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b0a:	ec57 6b10 	vmov	r6, r7, d0
 8004b0e:	4681      	mov	r9, r0
 8004b10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b12:	b982      	cbnz	r2, 8004b36 <_dtoa_r+0x3e>
 8004b14:	2010      	movs	r0, #16
 8004b16:	f000 fe21 	bl	800575c <malloc>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b20:	b920      	cbnz	r0, 8004b2c <_dtoa_r+0x34>
 8004b22:	4bb1      	ldr	r3, [pc, #708]	@ (8004de8 <_dtoa_r+0x2f0>)
 8004b24:	21ef      	movs	r1, #239	@ 0xef
 8004b26:	48b1      	ldr	r0, [pc, #708]	@ (8004dec <_dtoa_r+0x2f4>)
 8004b28:	f001 fc94 	bl	8006454 <__assert_func>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004b32:	6003      	str	r3, [r0, #0]
 8004b34:	60c3      	str	r3, [r0, #12]
 8004b36:	6811      	ldr	r1, [r2, #0]
 8004b38:	b159      	cbz	r1, 8004b52 <_dtoa_r+0x5a>
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	604a      	str	r2, [r1, #4]
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4093      	lsls	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]
 8004b44:	4648      	mov	r0, r9
 8004b46:	f000 fefd 	bl	8005944 <_Bfree>
 8004b4a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	f1b7 0800 	subs.w	r8, r7, #0
 8004b56:	bfb5      	itete	lt
 8004b58:	2301      	movlt	r3, #1
 8004b5a:	2300      	movge	r3, #0
 8004b5c:	6023      	strlt	r3, [r4, #0]
 8004b5e:	6023      	strge	r3, [r4, #0]
 8004b60:	4ba3      	ldr	r3, [pc, #652]	@ (8004df0 <_dtoa_r+0x2f8>)
 8004b62:	bfbc      	itt	lt
 8004b64:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 8004b68:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 8004b6c:	ea33 0308 	bics.w	r3, r3, r8
 8004b70:	d11a      	bne.n	8004ba8 <_dtoa_r+0xb0>
 8004b72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b74:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8004b78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b7c:	ea58 0806 	orrs.w	r8, r8, r6
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	f000 8574 	beq.w	800566e <_dtoa_r+0xb76>
 8004b86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b88:	b953      	cbnz	r3, 8004ba0 <_dtoa_r+0xa8>
 8004b8a:	4b9a      	ldr	r3, [pc, #616]	@ (8004df4 <_dtoa_r+0x2fc>)
 8004b8c:	e021      	b.n	8004bd2 <_dtoa_r+0xda>
 8004b8e:	4b9a      	ldr	r3, [pc, #616]	@ (8004df8 <_dtoa_r+0x300>)
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	9800      	ldr	r0, [sp, #0]
 8004b9a:	b019      	add	sp, #100	@ 0x64
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	4b94      	ldr	r3, [pc, #592]	@ (8004df4 <_dtoa_r+0x2fc>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	3303      	adds	r3, #3
 8004ba6:	e7f5      	b.n	8004b94 <_dtoa_r+0x9c>
 8004ba8:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 8004bac:	2200      	movs	r2, #0
 8004bae:	ec51 0b17 	vmov	r0, r1, d7
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004bb8:	f7fb ff6e 	bl	8000a98 <__aeabi_dcmpeq>
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	b150      	cbz	r0, 8004bd6 <_dtoa_r+0xde>
 8004bc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004bc8:	b113      	cbz	r3, 8004bd0 <_dtoa_r+0xd8>
 8004bca:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004bcc:	4b8b      	ldr	r3, [pc, #556]	@ (8004dfc <_dtoa_r+0x304>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8004e00 <_dtoa_r+0x308>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	e7e0      	b.n	8004b98 <_dtoa_r+0xa0>
 8004bd6:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004bda:	aa16      	add	r2, sp, #88	@ 0x58
 8004bdc:	a917      	add	r1, sp, #92	@ 0x5c
 8004bde:	4648      	mov	r0, r9
 8004be0:	f001 f9a2 	bl	8005f28 <__d2b>
 8004be4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8004be8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8004bea:	9001      	str	r0, [sp, #4]
 8004bec:	f000 8082 	beq.w	8004cf4 <_dtoa_r+0x1fc>
 8004bf0:	9b07      	ldr	r3, [sp, #28]
 8004bf2:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8004bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c02:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c06:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e04 <_dtoa_r+0x30c>)
 8004c10:	f7fb fb22 	bl	8000258 <__aeabi_dsub>
 8004c14:	a36e      	add	r3, pc, #440	@ (adr r3, 8004dd0 <_dtoa_r+0x2d8>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fcd5 	bl	80005c8 <__aeabi_dmul>
 8004c1e:	a36e      	add	r3, pc, #440	@ (adr r3, 8004dd8 <_dtoa_r+0x2e0>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb fb1a 	bl	800025c <__adddf3>
 8004c28:	4606      	mov	r6, r0
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	460f      	mov	r7, r1
 8004c2e:	f7fb fc61 	bl	80004f4 <__aeabi_i2d>
 8004c32:	a36b      	add	r3, pc, #428	@ (adr r3, 8004de0 <_dtoa_r+0x2e8>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f7fb fcc6 	bl	80005c8 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fb0a 	bl	800025c <__adddf3>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	460f      	mov	r7, r1
 8004c4c:	f7fb ff6c 	bl	8000b28 <__aeabi_d2iz>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4680      	mov	r8, r0
 8004c54:	2300      	movs	r3, #0
 8004c56:	4630      	mov	r0, r6
 8004c58:	4639      	mov	r1, r7
 8004c5a:	f7fb ff27 	bl	8000aac <__aeabi_dcmplt>
 8004c5e:	b148      	cbz	r0, 8004c74 <_dtoa_r+0x17c>
 8004c60:	4640      	mov	r0, r8
 8004c62:	f7fb fc47 	bl	80004f4 <__aeabi_i2d>
 8004c66:	4632      	mov	r2, r6
 8004c68:	463b      	mov	r3, r7
 8004c6a:	f7fb ff15 	bl	8000a98 <__aeabi_dcmpeq>
 8004c6e:	b908      	cbnz	r0, 8004c74 <_dtoa_r+0x17c>
 8004c70:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c74:	f1b8 0f16 	cmp.w	r8, #22
 8004c78:	d859      	bhi.n	8004d2e <_dtoa_r+0x236>
 8004c7a:	4b63      	ldr	r3, [pc, #396]	@ (8004e08 <_dtoa_r+0x310>)
 8004c7c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c88:	f7fb ff10 	bl	8000aac <__aeabi_dcmplt>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d050      	beq.n	8004d32 <_dtoa_r+0x23a>
 8004c90:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c94:	2300      	movs	r3, #0
 8004c96:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c98:	1b2d      	subs	r5, r5, r4
 8004c9a:	1e6b      	subs	r3, r5, #1
 8004c9c:	9308      	str	r3, [sp, #32]
 8004c9e:	bf43      	ittte	mi
 8004ca0:	2300      	movmi	r3, #0
 8004ca2:	f1c5 0701 	rsbmi	r7, r5, #1
 8004ca6:	9308      	strmi	r3, [sp, #32]
 8004ca8:	2700      	movpl	r7, #0
 8004caa:	f1b8 0f00 	cmp.w	r8, #0
 8004cae:	db42      	blt.n	8004d36 <_dtoa_r+0x23e>
 8004cb0:	9b08      	ldr	r3, [sp, #32]
 8004cb2:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8004cb6:	4443      	add	r3, r8
 8004cb8:	9308      	str	r3, [sp, #32]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d86c      	bhi.n	8004d9e <_dtoa_r+0x2a6>
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	bfc4      	itt	gt
 8004cc8:	3b04      	subgt	r3, #4
 8004cca:	930a      	strgt	r3, [sp, #40]	@ 0x28
 8004ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cce:	f1a3 0302 	sub.w	r3, r3, #2
 8004cd2:	bfcc      	ite	gt
 8004cd4:	2400      	movgt	r4, #0
 8004cd6:	2401      	movle	r4, #1
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d86c      	bhi.n	8004db6 <_dtoa_r+0x2be>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <_dtoa_r+0x1ec>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d97 	.word	0x08004d97
 8004ce8:	08004d9b 	.word	0x08004d9b
 8004cec:	08004d5d 	.word	0x08004d5d
 8004cf0:	08004d47 	.word	0x08004d47
 8004cf4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004cf6:	442c      	add	r4, r5
 8004cf8:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	bfc1      	itttt	gt
 8004d00:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d04:	fa08 f803 	lslgt.w	r8, r8, r3
 8004d08:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 8004d0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004d10:	bfd6      	itet	le
 8004d12:	f1c3 0320 	rsble	r3, r3, #32
 8004d16:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d1a:	fa06 f003 	lslle.w	r0, r6, r3
 8004d1e:	f7fb fbd9 	bl	80004d4 <__aeabi_ui2d>
 8004d22:	2201      	movs	r2, #1
 8004d24:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d28:	3c01      	subs	r4, #1
 8004d2a:	9214      	str	r2, [sp, #80]	@ 0x50
 8004d2c:	e76d      	b.n	8004c0a <_dtoa_r+0x112>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7b1      	b.n	8004c96 <_dtoa_r+0x19e>
 8004d32:	9012      	str	r0, [sp, #72]	@ 0x48
 8004d34:	e7b0      	b.n	8004c98 <_dtoa_r+0x1a0>
 8004d36:	f1c8 0300 	rsb	r3, r8, #0
 8004d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	eba7 0708 	sub.w	r7, r7, r8
 8004d42:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d44:	e7bb      	b.n	8004cbe <_dtoa_r+0x1c6>
 8004d46:	2301      	movs	r3, #1
 8004d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d4c:	4443      	add	r3, r8
 8004d4e:	9305      	str	r3, [sp, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	bfb8      	it	lt
 8004d58:	2301      	movlt	r3, #1
 8004d5a:	e006      	b.n	8004d6a <_dtoa_r+0x272>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dd2a      	ble.n	8004dbc <_dtoa_r+0x2c4>
 8004d66:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d6a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	2204      	movs	r2, #4
 8004d72:	f102 0514 	add.w	r5, r2, #20
 8004d76:	429d      	cmp	r5, r3
 8004d78:	f101 0601 	add.w	r6, r1, #1
 8004d7c:	d923      	bls.n	8004dc6 <_dtoa_r+0x2ce>
 8004d7e:	6041      	str	r1, [r0, #4]
 8004d80:	4648      	mov	r0, r9
 8004d82:	f000 fda1 	bl	80058c8 <_Balloc>
 8004d86:	9000      	str	r0, [sp, #0]
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d141      	bne.n	8004e10 <_dtoa_r+0x318>
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e0c <_dtoa_r+0x314>)
 8004d8e:	4602      	mov	r2, r0
 8004d90:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d94:	e6c7      	b.n	8004b26 <_dtoa_r+0x2e>
 8004d96:	2300      	movs	r3, #0
 8004d98:	e7e1      	b.n	8004d5e <_dtoa_r+0x266>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e7d4      	b.n	8004d48 <_dtoa_r+0x250>
 8004d9e:	2401      	movs	r4, #1
 8004da0:	2300      	movs	r3, #0
 8004da2:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8004da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004daa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2312      	movs	r3, #18
 8004db2:	920c      	str	r2, [sp, #48]	@ 0x30
 8004db4:	e7d9      	b.n	8004d6a <_dtoa_r+0x272>
 8004db6:	2301      	movs	r3, #1
 8004db8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dba:	e7f4      	b.n	8004da6 <_dtoa_r+0x2ae>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	e7f5      	b.n	8004db2 <_dtoa_r+0x2ba>
 8004dc6:	0052      	lsls	r2, r2, #1
 8004dc8:	4631      	mov	r1, r6
 8004dca:	e7d2      	b.n	8004d72 <_dtoa_r+0x27a>
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	636f4361 	.word	0x636f4361
 8004dd4:	3fd287a7 	.word	0x3fd287a7
 8004dd8:	8b60c8b3 	.word	0x8b60c8b3
 8004ddc:	3fc68a28 	.word	0x3fc68a28
 8004de0:	509f79fb 	.word	0x509f79fb
 8004de4:	3fd34413 	.word	0x3fd34413
 8004de8:	08007109 	.word	0x08007109
 8004dec:	08007120 	.word	0x08007120
 8004df0:	7ff00000 	.word	0x7ff00000
 8004df4:	08007105 	.word	0x08007105
 8004df8:	080070fc 	.word	0x080070fc
 8004dfc:	080070d9 	.word	0x080070d9
 8004e00:	080070d8 	.word	0x080070d8
 8004e04:	3ff80000 	.word	0x3ff80000
 8004e08:	08007248 	.word	0x08007248
 8004e0c:	08007162 	.word	0x08007162
 8004e10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e14:	9a00      	ldr	r2, [sp, #0]
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	9b04      	ldr	r3, [sp, #16]
 8004e1a:	2b0e      	cmp	r3, #14
 8004e1c:	f200 80a1 	bhi.w	8004f62 <_dtoa_r+0x46a>
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	f000 809e 	beq.w	8004f62 <_dtoa_r+0x46a>
 8004e26:	f1b8 0f00 	cmp.w	r8, #0
 8004e2a:	dd36      	ble.n	8004e9a <_dtoa_r+0x3a2>
 8004e2c:	4b9e      	ldr	r3, [pc, #632]	@ (80050a8 <_dtoa_r+0x5b0>)
 8004e2e:	f008 020f 	and.w	r2, r8, #15
 8004e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e36:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004e3a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004e3e:	ea4f 1528 	mov.w	r5, r8, asr #4
 8004e42:	d016      	beq.n	8004e72 <_dtoa_r+0x37a>
 8004e44:	4b99      	ldr	r3, [pc, #612]	@ (80050ac <_dtoa_r+0x5b4>)
 8004e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e4e:	f7fb fce5 	bl	800081c <__aeabi_ddiv>
 8004e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e56:	f005 050f 	and.w	r5, r5, #15
 8004e5a:	2403      	movs	r4, #3
 8004e5c:	4e93      	ldr	r6, [pc, #588]	@ (80050ac <_dtoa_r+0x5b4>)
 8004e5e:	b975      	cbnz	r5, 8004e7e <_dtoa_r+0x386>
 8004e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e64:	4652      	mov	r2, sl
 8004e66:	465b      	mov	r3, fp
 8004e68:	f7fb fcd8 	bl	800081c <__aeabi_ddiv>
 8004e6c:	4682      	mov	sl, r0
 8004e6e:	468b      	mov	fp, r1
 8004e70:	e02d      	b.n	8004ece <_dtoa_r+0x3d6>
 8004e72:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e76:	2402      	movs	r4, #2
 8004e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e7c:	e7ee      	b.n	8004e5c <_dtoa_r+0x364>
 8004e7e:	07e9      	lsls	r1, r5, #31
 8004e80:	d508      	bpl.n	8004e94 <_dtoa_r+0x39c>
 8004e82:	4650      	mov	r0, sl
 8004e84:	4659      	mov	r1, fp
 8004e86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e8a:	f7fb fb9d 	bl	80005c8 <__aeabi_dmul>
 8004e8e:	3401      	adds	r4, #1
 8004e90:	4682      	mov	sl, r0
 8004e92:	468b      	mov	fp, r1
 8004e94:	106d      	asrs	r5, r5, #1
 8004e96:	3608      	adds	r6, #8
 8004e98:	e7e1      	b.n	8004e5e <_dtoa_r+0x366>
 8004e9a:	f000 80ad 	beq.w	8004ff8 <_dtoa_r+0x500>
 8004e9e:	f1c8 0500 	rsb	r5, r8, #0
 8004ea2:	4b81      	ldr	r3, [pc, #516]	@ (80050a8 <_dtoa_r+0x5b0>)
 8004ea4:	4e81      	ldr	r6, [pc, #516]	@ (80050ac <_dtoa_r+0x5b4>)
 8004ea6:	f005 020f 	and.w	r2, r5, #15
 8004eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb6:	f7fb fb87 	bl	80005c8 <__aeabi_dmul>
 8004eba:	112d      	asrs	r5, r5, #4
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	468b      	mov	fp, r1
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2402      	movs	r4, #2
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	f040 808c 	bne.w	8004fe2 <_dtoa_r+0x4ea>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ce      	bne.n	8004e6c <_dtoa_r+0x374>
 8004ece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8095 	beq.w	8005000 <_dtoa_r+0x508>
 8004ed6:	4b76      	ldr	r3, [pc, #472]	@ (80050b0 <_dtoa_r+0x5b8>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4650      	mov	r0, sl
 8004edc:	4659      	mov	r1, fp
 8004ede:	f7fb fde5 	bl	8000aac <__aeabi_dcmplt>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f000 808c 	beq.w	8005000 <_dtoa_r+0x508>
 8004ee8:	9b04      	ldr	r3, [sp, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8088 	beq.w	8005000 <_dtoa_r+0x508>
 8004ef0:	9b05      	ldr	r3, [sp, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dd35      	ble.n	8004f62 <_dtoa_r+0x46a>
 8004ef6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	4b6c      	ldr	r3, [pc, #432]	@ (80050b4 <_dtoa_r+0x5bc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	f7fb fb60 	bl	80005c8 <__aeabi_dmul>
 8004f08:	9e05      	ldr	r6, [sp, #20]
 8004f0a:	4682      	mov	sl, r0
 8004f0c:	468b      	mov	fp, r1
 8004f0e:	3401      	adds	r4, #1
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7fb faef 	bl	80004f4 <__aeabi_i2d>
 8004f16:	4652      	mov	r2, sl
 8004f18:	465b      	mov	r3, fp
 8004f1a:	f7fb fb55 	bl	80005c8 <__aeabi_dmul>
 8004f1e:	4b66      	ldr	r3, [pc, #408]	@ (80050b8 <_dtoa_r+0x5c0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	f7fb f99b 	bl	800025c <__adddf3>
 8004f26:	4604      	mov	r4, r0
 8004f28:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 8004f2c:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	d169      	bne.n	8005008 <_dtoa_r+0x510>
 8004f34:	4b61      	ldr	r3, [pc, #388]	@ (80050bc <_dtoa_r+0x5c4>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	f7fb f98c 	bl	8000258 <__aeabi_dsub>
 8004f40:	4622      	mov	r2, r4
 8004f42:	462b      	mov	r3, r5
 8004f44:	4682      	mov	sl, r0
 8004f46:	468b      	mov	fp, r1
 8004f48:	f7fb fdce 	bl	8000ae8 <__aeabi_dcmpgt>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 8294 	bne.w	800547a <_dtoa_r+0x982>
 8004f52:	4622      	mov	r2, r4
 8004f54:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8004f58:	4650      	mov	r0, sl
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	f7fb fda6 	bl	8000aac <__aeabi_dcmplt>
 8004f60:	bb20      	cbnz	r0, 8004fac <_dtoa_r+0x4b4>
 8004f62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f2c0 8160 	blt.w	800522a <_dtoa_r+0x732>
 8004f6a:	f1b8 0f0e 	cmp.w	r8, #14
 8004f6e:	f300 815c 	bgt.w	800522a <_dtoa_r+0x732>
 8004f72:	4b4d      	ldr	r3, [pc, #308]	@ (80050a8 <_dtoa_r+0x5b0>)
 8004f74:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f78:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f280 80ee 	bge.w	8005160 <_dtoa_r+0x668>
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f300 80ea 	bgt.w	8005160 <_dtoa_r+0x668>
 8004f8c:	d10e      	bne.n	8004fac <_dtoa_r+0x4b4>
 8004f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80050bc <_dtoa_r+0x5c4>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	4650      	mov	r0, sl
 8004f94:	4659      	mov	r1, fp
 8004f96:	f7fb fb17 	bl	80005c8 <__aeabi_dmul>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fa2:	f7fb fd8d 	bl	8000ac0 <__aeabi_dcmple>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f000 826a 	beq.w	8005480 <_dtoa_r+0x988>
 8004fac:	2500      	movs	r5, #0
 8004fae:	462c      	mov	r4, r5
 8004fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fb2:	9e00      	ldr	r6, [sp, #0]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	4627      	mov	r7, r4
 8004fba:	2400      	movs	r4, #0
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4648      	mov	r0, r9
 8004fc0:	f000 fcc0 	bl	8005944 <_Bfree>
 8004fc4:	2f00      	cmp	r7, #0
 8004fc6:	f000 80c1 	beq.w	800514c <_dtoa_r+0x654>
 8004fca:	b12c      	cbz	r4, 8004fd8 <_dtoa_r+0x4e0>
 8004fcc:	42bc      	cmp	r4, r7
 8004fce:	d003      	beq.n	8004fd8 <_dtoa_r+0x4e0>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	f000 fcb6 	bl	8005944 <_Bfree>
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4648      	mov	r0, r9
 8004fdc:	f000 fcb2 	bl	8005944 <_Bfree>
 8004fe0:	e0b4      	b.n	800514c <_dtoa_r+0x654>
 8004fe2:	07ea      	lsls	r2, r5, #31
 8004fe4:	d505      	bpl.n	8004ff2 <_dtoa_r+0x4fa>
 8004fe6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fea:	f7fb faed 	bl	80005c8 <__aeabi_dmul>
 8004fee:	3401      	adds	r4, #1
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	106d      	asrs	r5, r5, #1
 8004ff4:	3608      	adds	r6, #8
 8004ff6:	e765      	b.n	8004ec4 <_dtoa_r+0x3cc>
 8004ff8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8004ffc:	2402      	movs	r4, #2
 8004ffe:	e766      	b.n	8004ece <_dtoa_r+0x3d6>
 8005000:	9e04      	ldr	r6, [sp, #16]
 8005002:	f8cd 8008 	str.w	r8, [sp, #8]
 8005006:	e783      	b.n	8004f10 <_dtoa_r+0x418>
 8005008:	4b27      	ldr	r3, [pc, #156]	@ (80050a8 <_dtoa_r+0x5b0>)
 800500a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800500e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d055      	beq.n	80050c4 <_dtoa_r+0x5cc>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	2000      	movs	r0, #0
 800501e:	4928      	ldr	r1, [pc, #160]	@ (80050c0 <_dtoa_r+0x5c8>)
 8005020:	f7fb fbfc 	bl	800081c <__aeabi_ddiv>
 8005024:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005028:	f7fb f916 	bl	8000258 <__aeabi_dsub>
 800502c:	9b00      	ldr	r3, [sp, #0]
 800502e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005032:	199d      	adds	r5, r3, r6
 8005034:	461e      	mov	r6, r3
 8005036:	4659      	mov	r1, fp
 8005038:	4650      	mov	r0, sl
 800503a:	f7fb fd75 	bl	8000b28 <__aeabi_d2iz>
 800503e:	4604      	mov	r4, r0
 8005040:	f7fb fa58 	bl	80004f4 <__aeabi_i2d>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4650      	mov	r0, sl
 800504a:	4659      	mov	r1, fp
 800504c:	f7fb f904 	bl	8000258 <__aeabi_dsub>
 8005050:	3430      	adds	r4, #48	@ 0x30
 8005052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005056:	f806 4b01 	strb.w	r4, [r6], #1
 800505a:	4682      	mov	sl, r0
 800505c:	468b      	mov	fp, r1
 800505e:	f7fb fd25 	bl	8000aac <__aeabi_dcmplt>
 8005062:	2800      	cmp	r0, #0
 8005064:	d172      	bne.n	800514c <_dtoa_r+0x654>
 8005066:	4652      	mov	r2, sl
 8005068:	465b      	mov	r3, fp
 800506a:	4911      	ldr	r1, [pc, #68]	@ (80050b0 <_dtoa_r+0x5b8>)
 800506c:	2000      	movs	r0, #0
 800506e:	f7fb f8f3 	bl	8000258 <__aeabi_dsub>
 8005072:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005076:	f7fb fd19 	bl	8000aac <__aeabi_dcmplt>
 800507a:	2800      	cmp	r0, #0
 800507c:	f040 80b6 	bne.w	80051ec <_dtoa_r+0x6f4>
 8005080:	42ae      	cmp	r6, r5
 8005082:	f43f af6e 	beq.w	8004f62 <_dtoa_r+0x46a>
 8005086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <_dtoa_r+0x5bc>)
 800508c:	2200      	movs	r2, #0
 800508e:	f7fb fa9b 	bl	80005c8 <__aeabi_dmul>
 8005092:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <_dtoa_r+0x5bc>)
 8005094:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005098:	2200      	movs	r2, #0
 800509a:	4650      	mov	r0, sl
 800509c:	4659      	mov	r1, fp
 800509e:	f7fb fa93 	bl	80005c8 <__aeabi_dmul>
 80050a2:	4682      	mov	sl, r0
 80050a4:	468b      	mov	fp, r1
 80050a6:	e7c6      	b.n	8005036 <_dtoa_r+0x53e>
 80050a8:	08007248 	.word	0x08007248
 80050ac:	08007220 	.word	0x08007220
 80050b0:	3ff00000 	.word	0x3ff00000
 80050b4:	40240000 	.word	0x40240000
 80050b8:	401c0000 	.word	0x401c0000
 80050bc:	40140000 	.word	0x40140000
 80050c0:	3fe00000 	.word	0x3fe00000
 80050c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050c8:	f7fb fa7e 	bl	80005c8 <__aeabi_dmul>
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	9d00      	ldr	r5, [sp, #0]
 80050d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050d4:	4433      	add	r3, r6
 80050d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80050d8:	4659      	mov	r1, fp
 80050da:	4650      	mov	r0, sl
 80050dc:	f7fb fd24 	bl	8000b28 <__aeabi_d2iz>
 80050e0:	4604      	mov	r4, r0
 80050e2:	f7fb fa07 	bl	80004f4 <__aeabi_i2d>
 80050e6:	3430      	adds	r4, #48	@ 0x30
 80050e8:	460b      	mov	r3, r1
 80050ea:	4602      	mov	r2, r0
 80050ec:	4659      	mov	r1, fp
 80050ee:	4650      	mov	r0, sl
 80050f0:	f7fb f8b2 	bl	8000258 <__aeabi_dsub>
 80050f4:	f805 4b01 	strb.w	r4, [r5], #1
 80050f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050fa:	429d      	cmp	r5, r3
 80050fc:	4682      	mov	sl, r0
 80050fe:	468b      	mov	fp, r1
 8005100:	d127      	bne.n	8005152 <_dtoa_r+0x65a>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	2200      	movs	r2, #0
 8005106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800510a:	441e      	add	r6, r3
 800510c:	4bb3      	ldr	r3, [pc, #716]	@ (80053dc <_dtoa_r+0x8e4>)
 800510e:	f7fb f8a5 	bl	800025c <__adddf3>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4650      	mov	r0, sl
 8005118:	4659      	mov	r1, fp
 800511a:	f7fb fce5 	bl	8000ae8 <__aeabi_dcmpgt>
 800511e:	2800      	cmp	r0, #0
 8005120:	d164      	bne.n	80051ec <_dtoa_r+0x6f4>
 8005122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005126:	49ad      	ldr	r1, [pc, #692]	@ (80053dc <_dtoa_r+0x8e4>)
 8005128:	2000      	movs	r0, #0
 800512a:	f7fb f895 	bl	8000258 <__aeabi_dsub>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4650      	mov	r0, sl
 8005134:	4659      	mov	r1, fp
 8005136:	f7fb fcb9 	bl	8000aac <__aeabi_dcmplt>
 800513a:	2800      	cmp	r0, #0
 800513c:	f43f af11 	beq.w	8004f62 <_dtoa_r+0x46a>
 8005140:	4633      	mov	r3, r6
 8005142:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005146:	2a30      	cmp	r2, #48	@ 0x30
 8005148:	d0fa      	beq.n	8005140 <_dtoa_r+0x648>
 800514a:	461e      	mov	r6, r3
 800514c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005150:	e03a      	b.n	80051c8 <_dtoa_r+0x6d0>
 8005152:	4ba3      	ldr	r3, [pc, #652]	@ (80053e0 <_dtoa_r+0x8e8>)
 8005154:	2200      	movs	r2, #0
 8005156:	f7fb fa37 	bl	80005c8 <__aeabi_dmul>
 800515a:	4682      	mov	sl, r0
 800515c:	468b      	mov	fp, r1
 800515e:	e7bb      	b.n	80050d8 <_dtoa_r+0x5e0>
 8005160:	9e00      	ldr	r6, [sp, #0]
 8005162:	4652      	mov	r2, sl
 8005164:	465b      	mov	r3, fp
 8005166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800516a:	f7fb fb57 	bl	800081c <__aeabi_ddiv>
 800516e:	f7fb fcdb 	bl	8000b28 <__aeabi_d2iz>
 8005172:	4607      	mov	r7, r0
 8005174:	f7fb f9be 	bl	80004f4 <__aeabi_i2d>
 8005178:	4652      	mov	r2, sl
 800517a:	465b      	mov	r3, fp
 800517c:	f7fb fa24 	bl	80005c8 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005188:	f7fb f866 	bl	8000258 <__aeabi_dsub>
 800518c:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8005190:	9c00      	ldr	r4, [sp, #0]
 8005192:	f806 cb01 	strb.w	ip, [r6], #1
 8005196:	eba6 0c04 	sub.w	ip, r6, r4
 800519a:	9c04      	ldr	r4, [sp, #16]
 800519c:	4564      	cmp	r4, ip
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	d133      	bne.n	800520c <_dtoa_r+0x714>
 80051a4:	f7fb f85a 	bl	800025c <__adddf3>
 80051a8:	4652      	mov	r2, sl
 80051aa:	465b      	mov	r3, fp
 80051ac:	4604      	mov	r4, r0
 80051ae:	460d      	mov	r5, r1
 80051b0:	f7fb fc9a 	bl	8000ae8 <__aeabi_dcmpgt>
 80051b4:	b9c0      	cbnz	r0, 80051e8 <_dtoa_r+0x6f0>
 80051b6:	4652      	mov	r2, sl
 80051b8:	465b      	mov	r3, fp
 80051ba:	4620      	mov	r0, r4
 80051bc:	4629      	mov	r1, r5
 80051be:	f7fb fc6b 	bl	8000a98 <__aeabi_dcmpeq>
 80051c2:	b108      	cbz	r0, 80051c8 <_dtoa_r+0x6d0>
 80051c4:	07fb      	lsls	r3, r7, #31
 80051c6:	d40f      	bmi.n	80051e8 <_dtoa_r+0x6f0>
 80051c8:	9901      	ldr	r1, [sp, #4]
 80051ca:	4648      	mov	r0, r9
 80051cc:	f000 fbba 	bl	8005944 <_Bfree>
 80051d0:	2300      	movs	r3, #0
 80051d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80051d4:	7033      	strb	r3, [r6, #0]
 80051d6:	f108 0301 	add.w	r3, r8, #1
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f43f acda 	beq.w	8004b98 <_dtoa_r+0xa0>
 80051e4:	601e      	str	r6, [r3, #0]
 80051e6:	e4d7      	b.n	8004b98 <_dtoa_r+0xa0>
 80051e8:	f8cd 8008 	str.w	r8, [sp, #8]
 80051ec:	4633      	mov	r3, r6
 80051ee:	461e      	mov	r6, r3
 80051f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051f4:	2a39      	cmp	r2, #57	@ 0x39
 80051f6:	d106      	bne.n	8005206 <_dtoa_r+0x70e>
 80051f8:	9a00      	ldr	r2, [sp, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d1f7      	bne.n	80051ee <_dtoa_r+0x6f6>
 80051fe:	9a02      	ldr	r2, [sp, #8]
 8005200:	3201      	adds	r2, #1
 8005202:	9202      	str	r2, [sp, #8]
 8005204:	2230      	movs	r2, #48	@ 0x30
 8005206:	3201      	adds	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e79f      	b.n	800514c <_dtoa_r+0x654>
 800520c:	4b74      	ldr	r3, [pc, #464]	@ (80053e0 <_dtoa_r+0x8e8>)
 800520e:	2200      	movs	r2, #0
 8005210:	f7fb f9da 	bl	80005c8 <__aeabi_dmul>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	f7fb fc3a 	bl	8000a98 <__aeabi_dcmpeq>
 8005224:	2800      	cmp	r0, #0
 8005226:	d09c      	beq.n	8005162 <_dtoa_r+0x66a>
 8005228:	e7ce      	b.n	80051c8 <_dtoa_r+0x6d0>
 800522a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800522c:	2a00      	cmp	r2, #0
 800522e:	f000 80e3 	beq.w	80053f8 <_dtoa_r+0x900>
 8005232:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005234:	2a01      	cmp	r2, #1
 8005236:	f300 80c2 	bgt.w	80053be <_dtoa_r+0x8c6>
 800523a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800523c:	2a00      	cmp	r2, #0
 800523e:	f000 80ba 	beq.w	80053b6 <_dtoa_r+0x8be>
 8005242:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005246:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005248:	463e      	mov	r6, r7
 800524a:	9a08      	ldr	r2, [sp, #32]
 800524c:	2101      	movs	r1, #1
 800524e:	441a      	add	r2, r3
 8005250:	4648      	mov	r0, r9
 8005252:	441f      	add	r7, r3
 8005254:	9208      	str	r2, [sp, #32]
 8005256:	f000 fc29 	bl	8005aac <__i2b>
 800525a:	4604      	mov	r4, r0
 800525c:	b156      	cbz	r6, 8005274 <_dtoa_r+0x77c>
 800525e:	9b08      	ldr	r3, [sp, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd07      	ble.n	8005274 <_dtoa_r+0x77c>
 8005264:	42b3      	cmp	r3, r6
 8005266:	9a08      	ldr	r2, [sp, #32]
 8005268:	bfa8      	it	ge
 800526a:	4633      	movge	r3, r6
 800526c:	1aff      	subs	r7, r7, r3
 800526e:	1af6      	subs	r6, r6, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	9308      	str	r3, [sp, #32]
 8005274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005276:	b30b      	cbz	r3, 80052bc <_dtoa_r+0x7c4>
 8005278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80c3 	beq.w	8005406 <_dtoa_r+0x90e>
 8005280:	2d00      	cmp	r5, #0
 8005282:	f000 80bd 	beq.w	8005400 <_dtoa_r+0x908>
 8005286:	4621      	mov	r1, r4
 8005288:	462a      	mov	r2, r5
 800528a:	4648      	mov	r0, r9
 800528c:	f000 fcce 	bl	8005c2c <__pow5mult>
 8005290:	9a01      	ldr	r2, [sp, #4]
 8005292:	4601      	mov	r1, r0
 8005294:	4604      	mov	r4, r0
 8005296:	4648      	mov	r0, r9
 8005298:	f000 fc1e 	bl	8005ad8 <__multiply>
 800529c:	9901      	ldr	r1, [sp, #4]
 800529e:	4682      	mov	sl, r0
 80052a0:	4648      	mov	r0, r9
 80052a2:	f000 fb4f 	bl	8005944 <_Bfree>
 80052a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a8:	1b5b      	subs	r3, r3, r5
 80052aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ac:	f000 80ae 	beq.w	800540c <_dtoa_r+0x914>
 80052b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052b2:	4651      	mov	r1, sl
 80052b4:	4648      	mov	r0, r9
 80052b6:	f000 fcb9 	bl	8005c2c <__pow5mult>
 80052ba:	9001      	str	r0, [sp, #4]
 80052bc:	2101      	movs	r1, #1
 80052be:	4648      	mov	r0, r9
 80052c0:	f000 fbf4 	bl	8005aac <__i2b>
 80052c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052c6:	4605      	mov	r5, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 81d7 	beq.w	800567c <_dtoa_r+0xb84>
 80052ce:	461a      	mov	r2, r3
 80052d0:	4601      	mov	r1, r0
 80052d2:	4648      	mov	r0, r9
 80052d4:	f000 fcaa 	bl	8005c2c <__pow5mult>
 80052d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052da:	2b01      	cmp	r3, #1
 80052dc:	4605      	mov	r5, r0
 80052de:	f300 809d 	bgt.w	800541c <_dtoa_r+0x924>
 80052e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8094 	bne.w	8005412 <_dtoa_r+0x91a>
 80052ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 808e 	bne.w	8005412 <_dtoa_r+0x91a>
 80052f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052fc:	0d1b      	lsrs	r3, r3, #20
 80052fe:	051b      	lsls	r3, r3, #20
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8089 	beq.w	8005418 <_dtoa_r+0x920>
 8005306:	9b08      	ldr	r3, [sp, #32]
 8005308:	3301      	adds	r3, #1
 800530a:	3701      	adds	r7, #1
 800530c:	9308      	str	r3, [sp, #32]
 800530e:	f04f 0a01 	mov.w	sl, #1
 8005312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 81b7 	beq.w	8005688 <_dtoa_r+0xb90>
 800531a:	692b      	ldr	r3, [r5, #16]
 800531c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005320:	6918      	ldr	r0, [r3, #16]
 8005322:	f000 fb77 	bl	8005a14 <__hi0bits>
 8005326:	f1c0 0020 	rsb	r0, r0, #32
 800532a:	9b08      	ldr	r3, [sp, #32]
 800532c:	4418      	add	r0, r3
 800532e:	f010 001f 	ands.w	r0, r0, #31
 8005332:	d07e      	beq.n	8005432 <_dtoa_r+0x93a>
 8005334:	f1c0 0320 	rsb	r3, r0, #32
 8005338:	2b04      	cmp	r3, #4
 800533a:	dd72      	ble.n	8005422 <_dtoa_r+0x92a>
 800533c:	9b08      	ldr	r3, [sp, #32]
 800533e:	f1c0 001c 	rsb	r0, r0, #28
 8005342:	4403      	add	r3, r0
 8005344:	4407      	add	r7, r0
 8005346:	4406      	add	r6, r0
 8005348:	9308      	str	r3, [sp, #32]
 800534a:	2f00      	cmp	r7, #0
 800534c:	dd05      	ble.n	800535a <_dtoa_r+0x862>
 800534e:	9901      	ldr	r1, [sp, #4]
 8005350:	463a      	mov	r2, r7
 8005352:	4648      	mov	r0, r9
 8005354:	f000 fcc6 	bl	8005ce4 <__lshift>
 8005358:	9001      	str	r0, [sp, #4]
 800535a:	9b08      	ldr	r3, [sp, #32]
 800535c:	2b00      	cmp	r3, #0
 800535e:	dd05      	ble.n	800536c <_dtoa_r+0x874>
 8005360:	4629      	mov	r1, r5
 8005362:	461a      	mov	r2, r3
 8005364:	4648      	mov	r0, r9
 8005366:	f000 fcbd 	bl	8005ce4 <__lshift>
 800536a:	4605      	mov	r5, r0
 800536c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800536e:	2b00      	cmp	r3, #0
 8005370:	d061      	beq.n	8005436 <_dtoa_r+0x93e>
 8005372:	9801      	ldr	r0, [sp, #4]
 8005374:	4629      	mov	r1, r5
 8005376:	f000 fd23 	bl	8005dc0 <__mcmp>
 800537a:	2800      	cmp	r0, #0
 800537c:	da5b      	bge.n	8005436 <_dtoa_r+0x93e>
 800537e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	9901      	ldr	r1, [sp, #4]
 8005386:	2300      	movs	r3, #0
 8005388:	220a      	movs	r2, #10
 800538a:	4648      	mov	r0, r9
 800538c:	f000 fafc 	bl	8005988 <__multadd>
 8005390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005392:	9001      	str	r0, [sp, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8179 	beq.w	800568c <_dtoa_r+0xb94>
 800539a:	2300      	movs	r3, #0
 800539c:	4621      	mov	r1, r4
 800539e:	220a      	movs	r2, #10
 80053a0:	4648      	mov	r0, r9
 80053a2:	f000 faf1 	bl	8005988 <__multadd>
 80053a6:	9b05      	ldr	r3, [sp, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	dc72      	bgt.n	8005494 <_dtoa_r+0x99c>
 80053ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	dc49      	bgt.n	8005448 <_dtoa_r+0x950>
 80053b4:	e06e      	b.n	8005494 <_dtoa_r+0x99c>
 80053b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80053b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80053bc:	e743      	b.n	8005246 <_dtoa_r+0x74e>
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	1e5d      	subs	r5, r3, #1
 80053c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	db0d      	blt.n	80053e4 <_dtoa_r+0x8ec>
 80053c8:	1b5d      	subs	r5, r3, r5
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f6bf af3b 	bge.w	8005248 <_dtoa_r+0x750>
 80053d2:	9b04      	ldr	r3, [sp, #16]
 80053d4:	1afe      	subs	r6, r7, r3
 80053d6:	2300      	movs	r3, #0
 80053d8:	e737      	b.n	800524a <_dtoa_r+0x752>
 80053da:	bf00      	nop
 80053dc:	3fe00000 	.word	0x3fe00000
 80053e0:	40240000 	.word	0x40240000
 80053e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053e8:	9509      	str	r5, [sp, #36]	@ 0x24
 80053ea:	1aeb      	subs	r3, r5, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	920d      	str	r2, [sp, #52]	@ 0x34
 80053f0:	9b04      	ldr	r3, [sp, #16]
 80053f2:	463e      	mov	r6, r7
 80053f4:	2500      	movs	r5, #0
 80053f6:	e728      	b.n	800524a <_dtoa_r+0x752>
 80053f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80053fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053fc:	463e      	mov	r6, r7
 80053fe:	e72d      	b.n	800525c <_dtoa_r+0x764>
 8005400:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005404:	e754      	b.n	80052b0 <_dtoa_r+0x7b8>
 8005406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005408:	9901      	ldr	r1, [sp, #4]
 800540a:	e753      	b.n	80052b4 <_dtoa_r+0x7bc>
 800540c:	f8cd a004 	str.w	sl, [sp, #4]
 8005410:	e754      	b.n	80052bc <_dtoa_r+0x7c4>
 8005412:	f04f 0a00 	mov.w	sl, #0
 8005416:	e77c      	b.n	8005312 <_dtoa_r+0x81a>
 8005418:	469a      	mov	sl, r3
 800541a:	e77a      	b.n	8005312 <_dtoa_r+0x81a>
 800541c:	f04f 0a00 	mov.w	sl, #0
 8005420:	e77b      	b.n	800531a <_dtoa_r+0x822>
 8005422:	d092      	beq.n	800534a <_dtoa_r+0x852>
 8005424:	9a08      	ldr	r2, [sp, #32]
 8005426:	331c      	adds	r3, #28
 8005428:	441a      	add	r2, r3
 800542a:	441f      	add	r7, r3
 800542c:	441e      	add	r6, r3
 800542e:	9208      	str	r2, [sp, #32]
 8005430:	e78b      	b.n	800534a <_dtoa_r+0x852>
 8005432:	4603      	mov	r3, r0
 8005434:	e7f6      	b.n	8005424 <_dtoa_r+0x92c>
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	f8cd 8008 	str.w	r8, [sp, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	dc23      	bgt.n	8005488 <_dtoa_r+0x990>
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005444:	2b02      	cmp	r3, #2
 8005446:	dd21      	ble.n	800548c <_dtoa_r+0x994>
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f47f adb0 	bne.w	8004fb0 <_dtoa_r+0x4b8>
 8005450:	4629      	mov	r1, r5
 8005452:	2205      	movs	r2, #5
 8005454:	4648      	mov	r0, r9
 8005456:	f000 fa97 	bl	8005988 <__multadd>
 800545a:	4601      	mov	r1, r0
 800545c:	4605      	mov	r5, r0
 800545e:	9801      	ldr	r0, [sp, #4]
 8005460:	f000 fcae 	bl	8005dc0 <__mcmp>
 8005464:	2800      	cmp	r0, #0
 8005466:	f77f ada3 	ble.w	8004fb0 <_dtoa_r+0x4b8>
 800546a:	9e00      	ldr	r6, [sp, #0]
 800546c:	2331      	movs	r3, #49	@ 0x31
 800546e:	f806 3b01 	strb.w	r3, [r6], #1
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	3301      	adds	r3, #1
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	e59e      	b.n	8004fb8 <_dtoa_r+0x4c0>
 800547a:	4635      	mov	r5, r6
 800547c:	462c      	mov	r4, r5
 800547e:	e7f4      	b.n	800546a <_dtoa_r+0x972>
 8005480:	9d04      	ldr	r5, [sp, #16]
 8005482:	f8cd 8008 	str.w	r8, [sp, #8]
 8005486:	e7f9      	b.n	800547c <_dtoa_r+0x984>
 8005488:	9b04      	ldr	r3, [sp, #16]
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8100 	beq.w	8005694 <_dtoa_r+0xb9c>
 8005494:	2e00      	cmp	r6, #0
 8005496:	dd05      	ble.n	80054a4 <_dtoa_r+0x9ac>
 8005498:	4621      	mov	r1, r4
 800549a:	4632      	mov	r2, r6
 800549c:	4648      	mov	r0, r9
 800549e:	f000 fc21 	bl	8005ce4 <__lshift>
 80054a2:	4604      	mov	r4, r0
 80054a4:	f1ba 0f00 	cmp.w	sl, #0
 80054a8:	d05a      	beq.n	8005560 <_dtoa_r+0xa68>
 80054aa:	6861      	ldr	r1, [r4, #4]
 80054ac:	4648      	mov	r0, r9
 80054ae:	f000 fa0b 	bl	80058c8 <_Balloc>
 80054b2:	4606      	mov	r6, r0
 80054b4:	b928      	cbnz	r0, 80054c2 <_dtoa_r+0x9ca>
 80054b6:	4b82      	ldr	r3, [pc, #520]	@ (80056c0 <_dtoa_r+0xbc8>)
 80054b8:	4602      	mov	r2, r0
 80054ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80054be:	f7ff bb32 	b.w	8004b26 <_dtoa_r+0x2e>
 80054c2:	6922      	ldr	r2, [r4, #16]
 80054c4:	3202      	adds	r2, #2
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	f104 010c 	add.w	r1, r4, #12
 80054cc:	300c      	adds	r0, #12
 80054ce:	f000 ffb3 	bl	8006438 <memcpy>
 80054d2:	2201      	movs	r2, #1
 80054d4:	4631      	mov	r1, r6
 80054d6:	4648      	mov	r0, r9
 80054d8:	f000 fc04 	bl	8005ce4 <__lshift>
 80054dc:	4607      	mov	r7, r0
 80054de:	9b00      	ldr	r3, [sp, #0]
 80054e0:	9a00      	ldr	r2, [sp, #0]
 80054e2:	f103 0b01 	add.w	fp, r3, #1
 80054e6:	9b05      	ldr	r3, [sp, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	9306      	str	r3, [sp, #24]
 80054ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	9308      	str	r3, [sp, #32]
 80054f4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80054f8:	4629      	mov	r1, r5
 80054fa:	9801      	ldr	r0, [sp, #4]
 80054fc:	9304      	str	r3, [sp, #16]
 80054fe:	f7ff fa72 	bl	80049e6 <quorem>
 8005502:	4621      	mov	r1, r4
 8005504:	9005      	str	r0, [sp, #20]
 8005506:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800550a:	9801      	ldr	r0, [sp, #4]
 800550c:	f000 fc58 	bl	8005dc0 <__mcmp>
 8005510:	463a      	mov	r2, r7
 8005512:	4680      	mov	r8, r0
 8005514:	4629      	mov	r1, r5
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fc6e 	bl	8005df8 <__mdiff>
 800551c:	68c2      	ldr	r2, [r0, #12]
 800551e:	4606      	mov	r6, r0
 8005520:	bb02      	cbnz	r2, 8005564 <_dtoa_r+0xa6c>
 8005522:	4601      	mov	r1, r0
 8005524:	9801      	ldr	r0, [sp, #4]
 8005526:	f000 fc4b 	bl	8005dc0 <__mcmp>
 800552a:	4602      	mov	r2, r0
 800552c:	4631      	mov	r1, r6
 800552e:	4648      	mov	r0, r9
 8005530:	9209      	str	r2, [sp, #36]	@ 0x24
 8005532:	f000 fa07 	bl	8005944 <_Bfree>
 8005536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800553a:	ea42 0103 	orr.w	r1, r2, r3
 800553e:	9b08      	ldr	r3, [sp, #32]
 8005540:	4319      	orrs	r1, r3
 8005542:	465e      	mov	r6, fp
 8005544:	d110      	bne.n	8005568 <_dtoa_r+0xa70>
 8005546:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800554a:	d02b      	beq.n	80055a4 <_dtoa_r+0xaac>
 800554c:	f1b8 0f00 	cmp.w	r8, #0
 8005550:	dd02      	ble.n	8005558 <_dtoa_r+0xa60>
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005558:	9b04      	ldr	r3, [sp, #16]
 800555a:	f883 a000 	strb.w	sl, [r3]
 800555e:	e52d      	b.n	8004fbc <_dtoa_r+0x4c4>
 8005560:	4627      	mov	r7, r4
 8005562:	e7bc      	b.n	80054de <_dtoa_r+0x9e6>
 8005564:	2201      	movs	r2, #1
 8005566:	e7e1      	b.n	800552c <_dtoa_r+0xa34>
 8005568:	f1b8 0f00 	cmp.w	r8, #0
 800556c:	db06      	blt.n	800557c <_dtoa_r+0xa84>
 800556e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005570:	ea48 0803 	orr.w	r8, r8, r3
 8005574:	9b08      	ldr	r3, [sp, #32]
 8005576:	ea58 0803 	orrs.w	r8, r8, r3
 800557a:	d120      	bne.n	80055be <_dtoa_r+0xac6>
 800557c:	2a00      	cmp	r2, #0
 800557e:	ddeb      	ble.n	8005558 <_dtoa_r+0xa60>
 8005580:	9901      	ldr	r1, [sp, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	4648      	mov	r0, r9
 8005586:	f000 fbad 	bl	8005ce4 <__lshift>
 800558a:	4629      	mov	r1, r5
 800558c:	9001      	str	r0, [sp, #4]
 800558e:	f000 fc17 	bl	8005dc0 <__mcmp>
 8005592:	2800      	cmp	r0, #0
 8005594:	dc03      	bgt.n	800559e <_dtoa_r+0xaa6>
 8005596:	d1df      	bne.n	8005558 <_dtoa_r+0xa60>
 8005598:	f01a 0f01 	tst.w	sl, #1
 800559c:	d0dc      	beq.n	8005558 <_dtoa_r+0xa60>
 800559e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80055a2:	d1d6      	bne.n	8005552 <_dtoa_r+0xa5a>
 80055a4:	9a04      	ldr	r2, [sp, #16]
 80055a6:	2339      	movs	r3, #57	@ 0x39
 80055a8:	7013      	strb	r3, [r2, #0]
 80055aa:	4633      	mov	r3, r6
 80055ac:	461e      	mov	r6, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80055b4:	2a39      	cmp	r2, #57	@ 0x39
 80055b6:	d052      	beq.n	800565e <_dtoa_r+0xb66>
 80055b8:	3201      	adds	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e4fe      	b.n	8004fbc <_dtoa_r+0x4c4>
 80055be:	2a00      	cmp	r2, #0
 80055c0:	dd07      	ble.n	80055d2 <_dtoa_r+0xada>
 80055c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80055c6:	d0ed      	beq.n	80055a4 <_dtoa_r+0xaac>
 80055c8:	9a04      	ldr	r2, [sp, #16]
 80055ca:	f10a 0301 	add.w	r3, sl, #1
 80055ce:	7013      	strb	r3, [r2, #0]
 80055d0:	e4f4      	b.n	8004fbc <_dtoa_r+0x4c4>
 80055d2:	9b06      	ldr	r3, [sp, #24]
 80055d4:	f80b ac01 	strb.w	sl, [fp, #-1]
 80055d8:	455b      	cmp	r3, fp
 80055da:	d02a      	beq.n	8005632 <_dtoa_r+0xb3a>
 80055dc:	9901      	ldr	r1, [sp, #4]
 80055de:	2300      	movs	r3, #0
 80055e0:	220a      	movs	r2, #10
 80055e2:	4648      	mov	r0, r9
 80055e4:	f000 f9d0 	bl	8005988 <__multadd>
 80055e8:	42bc      	cmp	r4, r7
 80055ea:	9001      	str	r0, [sp, #4]
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	f04f 020a 	mov.w	r2, #10
 80055f4:	4621      	mov	r1, r4
 80055f6:	4648      	mov	r0, r9
 80055f8:	d106      	bne.n	8005608 <_dtoa_r+0xb10>
 80055fa:	f000 f9c5 	bl	8005988 <__multadd>
 80055fe:	4604      	mov	r4, r0
 8005600:	4607      	mov	r7, r0
 8005602:	f10b 0b01 	add.w	fp, fp, #1
 8005606:	e775      	b.n	80054f4 <_dtoa_r+0x9fc>
 8005608:	f000 f9be 	bl	8005988 <__multadd>
 800560c:	4639      	mov	r1, r7
 800560e:	4604      	mov	r4, r0
 8005610:	2300      	movs	r3, #0
 8005612:	220a      	movs	r2, #10
 8005614:	4648      	mov	r0, r9
 8005616:	f000 f9b7 	bl	8005988 <__multadd>
 800561a:	4607      	mov	r7, r0
 800561c:	e7f1      	b.n	8005602 <_dtoa_r+0xb0a>
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	1e5e      	subs	r6, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	9b00      	ldr	r3, [sp, #0]
 8005626:	bfd8      	it	le
 8005628:	2600      	movle	r6, #0
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	4627      	mov	r7, r4
 800562e:	4416      	add	r6, r2
 8005630:	2400      	movs	r4, #0
 8005632:	9901      	ldr	r1, [sp, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	4648      	mov	r0, r9
 8005638:	f000 fb54 	bl	8005ce4 <__lshift>
 800563c:	4629      	mov	r1, r5
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	f000 fbbe 	bl	8005dc0 <__mcmp>
 8005644:	2800      	cmp	r0, #0
 8005646:	dcb0      	bgt.n	80055aa <_dtoa_r+0xab2>
 8005648:	d102      	bne.n	8005650 <_dtoa_r+0xb58>
 800564a:	f01a 0f01 	tst.w	sl, #1
 800564e:	d1ac      	bne.n	80055aa <_dtoa_r+0xab2>
 8005650:	4633      	mov	r3, r6
 8005652:	461e      	mov	r6, r3
 8005654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005658:	2a30      	cmp	r2, #48	@ 0x30
 800565a:	d0fa      	beq.n	8005652 <_dtoa_r+0xb5a>
 800565c:	e4ae      	b.n	8004fbc <_dtoa_r+0x4c4>
 800565e:	9a00      	ldr	r2, [sp, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d1a3      	bne.n	80055ac <_dtoa_r+0xab4>
 8005664:	9b02      	ldr	r3, [sp, #8]
 8005666:	3301      	adds	r3, #1
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	2331      	movs	r3, #49	@ 0x31
 800566c:	e7af      	b.n	80055ce <_dtoa_r+0xad6>
 800566e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f aa8c 	bne.w	8004b8e <_dtoa_r+0x96>
 8005676:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <_dtoa_r+0xbcc>)
 8005678:	f7ff baab 	b.w	8004bd2 <_dtoa_r+0xda>
 800567c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567e:	2b01      	cmp	r3, #1
 8005680:	f77f ae2f 	ble.w	80052e2 <_dtoa_r+0x7ea>
 8005684:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005688:	2001      	movs	r0, #1
 800568a:	e64e      	b.n	800532a <_dtoa_r+0x832>
 800568c:	9b05      	ldr	r3, [sp, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f77f aed7 	ble.w	8005442 <_dtoa_r+0x94a>
 8005694:	9e00      	ldr	r6, [sp, #0]
 8005696:	9801      	ldr	r0, [sp, #4]
 8005698:	4629      	mov	r1, r5
 800569a:	f7ff f9a4 	bl	80049e6 <quorem>
 800569e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80056a2:	9b00      	ldr	r3, [sp, #0]
 80056a4:	f806 ab01 	strb.w	sl, [r6], #1
 80056a8:	1af2      	subs	r2, r6, r3
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	ddb6      	ble.n	800561e <_dtoa_r+0xb26>
 80056b0:	9901      	ldr	r1, [sp, #4]
 80056b2:	2300      	movs	r3, #0
 80056b4:	220a      	movs	r2, #10
 80056b6:	4648      	mov	r0, r9
 80056b8:	f000 f966 	bl	8005988 <__multadd>
 80056bc:	9001      	str	r0, [sp, #4]
 80056be:	e7ea      	b.n	8005696 <_dtoa_r+0xb9e>
 80056c0:	08007162 	.word	0x08007162
 80056c4:	080070fc 	.word	0x080070fc

080056c8 <_free_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4605      	mov	r5, r0
 80056cc:	2900      	cmp	r1, #0
 80056ce:	d041      	beq.n	8005754 <_free_r+0x8c>
 80056d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d4:	1f0c      	subs	r4, r1, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfb8      	it	lt
 80056da:	18e4      	addlt	r4, r4, r3
 80056dc:	f000 f8e8 	bl	80058b0 <__malloc_lock>
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <_free_r+0x90>)
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	b933      	cbnz	r3, 80056f4 <_free_r+0x2c>
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	6014      	str	r4, [r2, #0]
 80056ea:	4628      	mov	r0, r5
 80056ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056f0:	f000 b8e4 	b.w	80058bc <__malloc_unlock>
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	d908      	bls.n	800570a <_free_r+0x42>
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	1821      	adds	r1, r4, r0
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf01      	itttt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	1809      	addeq	r1, r1, r0
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	e7ed      	b.n	80056e6 <_free_r+0x1e>
 800570a:	461a      	mov	r2, r3
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b10b      	cbz	r3, 8005714 <_free_r+0x4c>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d9fa      	bls.n	800570a <_free_r+0x42>
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	1850      	adds	r0, r2, r1
 8005718:	42a0      	cmp	r0, r4
 800571a:	d10b      	bne.n	8005734 <_free_r+0x6c>
 800571c:	6820      	ldr	r0, [r4, #0]
 800571e:	4401      	add	r1, r0
 8005720:	1850      	adds	r0, r2, r1
 8005722:	4283      	cmp	r3, r0
 8005724:	6011      	str	r1, [r2, #0]
 8005726:	d1e0      	bne.n	80056ea <_free_r+0x22>
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6053      	str	r3, [r2, #4]
 800572e:	4408      	add	r0, r1
 8005730:	6010      	str	r0, [r2, #0]
 8005732:	e7da      	b.n	80056ea <_free_r+0x22>
 8005734:	d902      	bls.n	800573c <_free_r+0x74>
 8005736:	230c      	movs	r3, #12
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	e7d6      	b.n	80056ea <_free_r+0x22>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	1821      	adds	r1, r4, r0
 8005740:	428b      	cmp	r3, r1
 8005742:	bf04      	itt	eq
 8005744:	6819      	ldreq	r1, [r3, #0]
 8005746:	685b      	ldreq	r3, [r3, #4]
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	bf04      	itt	eq
 800574c:	1809      	addeq	r1, r1, r0
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	6054      	str	r4, [r2, #4]
 8005752:	e7ca      	b.n	80056ea <_free_r+0x22>
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	bf00      	nop
 8005758:	20000444 	.word	0x20000444

0800575c <malloc>:
 800575c:	4b02      	ldr	r3, [pc, #8]	@ (8005768 <malloc+0xc>)
 800575e:	4601      	mov	r1, r0
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f000 b825 	b.w	80057b0 <_malloc_r>
 8005766:	bf00      	nop
 8005768:	20000018 	.word	0x20000018

0800576c <sbrk_aligned>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4e0f      	ldr	r6, [pc, #60]	@ (80057ac <sbrk_aligned+0x40>)
 8005770:	460c      	mov	r4, r1
 8005772:	6831      	ldr	r1, [r6, #0]
 8005774:	4605      	mov	r5, r0
 8005776:	b911      	cbnz	r1, 800577e <sbrk_aligned+0x12>
 8005778:	f000 fe4e 	bl	8006418 <_sbrk_r>
 800577c:	6030      	str	r0, [r6, #0]
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fe49 	bl	8006418 <_sbrk_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d103      	bne.n	8005792 <sbrk_aligned+0x26>
 800578a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800578e:	4620      	mov	r0, r4
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	1cc4      	adds	r4, r0, #3
 8005794:	f024 0403 	bic.w	r4, r4, #3
 8005798:	42a0      	cmp	r0, r4
 800579a:	d0f8      	beq.n	800578e <sbrk_aligned+0x22>
 800579c:	1a21      	subs	r1, r4, r0
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fe3a 	bl	8006418 <_sbrk_r>
 80057a4:	3001      	adds	r0, #1
 80057a6:	d1f2      	bne.n	800578e <sbrk_aligned+0x22>
 80057a8:	e7ef      	b.n	800578a <sbrk_aligned+0x1e>
 80057aa:	bf00      	nop
 80057ac:	20000440 	.word	0x20000440

080057b0 <_malloc_r>:
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	1ccd      	adds	r5, r1, #3
 80057b6:	f025 0503 	bic.w	r5, r5, #3
 80057ba:	3508      	adds	r5, #8
 80057bc:	2d0c      	cmp	r5, #12
 80057be:	bf38      	it	cc
 80057c0:	250c      	movcc	r5, #12
 80057c2:	2d00      	cmp	r5, #0
 80057c4:	4606      	mov	r6, r0
 80057c6:	db01      	blt.n	80057cc <_malloc_r+0x1c>
 80057c8:	42a9      	cmp	r1, r5
 80057ca:	d904      	bls.n	80057d6 <_malloc_r+0x26>
 80057cc:	230c      	movs	r3, #12
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058ac <_malloc_r+0xfc>
 80057da:	f000 f869 	bl	80058b0 <__malloc_lock>
 80057de:	f8d8 3000 	ldr.w	r3, [r8]
 80057e2:	461c      	mov	r4, r3
 80057e4:	bb44      	cbnz	r4, 8005838 <_malloc_r+0x88>
 80057e6:	4629      	mov	r1, r5
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff ffbf 	bl	800576c <sbrk_aligned>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	4604      	mov	r4, r0
 80057f2:	d158      	bne.n	80058a6 <_malloc_r+0xf6>
 80057f4:	f8d8 4000 	ldr.w	r4, [r8]
 80057f8:	4627      	mov	r7, r4
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	d143      	bne.n	8005886 <_malloc_r+0xd6>
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d04b      	beq.n	800589a <_malloc_r+0xea>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	4639      	mov	r1, r7
 8005806:	4630      	mov	r0, r6
 8005808:	eb04 0903 	add.w	r9, r4, r3
 800580c:	f000 fe04 	bl	8006418 <_sbrk_r>
 8005810:	4581      	cmp	r9, r0
 8005812:	d142      	bne.n	800589a <_malloc_r+0xea>
 8005814:	6821      	ldr	r1, [r4, #0]
 8005816:	1a6d      	subs	r5, r5, r1
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ffa6 	bl	800576c <sbrk_aligned>
 8005820:	3001      	adds	r0, #1
 8005822:	d03a      	beq.n	800589a <_malloc_r+0xea>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	442b      	add	r3, r5
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	f8d8 3000 	ldr.w	r3, [r8]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	bb62      	cbnz	r2, 800588c <_malloc_r+0xdc>
 8005832:	f8c8 7000 	str.w	r7, [r8]
 8005836:	e00f      	b.n	8005858 <_malloc_r+0xa8>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	1b52      	subs	r2, r2, r5
 800583c:	d420      	bmi.n	8005880 <_malloc_r+0xd0>
 800583e:	2a0b      	cmp	r2, #11
 8005840:	d917      	bls.n	8005872 <_malloc_r+0xc2>
 8005842:	1961      	adds	r1, r4, r5
 8005844:	42a3      	cmp	r3, r4
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	bf18      	it	ne
 800584a:	6059      	strne	r1, [r3, #4]
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	bf08      	it	eq
 8005850:	f8c8 1000 	streq.w	r1, [r8]
 8005854:	5162      	str	r2, [r4, r5]
 8005856:	604b      	str	r3, [r1, #4]
 8005858:	4630      	mov	r0, r6
 800585a:	f000 f82f 	bl	80058bc <__malloc_unlock>
 800585e:	f104 000b 	add.w	r0, r4, #11
 8005862:	1d23      	adds	r3, r4, #4
 8005864:	f020 0007 	bic.w	r0, r0, #7
 8005868:	1ac2      	subs	r2, r0, r3
 800586a:	bf1c      	itt	ne
 800586c:	1a1b      	subne	r3, r3, r0
 800586e:	50a3      	strne	r3, [r4, r2]
 8005870:	e7af      	b.n	80057d2 <_malloc_r+0x22>
 8005872:	6862      	ldr	r2, [r4, #4]
 8005874:	42a3      	cmp	r3, r4
 8005876:	bf0c      	ite	eq
 8005878:	f8c8 2000 	streq.w	r2, [r8]
 800587c:	605a      	strne	r2, [r3, #4]
 800587e:	e7eb      	b.n	8005858 <_malloc_r+0xa8>
 8005880:	4623      	mov	r3, r4
 8005882:	6864      	ldr	r4, [r4, #4]
 8005884:	e7ae      	b.n	80057e4 <_malloc_r+0x34>
 8005886:	463c      	mov	r4, r7
 8005888:	687f      	ldr	r7, [r7, #4]
 800588a:	e7b6      	b.n	80057fa <_malloc_r+0x4a>
 800588c:	461a      	mov	r2, r3
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	42a3      	cmp	r3, r4
 8005892:	d1fb      	bne.n	800588c <_malloc_r+0xdc>
 8005894:	2300      	movs	r3, #0
 8005896:	6053      	str	r3, [r2, #4]
 8005898:	e7de      	b.n	8005858 <_malloc_r+0xa8>
 800589a:	230c      	movs	r3, #12
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	4630      	mov	r0, r6
 80058a0:	f000 f80c 	bl	80058bc <__malloc_unlock>
 80058a4:	e794      	b.n	80057d0 <_malloc_r+0x20>
 80058a6:	6005      	str	r5, [r0, #0]
 80058a8:	e7d6      	b.n	8005858 <_malloc_r+0xa8>
 80058aa:	bf00      	nop
 80058ac:	20000444 	.word	0x20000444

080058b0 <__malloc_lock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__malloc_lock+0x8>)
 80058b2:	f7ff b896 	b.w	80049e2 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	2000043c 	.word	0x2000043c

080058bc <__malloc_unlock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__malloc_unlock+0x8>)
 80058be:	f7ff b891 	b.w	80049e4 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	2000043c 	.word	0x2000043c

080058c8 <_Balloc>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	69c4      	ldr	r4, [r0, #28]
 80058cc:	4605      	mov	r5, r0
 80058ce:	460e      	mov	r6, r1
 80058d0:	b984      	cbnz	r4, 80058f4 <_Balloc+0x2c>
 80058d2:	2010      	movs	r0, #16
 80058d4:	f7ff ff42 	bl	800575c <malloc>
 80058d8:	4604      	mov	r4, r0
 80058da:	61e8      	str	r0, [r5, #28]
 80058dc:	b928      	cbnz	r0, 80058ea <_Balloc+0x22>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b16      	ldr	r3, [pc, #88]	@ (800593c <_Balloc+0x74>)
 80058e2:	4817      	ldr	r0, [pc, #92]	@ (8005940 <_Balloc+0x78>)
 80058e4:	216b      	movs	r1, #107	@ 0x6b
 80058e6:	f000 fdb5 	bl	8006454 <__assert_func>
 80058ea:	2300      	movs	r3, #0
 80058ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80058f0:	6003      	str	r3, [r0, #0]
 80058f2:	60c3      	str	r3, [r0, #12]
 80058f4:	68e3      	ldr	r3, [r4, #12]
 80058f6:	b953      	cbnz	r3, 800590e <_Balloc+0x46>
 80058f8:	2221      	movs	r2, #33	@ 0x21
 80058fa:	2104      	movs	r1, #4
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fdc7 	bl	8006490 <_calloc_r>
 8005902:	69eb      	ldr	r3, [r5, #28]
 8005904:	60e0      	str	r0, [r4, #12]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	b90b      	cbnz	r3, 800590e <_Balloc+0x46>
 800590a:	2000      	movs	r0, #0
 800590c:	bd70      	pop	{r4, r5, r6, pc}
 800590e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005912:	b130      	cbz	r0, 8005922 <_Balloc+0x5a>
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800591a:	2300      	movs	r3, #0
 800591c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005920:	e7f4      	b.n	800590c <_Balloc+0x44>
 8005922:	2101      	movs	r1, #1
 8005924:	fa01 f406 	lsl.w	r4, r1, r6
 8005928:	1d62      	adds	r2, r4, #5
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	4628      	mov	r0, r5
 800592e:	f000 fdaf 	bl	8006490 <_calloc_r>
 8005932:	2800      	cmp	r0, #0
 8005934:	d0e9      	beq.n	800590a <_Balloc+0x42>
 8005936:	e9c0 6401 	strd	r6, r4, [r0, #4]
 800593a:	e7ee      	b.n	800591a <_Balloc+0x52>
 800593c:	08007109 	.word	0x08007109
 8005940:	08007173 	.word	0x08007173

08005944 <_Bfree>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	69c6      	ldr	r6, [r0, #28]
 8005948:	4605      	mov	r5, r0
 800594a:	460c      	mov	r4, r1
 800594c:	b976      	cbnz	r6, 800596c <_Bfree+0x28>
 800594e:	2010      	movs	r0, #16
 8005950:	f7ff ff04 	bl	800575c <malloc>
 8005954:	4602      	mov	r2, r0
 8005956:	61e8      	str	r0, [r5, #28]
 8005958:	b920      	cbnz	r0, 8005964 <_Bfree+0x20>
 800595a:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <_Bfree+0x3c>)
 800595c:	4809      	ldr	r0, [pc, #36]	@ (8005984 <_Bfree+0x40>)
 800595e:	218f      	movs	r1, #143	@ 0x8f
 8005960:	f000 fd78 	bl	8006454 <__assert_func>
 8005964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005968:	6006      	str	r6, [r0, #0]
 800596a:	60c6      	str	r6, [r0, #12]
 800596c:	b13c      	cbz	r4, 800597e <_Bfree+0x3a>
 800596e:	69eb      	ldr	r3, [r5, #28]
 8005970:	6862      	ldr	r2, [r4, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005978:	6021      	str	r1, [r4, #0]
 800597a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	08007109 	.word	0x08007109
 8005984:	08007173 	.word	0x08007173

08005988 <__multadd>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	690d      	ldr	r5, [r1, #16]
 800598e:	4607      	mov	r7, r0
 8005990:	460c      	mov	r4, r1
 8005992:	461e      	mov	r6, r3
 8005994:	f101 0c14 	add.w	ip, r1, #20
 8005998:	2000      	movs	r0, #0
 800599a:	f8dc 3000 	ldr.w	r3, [ip]
 800599e:	b299      	uxth	r1, r3
 80059a0:	fb02 6101 	mla	r1, r2, r1, r6
 80059a4:	0c1e      	lsrs	r6, r3, #16
 80059a6:	0c0b      	lsrs	r3, r1, #16
 80059a8:	fb02 3306 	mla	r3, r2, r6, r3
 80059ac:	b289      	uxth	r1, r1
 80059ae:	3001      	adds	r0, #1
 80059b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059b4:	4285      	cmp	r5, r0
 80059b6:	f84c 1b04 	str.w	r1, [ip], #4
 80059ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059be:	dcec      	bgt.n	800599a <__multadd+0x12>
 80059c0:	b30e      	cbz	r6, 8005a06 <__multadd+0x7e>
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dc19      	bgt.n	80059fc <__multadd+0x74>
 80059c8:	6861      	ldr	r1, [r4, #4]
 80059ca:	4638      	mov	r0, r7
 80059cc:	3101      	adds	r1, #1
 80059ce:	f7ff ff7b 	bl	80058c8 <_Balloc>
 80059d2:	4680      	mov	r8, r0
 80059d4:	b928      	cbnz	r0, 80059e2 <__multadd+0x5a>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <__multadd+0x84>)
 80059da:	480d      	ldr	r0, [pc, #52]	@ (8005a10 <__multadd+0x88>)
 80059dc:	21ba      	movs	r1, #186	@ 0xba
 80059de:	f000 fd39 	bl	8006454 <__assert_func>
 80059e2:	6922      	ldr	r2, [r4, #16]
 80059e4:	3202      	adds	r2, #2
 80059e6:	f104 010c 	add.w	r1, r4, #12
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	300c      	adds	r0, #12
 80059ee:	f000 fd23 	bl	8006438 <memcpy>
 80059f2:	4621      	mov	r1, r4
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ffa5 	bl	8005944 <_Bfree>
 80059fa:	4644      	mov	r4, r8
 80059fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a00:	3501      	adds	r5, #1
 8005a02:	615e      	str	r6, [r3, #20]
 8005a04:	6125      	str	r5, [r4, #16]
 8005a06:	4620      	mov	r0, r4
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0c:	08007162 	.word	0x08007162
 8005a10:	08007173 	.word	0x08007173

08005a14 <__hi0bits>:
 8005a14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a18:	4603      	mov	r3, r0
 8005a1a:	bf36      	itet	cc
 8005a1c:	0403      	lslcc	r3, r0, #16
 8005a1e:	2000      	movcs	r0, #0
 8005a20:	2010      	movcc	r0, #16
 8005a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a26:	bf3c      	itt	cc
 8005a28:	021b      	lslcc	r3, r3, #8
 8005a2a:	3008      	addcc	r0, #8
 8005a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a30:	bf3c      	itt	cc
 8005a32:	011b      	lslcc	r3, r3, #4
 8005a34:	3004      	addcc	r0, #4
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3a:	bf3c      	itt	cc
 8005a3c:	009b      	lslcc	r3, r3, #2
 8005a3e:	3002      	addcc	r0, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db05      	blt.n	8005a50 <__hi0bits+0x3c>
 8005a44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a48:	f100 0001 	add.w	r0, r0, #1
 8005a4c:	bf08      	it	eq
 8005a4e:	2020      	moveq	r0, #32
 8005a50:	4770      	bx	lr

08005a52 <__lo0bits>:
 8005a52:	6803      	ldr	r3, [r0, #0]
 8005a54:	4602      	mov	r2, r0
 8005a56:	f013 0007 	ands.w	r0, r3, #7
 8005a5a:	d00b      	beq.n	8005a74 <__lo0bits+0x22>
 8005a5c:	07d9      	lsls	r1, r3, #31
 8005a5e:	d421      	bmi.n	8005aa4 <__lo0bits+0x52>
 8005a60:	0798      	lsls	r0, r3, #30
 8005a62:	bf49      	itett	mi
 8005a64:	085b      	lsrmi	r3, r3, #1
 8005a66:	089b      	lsrpl	r3, r3, #2
 8005a68:	2001      	movmi	r0, #1
 8005a6a:	6013      	strmi	r3, [r2, #0]
 8005a6c:	bf5c      	itt	pl
 8005a6e:	6013      	strpl	r3, [r2, #0]
 8005a70:	2002      	movpl	r0, #2
 8005a72:	4770      	bx	lr
 8005a74:	b299      	uxth	r1, r3
 8005a76:	b909      	cbnz	r1, 8005a7c <__lo0bits+0x2a>
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	2010      	movs	r0, #16
 8005a7c:	b2d9      	uxtb	r1, r3
 8005a7e:	b909      	cbnz	r1, 8005a84 <__lo0bits+0x32>
 8005a80:	3008      	adds	r0, #8
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	0719      	lsls	r1, r3, #28
 8005a86:	bf04      	itt	eq
 8005a88:	091b      	lsreq	r3, r3, #4
 8005a8a:	3004      	addeq	r0, #4
 8005a8c:	0799      	lsls	r1, r3, #30
 8005a8e:	bf04      	itt	eq
 8005a90:	089b      	lsreq	r3, r3, #2
 8005a92:	3002      	addeq	r0, #2
 8005a94:	07d9      	lsls	r1, r3, #31
 8005a96:	d403      	bmi.n	8005aa0 <__lo0bits+0x4e>
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f100 0001 	add.w	r0, r0, #1
 8005a9e:	d003      	beq.n	8005aa8 <__lo0bits+0x56>
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4770      	bx	lr
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr
 8005aa8:	2020      	movs	r0, #32
 8005aaa:	4770      	bx	lr

08005aac <__i2b>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	460c      	mov	r4, r1
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	f7ff ff09 	bl	80058c8 <_Balloc>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	b928      	cbnz	r0, 8005ac6 <__i2b+0x1a>
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <__i2b+0x24>)
 8005abc:	4805      	ldr	r0, [pc, #20]	@ (8005ad4 <__i2b+0x28>)
 8005abe:	f240 1145 	movw	r1, #325	@ 0x145
 8005ac2:	f000 fcc7 	bl	8006454 <__assert_func>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	6144      	str	r4, [r0, #20]
 8005aca:	6103      	str	r3, [r0, #16]
 8005acc:	bd10      	pop	{r4, pc}
 8005ace:	bf00      	nop
 8005ad0:	08007162 	.word	0x08007162
 8005ad4:	08007173 	.word	0x08007173

08005ad8 <__multiply>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005ae0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005ae4:	45d1      	cmp	r9, sl
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	4688      	mov	r8, r1
 8005aea:	4614      	mov	r4, r2
 8005aec:	db04      	blt.n	8005af8 <__multiply+0x20>
 8005aee:	4653      	mov	r3, sl
 8005af0:	460c      	mov	r4, r1
 8005af2:	46ca      	mov	sl, r9
 8005af4:	4690      	mov	r8, r2
 8005af6:	4699      	mov	r9, r3
 8005af8:	68a3      	ldr	r3, [r4, #8]
 8005afa:	6861      	ldr	r1, [r4, #4]
 8005afc:	eb0a 0609 	add.w	r6, sl, r9
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	bfb8      	it	lt
 8005b04:	3101      	addlt	r1, #1
 8005b06:	f7ff fedf 	bl	80058c8 <_Balloc>
 8005b0a:	b930      	cbnz	r0, 8005b1a <__multiply+0x42>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b45      	ldr	r3, [pc, #276]	@ (8005c24 <__multiply+0x14c>)
 8005b10:	4845      	ldr	r0, [pc, #276]	@ (8005c28 <__multiply+0x150>)
 8005b12:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b16:	f000 fc9d 	bl	8006454 <__assert_func>
 8005b1a:	f100 0514 	add.w	r5, r0, #20
 8005b1e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005b22:	462b      	mov	r3, r5
 8005b24:	2200      	movs	r2, #0
 8005b26:	42bb      	cmp	r3, r7
 8005b28:	d31f      	bcc.n	8005b6a <__multiply+0x92>
 8005b2a:	f104 0c14 	add.w	ip, r4, #20
 8005b2e:	f108 0114 	add.w	r1, r8, #20
 8005b32:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 8005b36:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 8005b3a:	9202      	str	r2, [sp, #8]
 8005b3c:	1b1a      	subs	r2, r3, r4
 8005b3e:	3a15      	subs	r2, #21
 8005b40:	f022 0203 	bic.w	r2, r2, #3
 8005b44:	3415      	adds	r4, #21
 8005b46:	429c      	cmp	r4, r3
 8005b48:	bf88      	it	hi
 8005b4a:	2200      	movhi	r2, #0
 8005b4c:	9201      	str	r2, [sp, #4]
 8005b4e:	9a02      	ldr	r2, [sp, #8]
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	428a      	cmp	r2, r1
 8005b54:	d80c      	bhi.n	8005b70 <__multiply+0x98>
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	dd03      	ble.n	8005b62 <__multiply+0x8a>
 8005b5a:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d05d      	beq.n	8005c1e <__multiply+0x146>
 8005b62:	6106      	str	r6, [r0, #16]
 8005b64:	b005      	add	sp, #20
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	f843 2b04 	str.w	r2, [r3], #4
 8005b6e:	e7da      	b.n	8005b26 <__multiply+0x4e>
 8005b70:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b74:	f1ba 0f00 	cmp.w	sl, #0
 8005b78:	d024      	beq.n	8005bc4 <__multiply+0xec>
 8005b7a:	46e0      	mov	r8, ip
 8005b7c:	46a9      	mov	r9, r5
 8005b7e:	f04f 0e00 	mov.w	lr, #0
 8005b82:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b86:	f8d9 4000 	ldr.w	r4, [r9]
 8005b8a:	fa1f fb82 	uxth.w	fp, r2
 8005b8e:	b2a4      	uxth	r4, r4
 8005b90:	fb0a 440b 	mla	r4, sl, fp, r4
 8005b94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b98:	f8d9 2000 	ldr.w	r2, [r9]
 8005b9c:	4474      	add	r4, lr
 8005b9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ba2:	fb0a e20b 	mla	r2, sl, fp, lr
 8005ba6:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005baa:	b2a4      	uxth	r4, r4
 8005bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005bb0:	4543      	cmp	r3, r8
 8005bb2:	f849 4b04 	str.w	r4, [r9], #4
 8005bb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bba:	d8e2      	bhi.n	8005b82 <__multiply+0xaa>
 8005bbc:	9a01      	ldr	r2, [sp, #4]
 8005bbe:	18aa      	adds	r2, r5, r2
 8005bc0:	f8c2 e004 	str.w	lr, [r2, #4]
 8005bc4:	9a03      	ldr	r2, [sp, #12]
 8005bc6:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8005bca:	3104      	adds	r1, #4
 8005bcc:	f1b8 0f00 	cmp.w	r8, #0
 8005bd0:	d023      	beq.n	8005c1a <__multiply+0x142>
 8005bd2:	682a      	ldr	r2, [r5, #0]
 8005bd4:	46e6      	mov	lr, ip
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	46aa      	mov	sl, r5
 8005bda:	f04f 0b00 	mov.w	fp, #0
 8005bde:	f8be 4000 	ldrh.w	r4, [lr]
 8005be2:	fb08 b404 	mla	r4, r8, r4, fp
 8005be6:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 8005bea:	b292      	uxth	r2, r2
 8005bec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bf0:	f84a 2b04 	str.w	r2, [sl], #4
 8005bf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005bf8:	f8da 9000 	ldr.w	r9, [sl]
 8005bfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c00:	fa1f f289 	uxth.w	r2, r9
 8005c04:	fb08 220b 	mla	r2, r8, fp, r2
 8005c08:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005c0c:	4573      	cmp	r3, lr
 8005c0e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c12:	d8e4      	bhi.n	8005bde <__multiply+0x106>
 8005c14:	9c01      	ldr	r4, [sp, #4]
 8005c16:	192c      	adds	r4, r5, r4
 8005c18:	6062      	str	r2, [r4, #4]
 8005c1a:	3504      	adds	r5, #4
 8005c1c:	e797      	b.n	8005b4e <__multiply+0x76>
 8005c1e:	3e01      	subs	r6, #1
 8005c20:	e799      	b.n	8005b56 <__multiply+0x7e>
 8005c22:	bf00      	nop
 8005c24:	08007162 	.word	0x08007162
 8005c28:	08007173 	.word	0x08007173

08005c2c <__pow5mult>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	4617      	mov	r7, r2
 8005c32:	f012 0203 	ands.w	r2, r2, #3
 8005c36:	4680      	mov	r8, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	d007      	beq.n	8005c4c <__pow5mult+0x20>
 8005c3c:	4c26      	ldr	r4, [pc, #152]	@ (8005cd8 <__pow5mult+0xac>)
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	2300      	movs	r3, #0
 8005c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c46:	f7ff fe9f 	bl	8005988 <__multadd>
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	10bf      	asrs	r7, r7, #2
 8005c4e:	d03f      	beq.n	8005cd0 <__pow5mult+0xa4>
 8005c50:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8005c54:	b994      	cbnz	r4, 8005c7c <__pow5mult+0x50>
 8005c56:	2010      	movs	r0, #16
 8005c58:	f7ff fd80 	bl	800575c <malloc>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	f8c8 001c 	str.w	r0, [r8, #28]
 8005c62:	b930      	cbnz	r0, 8005c72 <__pow5mult+0x46>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <__pow5mult+0xb0>)
 8005c68:	481d      	ldr	r0, [pc, #116]	@ (8005ce0 <__pow5mult+0xb4>)
 8005c6a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c6e:	f000 fbf1 	bl	8006454 <__assert_func>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	60c3      	str	r3, [r0, #12]
 8005c7c:	68a6      	ldr	r6, [r4, #8]
 8005c7e:	b946      	cbnz	r6, 8005c92 <__pow5mult+0x66>
 8005c80:	f240 2171 	movw	r1, #625	@ 0x271
 8005c84:	4640      	mov	r0, r8
 8005c86:	f7ff ff11 	bl	8005aac <__i2b>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60a0      	str	r0, [r4, #8]
 8005c8e:	4606      	mov	r6, r0
 8005c90:	6003      	str	r3, [r0, #0]
 8005c92:	462c      	mov	r4, r5
 8005c94:	f04f 0900 	mov.w	r9, #0
 8005c98:	f007 0301 	and.w	r3, r7, #1
 8005c9c:	107f      	asrs	r7, r7, #1
 8005c9e:	b153      	cbz	r3, 8005cb6 <__pow5mult+0x8a>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	f7ff ff17 	bl	8005ad8 <__multiply>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4605      	mov	r5, r0
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff fe48 	bl	8005944 <_Bfree>
 8005cb4:	b167      	cbz	r7, 8005cd0 <__pow5mult+0xa4>
 8005cb6:	6830      	ldr	r0, [r6, #0]
 8005cb8:	b938      	cbnz	r0, 8005cca <__pow5mult+0x9e>
 8005cba:	4632      	mov	r2, r6
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff ff0a 	bl	8005ad8 <__multiply>
 8005cc4:	6030      	str	r0, [r6, #0]
 8005cc6:	f8c0 9000 	str.w	r9, [r0]
 8005cca:	4606      	mov	r6, r0
 8005ccc:	462c      	mov	r4, r5
 8005cce:	e7e3      	b.n	8005c98 <__pow5mult+0x6c>
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08007210 	.word	0x08007210
 8005cdc:	08007109 	.word	0x08007109
 8005ce0:	08007173 	.word	0x08007173

08005ce4 <__lshift>:
 8005ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	460c      	mov	r4, r1
 8005cea:	6849      	ldr	r1, [r1, #4]
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cfc:	f108 0901 	add.w	r9, r8, #1
 8005d00:	454b      	cmp	r3, r9
 8005d02:	db0b      	blt.n	8005d1c <__lshift+0x38>
 8005d04:	4638      	mov	r0, r7
 8005d06:	f7ff fddf 	bl	80058c8 <_Balloc>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	b948      	cbnz	r0, 8005d22 <__lshift+0x3e>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <__lshift+0xd4>)
 8005d12:	482a      	ldr	r0, [pc, #168]	@ (8005dbc <__lshift+0xd8>)
 8005d14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d18:	f000 fb9c 	bl	8006454 <__assert_func>
 8005d1c:	3101      	adds	r1, #1
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	e7ee      	b.n	8005d00 <__lshift+0x1c>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f100 0c14 	add.w	ip, r0, #20
 8005d28:	f100 0210 	add.w	r2, r0, #16
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4553      	cmp	r3, sl
 8005d30:	db35      	blt.n	8005d9e <__lshift+0xba>
 8005d32:	6922      	ldr	r2, [r4, #16]
 8005d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d3c:	f104 0314 	add.w	r3, r4, #20
 8005d40:	f015 0e1f 	ands.w	lr, r5, #31
 8005d44:	4661      	mov	r1, ip
 8005d46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005d4a:	d02c      	beq.n	8005da6 <__lshift+0xc2>
 8005d4c:	f1ce 0a20 	rsb	sl, lr, #32
 8005d50:	2500      	movs	r5, #0
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	468b      	mov	fp, r1
 8005d56:	fa00 f00e 	lsl.w	r0, r0, lr
 8005d5a:	4328      	orrs	r0, r5
 8005d5c:	f8cb 0000 	str.w	r0, [fp]
 8005d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d64:	429a      	cmp	r2, r3
 8005d66:	f101 0104 	add.w	r1, r1, #4
 8005d6a:	fa25 f50a 	lsr.w	r5, r5, sl
 8005d6e:	d8f0      	bhi.n	8005d52 <__lshift+0x6e>
 8005d70:	1b13      	subs	r3, r2, r4
 8005d72:	3b15      	subs	r3, #21
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	f104 0115 	add.w	r1, r4, #21
 8005d7c:	428a      	cmp	r2, r1
 8005d7e:	bf38      	it	cc
 8005d80:	2300      	movcc	r3, #0
 8005d82:	449c      	add	ip, r3
 8005d84:	f8cc 5004 	str.w	r5, [ip, #4]
 8005d88:	b905      	cbnz	r5, 8005d8c <__lshift+0xa8>
 8005d8a:	46c1      	mov	r9, r8
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f8c6 9010 	str.w	r9, [r6, #16]
 8005d92:	4621      	mov	r1, r4
 8005d94:	f7ff fdd6 	bl	8005944 <_Bfree>
 8005d98:	4630      	mov	r0, r6
 8005d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005da2:	3301      	adds	r3, #1
 8005da4:	e7c3      	b.n	8005d2e <__lshift+0x4a>
 8005da6:	f853 5b04 	ldr.w	r5, [r3], #4
 8005daa:	600d      	str	r5, [r1, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	f101 0104 	add.w	r1, r1, #4
 8005db2:	d8f8      	bhi.n	8005da6 <__lshift+0xc2>
 8005db4:	e7e9      	b.n	8005d8a <__lshift+0xa6>
 8005db6:	bf00      	nop
 8005db8:	08007162 	.word	0x08007162
 8005dbc:	08007173 	.word	0x08007173

08005dc0 <__mcmp>:
 8005dc0:	690a      	ldr	r2, [r1, #16]
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6900      	ldr	r0, [r0, #16]
 8005dc6:	1a80      	subs	r0, r0, r2
 8005dc8:	b530      	push	{r4, r5, lr}
 8005dca:	d10e      	bne.n	8005dea <__mcmp+0x2a>
 8005dcc:	3314      	adds	r3, #20
 8005dce:	3114      	adds	r1, #20
 8005dd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005dd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005de0:	4295      	cmp	r5, r2
 8005de2:	d003      	beq.n	8005dec <__mcmp+0x2c>
 8005de4:	d205      	bcs.n	8005df2 <__mcmp+0x32>
 8005de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dea:	bd30      	pop	{r4, r5, pc}
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d3f3      	bcc.n	8005dd8 <__mcmp+0x18>
 8005df0:	e7fb      	b.n	8005dea <__mcmp+0x2a>
 8005df2:	2001      	movs	r0, #1
 8005df4:	e7f9      	b.n	8005dea <__mcmp+0x2a>
	...

08005df8 <__mdiff>:
 8005df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	468a      	mov	sl, r1
 8005dfe:	4606      	mov	r6, r0
 8005e00:	4611      	mov	r1, r2
 8005e02:	4650      	mov	r0, sl
 8005e04:	4614      	mov	r4, r2
 8005e06:	f7ff ffdb 	bl	8005dc0 <__mcmp>
 8005e0a:	1e05      	subs	r5, r0, #0
 8005e0c:	d112      	bne.n	8005e34 <__mdiff+0x3c>
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff fd59 	bl	80058c8 <_Balloc>
 8005e16:	4602      	mov	r2, r0
 8005e18:	b928      	cbnz	r0, 8005e26 <__mdiff+0x2e>
 8005e1a:	4b41      	ldr	r3, [pc, #260]	@ (8005f20 <__mdiff+0x128>)
 8005e1c:	f240 2137 	movw	r1, #567	@ 0x237
 8005e20:	4840      	ldr	r0, [pc, #256]	@ (8005f24 <__mdiff+0x12c>)
 8005e22:	f000 fb17 	bl	8006454 <__assert_func>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	bfbc      	itt	lt
 8005e36:	4653      	movlt	r3, sl
 8005e38:	46a2      	movlt	sl, r4
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005e40:	bfba      	itte	lt
 8005e42:	461c      	movlt	r4, r3
 8005e44:	2501      	movlt	r5, #1
 8005e46:	2500      	movge	r5, #0
 8005e48:	f7ff fd3e 	bl	80058c8 <_Balloc>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	b918      	cbnz	r0, 8005e58 <__mdiff+0x60>
 8005e50:	4b33      	ldr	r3, [pc, #204]	@ (8005f20 <__mdiff+0x128>)
 8005e52:	f240 2145 	movw	r1, #581	@ 0x245
 8005e56:	e7e3      	b.n	8005e20 <__mdiff+0x28>
 8005e58:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005e5c:	6926      	ldr	r6, [r4, #16]
 8005e5e:	60c5      	str	r5, [r0, #12]
 8005e60:	f10a 0914 	add.w	r9, sl, #20
 8005e64:	f104 0e14 	add.w	lr, r4, #20
 8005e68:	f100 0514 	add.w	r5, r0, #20
 8005e6c:	f10a 0310 	add.w	r3, sl, #16
 8005e70:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 8005e74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	46ab      	mov	fp, r5
 8005e7c:	f04f 0c00 	mov.w	ip, #0
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	fa1f f38a 	uxth.w	r3, sl
 8005e90:	4619      	mov	r1, r3
 8005e92:	b283      	uxth	r3, r0
 8005e94:	1acb      	subs	r3, r1, r3
 8005e96:	0c00      	lsrs	r0, r0, #16
 8005e98:	4463      	add	r3, ip
 8005e9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ea8:	4576      	cmp	r6, lr
 8005eaa:	f84b 3b04 	str.w	r3, [fp], #4
 8005eae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005eb2:	d8e5      	bhi.n	8005e80 <__mdiff+0x88>
 8005eb4:	1b33      	subs	r3, r6, r4
 8005eb6:	3b15      	subs	r3, #21
 8005eb8:	3415      	adds	r4, #21
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	42a6      	cmp	r6, r4
 8005ec0:	bf38      	it	cc
 8005ec2:	2300      	movcc	r3, #0
 8005ec4:	18e8      	adds	r0, r5, r3
 8005ec6:	444b      	add	r3, r9
 8005ec8:	1d1c      	adds	r4, r3, #4
 8005eca:	3004      	adds	r0, #4
 8005ecc:	4626      	mov	r6, r4
 8005ece:	eba5 0509 	sub.w	r5, r5, r9
 8005ed2:	4546      	cmp	r6, r8
 8005ed4:	eb06 0e05 	add.w	lr, r6, r5
 8005ed8:	d30e      	bcc.n	8005ef8 <__mdiff+0x100>
 8005eda:	f108 0103 	add.w	r1, r8, #3
 8005ede:	1b09      	subs	r1, r1, r4
 8005ee0:	f021 0103 	bic.w	r1, r1, #3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	4598      	cmp	r8, r3
 8005ee8:	bf38      	it	cc
 8005eea:	2100      	movcc	r1, #0
 8005eec:	4401      	add	r1, r0
 8005eee:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ef2:	b19b      	cbz	r3, 8005f1c <__mdiff+0x124>
 8005ef4:	6117      	str	r7, [r2, #16]
 8005ef6:	e799      	b.n	8005e2c <__mdiff+0x34>
 8005ef8:	f856 1b04 	ldr.w	r1, [r6], #4
 8005efc:	46e2      	mov	sl, ip
 8005efe:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005f02:	fa1c fc81 	uxtah	ip, ip, r1
 8005f06:	4451      	add	r1, sl
 8005f08:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8005f12:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8005f16:	f8ce 1000 	str.w	r1, [lr]
 8005f1a:	e7da      	b.n	8005ed2 <__mdiff+0xda>
 8005f1c:	3f01      	subs	r7, #1
 8005f1e:	e7e6      	b.n	8005eee <__mdiff+0xf6>
 8005f20:	08007162 	.word	0x08007162
 8005f24:	08007173 	.word	0x08007173

08005f28 <__d2b>:
 8005f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	2101      	movs	r1, #1
 8005f30:	ec59 8b10 	vmov	r8, r9, d0
 8005f34:	4616      	mov	r6, r2
 8005f36:	f7ff fcc7 	bl	80058c8 <_Balloc>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	b930      	cbnz	r0, 8005f4c <__d2b+0x24>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	4b23      	ldr	r3, [pc, #140]	@ (8005fd0 <__d2b+0xa8>)
 8005f42:	4824      	ldr	r0, [pc, #144]	@ (8005fd4 <__d2b+0xac>)
 8005f44:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f48:	f000 fa84 	bl	8006454 <__assert_func>
 8005f4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f54:	b10d      	cbz	r5, 8005f5a <__d2b+0x32>
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	f1b8 0300 	subs.w	r3, r8, #0
 8005f60:	d023      	beq.n	8005faa <__d2b+0x82>
 8005f62:	4668      	mov	r0, sp
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	f7ff fd74 	bl	8005a52 <__lo0bits>
 8005f6a:	9900      	ldr	r1, [sp, #0]
 8005f6c:	b1d8      	cbz	r0, 8005fa6 <__d2b+0x7e>
 8005f6e:	9a01      	ldr	r2, [sp, #4]
 8005f70:	f1c0 0320 	rsb	r3, r0, #32
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	40c2      	lsrs	r2, r0
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	61a3      	str	r3, [r4, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2201      	moveq	r2, #1
 8005f8a:	2202      	movne	r2, #2
 8005f8c:	6122      	str	r2, [r4, #16]
 8005f8e:	b1a5      	cbz	r5, 8005fba <__d2b+0x92>
 8005f90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f94:	4405      	add	r5, r0
 8005f96:	603d      	str	r5, [r7, #0]
 8005f98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f9c:	6030      	str	r0, [r6, #0]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	b003      	add	sp, #12
 8005fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	6161      	str	r1, [r4, #20]
 8005fa8:	e7ea      	b.n	8005f80 <__d2b+0x58>
 8005faa:	a801      	add	r0, sp, #4
 8005fac:	f7ff fd51 	bl	8005a52 <__lo0bits>
 8005fb0:	9b01      	ldr	r3, [sp, #4]
 8005fb2:	6163      	str	r3, [r4, #20]
 8005fb4:	3020      	adds	r0, #32
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	e7e8      	b.n	8005f8c <__d2b+0x64>
 8005fba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005fc2:	6038      	str	r0, [r7, #0]
 8005fc4:	6918      	ldr	r0, [r3, #16]
 8005fc6:	f7ff fd25 	bl	8005a14 <__hi0bits>
 8005fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fce:	e7e5      	b.n	8005f9c <__d2b+0x74>
 8005fd0:	08007162 	.word	0x08007162
 8005fd4:	08007173 	.word	0x08007173

08005fd8 <__ssputs_r>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	688e      	ldr	r6, [r1, #8]
 8005fde:	461f      	mov	r7, r3
 8005fe0:	42be      	cmp	r6, r7
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	4690      	mov	r8, r2
 8005fe8:	4633      	mov	r3, r6
 8005fea:	d853      	bhi.n	8006094 <__ssputs_r+0xbc>
 8005fec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005ff0:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8005ff4:	d02b      	beq.n	800604e <__ssputs_r+0x76>
 8005ff6:	6965      	ldr	r5, [r4, #20]
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	6909      	ldr	r1, [r1, #16]
 8005ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006000:	eba3 0901 	sub.w	r9, r3, r1
 8006004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006008:	1c7b      	adds	r3, r7, #1
 800600a:	106d      	asrs	r5, r5, #1
 800600c:	444b      	add	r3, r9
 800600e:	42ab      	cmp	r3, r5
 8006010:	462a      	mov	r2, r5
 8006012:	bf84      	itt	hi
 8006014:	461d      	movhi	r5, r3
 8006016:	462a      	movhi	r2, r5
 8006018:	0543      	lsls	r3, r0, #21
 800601a:	d527      	bpl.n	800606c <__ssputs_r+0x94>
 800601c:	4611      	mov	r1, r2
 800601e:	4650      	mov	r0, sl
 8006020:	f7ff fbc6 	bl	80057b0 <_malloc_r>
 8006024:	4606      	mov	r6, r0
 8006026:	b358      	cbz	r0, 8006080 <__ssputs_r+0xa8>
 8006028:	6921      	ldr	r1, [r4, #16]
 800602a:	464a      	mov	r2, r9
 800602c:	f000 fa04 	bl	8006438 <memcpy>
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603a:	81a3      	strh	r3, [r4, #12]
 800603c:	6126      	str	r6, [r4, #16]
 800603e:	6165      	str	r5, [r4, #20]
 8006040:	444e      	add	r6, r9
 8006042:	eba5 0509 	sub.w	r5, r5, r9
 8006046:	6026      	str	r6, [r4, #0]
 8006048:	60a5      	str	r5, [r4, #8]
 800604a:	463e      	mov	r6, r7
 800604c:	463b      	mov	r3, r7
 800604e:	461f      	mov	r7, r3
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	463a      	mov	r2, r7
 8006054:	4641      	mov	r1, r8
 8006056:	f000 f9c5 	bl	80063e4 <memmove>
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	1b9b      	subs	r3, r3, r6
 800605e:	60a3      	str	r3, [r4, #8]
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	443b      	add	r3, r7
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	2000      	movs	r0, #0
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	4650      	mov	r0, sl
 800606e:	f000 fa35 	bl	80064dc <_realloc_r>
 8006072:	4606      	mov	r6, r0
 8006074:	2800      	cmp	r0, #0
 8006076:	d1e1      	bne.n	800603c <__ssputs_r+0x64>
 8006078:	6921      	ldr	r1, [r4, #16]
 800607a:	4650      	mov	r0, sl
 800607c:	f7ff fb24 	bl	80056c8 <_free_r>
 8006080:	230c      	movs	r3, #12
 8006082:	f8ca 3000 	str.w	r3, [sl]
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006092:	e7e9      	b.n	8006068 <__ssputs_r+0x90>
 8006094:	463e      	mov	r6, r7
 8006096:	e7db      	b.n	8006050 <__ssputs_r+0x78>

08006098 <_svfiprintf_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	4698      	mov	r8, r3
 800609e:	898b      	ldrh	r3, [r1, #12]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	b09d      	sub	sp, #116	@ 0x74
 80060a4:	4607      	mov	r7, r0
 80060a6:	460d      	mov	r5, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	d510      	bpl.n	80060ce <_svfiprintf_r+0x36>
 80060ac:	690b      	ldr	r3, [r1, #16]
 80060ae:	b973      	cbnz	r3, 80060ce <_svfiprintf_r+0x36>
 80060b0:	2140      	movs	r1, #64	@ 0x40
 80060b2:	f7ff fb7d 	bl	80057b0 <_malloc_r>
 80060b6:	6028      	str	r0, [r5, #0]
 80060b8:	6128      	str	r0, [r5, #16]
 80060ba:	b930      	cbnz	r0, 80060ca <_svfiprintf_r+0x32>
 80060bc:	230c      	movs	r3, #12
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060c4:	b01d      	add	sp, #116	@ 0x74
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	2340      	movs	r3, #64	@ 0x40
 80060cc:	616b      	str	r3, [r5, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060d2:	2320      	movs	r3, #32
 80060d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060dc:	2330      	movs	r3, #48	@ 0x30
 80060de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800627c <_svfiprintf_r+0x1e4>
 80060e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060e6:	f04f 0901 	mov.w	r9, #1
 80060ea:	4623      	mov	r3, r4
 80060ec:	469a      	mov	sl, r3
 80060ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f2:	b10a      	cbz	r2, 80060f8 <_svfiprintf_r+0x60>
 80060f4:	2a25      	cmp	r2, #37	@ 0x25
 80060f6:	d1f9      	bne.n	80060ec <_svfiprintf_r+0x54>
 80060f8:	ebba 0b04 	subs.w	fp, sl, r4
 80060fc:	d00b      	beq.n	8006116 <_svfiprintf_r+0x7e>
 80060fe:	465b      	mov	r3, fp
 8006100:	4622      	mov	r2, r4
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ff67 	bl	8005fd8 <__ssputs_r>
 800610a:	3001      	adds	r0, #1
 800610c:	f000 80a7 	beq.w	800625e <_svfiprintf_r+0x1c6>
 8006110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006112:	445a      	add	r2, fp
 8006114:	9209      	str	r2, [sp, #36]	@ 0x24
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 809f 	beq.w	800625e <_svfiprintf_r+0x1c6>
 8006120:	2300      	movs	r3, #0
 8006122:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612a:	f10a 0a01 	add.w	sl, sl, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006136:	931a      	str	r3, [sp, #104]	@ 0x68
 8006138:	4654      	mov	r4, sl
 800613a:	2205      	movs	r2, #5
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	484e      	ldr	r0, [pc, #312]	@ (800627c <_svfiprintf_r+0x1e4>)
 8006142:	f7fa f82d 	bl	80001a0 <memchr>
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	b9d8      	cbnz	r0, 8006182 <_svfiprintf_r+0xea>
 800614a:	06d0      	lsls	r0, r2, #27
 800614c:	bf44      	itt	mi
 800614e:	2320      	movmi	r3, #32
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006154:	0711      	lsls	r1, r2, #28
 8006156:	bf44      	itt	mi
 8006158:	232b      	movmi	r3, #43	@ 0x2b
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b2a      	cmp	r3, #42	@ 0x2a
 8006164:	d015      	beq.n	8006192 <_svfiprintf_r+0xfa>
 8006166:	9a07      	ldr	r2, [sp, #28]
 8006168:	4654      	mov	r4, sl
 800616a:	2000      	movs	r0, #0
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4621      	mov	r1, r4
 8006172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006176:	3b30      	subs	r3, #48	@ 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d94b      	bls.n	8006214 <_svfiprintf_r+0x17c>
 800617c:	b1b0      	cbz	r0, 80061ac <_svfiprintf_r+0x114>
 800617e:	9207      	str	r2, [sp, #28]
 8006180:	e014      	b.n	80061ac <_svfiprintf_r+0x114>
 8006182:	eba0 0308 	sub.w	r3, r0, r8
 8006186:	fa09 f303 	lsl.w	r3, r9, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	46a2      	mov	sl, r4
 8006190:	e7d2      	b.n	8006138 <_svfiprintf_r+0xa0>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9103      	str	r1, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfbb      	ittet	lt
 800619e:	425b      	neglt	r3, r3
 80061a0:	f042 0202 	orrlt.w	r2, r2, #2
 80061a4:	9307      	strge	r3, [sp, #28]
 80061a6:	9307      	strlt	r3, [sp, #28]
 80061a8:	bfb8      	it	lt
 80061aa:	9204      	strlt	r2, [sp, #16]
 80061ac:	7823      	ldrb	r3, [r4, #0]
 80061ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80061b0:	d10a      	bne.n	80061c8 <_svfiprintf_r+0x130>
 80061b2:	7863      	ldrb	r3, [r4, #1]
 80061b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b6:	d132      	bne.n	800621e <_svfiprintf_r+0x186>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9203      	str	r2, [sp, #12]
 80061c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061c4:	3402      	adds	r4, #2
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800628c <_svfiprintf_r+0x1f4>
 80061cc:	7821      	ldrb	r1, [r4, #0]
 80061ce:	2203      	movs	r2, #3
 80061d0:	4650      	mov	r0, sl
 80061d2:	f7f9 ffe5 	bl	80001a0 <memchr>
 80061d6:	b138      	cbz	r0, 80061e8 <_svfiprintf_r+0x150>
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	eba0 000a 	sub.w	r0, r0, sl
 80061de:	2240      	movs	r2, #64	@ 0x40
 80061e0:	4082      	lsls	r2, r0
 80061e2:	4313      	orrs	r3, r2
 80061e4:	3401      	adds	r4, #1
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	4824      	ldr	r0, [pc, #144]	@ (8006280 <_svfiprintf_r+0x1e8>)
 80061ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061f2:	2206      	movs	r2, #6
 80061f4:	f7f9 ffd4 	bl	80001a0 <memchr>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d036      	beq.n	800626a <_svfiprintf_r+0x1d2>
 80061fc:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <_svfiprintf_r+0x1ec>)
 80061fe:	bb1b      	cbnz	r3, 8006248 <_svfiprintf_r+0x1b0>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	3307      	adds	r3, #7
 8006204:	f023 0307 	bic.w	r3, r3, #7
 8006208:	3308      	adds	r3, #8
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620e:	4433      	add	r3, r6
 8006210:	9309      	str	r3, [sp, #36]	@ 0x24
 8006212:	e76a      	b.n	80060ea <_svfiprintf_r+0x52>
 8006214:	fb0c 3202 	mla	r2, ip, r2, r3
 8006218:	460c      	mov	r4, r1
 800621a:	2001      	movs	r0, #1
 800621c:	e7a8      	b.n	8006170 <_svfiprintf_r+0xd8>
 800621e:	2300      	movs	r3, #0
 8006220:	3401      	adds	r4, #1
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	4619      	mov	r1, r3
 8006226:	f04f 0c0a 	mov.w	ip, #10
 800622a:	4620      	mov	r0, r4
 800622c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006230:	3a30      	subs	r2, #48	@ 0x30
 8006232:	2a09      	cmp	r2, #9
 8006234:	d903      	bls.n	800623e <_svfiprintf_r+0x1a6>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0c6      	beq.n	80061c8 <_svfiprintf_r+0x130>
 800623a:	9105      	str	r1, [sp, #20]
 800623c:	e7c4      	b.n	80061c8 <_svfiprintf_r+0x130>
 800623e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006242:	4604      	mov	r4, r0
 8006244:	2301      	movs	r3, #1
 8006246:	e7f0      	b.n	800622a <_svfiprintf_r+0x192>
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b0e      	ldr	r3, [pc, #56]	@ (8006288 <_svfiprintf_r+0x1f0>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4638      	mov	r0, r7
 8006254:	f7fd fe58 	bl	8003f08 <_printf_float>
 8006258:	1c42      	adds	r2, r0, #1
 800625a:	4606      	mov	r6, r0
 800625c:	d1d6      	bne.n	800620c <_svfiprintf_r+0x174>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	065b      	lsls	r3, r3, #25
 8006262:	f53f af2d 	bmi.w	80060c0 <_svfiprintf_r+0x28>
 8006266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006268:	e72c      	b.n	80060c4 <_svfiprintf_r+0x2c>
 800626a:	ab03      	add	r3, sp, #12
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	462a      	mov	r2, r5
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <_svfiprintf_r+0x1f0>)
 8006272:	a904      	add	r1, sp, #16
 8006274:	4638      	mov	r0, r7
 8006276:	f7fe f8dd 	bl	8004434 <_printf_i>
 800627a:	e7ed      	b.n	8006258 <_svfiprintf_r+0x1c0>
 800627c:	080071b6 	.word	0x080071b6
 8006280:	080071c0 	.word	0x080071c0
 8006284:	08003f09 	.word	0x08003f09
 8006288:	08005fd9 	.word	0x08005fd9
 800628c:	080071bc 	.word	0x080071bc

08006290 <__sflush_r>:
 8006290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	0716      	lsls	r6, r2, #28
 800629a:	4605      	mov	r5, r0
 800629c:	460c      	mov	r4, r1
 800629e:	d451      	bmi.n	8006344 <__sflush_r+0xb4>
 80062a0:	684b      	ldr	r3, [r1, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dc02      	bgt.n	80062ac <__sflush_r+0x1c>
 80062a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dd49      	ble.n	8006340 <__sflush_r+0xb0>
 80062ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d046      	beq.n	8006340 <__sflush_r+0xb0>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062b8:	682f      	ldr	r7, [r5, #0]
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	d031      	beq.n	8006322 <__sflush_r+0x92>
 80062be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	0759      	lsls	r1, r3, #29
 80062c4:	d505      	bpl.n	80062d2 <__sflush_r+0x42>
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062cc:	b10b      	cbz	r3, 80062d2 <__sflush_r+0x42>
 80062ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d6:	6a21      	ldr	r1, [r4, #32]
 80062d8:	4628      	mov	r0, r5
 80062da:	47b0      	blx	r6
 80062dc:	1c42      	adds	r2, r0, #1
 80062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e2:	d106      	bne.n	80062f2 <__sflush_r+0x62>
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	291d      	cmp	r1, #29
 80062e8:	d846      	bhi.n	8006378 <__sflush_r+0xe8>
 80062ea:	4a29      	ldr	r2, [pc, #164]	@ (8006390 <__sflush_r+0x100>)
 80062ec:	40ca      	lsrs	r2, r1
 80062ee:	07d6      	lsls	r6, r2, #31
 80062f0:	d542      	bpl.n	8006378 <__sflush_r+0xe8>
 80062f2:	2200      	movs	r2, #0
 80062f4:	6062      	str	r2, [r4, #4]
 80062f6:	04d9      	lsls	r1, r3, #19
 80062f8:	6922      	ldr	r2, [r4, #16]
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	d504      	bpl.n	8006308 <__sflush_r+0x78>
 80062fe:	1c42      	adds	r2, r0, #1
 8006300:	d101      	bne.n	8006306 <__sflush_r+0x76>
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	b903      	cbnz	r3, 8006308 <__sflush_r+0x78>
 8006306:	6560      	str	r0, [r4, #84]	@ 0x54
 8006308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630a:	602f      	str	r7, [r5, #0]
 800630c:	b1c1      	cbz	r1, 8006340 <__sflush_r+0xb0>
 800630e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006312:	4299      	cmp	r1, r3
 8006314:	d002      	beq.n	800631c <__sflush_r+0x8c>
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff f9d6 	bl	80056c8 <_free_r>
 800631c:	2300      	movs	r3, #0
 800631e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006320:	e00e      	b.n	8006340 <__sflush_r+0xb0>
 8006322:	6a21      	ldr	r1, [r4, #32]
 8006324:	2301      	movs	r3, #1
 8006326:	4628      	mov	r0, r5
 8006328:	47b0      	blx	r6
 800632a:	4602      	mov	r2, r0
 800632c:	1c50      	adds	r0, r2, #1
 800632e:	d1c7      	bne.n	80062c0 <__sflush_r+0x30>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c4      	beq.n	80062c0 <__sflush_r+0x30>
 8006336:	2b1d      	cmp	r3, #29
 8006338:	d001      	beq.n	800633e <__sflush_r+0xae>
 800633a:	2b16      	cmp	r3, #22
 800633c:	d11a      	bne.n	8006374 <__sflush_r+0xe4>
 800633e:	602f      	str	r7, [r5, #0]
 8006340:	2000      	movs	r0, #0
 8006342:	e01e      	b.n	8006382 <__sflush_r+0xf2>
 8006344:	690f      	ldr	r7, [r1, #16]
 8006346:	2f00      	cmp	r7, #0
 8006348:	d0fa      	beq.n	8006340 <__sflush_r+0xb0>
 800634a:	0793      	lsls	r3, r2, #30
 800634c:	680e      	ldr	r6, [r1, #0]
 800634e:	bf08      	it	eq
 8006350:	694b      	ldreq	r3, [r1, #20]
 8006352:	600f      	str	r7, [r1, #0]
 8006354:	bf18      	it	ne
 8006356:	2300      	movne	r3, #0
 8006358:	eba6 0807 	sub.w	r8, r6, r7
 800635c:	608b      	str	r3, [r1, #8]
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	dded      	ble.n	8006340 <__sflush_r+0xb0>
 8006364:	6a21      	ldr	r1, [r4, #32]
 8006366:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006368:	4643      	mov	r3, r8
 800636a:	463a      	mov	r2, r7
 800636c:	4628      	mov	r0, r5
 800636e:	47b0      	blx	r6
 8006370:	2800      	cmp	r0, #0
 8006372:	dc08      	bgt.n	8006386 <__sflush_r+0xf6>
 8006374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637c:	81a3      	strh	r3, [r4, #12]
 800637e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006386:	4407      	add	r7, r0
 8006388:	eba8 0800 	sub.w	r8, r8, r0
 800638c:	e7e7      	b.n	800635e <__sflush_r+0xce>
 800638e:	bf00      	nop
 8006390:	20400001 	.word	0x20400001

08006394 <_fflush_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b913      	cbnz	r3, 80063a4 <_fflush_r+0x10>
 800639e:	2500      	movs	r5, #0
 80063a0:	4628      	mov	r0, r5
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	b118      	cbz	r0, 80063ae <_fflush_r+0x1a>
 80063a6:	6a03      	ldr	r3, [r0, #32]
 80063a8:	b90b      	cbnz	r3, 80063ae <_fflush_r+0x1a>
 80063aa:	f7fe f9f1 	bl	8004790 <__sinit>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f3      	beq.n	800639e <_fflush_r+0xa>
 80063b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063b8:	07d0      	lsls	r0, r2, #31
 80063ba:	d404      	bmi.n	80063c6 <_fflush_r+0x32>
 80063bc:	0599      	lsls	r1, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_fflush_r+0x32>
 80063c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c2:	f7fe fb0e 	bl	80049e2 <__retarget_lock_acquire_recursive>
 80063c6:	4628      	mov	r0, r5
 80063c8:	4621      	mov	r1, r4
 80063ca:	f7ff ff61 	bl	8006290 <__sflush_r>
 80063ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d0:	07da      	lsls	r2, r3, #31
 80063d2:	4605      	mov	r5, r0
 80063d4:	d4e4      	bmi.n	80063a0 <_fflush_r+0xc>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	059b      	lsls	r3, r3, #22
 80063da:	d4e1      	bmi.n	80063a0 <_fflush_r+0xc>
 80063dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063de:	f7fe fb01 	bl	80049e4 <__retarget_lock_release_recursive>
 80063e2:	e7dd      	b.n	80063a0 <_fflush_r+0xc>

080063e4 <memmove>:
 80063e4:	4288      	cmp	r0, r1
 80063e6:	b510      	push	{r4, lr}
 80063e8:	eb01 0402 	add.w	r4, r1, r2
 80063ec:	d902      	bls.n	80063f4 <memmove+0x10>
 80063ee:	4284      	cmp	r4, r0
 80063f0:	4623      	mov	r3, r4
 80063f2:	d807      	bhi.n	8006404 <memmove+0x20>
 80063f4:	1e43      	subs	r3, r0, #1
 80063f6:	42a1      	cmp	r1, r4
 80063f8:	d007      	beq.n	800640a <memmove+0x26>
 80063fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006402:	e7f8      	b.n	80063f6 <memmove+0x12>
 8006404:	4402      	add	r2, r0
 8006406:	4282      	cmp	r2, r0
 8006408:	d100      	bne.n	800640c <memmove+0x28>
 800640a:	bd10      	pop	{r4, pc}
 800640c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006410:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006414:	e7f7      	b.n	8006406 <memmove+0x22>
	...

08006418 <_sbrk_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d06      	ldr	r5, [pc, #24]	@ (8006434 <_sbrk_r+0x1c>)
 800641c:	2300      	movs	r3, #0
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fd fb4c 	bl	8003ac0 <_sbrk>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_sbrk_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_sbrk_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	20000438 	.word	0x20000438

08006438 <memcpy>:
 8006438:	440a      	add	r2, r1
 800643a:	4291      	cmp	r1, r2
 800643c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006440:	d100      	bne.n	8006444 <memcpy+0xc>
 8006442:	4770      	bx	lr
 8006444:	b510      	push	{r4, lr}
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644e:	4291      	cmp	r1, r2
 8006450:	d1f9      	bne.n	8006446 <memcpy+0xe>
 8006452:	bd10      	pop	{r4, pc}

08006454 <__assert_func>:
 8006454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006456:	4614      	mov	r4, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <__assert_func+0x2c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4605      	mov	r5, r0
 8006460:	68d8      	ldr	r0, [r3, #12]
 8006462:	b14c      	cbz	r4, 8006478 <__assert_func+0x24>
 8006464:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <__assert_func+0x30>)
 8006466:	9100      	str	r1, [sp, #0]
 8006468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800646c:	4906      	ldr	r1, [pc, #24]	@ (8006488 <__assert_func+0x34>)
 800646e:	462b      	mov	r3, r5
 8006470:	f000 f870 	bl	8006554 <fiprintf>
 8006474:	f000 f880 	bl	8006578 <abort>
 8006478:	4b04      	ldr	r3, [pc, #16]	@ (800648c <__assert_func+0x38>)
 800647a:	461c      	mov	r4, r3
 800647c:	e7f3      	b.n	8006466 <__assert_func+0x12>
 800647e:	bf00      	nop
 8006480:	20000018 	.word	0x20000018
 8006484:	080071d1 	.word	0x080071d1
 8006488:	080071de 	.word	0x080071de
 800648c:	0800720c 	.word	0x0800720c

08006490 <_calloc_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	fba1 5402 	umull	r5, r4, r1, r2
 8006496:	b934      	cbnz	r4, 80064a6 <_calloc_r+0x16>
 8006498:	4629      	mov	r1, r5
 800649a:	f7ff f989 	bl	80057b0 <_malloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	b928      	cbnz	r0, 80064ae <_calloc_r+0x1e>
 80064a2:	4630      	mov	r0, r6
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	220c      	movs	r2, #12
 80064a8:	6002      	str	r2, [r0, #0]
 80064aa:	2600      	movs	r6, #0
 80064ac:	e7f9      	b.n	80064a2 <_calloc_r+0x12>
 80064ae:	462a      	mov	r2, r5
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7fe fa09 	bl	80048c8 <memset>
 80064b6:	e7f4      	b.n	80064a2 <_calloc_r+0x12>

080064b8 <__ascii_mbtowc>:
 80064b8:	b082      	sub	sp, #8
 80064ba:	b901      	cbnz	r1, 80064be <__ascii_mbtowc+0x6>
 80064bc:	a901      	add	r1, sp, #4
 80064be:	b142      	cbz	r2, 80064d2 <__ascii_mbtowc+0x1a>
 80064c0:	b14b      	cbz	r3, 80064d6 <__ascii_mbtowc+0x1e>
 80064c2:	7813      	ldrb	r3, [r2, #0]
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	1e10      	subs	r0, r2, #0
 80064ca:	bf18      	it	ne
 80064cc:	2001      	movne	r0, #1
 80064ce:	b002      	add	sp, #8
 80064d0:	4770      	bx	lr
 80064d2:	4610      	mov	r0, r2
 80064d4:	e7fb      	b.n	80064ce <__ascii_mbtowc+0x16>
 80064d6:	f06f 0001 	mvn.w	r0, #1
 80064da:	e7f8      	b.n	80064ce <__ascii_mbtowc+0x16>

080064dc <_realloc_r>:
 80064dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e0:	4607      	mov	r7, r0
 80064e2:	4614      	mov	r4, r2
 80064e4:	460d      	mov	r5, r1
 80064e6:	b921      	cbnz	r1, 80064f2 <_realloc_r+0x16>
 80064e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	4611      	mov	r1, r2
 80064ee:	f7ff b95f 	b.w	80057b0 <_malloc_r>
 80064f2:	b92a      	cbnz	r2, 8006500 <_realloc_r+0x24>
 80064f4:	f7ff f8e8 	bl	80056c8 <_free_r>
 80064f8:	4625      	mov	r5, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	f000 f841 	bl	8006586 <_malloc_usable_size_r>
 8006504:	4284      	cmp	r4, r0
 8006506:	4606      	mov	r6, r0
 8006508:	d802      	bhi.n	8006510 <_realloc_r+0x34>
 800650a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800650e:	d8f4      	bhi.n	80064fa <_realloc_r+0x1e>
 8006510:	4621      	mov	r1, r4
 8006512:	4638      	mov	r0, r7
 8006514:	f7ff f94c 	bl	80057b0 <_malloc_r>
 8006518:	4680      	mov	r8, r0
 800651a:	b908      	cbnz	r0, 8006520 <_realloc_r+0x44>
 800651c:	4645      	mov	r5, r8
 800651e:	e7ec      	b.n	80064fa <_realloc_r+0x1e>
 8006520:	42b4      	cmp	r4, r6
 8006522:	4622      	mov	r2, r4
 8006524:	4629      	mov	r1, r5
 8006526:	bf28      	it	cs
 8006528:	4632      	movcs	r2, r6
 800652a:	f7ff ff85 	bl	8006438 <memcpy>
 800652e:	4629      	mov	r1, r5
 8006530:	4638      	mov	r0, r7
 8006532:	f7ff f8c9 	bl	80056c8 <_free_r>
 8006536:	e7f1      	b.n	800651c <_realloc_r+0x40>

08006538 <__ascii_wctomb>:
 8006538:	4603      	mov	r3, r0
 800653a:	4608      	mov	r0, r1
 800653c:	b141      	cbz	r1, 8006550 <__ascii_wctomb+0x18>
 800653e:	2aff      	cmp	r2, #255	@ 0xff
 8006540:	d904      	bls.n	800654c <__ascii_wctomb+0x14>
 8006542:	228a      	movs	r2, #138	@ 0x8a
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800654a:	4770      	bx	lr
 800654c:	700a      	strb	r2, [r1, #0]
 800654e:	2001      	movs	r0, #1
 8006550:	4770      	bx	lr
	...

08006554 <fiprintf>:
 8006554:	b40e      	push	{r1, r2, r3}
 8006556:	b503      	push	{r0, r1, lr}
 8006558:	4601      	mov	r1, r0
 800655a:	ab03      	add	r3, sp, #12
 800655c:	4805      	ldr	r0, [pc, #20]	@ (8006574 <fiprintf+0x20>)
 800655e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006562:	6800      	ldr	r0, [r0, #0]
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	f000 f83f 	bl	80065e8 <_vfiprintf_r>
 800656a:	b002      	add	sp, #8
 800656c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006570:	b003      	add	sp, #12
 8006572:	4770      	bx	lr
 8006574:	20000018 	.word	0x20000018

08006578 <abort>:
 8006578:	b508      	push	{r3, lr}
 800657a:	2006      	movs	r0, #6
 800657c:	f000 fa06 	bl	800698c <raise>
 8006580:	2001      	movs	r0, #1
 8006582:	f7fd fa6d 	bl	8003a60 <_exit>

08006586 <_malloc_usable_size_r>:
 8006586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658a:	1f18      	subs	r0, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	bfbc      	itt	lt
 8006590:	580b      	ldrlt	r3, [r1, r0]
 8006592:	18c0      	addlt	r0, r0, r3
 8006594:	4770      	bx	lr

08006596 <__sfputc_r>:
 8006596:	6893      	ldr	r3, [r2, #8]
 8006598:	3b01      	subs	r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	b410      	push	{r4}
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	da08      	bge.n	80065b4 <__sfputc_r+0x1e>
 80065a2:	6994      	ldr	r4, [r2, #24]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	db01      	blt.n	80065ac <__sfputc_r+0x16>
 80065a8:	290a      	cmp	r1, #10
 80065aa:	d103      	bne.n	80065b4 <__sfputc_r+0x1e>
 80065ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b0:	f000 b932 	b.w	8006818 <__swbuf_r>
 80065b4:	6813      	ldr	r3, [r2, #0]
 80065b6:	1c58      	adds	r0, r3, #1
 80065b8:	6010      	str	r0, [r2, #0]
 80065ba:	7019      	strb	r1, [r3, #0]
 80065bc:	4608      	mov	r0, r1
 80065be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <__sfputs_r>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	4614      	mov	r4, r2
 80065cc:	18d5      	adds	r5, r2, r3
 80065ce:	42ac      	cmp	r4, r5
 80065d0:	d101      	bne.n	80065d6 <__sfputs_r+0x12>
 80065d2:	2000      	movs	r0, #0
 80065d4:	e007      	b.n	80065e6 <__sfputs_r+0x22>
 80065d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065da:	463a      	mov	r2, r7
 80065dc:	4630      	mov	r0, r6
 80065de:	f7ff ffda 	bl	8006596 <__sfputc_r>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	d1f3      	bne.n	80065ce <__sfputs_r+0xa>
 80065e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065e8 <_vfiprintf_r>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	460d      	mov	r5, r1
 80065ee:	b09d      	sub	sp, #116	@ 0x74
 80065f0:	4614      	mov	r4, r2
 80065f2:	4698      	mov	r8, r3
 80065f4:	4606      	mov	r6, r0
 80065f6:	b118      	cbz	r0, 8006600 <_vfiprintf_r+0x18>
 80065f8:	6a03      	ldr	r3, [r0, #32]
 80065fa:	b90b      	cbnz	r3, 8006600 <_vfiprintf_r+0x18>
 80065fc:	f7fe f8c8 	bl	8004790 <__sinit>
 8006600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006602:	07d9      	lsls	r1, r3, #31
 8006604:	d405      	bmi.n	8006612 <_vfiprintf_r+0x2a>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	059a      	lsls	r2, r3, #22
 800660a:	d402      	bmi.n	8006612 <_vfiprintf_r+0x2a>
 800660c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800660e:	f7fe f9e8 	bl	80049e2 <__retarget_lock_acquire_recursive>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	d501      	bpl.n	800661c <_vfiprintf_r+0x34>
 8006618:	692b      	ldr	r3, [r5, #16]
 800661a:	b99b      	cbnz	r3, 8006644 <_vfiprintf_r+0x5c>
 800661c:	4629      	mov	r1, r5
 800661e:	4630      	mov	r0, r6
 8006620:	f000 f938 	bl	8006894 <__swsetup_r>
 8006624:	b170      	cbz	r0, 8006644 <_vfiprintf_r+0x5c>
 8006626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006628:	07dc      	lsls	r4, r3, #31
 800662a:	d504      	bpl.n	8006636 <_vfiprintf_r+0x4e>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006630:	b01d      	add	sp, #116	@ 0x74
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	89ab      	ldrh	r3, [r5, #12]
 8006638:	0598      	lsls	r0, r3, #22
 800663a:	d4f7      	bmi.n	800662c <_vfiprintf_r+0x44>
 800663c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800663e:	f7fe f9d1 	bl	80049e4 <__retarget_lock_release_recursive>
 8006642:	e7f3      	b.n	800662c <_vfiprintf_r+0x44>
 8006644:	2300      	movs	r3, #0
 8006646:	9309      	str	r3, [sp, #36]	@ 0x24
 8006648:	2320      	movs	r3, #32
 800664a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800664e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006652:	2330      	movs	r3, #48	@ 0x30
 8006654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006804 <_vfiprintf_r+0x21c>
 8006658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800665c:	f04f 0901 	mov.w	r9, #1
 8006660:	4623      	mov	r3, r4
 8006662:	469a      	mov	sl, r3
 8006664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006668:	b10a      	cbz	r2, 800666e <_vfiprintf_r+0x86>
 800666a:	2a25      	cmp	r2, #37	@ 0x25
 800666c:	d1f9      	bne.n	8006662 <_vfiprintf_r+0x7a>
 800666e:	ebba 0b04 	subs.w	fp, sl, r4
 8006672:	d00b      	beq.n	800668c <_vfiprintf_r+0xa4>
 8006674:	465b      	mov	r3, fp
 8006676:	4622      	mov	r2, r4
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff ffa2 	bl	80065c4 <__sfputs_r>
 8006680:	3001      	adds	r0, #1
 8006682:	f000 80a7 	beq.w	80067d4 <_vfiprintf_r+0x1ec>
 8006686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006688:	445a      	add	r2, fp
 800668a:	9209      	str	r2, [sp, #36]	@ 0x24
 800668c:	f89a 3000 	ldrb.w	r3, [sl]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 809f 	beq.w	80067d4 <_vfiprintf_r+0x1ec>
 8006696:	2300      	movs	r3, #0
 8006698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800669c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a0:	f10a 0a01 	add.w	sl, sl, #1
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	9307      	str	r3, [sp, #28]
 80066a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80066ae:	4654      	mov	r4, sl
 80066b0:	2205      	movs	r2, #5
 80066b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b6:	4853      	ldr	r0, [pc, #332]	@ (8006804 <_vfiprintf_r+0x21c>)
 80066b8:	f7f9 fd72 	bl	80001a0 <memchr>
 80066bc:	9a04      	ldr	r2, [sp, #16]
 80066be:	b9d8      	cbnz	r0, 80066f8 <_vfiprintf_r+0x110>
 80066c0:	06d1      	lsls	r1, r2, #27
 80066c2:	bf44      	itt	mi
 80066c4:	2320      	movmi	r3, #32
 80066c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ca:	0713      	lsls	r3, r2, #28
 80066cc:	bf44      	itt	mi
 80066ce:	232b      	movmi	r3, #43	@ 0x2b
 80066d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066d4:	f89a 3000 	ldrb.w	r3, [sl]
 80066d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066da:	d015      	beq.n	8006708 <_vfiprintf_r+0x120>
 80066dc:	9a07      	ldr	r2, [sp, #28]
 80066de:	4654      	mov	r4, sl
 80066e0:	2000      	movs	r0, #0
 80066e2:	f04f 0c0a 	mov.w	ip, #10
 80066e6:	4621      	mov	r1, r4
 80066e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ec:	3b30      	subs	r3, #48	@ 0x30
 80066ee:	2b09      	cmp	r3, #9
 80066f0:	d94b      	bls.n	800678a <_vfiprintf_r+0x1a2>
 80066f2:	b1b0      	cbz	r0, 8006722 <_vfiprintf_r+0x13a>
 80066f4:	9207      	str	r2, [sp, #28]
 80066f6:	e014      	b.n	8006722 <_vfiprintf_r+0x13a>
 80066f8:	eba0 0308 	sub.w	r3, r0, r8
 80066fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	46a2      	mov	sl, r4
 8006706:	e7d2      	b.n	80066ae <_vfiprintf_r+0xc6>
 8006708:	9b03      	ldr	r3, [sp, #12]
 800670a:	1d19      	adds	r1, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	9103      	str	r1, [sp, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	bfbb      	ittet	lt
 8006714:	425b      	neglt	r3, r3
 8006716:	f042 0202 	orrlt.w	r2, r2, #2
 800671a:	9307      	strge	r3, [sp, #28]
 800671c:	9307      	strlt	r3, [sp, #28]
 800671e:	bfb8      	it	lt
 8006720:	9204      	strlt	r2, [sp, #16]
 8006722:	7823      	ldrb	r3, [r4, #0]
 8006724:	2b2e      	cmp	r3, #46	@ 0x2e
 8006726:	d10a      	bne.n	800673e <_vfiprintf_r+0x156>
 8006728:	7863      	ldrb	r3, [r4, #1]
 800672a:	2b2a      	cmp	r3, #42	@ 0x2a
 800672c:	d132      	bne.n	8006794 <_vfiprintf_r+0x1ac>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	1d1a      	adds	r2, r3, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	9203      	str	r2, [sp, #12]
 8006736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800673a:	3402      	adds	r4, #2
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006814 <_vfiprintf_r+0x22c>
 8006742:	7821      	ldrb	r1, [r4, #0]
 8006744:	2203      	movs	r2, #3
 8006746:	4650      	mov	r0, sl
 8006748:	f7f9 fd2a 	bl	80001a0 <memchr>
 800674c:	b138      	cbz	r0, 800675e <_vfiprintf_r+0x176>
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	eba0 000a 	sub.w	r0, r0, sl
 8006754:	2240      	movs	r2, #64	@ 0x40
 8006756:	4082      	lsls	r2, r0
 8006758:	4313      	orrs	r3, r2
 800675a:	3401      	adds	r4, #1
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006762:	4829      	ldr	r0, [pc, #164]	@ (8006808 <_vfiprintf_r+0x220>)
 8006764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006768:	2206      	movs	r2, #6
 800676a:	f7f9 fd19 	bl	80001a0 <memchr>
 800676e:	2800      	cmp	r0, #0
 8006770:	d03f      	beq.n	80067f2 <_vfiprintf_r+0x20a>
 8006772:	4b26      	ldr	r3, [pc, #152]	@ (800680c <_vfiprintf_r+0x224>)
 8006774:	bb1b      	cbnz	r3, 80067be <_vfiprintf_r+0x1d6>
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	3307      	adds	r3, #7
 800677a:	f023 0307 	bic.w	r3, r3, #7
 800677e:	3308      	adds	r3, #8
 8006780:	9303      	str	r3, [sp, #12]
 8006782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006784:	443b      	add	r3, r7
 8006786:	9309      	str	r3, [sp, #36]	@ 0x24
 8006788:	e76a      	b.n	8006660 <_vfiprintf_r+0x78>
 800678a:	fb0c 3202 	mla	r2, ip, r2, r3
 800678e:	460c      	mov	r4, r1
 8006790:	2001      	movs	r0, #1
 8006792:	e7a8      	b.n	80066e6 <_vfiprintf_r+0xfe>
 8006794:	2300      	movs	r3, #0
 8006796:	3401      	adds	r4, #1
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	4619      	mov	r1, r3
 800679c:	f04f 0c0a 	mov.w	ip, #10
 80067a0:	4620      	mov	r0, r4
 80067a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a6:	3a30      	subs	r2, #48	@ 0x30
 80067a8:	2a09      	cmp	r2, #9
 80067aa:	d903      	bls.n	80067b4 <_vfiprintf_r+0x1cc>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0c6      	beq.n	800673e <_vfiprintf_r+0x156>
 80067b0:	9105      	str	r1, [sp, #20]
 80067b2:	e7c4      	b.n	800673e <_vfiprintf_r+0x156>
 80067b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b8:	4604      	mov	r4, r0
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7f0      	b.n	80067a0 <_vfiprintf_r+0x1b8>
 80067be:	ab03      	add	r3, sp, #12
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	462a      	mov	r2, r5
 80067c4:	4b12      	ldr	r3, [pc, #72]	@ (8006810 <_vfiprintf_r+0x228>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7fd fb9d 	bl	8003f08 <_printf_float>
 80067ce:	4607      	mov	r7, r0
 80067d0:	1c78      	adds	r0, r7, #1
 80067d2:	d1d6      	bne.n	8006782 <_vfiprintf_r+0x19a>
 80067d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067d6:	07d9      	lsls	r1, r3, #31
 80067d8:	d405      	bmi.n	80067e6 <_vfiprintf_r+0x1fe>
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	059a      	lsls	r2, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_vfiprintf_r+0x1fe>
 80067e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067e2:	f7fe f8ff 	bl	80049e4 <__retarget_lock_release_recursive>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	065b      	lsls	r3, r3, #25
 80067ea:	f53f af1f 	bmi.w	800662c <_vfiprintf_r+0x44>
 80067ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067f0:	e71e      	b.n	8006630 <_vfiprintf_r+0x48>
 80067f2:	ab03      	add	r3, sp, #12
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	462a      	mov	r2, r5
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <_vfiprintf_r+0x228>)
 80067fa:	a904      	add	r1, sp, #16
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7fd fe19 	bl	8004434 <_printf_i>
 8006802:	e7e4      	b.n	80067ce <_vfiprintf_r+0x1e6>
 8006804:	080071b6 	.word	0x080071b6
 8006808:	080071c0 	.word	0x080071c0
 800680c:	08003f09 	.word	0x08003f09
 8006810:	080065c5 	.word	0x080065c5
 8006814:	080071bc 	.word	0x080071bc

08006818 <__swbuf_r>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	460e      	mov	r6, r1
 800681c:	4614      	mov	r4, r2
 800681e:	4605      	mov	r5, r0
 8006820:	b118      	cbz	r0, 800682a <__swbuf_r+0x12>
 8006822:	6a03      	ldr	r3, [r0, #32]
 8006824:	b90b      	cbnz	r3, 800682a <__swbuf_r+0x12>
 8006826:	f7fd ffb3 	bl	8004790 <__sinit>
 800682a:	69a3      	ldr	r3, [r4, #24]
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	071a      	lsls	r2, r3, #28
 8006832:	d501      	bpl.n	8006838 <__swbuf_r+0x20>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	b943      	cbnz	r3, 800684a <__swbuf_r+0x32>
 8006838:	4621      	mov	r1, r4
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f82a 	bl	8006894 <__swsetup_r>
 8006840:	b118      	cbz	r0, 800684a <__swbuf_r+0x32>
 8006842:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006846:	4638      	mov	r0, r7
 8006848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	6922      	ldr	r2, [r4, #16]
 800684e:	1a98      	subs	r0, r3, r2
 8006850:	6963      	ldr	r3, [r4, #20]
 8006852:	b2f6      	uxtb	r6, r6
 8006854:	4283      	cmp	r3, r0
 8006856:	4637      	mov	r7, r6
 8006858:	dc05      	bgt.n	8006866 <__swbuf_r+0x4e>
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f7ff fd99 	bl	8006394 <_fflush_r>
 8006862:	2800      	cmp	r0, #0
 8006864:	d1ed      	bne.n	8006842 <__swbuf_r+0x2a>
 8006866:	68a3      	ldr	r3, [r4, #8]
 8006868:	3b01      	subs	r3, #1
 800686a:	60a3      	str	r3, [r4, #8]
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	701e      	strb	r6, [r3, #0]
 8006874:	6962      	ldr	r2, [r4, #20]
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	429a      	cmp	r2, r3
 800687a:	d004      	beq.n	8006886 <__swbuf_r+0x6e>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	07db      	lsls	r3, r3, #31
 8006880:	d5e1      	bpl.n	8006846 <__swbuf_r+0x2e>
 8006882:	2e0a      	cmp	r6, #10
 8006884:	d1df      	bne.n	8006846 <__swbuf_r+0x2e>
 8006886:	4621      	mov	r1, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f7ff fd83 	bl	8006394 <_fflush_r>
 800688e:	2800      	cmp	r0, #0
 8006890:	d0d9      	beq.n	8006846 <__swbuf_r+0x2e>
 8006892:	e7d6      	b.n	8006842 <__swbuf_r+0x2a>

08006894 <__swsetup_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4b28      	ldr	r3, [pc, #160]	@ (8006938 <__swsetup_r+0xa4>)
 8006898:	4605      	mov	r5, r0
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	460c      	mov	r4, r1
 800689e:	b118      	cbz	r0, 80068a8 <__swsetup_r+0x14>
 80068a0:	6a03      	ldr	r3, [r0, #32]
 80068a2:	b90b      	cbnz	r3, 80068a8 <__swsetup_r+0x14>
 80068a4:	f7fd ff74 	bl	8004790 <__sinit>
 80068a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ac:	0719      	lsls	r1, r3, #28
 80068ae:	d421      	bmi.n	80068f4 <__swsetup_r+0x60>
 80068b0:	06da      	lsls	r2, r3, #27
 80068b2:	d407      	bmi.n	80068c4 <__swsetup_r+0x30>
 80068b4:	2209      	movs	r2, #9
 80068b6:	602a      	str	r2, [r5, #0]
 80068b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c2:	e031      	b.n	8006928 <__swsetup_r+0x94>
 80068c4:	0758      	lsls	r0, r3, #29
 80068c6:	d512      	bpl.n	80068ee <__swsetup_r+0x5a>
 80068c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ca:	b141      	cbz	r1, 80068de <__swsetup_r+0x4a>
 80068cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d0:	4299      	cmp	r1, r3
 80068d2:	d002      	beq.n	80068da <__swsetup_r+0x46>
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7fe fef7 	bl	80056c8 <_free_r>
 80068da:	2300      	movs	r3, #0
 80068dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80068de:	2200      	movs	r2, #0
 80068e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e4:	6062      	str	r2, [r4, #4]
 80068e6:	6922      	ldr	r2, [r4, #16]
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068ee:	f043 0308 	orr.w	r3, r3, #8
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	b942      	cbnz	r2, 800690a <__swsetup_r+0x76>
 80068f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006900:	d003      	beq.n	800690a <__swsetup_r+0x76>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f881 	bl	8006a0c <__smakebuf_r>
 800690a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690e:	f013 0201 	ands.w	r2, r3, #1
 8006912:	d00a      	beq.n	800692a <__swsetup_r+0x96>
 8006914:	2200      	movs	r2, #0
 8006916:	60a2      	str	r2, [r4, #8]
 8006918:	6962      	ldr	r2, [r4, #20]
 800691a:	4252      	negs	r2, r2
 800691c:	61a2      	str	r2, [r4, #24]
 800691e:	6922      	ldr	r2, [r4, #16]
 8006920:	b942      	cbnz	r2, 8006934 <__swsetup_r+0xa0>
 8006922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006926:	d1c7      	bne.n	80068b8 <__swsetup_r+0x24>
 8006928:	bd38      	pop	{r3, r4, r5, pc}
 800692a:	0799      	lsls	r1, r3, #30
 800692c:	bf58      	it	pl
 800692e:	6962      	ldrpl	r2, [r4, #20]
 8006930:	60a2      	str	r2, [r4, #8]
 8006932:	e7f4      	b.n	800691e <__swsetup_r+0x8a>
 8006934:	2000      	movs	r0, #0
 8006936:	e7f7      	b.n	8006928 <__swsetup_r+0x94>
 8006938:	20000018 	.word	0x20000018

0800693c <_raise_r>:
 800693c:	291f      	cmp	r1, #31
 800693e:	b538      	push	{r3, r4, r5, lr}
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	d904      	bls.n	8006950 <_raise_r+0x14>
 8006946:	2316      	movs	r3, #22
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006952:	b112      	cbz	r2, 800695a <_raise_r+0x1e>
 8006954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006958:	b94b      	cbnz	r3, 800696e <_raise_r+0x32>
 800695a:	4628      	mov	r0, r5
 800695c:	f000 f830 	bl	80069c0 <_getpid_r>
 8006960:	4622      	mov	r2, r4
 8006962:	4601      	mov	r1, r0
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696a:	f000 b817 	b.w	800699c <_kill_r>
 800696e:	2b01      	cmp	r3, #1
 8006970:	d00a      	beq.n	8006988 <_raise_r+0x4c>
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	d103      	bne.n	800697e <_raise_r+0x42>
 8006976:	2316      	movs	r3, #22
 8006978:	6003      	str	r3, [r0, #0]
 800697a:	2001      	movs	r0, #1
 800697c:	e7e7      	b.n	800694e <_raise_r+0x12>
 800697e:	2100      	movs	r1, #0
 8006980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006984:	4620      	mov	r0, r4
 8006986:	4798      	blx	r3
 8006988:	2000      	movs	r0, #0
 800698a:	e7e0      	b.n	800694e <_raise_r+0x12>

0800698c <raise>:
 800698c:	4b02      	ldr	r3, [pc, #8]	@ (8006998 <raise+0xc>)
 800698e:	4601      	mov	r1, r0
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f7ff bfd3 	b.w	800693c <_raise_r>
 8006996:	bf00      	nop
 8006998:	20000018 	.word	0x20000018

0800699c <_kill_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_kill_r+0x20>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	f7fd f851 	bl	8003a50 <_kill>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d102      	bne.n	80069b8 <_kill_r+0x1c>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	b103      	cbz	r3, 80069b8 <_kill_r+0x1c>
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	bd38      	pop	{r3, r4, r5, pc}
 80069ba:	bf00      	nop
 80069bc:	20000438 	.word	0x20000438

080069c0 <_getpid_r>:
 80069c0:	f7fd b844 	b.w	8003a4c <_getpid>

080069c4 <__swhatbuf_r>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	460c      	mov	r4, r1
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	b096      	sub	sp, #88	@ 0x58
 80069d0:	4615      	mov	r5, r2
 80069d2:	461e      	mov	r6, r3
 80069d4:	da0a      	bge.n	80069ec <__swhatbuf_r+0x28>
 80069d6:	89a1      	ldrh	r1, [r4, #12]
 80069d8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80069dc:	d113      	bne.n	8006a06 <__swhatbuf_r+0x42>
 80069de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069e2:	2000      	movs	r0, #0
 80069e4:	6031      	str	r1, [r6, #0]
 80069e6:	602a      	str	r2, [r5, #0]
 80069e8:	b016      	add	sp, #88	@ 0x58
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	466a      	mov	r2, sp
 80069ee:	f000 f847 	bl	8006a80 <_fstat_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	dbef      	blt.n	80069d6 <__swhatbuf_r+0x12>
 80069f6:	9901      	ldr	r1, [sp, #4]
 80069f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a00:	4259      	negs	r1, r3
 8006a02:	4159      	adcs	r1, r3
 8006a04:	e7eb      	b.n	80069de <__swhatbuf_r+0x1a>
 8006a06:	2100      	movs	r1, #0
 8006a08:	2240      	movs	r2, #64	@ 0x40
 8006a0a:	e7ea      	b.n	80069e2 <__swhatbuf_r+0x1e>

08006a0c <__smakebuf_r>:
 8006a0c:	898b      	ldrh	r3, [r1, #12]
 8006a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a10:	079e      	lsls	r6, r3, #30
 8006a12:	4605      	mov	r5, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	d507      	bpl.n	8006a28 <__smakebuf_r+0x1c>
 8006a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	2301      	movs	r3, #1
 8006a22:	6163      	str	r3, [r4, #20]
 8006a24:	b002      	add	sp, #8
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	ab01      	add	r3, sp, #4
 8006a2a:	466a      	mov	r2, sp
 8006a2c:	f7ff ffca 	bl	80069c4 <__swhatbuf_r>
 8006a30:	9e00      	ldr	r6, [sp, #0]
 8006a32:	4628      	mov	r0, r5
 8006a34:	4631      	mov	r1, r6
 8006a36:	f7fe febb 	bl	80057b0 <_malloc_r>
 8006a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3e:	b938      	cbnz	r0, 8006a50 <__smakebuf_r+0x44>
 8006a40:	059a      	lsls	r2, r3, #22
 8006a42:	d4ef      	bmi.n	8006a24 <__smakebuf_r+0x18>
 8006a44:	f023 0303 	bic.w	r3, r3, #3
 8006a48:	f043 0302 	orr.w	r3, r3, #2
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	e7e3      	b.n	8006a18 <__smakebuf_r+0xc>
 8006a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	6020      	str	r0, [r4, #0]
 8006a5a:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0e0      	beq.n	8006a24 <__smakebuf_r+0x18>
 8006a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f81c 	bl	8006aa4 <_isatty_r>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d0d9      	beq.n	8006a24 <__smakebuf_r+0x18>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	e7d2      	b.n	8006a24 <__smakebuf_r+0x18>
	...

08006a80 <_fstat_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	@ (8006aa0 <_fstat_r+0x20>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f7fd f80e 	bl	8003aae <_fstat>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d102      	bne.n	8006a9c <_fstat_r+0x1c>
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	b103      	cbz	r3, 8006a9c <_fstat_r+0x1c>
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000438 	.word	0x20000438

08006aa4 <_isatty_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	@ (8006ac0 <_isatty_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fd f802 	bl	8003ab8 <_isatty>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_isatty_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_isatty_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000438 	.word	0x20000438

08006ac4 <__udivmoddi4>:
 8006ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	468c      	mov	ip, r1
 8006aca:	468e      	mov	lr, r1
 8006acc:	9e08      	ldr	r6, [sp, #32]
 8006ace:	4615      	mov	r5, r2
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 80d0 	bne.w	8006c7a <__udivmoddi4+0x1b6>
 8006ada:	4572      	cmp	r2, lr
 8006adc:	d947      	bls.n	8006b6e <__udivmoddi4+0xaa>
 8006ade:	fab2 f782 	clz	r7, r2
 8006ae2:	b14f      	cbz	r7, 8006af8 <__udivmoddi4+0x34>
 8006ae4:	f1c7 0320 	rsb	r3, r7, #32
 8006ae8:	fa0e fc07 	lsl.w	ip, lr, r7
 8006aec:	fa20 f303 	lsr.w	r3, r0, r3
 8006af0:	40bd      	lsls	r5, r7
 8006af2:	ea43 0c0c 	orr.w	ip, r3, ip
 8006af6:	40bc      	lsls	r4, r7
 8006af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006afc:	b2a8      	uxth	r0, r5
 8006afe:	fbbc f8fe 	udiv	r8, ip, lr
 8006b02:	0c23      	lsrs	r3, r4, #16
 8006b04:	fb0e cc18 	mls	ip, lr, r8, ip
 8006b08:	fb08 f900 	mul.w	r9, r8, r0
 8006b0c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006b10:	4599      	cmp	r9, r3
 8006b12:	d928      	bls.n	8006b66 <__udivmoddi4+0xa2>
 8006b14:	18eb      	adds	r3, r5, r3
 8006b16:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006b1a:	d204      	bcs.n	8006b26 <__udivmoddi4+0x62>
 8006b1c:	4599      	cmp	r9, r3
 8006b1e:	d902      	bls.n	8006b26 <__udivmoddi4+0x62>
 8006b20:	f1a8 0202 	sub.w	r2, r8, #2
 8006b24:	442b      	add	r3, r5
 8006b26:	eba3 0309 	sub.w	r3, r3, r9
 8006b2a:	b2a4      	uxth	r4, r4
 8006b2c:	fbb3 fcfe 	udiv	ip, r3, lr
 8006b30:	fb0e 331c 	mls	r3, lr, ip, r3
 8006b34:	fb0c f000 	mul.w	r0, ip, r0
 8006b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006b3c:	42a0      	cmp	r0, r4
 8006b3e:	d914      	bls.n	8006b6a <__udivmoddi4+0xa6>
 8006b40:	192c      	adds	r4, r5, r4
 8006b42:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006b46:	d204      	bcs.n	8006b52 <__udivmoddi4+0x8e>
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d902      	bls.n	8006b52 <__udivmoddi4+0x8e>
 8006b4c:	f1ac 0302 	sub.w	r3, ip, #2
 8006b50:	442c      	add	r4, r5
 8006b52:	1a24      	subs	r4, r4, r0
 8006b54:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8006b58:	b11e      	cbz	r6, 8006b62 <__udivmoddi4+0x9e>
 8006b5a:	40fc      	lsrs	r4, r7
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6034      	str	r4, [r6, #0]
 8006b60:	6073      	str	r3, [r6, #4]
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	4642      	mov	r2, r8
 8006b68:	e7dd      	b.n	8006b26 <__udivmoddi4+0x62>
 8006b6a:	4663      	mov	r3, ip
 8006b6c:	e7f1      	b.n	8006b52 <__udivmoddi4+0x8e>
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	d079      	beq.n	8006c66 <__udivmoddi4+0x1a2>
 8006b72:	fab2 f382 	clz	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03f      	beq.n	8006bfa <__udivmoddi4+0x136>
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f1c1 0320 	rsb	r3, r1, #32
 8006b80:	fa02 f501 	lsl.w	r5, r2, r1
 8006b84:	fa2e f203 	lsr.w	r2, lr, r3
 8006b88:	fa0e fe01 	lsl.w	lr, lr, r1
 8006b8c:	fa20 f303 	lsr.w	r3, r0, r3
 8006b90:	ea43 030e 	orr.w	r3, r3, lr
 8006b94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006b98:	fa00 f401 	lsl.w	r4, r0, r1
 8006b9c:	fbb2 fcfe 	udiv	ip, r2, lr
 8006ba0:	b2af      	uxth	r7, r5
 8006ba2:	fb0e 201c 	mls	r0, lr, ip, r2
 8006ba6:	0c1a      	lsrs	r2, r3, #16
 8006ba8:	fb0c f807 	mul.w	r8, ip, r7
 8006bac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bb0:	4590      	cmp	r8, r2
 8006bb2:	d95a      	bls.n	8006c6a <__udivmoddi4+0x1a6>
 8006bb4:	18aa      	adds	r2, r5, r2
 8006bb6:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006bba:	d204      	bcs.n	8006bc6 <__udivmoddi4+0x102>
 8006bbc:	4590      	cmp	r8, r2
 8006bbe:	d902      	bls.n	8006bc6 <__udivmoddi4+0x102>
 8006bc0:	f1ac 0002 	sub.w	r0, ip, #2
 8006bc4:	442a      	add	r2, r5
 8006bc6:	eba2 0208 	sub.w	r2, r2, r8
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	fbb2 fcfe 	udiv	ip, r2, lr
 8006bd0:	fb0e 221c 	mls	r2, lr, ip, r2
 8006bd4:	fb0c f707 	mul.w	r7, ip, r7
 8006bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bdc:	429f      	cmp	r7, r3
 8006bde:	d946      	bls.n	8006c6e <__udivmoddi4+0x1aa>
 8006be0:	18eb      	adds	r3, r5, r3
 8006be2:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8006be6:	d204      	bcs.n	8006bf2 <__udivmoddi4+0x12e>
 8006be8:	429f      	cmp	r7, r3
 8006bea:	d902      	bls.n	8006bf2 <__udivmoddi4+0x12e>
 8006bec:	f1ac 0202 	sub.w	r2, ip, #2
 8006bf0:	442b      	add	r3, r5
 8006bf2:	1bdb      	subs	r3, r3, r7
 8006bf4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bf8:	e002      	b.n	8006c00 <__udivmoddi4+0x13c>
 8006bfa:	ebae 0302 	sub.w	r3, lr, r2
 8006bfe:	2201      	movs	r2, #1
 8006c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006c04:	b2af      	uxth	r7, r5
 8006c06:	fbb3 fcfe 	udiv	ip, r3, lr
 8006c0a:	0c20      	lsrs	r0, r4, #16
 8006c0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8006c10:	fb0c f807 	mul.w	r8, ip, r7
 8006c14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8006c18:	4598      	cmp	r8, r3
 8006c1a:	d92a      	bls.n	8006c72 <__udivmoddi4+0x1ae>
 8006c1c:	18eb      	adds	r3, r5, r3
 8006c1e:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006c22:	d204      	bcs.n	8006c2e <__udivmoddi4+0x16a>
 8006c24:	4598      	cmp	r8, r3
 8006c26:	d902      	bls.n	8006c2e <__udivmoddi4+0x16a>
 8006c28:	f1ac 0002 	sub.w	r0, ip, #2
 8006c2c:	442b      	add	r3, r5
 8006c2e:	eba3 0308 	sub.w	r3, r3, r8
 8006c32:	b2a4      	uxth	r4, r4
 8006c34:	fbb3 fcfe 	udiv	ip, r3, lr
 8006c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8006c3c:	fb0c f707 	mul.w	r7, ip, r7
 8006c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006c44:	42a7      	cmp	r7, r4
 8006c46:	d916      	bls.n	8006c76 <__udivmoddi4+0x1b2>
 8006c48:	192c      	adds	r4, r5, r4
 8006c4a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006c4e:	d204      	bcs.n	8006c5a <__udivmoddi4+0x196>
 8006c50:	42a7      	cmp	r7, r4
 8006c52:	d902      	bls.n	8006c5a <__udivmoddi4+0x196>
 8006c54:	f1ac 0302 	sub.w	r3, ip, #2
 8006c58:	442c      	add	r4, r5
 8006c5a:	1be4      	subs	r4, r4, r7
 8006c5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006c60:	460f      	mov	r7, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	e778      	b.n	8006b58 <__udivmoddi4+0x94>
 8006c66:	211f      	movs	r1, #31
 8006c68:	e788      	b.n	8006b7c <__udivmoddi4+0xb8>
 8006c6a:	4660      	mov	r0, ip
 8006c6c:	e7ab      	b.n	8006bc6 <__udivmoddi4+0x102>
 8006c6e:	4662      	mov	r2, ip
 8006c70:	e7bf      	b.n	8006bf2 <__udivmoddi4+0x12e>
 8006c72:	4660      	mov	r0, ip
 8006c74:	e7db      	b.n	8006c2e <__udivmoddi4+0x16a>
 8006c76:	4663      	mov	r3, ip
 8006c78:	e7ef      	b.n	8006c5a <__udivmoddi4+0x196>
 8006c7a:	4573      	cmp	r3, lr
 8006c7c:	d906      	bls.n	8006c8c <__udivmoddi4+0x1c8>
 8006c7e:	b916      	cbnz	r6, 8006c86 <__udivmoddi4+0x1c2>
 8006c80:	2100      	movs	r1, #0
 8006c82:	4608      	mov	r0, r1
 8006c84:	e76d      	b.n	8006b62 <__udivmoddi4+0x9e>
 8006c86:	e9c6 0e00 	strd	r0, lr, [r6]
 8006c8a:	e7f9      	b.n	8006c80 <__udivmoddi4+0x1bc>
 8006c8c:	fab3 f783 	clz	r7, r3
 8006c90:	b987      	cbnz	r7, 8006cb4 <__udivmoddi4+0x1f0>
 8006c92:	4573      	cmp	r3, lr
 8006c94:	d301      	bcc.n	8006c9a <__udivmoddi4+0x1d6>
 8006c96:	4282      	cmp	r2, r0
 8006c98:	d807      	bhi.n	8006caa <__udivmoddi4+0x1e6>
 8006c9a:	1a84      	subs	r4, r0, r2
 8006c9c:	eb6e 0303 	sbc.w	r3, lr, r3
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	469c      	mov	ip, r3
 8006ca4:	b91e      	cbnz	r6, 8006cae <__udivmoddi4+0x1ea>
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	e75b      	b.n	8006b62 <__udivmoddi4+0x9e>
 8006caa:	4638      	mov	r0, r7
 8006cac:	e7fa      	b.n	8006ca4 <__udivmoddi4+0x1e0>
 8006cae:	e9c6 4c00 	strd	r4, ip, [r6]
 8006cb2:	e7f8      	b.n	8006ca6 <__udivmoddi4+0x1e2>
 8006cb4:	f1c7 0c20 	rsb	ip, r7, #32
 8006cb8:	40bb      	lsls	r3, r7
 8006cba:	fa22 f50c 	lsr.w	r5, r2, ip
 8006cbe:	431d      	orrs	r5, r3
 8006cc0:	fa20 f10c 	lsr.w	r1, r0, ip
 8006cc4:	fa2e f30c 	lsr.w	r3, lr, ip
 8006cc8:	fa0e fe07 	lsl.w	lr, lr, r7
 8006ccc:	ea41 010e 	orr.w	r1, r1, lr
 8006cd0:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8006cd4:	fa00 f407 	lsl.w	r4, r0, r7
 8006cd8:	fbb3 f8f9 	udiv	r8, r3, r9
 8006cdc:	fa1f fe85 	uxth.w	lr, r5
 8006ce0:	fb09 3018 	mls	r0, r9, r8, r3
 8006ce4:	0c0b      	lsrs	r3, r1, #16
 8006ce6:	fb08 fa0e 	mul.w	sl, r8, lr
 8006cea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cee:	459a      	cmp	sl, r3
 8006cf0:	fa02 f207 	lsl.w	r2, r2, r7
 8006cf4:	d940      	bls.n	8006d78 <__udivmoddi4+0x2b4>
 8006cf6:	18eb      	adds	r3, r5, r3
 8006cf8:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006cfc:	d204      	bcs.n	8006d08 <__udivmoddi4+0x244>
 8006cfe:	459a      	cmp	sl, r3
 8006d00:	d902      	bls.n	8006d08 <__udivmoddi4+0x244>
 8006d02:	f1a8 0002 	sub.w	r0, r8, #2
 8006d06:	442b      	add	r3, r5
 8006d08:	eba3 030a 	sub.w	r3, r3, sl
 8006d0c:	b289      	uxth	r1, r1
 8006d0e:	fbb3 f8f9 	udiv	r8, r3, r9
 8006d12:	fb09 3318 	mls	r3, r9, r8, r3
 8006d16:	fb08 fe0e 	mul.w	lr, r8, lr
 8006d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006d1e:	458e      	cmp	lr, r1
 8006d20:	d92c      	bls.n	8006d7c <__udivmoddi4+0x2b8>
 8006d22:	1869      	adds	r1, r5, r1
 8006d24:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006d28:	d204      	bcs.n	8006d34 <__udivmoddi4+0x270>
 8006d2a:	458e      	cmp	lr, r1
 8006d2c:	d902      	bls.n	8006d34 <__udivmoddi4+0x270>
 8006d2e:	f1a8 0302 	sub.w	r3, r8, #2
 8006d32:	4429      	add	r1, r5
 8006d34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006d38:	fba0 9802 	umull	r9, r8, r0, r2
 8006d3c:	eba1 010e 	sub.w	r1, r1, lr
 8006d40:	4541      	cmp	r1, r8
 8006d42:	46ce      	mov	lr, r9
 8006d44:	4643      	mov	r3, r8
 8006d46:	d302      	bcc.n	8006d4e <__udivmoddi4+0x28a>
 8006d48:	d106      	bne.n	8006d58 <__udivmoddi4+0x294>
 8006d4a:	454c      	cmp	r4, r9
 8006d4c:	d204      	bcs.n	8006d58 <__udivmoddi4+0x294>
 8006d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8006d52:	eb68 0305 	sbc.w	r3, r8, r5
 8006d56:	3801      	subs	r0, #1
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	d0a4      	beq.n	8006ca6 <__udivmoddi4+0x1e2>
 8006d5c:	ebb4 020e 	subs.w	r2, r4, lr
 8006d60:	eb61 0103 	sbc.w	r1, r1, r3
 8006d64:	fa01 fc0c 	lsl.w	ip, r1, ip
 8006d68:	fa22 f307 	lsr.w	r3, r2, r7
 8006d6c:	ea4c 0303 	orr.w	r3, ip, r3
 8006d70:	40f9      	lsrs	r1, r7
 8006d72:	e9c6 3100 	strd	r3, r1, [r6]
 8006d76:	e796      	b.n	8006ca6 <__udivmoddi4+0x1e2>
 8006d78:	4640      	mov	r0, r8
 8006d7a:	e7c5      	b.n	8006d08 <__udivmoddi4+0x244>
 8006d7c:	4643      	mov	r3, r8
 8006d7e:	e7d9      	b.n	8006d34 <__udivmoddi4+0x270>

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
