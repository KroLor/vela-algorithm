
build/debug/Vela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08006d80  08006d80  00007d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007424  08007424  00008424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  0800742c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  200001d4  08007600  000091d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000444  08007600  00009444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f95  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008aa7  00000000  00000000  0003b199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001978  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013e5  00000000  00000000  000455b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cbc0  00000000  00000000  0004699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006f4b  00000000  00000000  0006355d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000003c  00000000  00000000  0006a4a8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003de8  00000000  00000000  0006a4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000132b5  00000000  00000000  0006e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000189  00000000  00000000  00081581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_ldivmod>:
 8000b78:	b97b      	cbnz	r3, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7a:	b972      	cbnz	r2, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bfbe      	ittt	lt
 8000b80:	2000      	movlt	r0, #0
 8000b82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b86:	e006      	blt.n	8000b96 <__aeabi_ldivmod+0x1e>
 8000b88:	bf08      	it	eq
 8000b8a:	2800      	cmpeq	r0, #0
 8000b8c:	bf1c      	itt	ne
 8000b8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b92:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b96:	f000 b857 	b.w	8000c48 <__aeabi_idiv0>
 8000b9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	db09      	blt.n	8000bba <__aeabi_ldivmod+0x42>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db1a      	blt.n	8000be0 <__aeabi_ldivmod+0x68>
 8000baa:	f005 ff7f 	bl	8006aac <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4770      	bx	lr
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db1b      	blt.n	8000bfc <__aeabi_ldivmod+0x84>
 8000bc4:	f005 ff72 	bl	8006aac <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	f005 ff61 	bl	8006aac <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfa:	4770      	bx	lr
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	f005 ff53 	bl	8006aac <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 b80c 	b.w	8000c48 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f005 ff38 	bl	8006aac <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__do_global_dtors_aux>:
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4c05      	ldr	r4, [pc, #20]	@ (8000c64 <__do_global_dtors_aux+0x18>)
 8000c50:	7823      	ldrb	r3, [r4, #0]
 8000c52:	b933      	cbnz	r3, 8000c62 <__do_global_dtors_aux+0x16>
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__do_global_dtors_aux+0x1c>)
 8000c56:	b113      	cbz	r3, 8000c5e <__do_global_dtors_aux+0x12>
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <__do_global_dtors_aux+0x20>)
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	2301      	movs	r3, #1
 8000c60:	7023      	strb	r3, [r4, #0]
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	200001d4 	.word	0x200001d4
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	08006d68 	.word	0x08006d68

08000c70 <frame_dummy>:
 8000c70:	b508      	push	{r3, lr}
 8000c72:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <frame_dummy+0x10>)
 8000c74:	b11b      	cbz	r3, 8000c7e <frame_dummy+0xe>
 8000c76:	4903      	ldr	r1, [pc, #12]	@ (8000c84 <frame_dummy+0x14>)
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <frame_dummy+0x18>)
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	08006d68 	.word	0x08006d68

08000c8c <check_acc_identity>:
#include "string.h"

const uint8_t dev_address = 0b11010100; //адрес устройства по линии I2C

short check_acc_identity()
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	b092      	sub	sp, #72	@ 0x48
	uint16_t register_address = 0x0F; //Адрес регистра в котором хранится значение ID
	uint8_t data; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, register_address, I2C_MEMADD_SIZE_8BIT, &data, Size_, Timeout_), "WHO AM I");
 8000c90:	23ff      	movs	r3, #255	@ 0xff
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2301      	movs	r3, #1
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8000c9c:	9200      	str	r2, [sp, #0]
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	21d4      	movs	r1, #212	@ 0xd4
 8000ca2:	4817      	ldr	r0, [pc, #92]	@ (8000d00 <check_acc_identity+0x74>)
 8000ca4:	f001 fc2a 	bl	80024fc <HAL_I2C_Mem_Read>
 8000ca8:	4916      	ldr	r1, [pc, #88]	@ (8000d04 <check_acc_identity+0x78>)
 8000caa:	f000 fb1d 	bl	80012e8 <send_reg_log>
	if (data == 0x69)
 8000cae:	f89d 3047 	ldrb.w	r3, [sp, #71]	@ 0x47
 8000cb2:	2b69      	cmp	r3, #105	@ 0x69
 8000cb4:	d102      	bne.n	8000cbc <check_acc_identity+0x30>
	{
        //successfuly read register
        return 1;
 8000cb6:	2001      	movs	r0, #1
	{
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
		send_message(buffer, PRIORITY_HIGH);
		return 0;
    }
}
 8000cb8:	b012      	add	sp, #72	@ 0x48
 8000cba:	bd10      	pop	{r4, pc}
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 8000cbc:	f10d 0c14 	add.w	ip, sp, #20
 8000cc0:	4c11      	ldr	r4, [pc, #68]	@ (8000d08 <check_acc_identity+0x7c>)
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ccc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000cd0:	f82c 2b02 	strh.w	r2, [ip], #2
 8000cd4:	0c12      	lsrs	r2, r2, #16
 8000cd6:	f88c 2000 	strb.w	r2, [ip]
 8000cda:	2400      	movs	r4, #0
 8000cdc:	f8cd 402f 	str.w	r4, [sp, #47]	@ 0x2f
 8000ce0:	f8cd 4033 	str.w	r4, [sp, #51]	@ 0x33
 8000ce4:	f8cd 4037 	str.w	r4, [sp, #55]	@ 0x37
 8000ce8:	f8cd 403b 	str.w	r4, [sp, #59]	@ 0x3b
 8000cec:	f8cd 403f 	str.w	r4, [sp, #63]	@ 0x3f
 8000cf0:	f8cd 4042 	str.w	r4, [sp, #66]	@ 0x42
		send_message(buffer, PRIORITY_HIGH);
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	a805      	add	r0, sp, #20
 8000cf8:	f000 fae8 	bl	80012cc <send_message>
		return 0;
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	e7db      	b.n	8000cb8 <check_acc_identity+0x2c>
 8000d00:	2000020c 	.word	0x2000020c
 8000d04:	08006ea4 	.word	0x08006ea4
 8000d08:	08006d80 	.word	0x08006d80

08000d0c <acc_power_on>:

short acc_power_on()
{
 8000d0c:	b500      	push	{lr}
 8000d0e:	b087      	sub	sp, #28
	uint8_t acc_power_mode = 0b01000100;
 8000d10:	2344      	movs	r3, #68	@ 0x44
 8000d12:	f88d 3017 	strb.w	r3, [sp, #23]
	send_reg_log(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, 0xFF), "ctrl_meas");
 8000d16:	23ff      	movs	r3, #255	@ 0xff
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	f10d 0217 	add.w	r2, sp, #23
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	2210      	movs	r2, #16
 8000d26:	21d4      	movs	r1, #212	@ 0xd4
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <acc_power_on+0x30>)
 8000d2a:	f001 fb37 	bl	800239c <HAL_I2C_Mem_Write>
 8000d2e:	4904      	ldr	r1, [pc, #16]	@ (8000d40 <acc_power_on+0x34>)
 8000d30:	f000 fada 	bl	80012e8 <send_reg_log>

    return 0;
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	b007      	add	sp, #28
 8000d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	08006eb0 	.word	0x08006eb0

08000d44 <check_barometer_identity>:
    int32_t actual_temp = bmp280_compensate_T_int32(temp_raw_32);
	return actual_temp;
}

short check_barometer_identity()
{
 8000d44:	b500      	push	{lr}
 8000d46:	b087      	sub	sp, #28
	uint16_t Register_ID = 0xD0; //Адрес регистра в котором хранится значение ID
	uint8_t Data[1]; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	HAL_I2C_Mem_Read(&hi2c1, Address_Bmp280, Register_ID, I2C_MEMADD_SIZE_8BIT, Data, Size_, Timeout_);
 8000d48:	23ff      	movs	r3, #255	@ 0xff
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	aa05      	add	r2, sp, #20
 8000d52:	9200      	str	r2, [sp, #0]
 8000d54:	22d0      	movs	r2, #208	@ 0xd0
 8000d56:	21ec      	movs	r1, #236	@ 0xec
 8000d58:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <check_barometer_identity+0x30>)
 8000d5a:	f001 fbcf 	bl	80024fc <HAL_I2C_Mem_Read>
	if (Data[0] == 0x58)
 8000d5e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000d62:	2b58      	cmp	r3, #88	@ 0x58
 8000d64:	d003      	beq.n	8000d6e <check_barometer_identity+0x2a>
	{
        return 1;
	} else
	{
        return 0;
 8000d66:	2000      	movs	r0, #0
	}

    return 0;
}
 8000d68:	b007      	add	sp, #28
 8000d6a:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1;
 8000d6e:	2001      	movs	r0, #1
 8000d70:	e7fa      	b.n	8000d68 <check_barometer_identity+0x24>
 8000d72:	bf00      	nop
 8000d74:	2000020c 	.word	0x2000020c

08000d78 <read_dig_variables>:

void read_dig_variables()
{
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	b084      	sub	sp, #16
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T1, 2, 0xFF), "dig_T1");
 8000d7c:	4c50      	ldr	r4, [pc, #320]	@ (8000ec0 <read_dig_variables+0x148>)
 8000d7e:	26ff      	movs	r6, #255	@ 0xff
 8000d80:	9602      	str	r6, [sp, #8]
 8000d82:	2502      	movs	r5, #2
 8000d84:	9501      	str	r5, [sp, #4]
 8000d86:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <read_dig_variables+0x14c>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	2288      	movs	r2, #136	@ 0x88
 8000d8e:	21ec      	movs	r1, #236	@ 0xec
 8000d90:	4620      	mov	r0, r4
 8000d92:	f001 fbb3 	bl	80024fc <HAL_I2C_Mem_Read>
 8000d96:	494c      	ldr	r1, [pc, #304]	@ (8000ec8 <read_dig_variables+0x150>)
 8000d98:	f000 faa6 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T2, 2, 0xFF), "dig_T2");
 8000d9c:	9602      	str	r6, [sp, #8]
 8000d9e:	9501      	str	r5, [sp, #4]
 8000da0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ecc <read_dig_variables+0x154>)
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	228a      	movs	r2, #138	@ 0x8a
 8000da8:	21ec      	movs	r1, #236	@ 0xec
 8000daa:	4620      	mov	r0, r4
 8000dac:	f001 fba6 	bl	80024fc <HAL_I2C_Mem_Read>
 8000db0:	4947      	ldr	r1, [pc, #284]	@ (8000ed0 <read_dig_variables+0x158>)
 8000db2:	f000 fa99 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T3, 2, 0xFF), "dig_T3");
 8000db6:	9602      	str	r6, [sp, #8]
 8000db8:	9501      	str	r5, [sp, #4]
 8000dba:	4b46      	ldr	r3, [pc, #280]	@ (8000ed4 <read_dig_variables+0x15c>)
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	228c      	movs	r2, #140	@ 0x8c
 8000dc2:	21ec      	movs	r1, #236	@ 0xec
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f001 fb99 	bl	80024fc <HAL_I2C_Mem_Read>
 8000dca:	4943      	ldr	r1, [pc, #268]	@ (8000ed8 <read_dig_variables+0x160>)
 8000dcc:	f000 fa8c 	bl	80012e8 <send_reg_log>
  
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P1, 2, 0xFF), "dig_P1");
 8000dd0:	9602      	str	r6, [sp, #8]
 8000dd2:	9501      	str	r5, [sp, #4]
 8000dd4:	4b41      	ldr	r3, [pc, #260]	@ (8000edc <read_dig_variables+0x164>)
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	228e      	movs	r2, #142	@ 0x8e
 8000ddc:	21ec      	movs	r1, #236	@ 0xec
 8000dde:	4620      	mov	r0, r4
 8000de0:	f001 fb8c 	bl	80024fc <HAL_I2C_Mem_Read>
 8000de4:	493e      	ldr	r1, [pc, #248]	@ (8000ee0 <read_dig_variables+0x168>)
 8000de6:	f000 fa7f 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x90, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P2, 2, 0xFF), "dig_P2");
 8000dea:	9602      	str	r6, [sp, #8]
 8000dec:	9501      	str	r5, [sp, #4]
 8000dee:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee4 <read_dig_variables+0x16c>)
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	2290      	movs	r2, #144	@ 0x90
 8000df6:	21ec      	movs	r1, #236	@ 0xec
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f001 fb7f 	bl	80024fc <HAL_I2C_Mem_Read>
 8000dfe:	493a      	ldr	r1, [pc, #232]	@ (8000ee8 <read_dig_variables+0x170>)
 8000e00:	f000 fa72 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x92, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P3, 2, 0xFF), "dig_P3");
 8000e04:	9602      	str	r6, [sp, #8]
 8000e06:	9501      	str	r5, [sp, #4]
 8000e08:	4b38      	ldr	r3, [pc, #224]	@ (8000eec <read_dig_variables+0x174>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2292      	movs	r2, #146	@ 0x92
 8000e10:	21ec      	movs	r1, #236	@ 0xec
 8000e12:	4620      	mov	r0, r4
 8000e14:	f001 fb72 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e18:	4935      	ldr	r1, [pc, #212]	@ (8000ef0 <read_dig_variables+0x178>)
 8000e1a:	f000 fa65 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x94, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P4, 2, 0xFF), "dig_P4");
 8000e1e:	9602      	str	r6, [sp, #8]
 8000e20:	9501      	str	r5, [sp, #4]
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <read_dig_variables+0x17c>)
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	2294      	movs	r2, #148	@ 0x94
 8000e2a:	21ec      	movs	r1, #236	@ 0xec
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f001 fb65 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e32:	4931      	ldr	r1, [pc, #196]	@ (8000ef8 <read_dig_variables+0x180>)
 8000e34:	f000 fa58 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x96, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P5, 2, 0xFF), "dig_P5");
 8000e38:	9602      	str	r6, [sp, #8]
 8000e3a:	9501      	str	r5, [sp, #4]
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <read_dig_variables+0x184>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2296      	movs	r2, #150	@ 0x96
 8000e44:	21ec      	movs	r1, #236	@ 0xec
 8000e46:	4620      	mov	r0, r4
 8000e48:	f001 fb58 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e4c:	492c      	ldr	r1, [pc, #176]	@ (8000f00 <read_dig_variables+0x188>)
 8000e4e:	f000 fa4b 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x98, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P6, 2, 0xFF), "dig_P6");
 8000e52:	9602      	str	r6, [sp, #8]
 8000e54:	9501      	str	r5, [sp, #4]
 8000e56:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <read_dig_variables+0x18c>)
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2298      	movs	r2, #152	@ 0x98
 8000e5e:	21ec      	movs	r1, #236	@ 0xec
 8000e60:	4620      	mov	r0, r4
 8000e62:	f001 fb4b 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e66:	4928      	ldr	r1, [pc, #160]	@ (8000f08 <read_dig_variables+0x190>)
 8000e68:	f000 fa3e 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P7, 2, 0xFF), "dig_P7");
 8000e6c:	9602      	str	r6, [sp, #8]
 8000e6e:	9501      	str	r5, [sp, #4]
 8000e70:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <read_dig_variables+0x194>)
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2301      	movs	r3, #1
 8000e76:	229a      	movs	r2, #154	@ 0x9a
 8000e78:	21ec      	movs	r1, #236	@ 0xec
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f001 fb3e 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e80:	4923      	ldr	r1, [pc, #140]	@ (8000f10 <read_dig_variables+0x198>)
 8000e82:	f000 fa31 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P8, 2, 0xFF), "dig_P8");
 8000e86:	9602      	str	r6, [sp, #8]
 8000e88:	9501      	str	r5, [sp, #4]
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <read_dig_variables+0x19c>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	229c      	movs	r2, #156	@ 0x9c
 8000e92:	21ec      	movs	r1, #236	@ 0xec
 8000e94:	4620      	mov	r0, r4
 8000e96:	f001 fb31 	bl	80024fc <HAL_I2C_Mem_Read>
 8000e9a:	491f      	ldr	r1, [pc, #124]	@ (8000f18 <read_dig_variables+0x1a0>)
 8000e9c:	f000 fa24 	bl	80012e8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P9, 2, 0xFF), "dig_P9");
 8000ea0:	9602      	str	r6, [sp, #8]
 8000ea2:	9501      	str	r5, [sp, #4]
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <read_dig_variables+0x1a4>)
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	229e      	movs	r2, #158	@ 0x9e
 8000eac:	21ec      	movs	r1, #236	@ 0xec
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f001 fb24 	bl	80024fc <HAL_I2C_Mem_Read>
 8000eb4:	491a      	ldr	r1, [pc, #104]	@ (8000f20 <read_dig_variables+0x1a8>)
 8000eb6:	f000 fa17 	bl	80012e8 <send_reg_log>
}
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000020c 	.word	0x2000020c
 8000ec4:	2000020a 	.word	0x2000020a
 8000ec8:	08006ebc 	.word	0x08006ebc
 8000ecc:	20000208 	.word	0x20000208
 8000ed0:	08006ec8 	.word	0x08006ec8
 8000ed4:	20000206 	.word	0x20000206
 8000ed8:	08006ed0 	.word	0x08006ed0
 8000edc:	20000204 	.word	0x20000204
 8000ee0:	08006ed8 	.word	0x08006ed8
 8000ee4:	20000202 	.word	0x20000202
 8000ee8:	08006ee0 	.word	0x08006ee0
 8000eec:	20000200 	.word	0x20000200
 8000ef0:	08006ee8 	.word	0x08006ee8
 8000ef4:	200001fe 	.word	0x200001fe
 8000ef8:	08006ef0 	.word	0x08006ef0
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	08006ef8 	.word	0x08006ef8
 8000f04:	200001fa 	.word	0x200001fa
 8000f08:	08006f00 	.word	0x08006f00
 8000f0c:	200001f8 	.word	0x200001f8
 8000f10:	08006f08 	.word	0x08006f08
 8000f14:	200001f6 	.word	0x200001f6
 8000f18:	08006f10 	.word	0x08006f10
 8000f1c:	200001f4 	.word	0x200001f4
 8000f20:	08006f18 	.word	0x08006f18

08000f24 <barometer_power_on>:

short barometer_power_on()
{
 8000f24:	b510      	push	{r4, lr}
 8000f26:	b09e      	sub	sp, #120	@ 0x78
	char buff[100] = "/\/\/\/barometer_power_on\/\/\/";
 8000f28:	4c18      	ldr	r4, [pc, #96]	@ (8000f8c <barometer_power_on+0x68>)
 8000f2a:	f10d 0c14 	add.w	ip, sp, #20
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	6861      	ldr	r1, [r4, #4]
 8000f32:	68a2      	ldr	r2, [r4, #8]
 8000f34:	68e3      	ldr	r3, [r4, #12]
 8000f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000f3a:	6920      	ldr	r0, [r4, #16]
 8000f3c:	6961      	ldr	r1, [r4, #20]
 8000f3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000f42:	8b23      	ldrh	r3, [r4, #24]
 8000f44:	f8ac 3000 	strh.w	r3, [ip]
 8000f48:	224a      	movs	r2, #74	@ 0x4a
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 8000f50:	f003 fcae 	bl	80048b0 <memset>
	send_message(buff, PRIORITY_HIGH);
 8000f54:	2102      	movs	r1, #2
 8000f56:	a805      	add	r0, sp, #20
 8000f58:	f000 f9b8 	bl	80012cc <send_message>

	read_dig_variables();
 8000f5c:	f7ff ff0c 	bl	8000d78 <read_dig_variables>

	//datasheet page 25, register ctrl_meas
	uint8_t ctrl_meas = 0b01001001;
 8000f60:	2349      	movs	r3, #73	@ 0x49
 8000f62:	f88d 3013 	strb.w	r3, [sp, #19]
	send_reg_log(HAL_I2C_Mem_Write(&hi2c1, 0x76 << 1, 0xF4, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, 1, 0xFF), "ctrl_meas");
 8000f66:	23ff      	movs	r3, #255	@ 0xff
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f10d 0213 	add.w	r2, sp, #19
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	22f4      	movs	r2, #244	@ 0xf4
 8000f76:	21ec      	movs	r1, #236	@ 0xec
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <barometer_power_on+0x6c>)
 8000f7a:	f001 fa0f 	bl	800239c <HAL_I2C_Mem_Write>
 8000f7e:	4905      	ldr	r1, [pc, #20]	@ (8000f94 <barometer_power_on+0x70>)
 8000f80:	f000 f9b2 	bl	80012e8 <send_reg_log>

    return 0;
}
 8000f84:	2000      	movs	r0, #0
 8000f86:	b01e      	add	sp, #120	@ 0x78
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08006f20 	.word	0x08006f20
 8000f90:	2000020c 	.word	0x2000020c
 8000f94:	08006eb0 	.word	0x08006eb0

08000f98 <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <bmp280_compensate_T_int32+0x3c>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	005a      	lsls	r2, r3, #1
 8000f9e:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <bmp280_compensate_T_int32+0x40>)
 8000fa4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000fa8:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000fac:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 8000fb0:	fb00 f000 	mul.w	r0, r0, r0
	>> 12) *
 8000fb4:	1300      	asrs	r0, r0, #12
	((int32_t)dig_T3)) >> 14;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <bmp280_compensate_T_int32+0x44>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
	>> 12) *
 8000fbc:	fb03 f000 	mul.w	r0, r3, r0
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000fc0:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 8000fc2:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <bmp280_compensate_T_int32+0x48>)
 8000fc8:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fce:	3080      	adds	r0, #128	@ 0x80
	return T;
}
 8000fd0:	1200      	asrs	r0, r0, #8
 8000fd2:	4770      	bx	lr
 8000fd4:	2000020a 	.word	0x2000020a
 8000fd8:	20000208 	.word	0x20000208
 8000fdc:	20000206 	.word	0x20000206
 8000fe0:	200001f0 	.word	0x200001f0

08000fe4 <read_temp>:
{
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	b086      	sub	sp, #24
    temp_raw[0] = temp_raw[1] = temp_raw[2]  = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f88d 3016 	strb.w	r3, [sp, #22]
 8000fee:	f88d 3015 	strb.w	r3, [sp, #21]
 8000ff2:	f88d 3014 	strb.w	r3, [sp, #20]
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFA, I2C_MEMADD_SIZE_8BIT, temp_raw, 1, 0xFF), "temp_msb");
 8000ff6:	4d1d      	ldr	r5, [pc, #116]	@ (800106c <read_temp+0x88>)
 8000ff8:	26ff      	movs	r6, #255	@ 0xff
 8000ffa:	9602      	str	r6, [sp, #8]
 8000ffc:	2401      	movs	r4, #1
 8000ffe:	9401      	str	r4, [sp, #4]
 8001000:	ab05      	add	r3, sp, #20
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	4623      	mov	r3, r4
 8001006:	22fa      	movs	r2, #250	@ 0xfa
 8001008:	21ec      	movs	r1, #236	@ 0xec
 800100a:	4628      	mov	r0, r5
 800100c:	f001 fa76 	bl	80024fc <HAL_I2C_Mem_Read>
 8001010:	4917      	ldr	r1, [pc, #92]	@ (8001070 <read_temp+0x8c>)
 8001012:	f000 f969 	bl	80012e8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFB, I2C_MEMADD_SIZE_8BIT, temp_raw+1, 1, 0xFF), "temp_lsb");
 8001016:	9602      	str	r6, [sp, #8]
 8001018:	9401      	str	r4, [sp, #4]
 800101a:	f10d 0315 	add.w	r3, sp, #21
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4623      	mov	r3, r4
 8001022:	22fb      	movs	r2, #251	@ 0xfb
 8001024:	21ec      	movs	r1, #236	@ 0xec
 8001026:	4628      	mov	r0, r5
 8001028:	f001 fa68 	bl	80024fc <HAL_I2C_Mem_Read>
 800102c:	4911      	ldr	r1, [pc, #68]	@ (8001074 <read_temp+0x90>)
 800102e:	f000 f95b 	bl	80012e8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFC, I2C_MEMADD_SIZE_8BIT, temp_raw+2, 1, 0xFF), "temp_xlsb");
 8001032:	9602      	str	r6, [sp, #8]
 8001034:	9401      	str	r4, [sp, #4]
 8001036:	f10d 0316 	add.w	r3, sp, #22
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4623      	mov	r3, r4
 800103e:	22fc      	movs	r2, #252	@ 0xfc
 8001040:	21ec      	movs	r1, #236	@ 0xec
 8001042:	4628      	mov	r0, r5
 8001044:	f001 fa5a 	bl	80024fc <HAL_I2C_Mem_Read>
 8001048:	490b      	ldr	r1, [pc, #44]	@ (8001078 <read_temp+0x94>)
 800104a:	f000 f94d 	bl	80012e8 <send_reg_log>
    int32_t temp_raw_32 = (int32_t) ( ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | ((uint32_t)temp_raw[2] >> 4) );
 800104e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001052:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800105c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    int32_t actual_temp = bmp280_compensate_T_int32(temp_raw_32);
 8001060:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 8001064:	f7ff ff98 	bl	8000f98 <bmp280_compensate_T_int32>
}
 8001068:	b006      	add	sp, #24
 800106a:	bd70      	pop	{r4, r5, r6, pc}
 800106c:	2000020c 	.word	0x2000020c
 8001070:	08006f3c 	.word	0x08006f3c
 8001074:	08006f48 	.word	0x08006f48
 8001078:	08006f54 	.word	0x08006f54

0800107c <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800107e:	4b66      	ldr	r3, [pc, #408]	@ (8001218 <bmp280_compensate_P_int64+0x19c>)
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	17cb      	asrs	r3, r1, #31
 8001084:	f5b1 31fa 	subs.w	r1, r1, #128000	@ 0x1f400
 8001088:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
	var2 = var1 * var1 * (int64_t)dig_P6;
 800108c:	fb01 f403 	mul.w	r4, r1, r3
 8001090:	fba1 2601 	umull	r2, r6, r1, r1
 8001094:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8001098:	4c60      	ldr	r4, [pc, #384]	@ (800121c <bmp280_compensate_P_int64+0x1a0>)
 800109a:	f9b4 5000 	ldrsh.w	r5, [r4]
 800109e:	17ec      	asrs	r4, r5, #31
 80010a0:	fb02 f404 	mul.w	r4, r2, r4
 80010a4:	fb05 4406 	mla	r4, r5, r6, r4
 80010a8:	fba2 7505 	umull	r7, r5, r2, r5
 80010ac:	442c      	add	r4, r5
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80010ae:	4d5c      	ldr	r5, [pc, #368]	@ (8001220 <bmp280_compensate_P_int64+0x1a4>)
 80010b0:	f9b5 c000 	ldrsh.w	ip, [r5]
 80010b4:	ea4f 75ec 	mov.w	r5, ip, asr #31
 80010b8:	fb0c fe03 	mul.w	lr, ip, r3
 80010bc:	fb01 ee05 	mla	lr, r1, r5, lr
 80010c0:	fbac c501 	umull	ip, r5, ip, r1
 80010c4:	44ae      	add	lr, r5
 80010c6:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 80010ca:	ea4e 3edc 	orr.w	lr, lr, ip, lsr #15
 80010ce:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 80010d2:	eb1c 0c07 	adds.w	ip, ip, r7
 80010d6:	eb44 040e 	adc.w	r4, r4, lr
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80010da:	4d52      	ldr	r5, [pc, #328]	@ (8001224 <bmp280_compensate_P_int64+0x1a8>)
 80010dc:	f9b5 5000 	ldrsh.w	r5, [r5]
 80010e0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80010e4:	4d50      	ldr	r5, [pc, #320]	@ (8001228 <bmp280_compensate_P_int64+0x1ac>)
 80010e6:	f9b5 e000 	ldrsh.w	lr, [r5]
 80010ea:	ea4f 75ee 	mov.w	r5, lr, asr #31
 80010ee:	fb02 f505 	mul.w	r5, r2, r5
 80010f2:	fb0e 5506 	mla	r5, lr, r6, r5
 80010f6:	fba2 2e0e 	umull	r2, lr, r2, lr
 80010fa:	4475      	add	r5, lr
 80010fc:	0a12      	lsrs	r2, r2, #8
 80010fe:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001102:	4e4a      	ldr	r6, [pc, #296]	@ (800122c <bmp280_compensate_P_int64+0x1b0>)
 8001104:	f9b6 e000 	ldrsh.w	lr, [r6]
 8001108:	ea4f 76ee 	mov.w	r6, lr, asr #31
 800110c:	fb0e f303 	mul.w	r3, lr, r3
 8001110:	fb01 3306 	mla	r3, r1, r6, r3
 8001114:	fbae e101 	umull	lr, r1, lr, r1
 8001118:	440b      	add	r3, r1
 800111a:	031b      	lsls	r3, r3, #12
 800111c:	ea43 531e 	orr.w	r3, r3, lr, lsr #20
 8001120:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 8001124:	eb12 020e 	adds.w	r2, r2, lr
 8001128:	eb43 2325 	adc.w	r3, r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800112c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001130:	493f      	ldr	r1, [pc, #252]	@ (8001230 <bmp280_compensate_P_int64+0x1b4>)
 8001132:	880d      	ldrh	r5, [r1, #0]
 8001134:	fba2 2105 	umull	r2, r1, r2, r5
 8001138:	fb05 1103 	mla	r1, r5, r3, r1
 800113c:	104a      	asrs	r2, r1, #1
 800113e:	17cb      	asrs	r3, r1, #31

	if (var1 == 0)
 8001140:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8001144:	d065      	beq.n	8001212 <bmp280_compensate_P_int64+0x196>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576-adc_P;
 8001146:	f5c0 1e80 	rsb	lr, r0, #1048576	@ 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 800114a:	ea4f 016e 	mov.w	r1, lr, asr #1
 800114e:	ea4f 7ece 	mov.w	lr, lr, lsl #31
 8001152:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001156:	eb61 0404 	sbc.w	r4, r1, r4
 800115a:	eb1e 0c0e 	adds.w	ip, lr, lr
 800115e:	eb44 0104 	adc.w	r1, r4, r4
 8001162:	eb1c 0c0e 	adds.w	ip, ip, lr
 8001166:	eb44 0101 	adc.w	r1, r4, r1
 800116a:	0188      	lsls	r0, r1, #6
 800116c:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8001170:	ea4f 158c 	mov.w	r5, ip, lsl #6
 8001174:	eb1c 0c05 	adds.w	ip, ip, r5
 8001178:	eb41 0100 	adc.w	r1, r1, r0
 800117c:	0089      	lsls	r1, r1, #2
 800117e:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001182:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001186:	eb1c 0c0e 	adds.w	ip, ip, lr
 800118a:	eb44 0101 	adc.w	r1, r4, r1
 800118e:	0089      	lsls	r1, r1, #2
 8001190:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001194:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8001198:	eb10 000e 	adds.w	r0, r0, lr
 800119c:	eb44 0101 	adc.w	r1, r4, r1
 80011a0:	f7ff fcea 	bl	8000b78 <__aeabi_ldivmod>
 80011a4:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80011a6:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <bmp280_compensate_P_int64+0x1b8>)
 80011a8:	f9b2 5000 	ldrsh.w	r5, [r2]
 80011ac:	17ef      	asrs	r7, r5, #31
 80011ae:	0b42      	lsrs	r2, r0, #13
 80011b0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011b4:	134e      	asrs	r6, r1, #13
 80011b6:	fb05 f406 	mul.w	r4, r5, r6
 80011ba:	fb02 4407 	mla	r4, r2, r7, r4
 80011be:	fba5 5702 	umull	r5, r7, r5, r2
 80011c2:	443c      	add	r4, r7
 80011c4:	fb02 f404 	mul.w	r4, r2, r4
 80011c8:	fb05 4406 	mla	r4, r5, r6, r4
 80011cc:	fba2 2505 	umull	r2, r5, r2, r5
 80011d0:	442c      	add	r4, r5
 80011d2:	0e52      	lsrs	r2, r2, #25
 80011d4:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80011d8:	4d17      	ldr	r5, [pc, #92]	@ (8001238 <bmp280_compensate_P_int64+0x1bc>)
 80011da:	f9b5 5000 	ldrsh.w	r5, [r5]
 80011de:	17ef      	asrs	r7, r5, #31
 80011e0:	fb05 f601 	mul.w	r6, r5, r1
 80011e4:	fb07 6000 	mla	r0, r7, r0, r6
 80011e8:	fba5 5603 	umull	r5, r6, r5, r3
 80011ec:	4430      	add	r0, r6
 80011ee:	0ced      	lsrs	r5, r5, #19
 80011f0:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80011f4:	189b      	adds	r3, r3, r2
 80011f6:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 80011fa:	195b      	adds	r3, r3, r5
 80011fc:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 8001200:	0a18      	lsrs	r0, r3, #8
 8001202:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <bmp280_compensate_P_int64+0x1c0>)
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 800120c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8001210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0; // avoid exception caused by division by zero
 8001212:	2000      	movs	r0, #0
 8001214:	e7fc      	b.n	8001210 <bmp280_compensate_P_int64+0x194>
 8001216:	bf00      	nop
 8001218:	200001f0 	.word	0x200001f0
 800121c:	200001fa 	.word	0x200001fa
 8001220:	200001fc 	.word	0x200001fc
 8001224:	200001fe 	.word	0x200001fe
 8001228:	20000200 	.word	0x20000200
 800122c:	20000202 	.word	0x20000202
 8001230:	20000204 	.word	0x20000204
 8001234:	200001f4 	.word	0x200001f4
 8001238:	200001f6 	.word	0x200001f6
 800123c:	200001f8 	.word	0x200001f8

08001240 <read_pressure>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	b086      	sub	sp, #24
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF7, I2C_MEMADD_SIZE_8BIT, pressure_raw, 1, 0xFF), "press_msb");
 8001244:	4d1d      	ldr	r5, [pc, #116]	@ (80012bc <read_pressure+0x7c>)
 8001246:	26ff      	movs	r6, #255	@ 0xff
 8001248:	9602      	str	r6, [sp, #8]
 800124a:	2401      	movs	r4, #1
 800124c:	9401      	str	r4, [sp, #4]
 800124e:	ab05      	add	r3, sp, #20
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4623      	mov	r3, r4
 8001254:	22f7      	movs	r2, #247	@ 0xf7
 8001256:	21ec      	movs	r1, #236	@ 0xec
 8001258:	4628      	mov	r0, r5
 800125a:	f001 f94f 	bl	80024fc <HAL_I2C_Mem_Read>
 800125e:	4918      	ldr	r1, [pc, #96]	@ (80012c0 <read_pressure+0x80>)
 8001260:	f000 f842 	bl	80012e8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF8, I2C_MEMADD_SIZE_8BIT, pressure_raw+1, 1, 0xFF), "press_lsb");
 8001264:	9602      	str	r6, [sp, #8]
 8001266:	9401      	str	r4, [sp, #4]
 8001268:	f10d 0315 	add.w	r3, sp, #21
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4623      	mov	r3, r4
 8001270:	22f8      	movs	r2, #248	@ 0xf8
 8001272:	21ec      	movs	r1, #236	@ 0xec
 8001274:	4628      	mov	r0, r5
 8001276:	f001 f941 	bl	80024fc <HAL_I2C_Mem_Read>
 800127a:	4912      	ldr	r1, [pc, #72]	@ (80012c4 <read_pressure+0x84>)
 800127c:	f000 f834 	bl	80012e8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF9, I2C_MEMADD_SIZE_8BIT, pressure_raw+2, 1, 0xFF), "press_xlsb");
 8001280:	9602      	str	r6, [sp, #8]
 8001282:	9401      	str	r4, [sp, #4]
 8001284:	f10d 0316 	add.w	r3, sp, #22
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4623      	mov	r3, r4
 800128c:	22f9      	movs	r2, #249	@ 0xf9
 800128e:	21ec      	movs	r1, #236	@ 0xec
 8001290:	4628      	mov	r0, r5
 8001292:	f001 f933 	bl	80024fc <HAL_I2C_Mem_Read>
 8001296:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <read_pressure+0x88>)
 8001298:	f000 f826 	bl	80012e8 <send_reg_log>
    int32_t pressure_raw_32 = (int32_t) ( ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | ((uint32_t)pressure_raw[2] >> 4) );
 800129c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80012a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80012aa:	f89d 0016 	ldrb.w	r0, [sp, #22]
    uint32_t actual_pressure = bmp280_compensate_P_int64(pressure_raw_32);
 80012ae:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 80012b2:	f7ff fee3 	bl	800107c <bmp280_compensate_P_int64>
}
 80012b6:	b006      	add	sp, #24
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	bf00      	nop
 80012bc:	2000020c 	.word	0x2000020c
 80012c0:	08006f60 	.word	0x08006f60
 80012c4:	08006f6c 	.word	0x08006f6c
 80012c8:	08006f78 	.word	0x08006f78

080012cc <send_message>:

  send_message(buffer, PRIORITY_LOW);
}

void send_message(char *msg, Msg_Priority priority)
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 0xFF);
 80012d0:	f7fe ffb6 	bl	8000240 <strlen>
 80012d4:	23ff      	movs	r3, #255	@ 0xff
 80012d6:	b282      	uxth	r2, r0
 80012d8:	4621      	mov	r1, r4
 80012da:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <send_message+0x18>)
 80012dc:	f002 fb17 	bl	800390e <HAL_UART_Transmit>
}
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	200002b0 	.word	0x200002b0

080012e8 <send_reg_log>:
{
 80012e8:	b530      	push	{r4, r5, lr}
 80012ea:	b09b      	sub	sp, #108	@ 0x6c
  switch (status)
 80012ec:	2803      	cmp	r0, #3
 80012ee:	d803      	bhi.n	80012f8 <send_reg_log+0x10>
 80012f0:	e8df f000 	tbb	[pc, r0]
 80012f4:	27250429 	.word	0x27250429
 80012f8:	2500      	movs	r5, #0
 80012fa:	e000      	b.n	80012fe <send_reg_log+0x16>
      message = "ERROR";
 80012fc:	4d13      	ldr	r5, [pc, #76]	@ (800134c <send_reg_log+0x64>)
  strcat(buffer, reg);
 80012fe:	ac01      	add	r4, sp, #4
 8001300:	4620      	mov	r0, r4
 8001302:	f003 fadd 	bl	80048c0 <strcat>
  strcat(buffer, ": ");
 8001306:	4620      	mov	r0, r4
 8001308:	f7fe ff9a 	bl	8000240 <strlen>
 800130c:	1822      	adds	r2, r4, r0
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <send_reg_log+0x68>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	5221      	strh	r1, [r4, r0]
 8001316:	7093      	strb	r3, [r2, #2]
  strcat(buffer, message);
 8001318:	4629      	mov	r1, r5
 800131a:	4620      	mov	r0, r4
 800131c:	f003 fad0 	bl	80048c0 <strcat>
  strcat(buffer, "\n\r\0");
 8001320:	4620      	mov	r0, r4
 8001322:	f7fe ff8d 	bl	8000240 <strlen>
 8001326:	1822      	adds	r2, r4, r0
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <send_reg_log+0x6c>)
 800132a:	8819      	ldrh	r1, [r3, #0]
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	5221      	strh	r1, [r4, r0]
 8001330:	7093      	strb	r3, [r2, #2]
  send_message(buffer, PRIORITY_LOW);
 8001332:	2100      	movs	r1, #0
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff ffc9 	bl	80012cc <send_message>
}
 800133a:	b01b      	add	sp, #108	@ 0x6c
 800133c:	bd30      	pop	{r4, r5, pc}
      message = "BUSY";
 800133e:	4d06      	ldr	r5, [pc, #24]	@ (8001358 <send_reg_log+0x70>)
      break;
 8001340:	e7dd      	b.n	80012fe <send_reg_log+0x16>
      message = "TIMEOUT";
 8001342:	4d06      	ldr	r5, [pc, #24]	@ (800135c <send_reg_log+0x74>)
      break;
 8001344:	e7db      	b.n	80012fe <send_reg_log+0x16>
      message = "OK";
 8001346:	4d06      	ldr	r5, [pc, #24]	@ (8001360 <send_reg_log+0x78>)
 8001348:	e7d9      	b.n	80012fe <send_reg_log+0x16>
 800134a:	bf00      	nop
 800134c:	08006f88 	.word	0x08006f88
 8001350:	08006fa0 	.word	0x08006fa0
 8001354:	08006db4 	.word	0x08006db4
 8001358:	08006f90 	.word	0x08006f90
 800135c:	08006f98 	.word	0x08006f98
 8001360:	08006f84 	.word	0x08006f84

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2100      	movs	r1, #0
 8001368:	9100      	str	r1, [sp, #0]
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_GPIO_Init+0x34>)
 800136c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
 8001374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001376:	f002 0201 	and.w	r2, r2, #1
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	9101      	str	r1, [sp, #4]
 8001380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001382:	f042 0202 	orr.w	r2, r2, #2
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	9b01      	ldr	r3, [sp, #4]

}
 8001392:	b002      	add	sp, #8
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800139c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139e:	480b      	ldr	r0, [pc, #44]	@ (80013cc <MX_I2C1_Init+0x30>)
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_I2C1_Init+0x34>)
 80013a2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_I2C1_Init+0x38>)
 80013a6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	2300      	movs	r3, #0
 80013aa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ac:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013b6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013bc:	f000 ff10 	bl	80021e0 <HAL_I2C_Init>
 80013c0:	b900      	cbnz	r0, 80013c4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013c4:	f000 f910 	bl	80015e8 <Error_Handler>
}
 80013c8:	e7fb      	b.n	80013c2 <MX_I2C1_Init+0x26>
 80013ca:	bf00      	nop
 80013cc:	2000020c 	.word	0x2000020c
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b530      	push	{r4, r5, lr}
 80013da:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	2300      	movs	r3, #0
 80013de:	9303      	str	r3, [sp, #12]
 80013e0:	9304      	str	r3, [sp, #16]
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_I2C_MspInit+0x64>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013f0:	b009      	add	sp, #36	@ 0x24
 80013f2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	2500      	movs	r5, #0
 80013f6:	9501      	str	r5, [sp, #4]
 80013f8:	4c11      	ldr	r4, [pc, #68]	@ (8001440 <HAL_I2C_MspInit+0x68>)
 80013fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6323      	str	r3, [r4, #48]	@ 0x30
 8001402:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800140c:	23c0      	movs	r3, #192	@ 0xc0
 800140e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	a903      	add	r1, sp, #12
 800141e:	4809      	ldr	r0, [pc, #36]	@ (8001444 <HAL_I2C_MspInit+0x6c>)
 8001420:	f000 fb70 	bl	8001b04 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001424:	9502      	str	r5, [sp, #8]
 8001426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800142c:	6423      	str	r3, [r4, #64]	@ 0x40
 800142e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	9b02      	ldr	r3, [sp, #8]
}
 8001438:	e7da      	b.n	80013f0 <HAL_I2C_MspInit+0x18>
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <Read_Acc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Read_Acc(double* buffer_xyz)
{
 8001448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800144c:	b089      	sub	sp, #36	@ 0x24
 800144e:	4680      	mov	r8, r0
	uint8_t dev_address = 0b11010100;
  uint16_t raw_val[2];

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x28, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTX_L_XL");
 8001450:	4e5d      	ldr	r6, [pc, #372]	@ (80015c8 <Read_Acc+0x180>)
 8001452:	27ff      	movs	r7, #255	@ 0xff
 8001454:	9702      	str	r7, [sp, #8]
 8001456:	2401      	movs	r4, #1
 8001458:	9401      	str	r4, [sp, #4]
 800145a:	f10d 0b1c 	add.w	fp, sp, #28
 800145e:	f8cd b000 	str.w	fp, [sp]
 8001462:	4623      	mov	r3, r4
 8001464:	2228      	movs	r2, #40	@ 0x28
 8001466:	21d4      	movs	r1, #212	@ 0xd4
 8001468:	4630      	mov	r0, r6
 800146a:	f001 f847 	bl	80024fc <HAL_I2C_Mem_Read>
 800146e:	4957      	ldr	r1, [pc, #348]	@ (80015cc <Read_Acc+0x184>)
 8001470:	f7ff ff3a 	bl	80012e8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x29, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTX_H_XL");
 8001474:	9702      	str	r7, [sp, #8]
 8001476:	9401      	str	r4, [sp, #4]
 8001478:	f10d 0a1d 	add.w	sl, sp, #29
 800147c:	f8cd a000 	str.w	sl, [sp]
 8001480:	4623      	mov	r3, r4
 8001482:	2229      	movs	r2, #41	@ 0x29
 8001484:	21d4      	movs	r1, #212	@ 0xd4
 8001486:	4630      	mov	r0, r6
 8001488:	f001 f838 	bl	80024fc <HAL_I2C_Mem_Read>
 800148c:	4950      	ldr	r1, [pc, #320]	@ (80015d0 <Read_Acc+0x188>)
 800148e:	f7ff ff2b 	bl	80012e8 <send_reg_log>

  int16_t x_val = raw_val[1] << 8 | raw_val[0];
 8001492:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 8001496:	022d      	lsls	r5, r5, #8
 8001498:	b22d      	sxth	r5, r5
 800149a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800149e:	431d      	orrs	r5, r3
  raw_val[0] = raw_val[1] = 0;
 80014a0:	f04f 0900 	mov.w	r9, #0
 80014a4:	f8ad 901e 	strh.w	r9, [sp, #30]
 80014a8:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTY_L_XL");
 80014ac:	9702      	str	r7, [sp, #8]
 80014ae:	9401      	str	r4, [sp, #4]
 80014b0:	f8cd b000 	str.w	fp, [sp]
 80014b4:	4623      	mov	r3, r4
 80014b6:	222a      	movs	r2, #42	@ 0x2a
 80014b8:	21d4      	movs	r1, #212	@ 0xd4
 80014ba:	4630      	mov	r0, r6
 80014bc:	f001 f81e 	bl	80024fc <HAL_I2C_Mem_Read>
 80014c0:	4944      	ldr	r1, [pc, #272]	@ (80015d4 <Read_Acc+0x18c>)
 80014c2:	f7ff ff11 	bl	80012e8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTY_H_XL");
 80014c6:	9702      	str	r7, [sp, #8]
 80014c8:	9401      	str	r4, [sp, #4]
 80014ca:	f8cd a000 	str.w	sl, [sp]
 80014ce:	4623      	mov	r3, r4
 80014d0:	222b      	movs	r2, #43	@ 0x2b
 80014d2:	21d4      	movs	r1, #212	@ 0xd4
 80014d4:	4630      	mov	r0, r6
 80014d6:	f001 f811 	bl	80024fc <HAL_I2C_Mem_Read>
 80014da:	493f      	ldr	r1, [pc, #252]	@ (80015d8 <Read_Acc+0x190>)
 80014dc:	f7ff ff04 	bl	80012e8 <send_reg_log>

  int16_t y_val = raw_val[1] << 8 | raw_val[0];
 80014e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	9305      	str	r3, [sp, #20]
  raw_val[0] = raw_val[1] = 0;
 80014f0:	f8ad 901e 	strh.w	r9, [sp, #30]
 80014f4:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTZ_L_XL");
 80014f8:	9702      	str	r7, [sp, #8]
 80014fa:	9401      	str	r4, [sp, #4]
 80014fc:	f8cd b000 	str.w	fp, [sp]
 8001500:	4623      	mov	r3, r4
 8001502:	222c      	movs	r2, #44	@ 0x2c
 8001504:	21d4      	movs	r1, #212	@ 0xd4
 8001506:	4630      	mov	r0, r6
 8001508:	f000 fff8 	bl	80024fc <HAL_I2C_Mem_Read>
 800150c:	4933      	ldr	r1, [pc, #204]	@ (80015dc <Read_Acc+0x194>)
 800150e:	f7ff feeb 	bl	80012e8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2D, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTZ_H_XL");
 8001512:	9702      	str	r7, [sp, #8]
 8001514:	9401      	str	r4, [sp, #4]
 8001516:	f8cd a000 	str.w	sl, [sp]
 800151a:	4623      	mov	r3, r4
 800151c:	222d      	movs	r2, #45	@ 0x2d
 800151e:	21d4      	movs	r1, #212	@ 0xd4
 8001520:	4630      	mov	r0, r6
 8001522:	f000 ffeb 	bl	80024fc <HAL_I2C_Mem_Read>
 8001526:	492e      	ldr	r1, [pc, #184]	@ (80015e0 <Read_Acc+0x198>)
 8001528:	f7ff fede 	bl	80012e8 <send_reg_log>

  int16_t z_val = raw_val[1] << 8 | raw_val[0];
 800152c:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 8001530:	0224      	lsls	r4, r4, #8
 8001532:	b224      	sxth	r4, r4
 8001534:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8001538:	431c      	orrs	r4, r3

  buffer_xyz[0] = ((double)x_val * 0.488/1000)*9.81;
 800153a:	4628      	mov	r0, r5
 800153c:	f7fe ffda 	bl	80004f4 <__aeabi_i2d>
 8001540:	a31d      	add	r3, pc, #116	@ (adr r3, 80015b8 <Read_Acc+0x170>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f83f 	bl	80005c8 <__aeabi_dmul>
 800154a:	2200      	movs	r2, #0
 800154c:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <Read_Acc+0x19c>)
 800154e:	f7ff f965 	bl	800081c <__aeabi_ddiv>
 8001552:	a31b      	add	r3, pc, #108	@ (adr r3, 80015c0 <Read_Acc+0x178>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f836 	bl	80005c8 <__aeabi_dmul>
 800155c:	e9c8 0100 	strd	r0, r1, [r8]
  buffer_xyz[1] = ((double)y_val * 0.488/1000)*9.81;
 8001560:	9805      	ldr	r0, [sp, #20]
 8001562:	f7fe ffc7 	bl	80004f4 <__aeabi_i2d>
 8001566:	a314      	add	r3, pc, #80	@ (adr r3, 80015b8 <Read_Acc+0x170>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f82c 	bl	80005c8 <__aeabi_dmul>
 8001570:	2200      	movs	r2, #0
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <Read_Acc+0x19c>)
 8001574:	f7ff f952 	bl	800081c <__aeabi_ddiv>
 8001578:	a311      	add	r3, pc, #68	@ (adr r3, 80015c0 <Read_Acc+0x178>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f823 	bl	80005c8 <__aeabi_dmul>
 8001582:	e9c8 0102 	strd	r0, r1, [r8, #8]
  buffer_xyz[2] = ((double)z_val * 0.488/1000)*9.81;
 8001586:	4620      	mov	r0, r4
 8001588:	f7fe ffb4 	bl	80004f4 <__aeabi_i2d>
 800158c:	a30a      	add	r3, pc, #40	@ (adr r3, 80015b8 <Read_Acc+0x170>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f819 	bl	80005c8 <__aeabi_dmul>
 8001596:	2200      	movs	r2, #0
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <Read_Acc+0x19c>)
 800159a:	f7ff f93f 	bl	800081c <__aeabi_ddiv>
 800159e:	a308      	add	r3, pc, #32	@ (adr r3, 80015c0 <Read_Acc+0x178>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f810 	bl	80005c8 <__aeabi_dmul>
 80015a8:	e9c8 0104 	strd	r0, r1, [r8, #16]
}
 80015ac:	b009      	add	sp, #36	@ 0x24
 80015ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	5a1cac08 	.word	0x5a1cac08
 80015bc:	3fdf3b64 	.word	0x3fdf3b64
 80015c0:	51eb851f 	.word	0x51eb851f
 80015c4:	40239eb8 	.word	0x40239eb8
 80015c8:	2000020c 	.word	0x2000020c
 80015cc:	08006fa4 	.word	0x08006fa4
 80015d0:	08006fb0 	.word	0x08006fb0
 80015d4:	08006fbc 	.word	0x08006fbc
 80015d8:	08006fc8 	.word	0x08006fc8
 80015dc:	08006fd4 	.word	0x08006fd4
 80015e0:	08006fe0 	.word	0x08006fe0
 80015e4:	408f4000 	.word	0x408f4000

080015e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ea:	e7fe      	b.n	80015ea <Error_Handler+0x2>

080015ec <SystemClock_Config>:
{
 80015ec:	b510      	push	{r4, lr}
 80015ee:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f0:	ac08      	add	r4, sp, #32
 80015f2:	2230      	movs	r2, #48	@ 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4620      	mov	r0, r4
 80015f8:	f003 f95a 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	2300      	movs	r3, #0
 80015fe:	9303      	str	r3, [sp, #12]
 8001600:	9304      	str	r3, [sp, #16]
 8001602:	9305      	str	r3, [sp, #20]
 8001604:	9306      	str	r3, [sp, #24]
 8001606:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <SystemClock_Config+0x98>)
 800160c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800160e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001612:	6411      	str	r1, [r2, #64]	@ 0x40
 8001614:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001616:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800161a:	9201      	str	r2, [sp, #4]
 800161c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <SystemClock_Config+0x9c>)
 8001622:	6811      	ldr	r1, [r2, #0]
 8001624:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001628:	6011      	str	r1, [r2, #0]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001630:	9202      	str	r2, [sp, #8]
 8001632:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2202      	movs	r2, #2
 8001636:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2101      	movs	r1, #1
 800163a:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2110      	movs	r1, #16
 800163e:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001642:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001644:	2308      	movs	r3, #8
 8001646:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800164e:	2304      	movs	r3, #4
 8001650:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	4620      	mov	r0, r4
 8001654:	f001 f8ea 	bl	800282c <HAL_RCC_OscConfig>
 8001658:	b980      	cbnz	r0, 800167c <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2302      	movs	r3, #2
 8001660:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001666:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800166a:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800166e:	2103      	movs	r1, #3
 8001670:	a803      	add	r0, sp, #12
 8001672:	f001 fb2b 	bl	8002ccc <HAL_RCC_ClockConfig>
 8001676:	b918      	cbnz	r0, 8001680 <SystemClock_Config+0x94>
}
 8001678:	b014      	add	sp, #80	@ 0x50
 800167a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800167c:	f7ff ffb4 	bl	80015e8 <Error_Handler>
    Error_Handler();
 8001680:	f7ff ffb2 	bl	80015e8 <Error_Handler>
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <main>:
{
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	f5ad 7d3a 	sub.w	sp, sp, #744	@ 0x2e8
  char data[100] =  "F411 says: I'm alive\n\r\0";
 8001692:	4d9f      	ldr	r5, [pc, #636]	@ (8001910 <main+0x284>)
 8001694:	aca1      	add	r4, sp, #644	@ 0x284
 8001696:	6828      	ldr	r0, [r5, #0]
 8001698:	6869      	ldr	r1, [r5, #4]
 800169a:	68aa      	ldr	r2, [r5, #8]
 800169c:	68eb      	ldr	r3, [r5, #12]
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	6928      	ldr	r0, [r5, #16]
 80016a2:	6969      	ldr	r1, [r5, #20]
 80016a4:	c403      	stmia	r4!, {r0, r1}
 80016a6:	224c      	movs	r2, #76	@ 0x4c
 80016a8:	2100      	movs	r1, #0
 80016aa:	4620      	mov	r0, r4
 80016ac:	f003 f900 	bl	80048b0 <memset>
  send_message(data, PRIORITY_HIGH);
 80016b0:	2102      	movs	r1, #2
 80016b2:	a8a1      	add	r0, sp, #644	@ 0x284
 80016b4:	f7ff fe0a 	bl	80012cc <send_message>
  HAL_Init();
 80016b8:	f000 f968 	bl	800198c <HAL_Init>
  SystemClock_Config();
 80016bc:	f7ff ff96 	bl	80015ec <SystemClock_Config>
  MX_GPIO_Init();
 80016c0:	f7ff fe50 	bl	8001364 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016c4:	f7ff fe6a 	bl	800139c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016c8:	f002 faf6 	bl	8003cb8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80016cc:	f002 fa7e 	bl	8003bcc <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	4890      	ldr	r0, [pc, #576]	@ (8001914 <main+0x288>)
 80016d4:	f001 ff16 	bl	8003504 <HAL_TIM_PWM_Start>
  char str_buf[100] =  "--------------------LSM6DS33 init--------------------------\n\r";
 80016d8:	4c8f      	ldr	r4, [pc, #572]	@ (8001918 <main+0x28c>)
 80016da:	ae88      	add	r6, sp, #544	@ 0x220
 80016dc:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80016e0:	4635      	mov	r5, r6
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	6861      	ldr	r1, [r4, #4]
 80016e6:	68a2      	ldr	r2, [r4, #8]
 80016e8:	68e3      	ldr	r3, [r4, #12]
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	3410      	adds	r4, #16
 80016ee:	462e      	mov	r6, r5
 80016f0:	4564      	cmp	r4, ip
 80016f2:	d1f5      	bne.n	80016e0 <main+0x54>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	6861      	ldr	r1, [r4, #4]
 80016f8:	68a2      	ldr	r2, [r4, #8]
 80016fa:	c607      	stmia	r6!, {r0, r1, r2}
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	8033      	strh	r3, [r6, #0]
 8001700:	2226      	movs	r2, #38	@ 0x26
 8001702:	2100      	movs	r1, #0
 8001704:	f20d 205e 	addw	r0, sp, #606	@ 0x25e
 8001708:	f003 f8d2 	bl	80048b0 <memset>
  send_message(str_buf, PRIORITY_HIGH);
 800170c:	2102      	movs	r1, #2
 800170e:	a888      	add	r0, sp, #544	@ 0x220
 8001710:	f7ff fddc 	bl	80012cc <send_message>
  if (check_acc_identity())
 8001714:	f7ff faba 	bl	8000c8c <check_acc_identity>
 8001718:	b308      	cbz	r0, 800175e <main+0xd2>
		char buffer [100] = "ACCELEROMETER READ SUCCESSFULLY (nice)\n\r";
 800171a:	f50d 7cde 	add.w	ip, sp, #444	@ 0x1bc
 800171e:	4c7f      	ldr	r4, [pc, #508]	@ (800191c <main+0x290>)
 8001720:	4666      	mov	r6, ip
 8001722:	f104 0e20 	add.w	lr, r4, #32
 8001726:	4635      	mov	r5, r6
 8001728:	6820      	ldr	r0, [r4, #0]
 800172a:	6861      	ldr	r1, [r4, #4]
 800172c:	68a2      	ldr	r2, [r4, #8]
 800172e:	68e3      	ldr	r3, [r4, #12]
 8001730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001732:	3410      	adds	r4, #16
 8001734:	462e      	mov	r6, r5
 8001736:	4574      	cmp	r4, lr
 8001738:	d1f5      	bne.n	8001726 <main+0x9a>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	6861      	ldr	r1, [r4, #4]
 800173e:	c603      	stmia	r6!, {r0, r1}
 8001740:	7a23      	ldrb	r3, [r4, #8]
 8001742:	7033      	strb	r3, [r6, #0]
 8001744:	223b      	movs	r2, #59	@ 0x3b
 8001746:	2100      	movs	r1, #0
 8001748:	f10c 0029 	add.w	r0, ip, #41	@ 0x29
 800174c:	f003 f8b0 	bl	80048b0 <memset>
		send_message(buffer, PRIORITY_HIGH);
 8001750:	2102      	movs	r1, #2
 8001752:	a86f      	add	r0, sp, #444	@ 0x1bc
 8001754:	f7ff fdba 	bl	80012cc <send_message>
    acc_power_on();
 8001758:	f7ff fad8 	bl	8000d0c <acc_power_on>
 800175c:	e01c      	b.n	8001798 <main+0x10c>
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 800175e:	ae6f      	add	r6, sp, #444	@ 0x1bc
 8001760:	4634      	mov	r4, r6
 8001762:	4d6f      	ldr	r5, [pc, #444]	@ (8001920 <main+0x294>)
 8001764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176c:	c403      	stmia	r4!, {r0, r1}
 800176e:	f824 2b02 	strh.w	r2, [r4], #2
 8001772:	0c12      	lsrs	r2, r2, #16
 8001774:	7022      	strb	r2, [r4, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	f8cd 21d7 	str.w	r2, [sp, #471]	@ 0x1d7
 800177c:	f8cd 21db 	str.w	r2, [sp, #475]	@ 0x1db
 8001780:	f8cd 21df 	str.w	r2, [sp, #479]	@ 0x1df
 8001784:	f8cd 21e3 	str.w	r2, [sp, #483]	@ 0x1e3
 8001788:	f8cd 21e7 	str.w	r2, [sp, #487]	@ 0x1e7
 800178c:	f8cd 21ea 	str.w	r2, [sp, #490]	@ 0x1ea
		send_message(buffer, PRIORITY_HIGH);
 8001790:	2102      	movs	r1, #2
 8001792:	4630      	mov	r0, r6
 8001794:	f7ff fd9a 	bl	80012cc <send_message>
  if (check_barometer_identity())
 8001798:	f7ff fad4 	bl	8000d44 <check_barometer_identity>
 800179c:	2800      	cmp	r0, #0
 800179e:	f000 80a6 	beq.w	80018ee <main+0x262>
		char buffer [28] = "BMP READ SUCCESSFULLY\n\r";
 80017a2:	ae6f      	add	r6, sp, #444	@ 0x1bc
 80017a4:	4634      	mov	r4, r6
 80017a6:	4d5f      	ldr	r5, [pc, #380]	@ (8001924 <main+0x298>)
 80017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80017b4:	2300      	movs	r3, #0
 80017b6:	9375      	str	r3, [sp, #468]	@ 0x1d4
		send_message(buffer, PRIORITY_HIGH);
 80017b8:	2102      	movs	r1, #2
 80017ba:	4630      	mov	r0, r6
 80017bc:	f7ff fd86 	bl	80012cc <send_message>
  barometer_power_on();
 80017c0:	f7ff fbb0 	bl	8000f24 <barometer_power_on>
    HAL_Delay(1000);
 80017c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c8:	f000 f90c 	bl	80019e4 <HAL_Delay>
    char data[100] =  "------------------------BMP----------------------\n\r\0";
 80017cc:	ae0b      	add	r6, sp, #44	@ 0x2c
 80017ce:	4c50      	ldr	r4, [pc, #320]	@ (8001910 <main+0x284>)
 80017d0:	f104 0c7c 	add.w	ip, r4, #124	@ 0x7c
 80017d4:	4635      	mov	r5, r6
 80017d6:	34ac      	adds	r4, #172	@ 0xac
 80017d8:	46ae      	mov	lr, r5
 80017da:	f8dc 0000 	ldr.w	r0, [ip]
 80017de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80017e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80017e6:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80017ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80017ee:	f10c 0c10 	add.w	ip, ip, #16
 80017f2:	4675      	mov	r5, lr
 80017f4:	45a4      	cmp	ip, r4
 80017f6:	d1ef      	bne.n	80017d8 <main+0x14c>
 80017f8:	f8dc 0000 	ldr.w	r0, [ip]
 80017fc:	f8ce 0000 	str.w	r0, [lr]
 8001800:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8001804:	f88e 3004 	strb.w	r3, [lr, #4]
 8001808:	222f      	movs	r2, #47	@ 0x2f
 800180a:	2100      	movs	r1, #0
 800180c:	f106 0035 	add.w	r0, r6, #53	@ 0x35
 8001810:	f003 f84e 	bl	80048b0 <memset>
    send_message(data, PRIORITY_HIGH);
 8001814:	2102      	movs	r1, #2
 8001816:	a80b      	add	r0, sp, #44	@ 0x2c
 8001818:	f7ff fd58 	bl	80012cc <send_message>
    int32_t actual_temp = read_temp();
 800181c:	f7ff fbe2 	bl	8000fe4 <read_temp>
 8001820:	ee07 0a90 	vmov	s15, r0
    sprintf(temp_str, "Temperature: %.2f Celsius\n\n\r", ((float)actual_temp)/100);
 8001824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001828:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001928 <main+0x29c>
 800182c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001830:	ee17 0a90 	vmov	r0, s15
 8001834:	f7fe fe70 	bl	8000518 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ac24      	add	r4, sp, #144	@ 0x90
 800183e:	493b      	ldr	r1, [pc, #236]	@ (800192c <main+0x2a0>)
 8001840:	4620      	mov	r0, r4
 8001842:	f002 ffcf 	bl	80047e4 <siprintf>
    send_message(temp_str, PRIORITY_HIGH);
 8001846:	2102      	movs	r1, #2
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fd3f 	bl	80012cc <send_message>
    uint32_t actual_pressure = read_pressure();
 800184e:	f7ff fcf7 	bl	8001240 <read_pressure>
 8001852:	ee07 0a90 	vmov	s15, r0
    sprintf(pressure_str, "Pressure: %.4f Pa\n\n\r",  ((float)actual_pressure)/256);
 8001856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001930 <main+0x2a4>
 800185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001862:	ee17 0a90 	vmov	r0, s15
 8001866:	f7fe fe57 	bl	8000518 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ac3d      	add	r4, sp, #244	@ 0xf4
 8001870:	4930      	ldr	r1, [pc, #192]	@ (8001934 <main+0x2a8>)
 8001872:	4620      	mov	r0, r4
 8001874:	f002 ffb6 	bl	80047e4 <siprintf>
    send_message(pressure_str, PRIORITY_HIGH);
 8001878:	2102      	movs	r1, #2
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fd26 	bl	80012cc <send_message>
    char data1[100] =  "------------------------ACC----------------------\n\r\0";
 8001880:	f50d 7eac 	add.w	lr, sp, #344	@ 0x158
 8001884:	4e22      	ldr	r6, [pc, #136]	@ (8001910 <main+0x284>)
 8001886:	f106 04b4 	add.w	r4, r6, #180	@ 0xb4
 800188a:	46f4      	mov	ip, lr
 800188c:	36e4      	adds	r6, #228	@ 0xe4
 800188e:	4665      	mov	r5, ip
 8001890:	6820      	ldr	r0, [r4, #0]
 8001892:	6861      	ldr	r1, [r4, #4]
 8001894:	68a2      	ldr	r2, [r4, #8]
 8001896:	68e3      	ldr	r3, [r4, #12]
 8001898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189a:	3410      	adds	r4, #16
 800189c:	46ac      	mov	ip, r5
 800189e:	42b4      	cmp	r4, r6
 80018a0:	d1f5      	bne.n	800188e <main+0x202>
 80018a2:	6820      	ldr	r0, [r4, #0]
 80018a4:	6028      	str	r0, [r5, #0]
 80018a6:	7923      	ldrb	r3, [r4, #4]
 80018a8:	712b      	strb	r3, [r5, #4]
 80018aa:	222f      	movs	r2, #47	@ 0x2f
 80018ac:	2100      	movs	r1, #0
 80018ae:	f10e 0035 	add.w	r0, lr, #53	@ 0x35
 80018b2:	f002 fffd 	bl	80048b0 <memset>
    send_message(data1, PRIORITY_HIGH);
 80018b6:	2102      	movs	r1, #2
 80018b8:	a856      	add	r0, sp, #344	@ 0x158
 80018ba:	f7ff fd07 	bl	80012cc <send_message>
    Read_Acc(acc_vals);
 80018be:	ac04      	add	r4, sp, #16
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fdc1 	bl	8001448 <Read_Acc>
    sprintf(acc_str, "Acceleration: (%0.4f, %0.4f, %0.4f) \n\n\r", acc_vals[0], acc_vals[1], acc_vals[2]);
 80018c6:	ad6f      	add	r5, sp, #444	@ 0x1bc
 80018c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80018cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80018d4:	e9cd 2300 	strd	r2, r3, [sp]
 80018d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80018dc:	4916      	ldr	r1, [pc, #88]	@ (8001938 <main+0x2ac>)
 80018de:	4628      	mov	r0, r5
 80018e0:	f002 ff80 	bl	80047e4 <siprintf>
    send_message(acc_str, PRIORITY_HIGH);
 80018e4:	2102      	movs	r1, #2
 80018e6:	4628      	mov	r0, r5
 80018e8:	f7ff fcf0 	bl	80012cc <send_message>
  while (1)
 80018ec:	e76a      	b.n	80017c4 <main+0x138>
		char buffer [20] = "BMP READ ERROR\n\r";
 80018ee:	ae6f      	add	r6, sp, #444	@ 0x1bc
 80018f0:	4634      	mov	r4, r6
 80018f2:	4d12      	ldr	r5, [pc, #72]	@ (800193c <main+0x2b0>)
 80018f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	7023      	strb	r3, [r4, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8ad 21cd 	strh.w	r2, [sp, #461]	@ 0x1cd
 8001902:	f88d 21cf 	strb.w	r2, [sp, #463]	@ 0x1cf
		send_message(buffer, PRIORITY_HIGH);
 8001906:	2102      	movs	r1, #2
 8001908:	4630      	mov	r0, r6
 800190a:	f7ff fcdf 	bl	80012cc <send_message>
 800190e:	e757      	b.n	80017c0 <main+0x134>
 8001910:	08006db8 	.word	0x08006db8
 8001914:	20000268 	.word	0x20000268
 8001918:	0800704c 	.word	0x0800704c
 800191c:	0800708c 	.word	0x0800708c
 8001920:	08006dd0 	.word	0x08006dd0
 8001924:	08006e04 	.word	0x08006e04
 8001928:	42c80000 	.word	0x42c80000
 800192c:	08006fec 	.word	0x08006fec
 8001930:	3b800000 	.word	0x3b800000
 8001934:	0800700c 	.word	0x0800700c
 8001938:	08007024 	.word	0x08007024
 800193c:	08006e20 	.word	0x08006e20

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_InitTick+0x40>)
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_InitTick+0x44>)
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	fbb0 f0f3 	udiv	r0, r0, r3
 8001958:	f000 f8c0 	bl	8001adc <HAL_SYSTICK_Config>
 800195c:	b968      	cbnz	r0, 800197a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	2c0f      	cmp	r4, #15
 8001960:	d901      	bls.n	8001966 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001962:	2001      	movs	r0, #1
 8001964:	e00a      	b.n	800197c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001966:	2200      	movs	r2, #0
 8001968:	4621      	mov	r1, r4
 800196a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800196e:	f000 f8a1 	bl	8001ab4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_InitTick+0x48>)
 8001974:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2000      	movs	r0, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
}
 800197c:	bd10      	pop	{r4, pc}
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_Init>:
{
 800198c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_Init+0x30>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001996:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800199e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019a6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f871 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f7ff ffc6 	bl	8001940 <HAL_InitTick>
  HAL_MspInit();
 80019b4:	f000 ff1e 	bl	80027f4 <HAL_MspInit>
}
 80019b8:	2000      	movs	r0, #0
 80019ba:	bd08      	pop	{r3, pc}
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019c0:	4a03      	ldr	r2, [pc, #12]	@ (80019d0 <HAL_IncTick+0x10>)
 80019c2:	6811      	ldr	r1, [r2, #0]
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_IncTick+0x14>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000260 	.word	0x20000260
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019d8:	4b01      	ldr	r3, [pc, #4]	@ (80019e0 <HAL_GetTick+0x8>)
 80019da:	6818      	ldr	r0, [r3, #0]
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000260 	.word	0x20000260

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fff6 	bl	80019d8 <HAL_GetTick>
 80019ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80019f2:	d002      	beq.n	80019fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <HAL_Delay+0x24>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	f7ff ffed 	bl	80019d8 <HAL_GetTick>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	42a0      	cmp	r0, r4
 8001a02:	d3fa      	bcc.n	80019fa <HAL_Delay+0x16>
  {
  }
}
 8001a04:	bd38      	pop	{r3, r4, r5, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000

08001a0c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	db07      	blt.n	8001a20 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a10:	f000 021f 	and.w	r2, r0, #31
 8001a14:	0940      	lsrs	r0, r0, #5
 8001a16:	2301      	movs	r3, #1
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	4a02      	ldr	r2, [pc, #8]	@ (8001a24 <__NVIC_EnableIRQ+0x18>)
 8001a1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	db08      	blt.n	8001a3e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	0109      	lsls	r1, r1, #4
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a34:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a38:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001a3c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	f000 000f 	and.w	r0, r0, #15
 8001a42:	0109      	lsls	r1, r1, #4
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	4b01      	ldr	r3, [pc, #4]	@ (8001a4c <__NVIC_SetPriority+0x24>)
 8001a48:	5419      	strb	r1, [r3, r0]
  }
}
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed14 	.word	0xe000ed14

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a52:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a56:	f1c0 0c07 	rsb	ip, r0, #7
 8001a5a:	f1bc 0f04 	cmp.w	ip, #4
 8001a5e:	bf28      	it	cs
 8001a60:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a64:	1d03      	adds	r3, r0, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d90f      	bls.n	8001a8a <NVIC_EncodePriority+0x3a>
 8001a6a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001a70:	fa0e f00c 	lsl.w	r0, lr, ip
 8001a74:	ea21 0100 	bic.w	r1, r1, r0
 8001a78:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7a:	fa0e fe03 	lsl.w	lr, lr, r3
 8001a7e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001a82:	ea41 0002 	orr.w	r0, r1, r2
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e7ee      	b.n	8001a6c <NVIC_EncodePriority+0x1c>
	...

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a92:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a94:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	0200      	lsls	r0, r0, #8
 8001a9e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001aac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_NVIC_SetPriority+0x1c>)
 8001aba:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001ac0:	f7ff ffc6 	bl	8001a50 <NVIC_EncodePriority>
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ffae 	bl	8001a28 <__NVIC_SetPriority>
}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad6:	f7ff ff99 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	3801      	subs	r0, #1
 8001ade:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001ae2:	d20b      	bcs.n	8001afc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001ae8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <HAL_SYSTICK_Config+0x24>)
 8001aec:	21f0      	movs	r1, #240	@ 0xf0
 8001aee:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af2:	2000      	movs	r0, #0
 8001af4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	2207      	movs	r2, #7
 8001af8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001afc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f200 80d7 	bhi.w	8001cba <HAL_GPIO_Init+0x1b6>
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	e065      	b.n	8001bde <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b14:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b18:	2403      	movs	r4, #3
 8001b1a:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b1e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b22:	68cc      	ldr	r4, [r1, #12]
 8001b24:	fa04 f40e 	lsl.w	r4, r4, lr
 8001b28:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001b2a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	684a      	ldr	r2, [r1, #4]
 8001b34:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001b3c:	6042      	str	r2, [r0, #4]
 8001b3e:	e05c      	b.n	8001bfa <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	08dc      	lsrs	r4, r3, #3
 8001b42:	3408      	adds	r4, #8
 8001b44:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b48:	f003 0507 	and.w	r5, r3, #7
 8001b4c:	00ad      	lsls	r5, r5, #2
 8001b4e:	f04f 0e0f 	mov.w	lr, #15
 8001b52:	fa0e fe05 	lsl.w	lr, lr, r5
 8001b56:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5a:	690a      	ldr	r2, [r1, #16]
 8001b5c:	40aa      	lsls	r2, r5
 8001b5e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b66:	e05c      	b.n	8001c22 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b68:	2204      	movs	r2, #4
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x6a>
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b72:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	3402      	adds	r4, #2
 8001b76:	4d51      	ldr	r5, [pc, #324]	@ (8001cbc <HAL_GPIO_Init+0x1b8>)
 8001b78:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7c:	4a50      	ldr	r2, [pc, #320]	@ (8001cc0 <HAL_GPIO_Init+0x1bc>)
 8001b7e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	ea6f 020c 	mvn.w	r2, ip
 8001b84:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b88:	684e      	ldr	r6, [r1, #4]
 8001b8a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001b8e:	d001      	beq.n	8001b94 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001b90:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001b94:	4c4a      	ldr	r4, [pc, #296]	@ (8001cc0 <HAL_GPIO_Init+0x1bc>)
 8001b96:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001b98:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9e:	684e      	ldr	r6, [r1, #4]
 8001ba0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001ba4:	d001      	beq.n	8001baa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001ba6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001baa:	4c45      	ldr	r4, [pc, #276]	@ (8001cc0 <HAL_GPIO_Init+0x1bc>)
 8001bac:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001bae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb4:	684e      	ldr	r6, [r1, #4]
 8001bb6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001bba:	d001      	beq.n	8001bc0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001bbc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001bc0:	4c3f      	ldr	r4, [pc, #252]	@ (8001cc0 <HAL_GPIO_Init+0x1bc>)
 8001bc2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc8:	684d      	ldr	r5, [r1, #4]
 8001bca:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001bce:	d001      	beq.n	8001bd4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001bd0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001bd4:	4c3a      	ldr	r4, [pc, #232]	@ (8001cc0 <HAL_GPIO_Init+0x1bc>)
 8001bd6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd8:	3301      	adds	r3, #1
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d86b      	bhi.n	8001cb6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be2:	680c      	ldr	r4, [r1, #0]
 8001be4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001be8:	ea32 0404 	bics.w	r4, r2, r4
 8001bec:	d1f4      	bne.n	8001bd8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	684c      	ldr	r4, [r1, #4]
 8001bf0:	f004 0403 	and.w	r4, r4, #3
 8001bf4:	3c01      	subs	r4, #1
 8001bf6:	2c01      	cmp	r4, #1
 8001bf8:	d98b      	bls.n	8001b12 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfa:	684a      	ldr	r2, [r1, #4]
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	2a03      	cmp	r2, #3
 8001c02:	d009      	beq.n	8001c18 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001c04:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c06:	005d      	lsls	r5, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	40aa      	lsls	r2, r5
 8001c0c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	688a      	ldr	r2, [r1, #8]
 8001c12:	40aa      	lsls	r2, r5
 8001c14:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001c16:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	684a      	ldr	r2, [r1, #4]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	2a02      	cmp	r2, #2
 8001c20:	d08e      	beq.n	8001b40 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001c22:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c24:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c2e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c32:	684a      	ldr	r2, [r1, #4]
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c3c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001c3e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001c46:	d0c7      	beq.n	8001bd8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c48:	2200      	movs	r2, #0
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <HAL_GPIO_Init+0x1c0>)
 8001c4e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001c50:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c54:	6454      	str	r4, [r2, #68]	@ 0x44
 8001c56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c58:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c60:	089c      	lsrs	r4, r3, #2
 8001c62:	1ca5      	adds	r5, r4, #2
 8001c64:	4a15      	ldr	r2, [pc, #84]	@ (8001cbc <HAL_GPIO_Init+0x1b8>)
 8001c66:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c6a:	f003 0e03 	and.w	lr, r3, #3
 8001c6e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c78:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c7c:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <HAL_GPIO_Init+0x1c4>)
 8001c7e:	4290      	cmp	r0, r2
 8001c80:	f43f af74 	beq.w	8001b6c <HAL_GPIO_Init+0x68>
 8001c84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c88:	4290      	cmp	r0, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_GPIO_Init+0x1a6>
 8001c8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c90:	4290      	cmp	r0, r2
 8001c92:	d00c      	beq.n	8001cae <HAL_GPIO_Init+0x1aa>
 8001c94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001c98:	4290      	cmp	r0, r2
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_GPIO_Init+0x1ae>
 8001c9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ca0:	4290      	cmp	r0, r2
 8001ca2:	f43f af61 	beq.w	8001b68 <HAL_GPIO_Init+0x64>
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	e761      	b.n	8001b6e <HAL_GPIO_Init+0x6a>
 8001caa:	2201      	movs	r2, #1
 8001cac:	e75f      	b.n	8001b6e <HAL_GPIO_Init+0x6a>
 8001cae:	2202      	movs	r2, #2
 8001cb0:	e75d      	b.n	8001b6e <HAL_GPIO_Init+0x6a>
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	e75b      	b.n	8001b6e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
 8001cba:	4770      	bx	lr
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40013c00 	.word	0x40013c00
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cd4:	d101      	bne.n	8001cda <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001cd6:	2000      	movs	r0, #0
}
 8001cd8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cde:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cea:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001cf0:	f042 0204 	orr.w	r2, r2, #4
 8001cf4:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001cf6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	4770      	bx	lr

08001cfe <I2C_WaitOnFlagUntilTimeout>:
{
 8001cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d02:	4606      	mov	r6, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	4617      	mov	r7, r2
 8001d08:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d0a:	e03b      	b.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0c:	f7ff fe64 	bl	80019d8 <HAL_GetTick>
 8001d10:	9b06      	ldr	r3, [sp, #24]
 8001d12:	1ac0      	subs	r0, r0, r3
 8001d14:	4540      	cmp	r0, r8
 8001d16:	d802      	bhi.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x20>
 8001d18:	f1b8 0f00 	cmp.w	r8, #0
 8001d1c:	d132      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d1e:	2d01      	cmp	r5, #1
 8001d20:	d018      	beq.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d22:	6833      	ldr	r3, [r6, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	ea24 0303 	bic.w	r3, r4, r3
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	429f      	cmp	r7, r3
 8001d34:	d126      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d40:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001d4c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001d50:	2001      	movs	r0, #1
 8001d52:	e027      	b.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d54:	6833      	ldr	r3, [r6, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	ea24 0303 	bic.w	r3, r4, r3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	e7e5      	b.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d66:	6833      	ldr	r3, [r6, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	ea24 0c03 	bic.w	ip, r4, r3
 8001d6e:	fa1f fc8c 	uxth.w	ip, ip
 8001d72:	fabc fc8c 	clz	ip, ip
 8001d76:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001d7a:	4567      	cmp	r7, ip
 8001d7c:	d111      	bne.n	8001da2 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001d7e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001d82:	d1c3      	bne.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d84:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001d88:	2d01      	cmp	r5, #1
 8001d8a:	d0ec      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x68>
 8001d8c:	6833      	ldr	r3, [r6, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	ea24 0c03 	bic.w	ip, r4, r3
 8001d94:	fa1f fc8c 	uxth.w	ip, ip
 8001d98:	fabc fc8c 	clz	ip, ip
 8001d9c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001da0:	e7eb      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001da2:	2000      	movs	r0, #0
}
 8001da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dac:	4605      	mov	r5, r0
 8001dae:	460e      	mov	r6, r1
 8001db0:	4690      	mov	r8, r2
 8001db2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001db4:	e053      	b.n	8001e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dbc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dc4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001dd6:	f042 0204 	orr.w	r2, r2, #4
 8001dda:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001ddc:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
 8001de2:	e04a      	b.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff fdf8 	bl	80019d8 <HAL_GetTick>
 8001de8:	eba0 0009 	sub.w	r0, r0, r9
 8001dec:	4540      	cmp	r0, r8
 8001dee:	d802      	bhi.n	8001df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001df0:	f1b8 0f00 	cmp.w	r8, #0
 8001df4:	d133      	bne.n	8001e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001df6:	2f01      	cmp	r7, #1
 8001df8:	d017      	beq.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	ea26 0303 	bic.w	r3, r6, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b00      	subs	r3, #0
 8001e06:	bf18      	it	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	b343      	cbz	r3, 8001e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e10:	2220      	movs	r2, #32
 8001e12:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e16:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e22:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	e027      	b.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	ea26 0303 	bic.w	r3, r6, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b00      	subs	r3, #0
 8001e36:	bf18      	it	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	e7e6      	b.n	8001e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	699c      	ldr	r4, [r3, #24]
 8001e40:	ea26 0404 	bic.w	r4, r6, r4
 8001e44:	b2a4      	uxth	r4, r4
 8001e46:	3c00      	subs	r4, #0
 8001e48:	bf18      	it	ne
 8001e4a:	2401      	movne	r4, #1
 8001e4c:	b1a4      	cbz	r4, 8001e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001e56:	d1ae      	bne.n	8001db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001e58:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001e5c:	d1c2      	bne.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e5e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001e62:	2f01      	cmp	r7, #1
 8001e64:	d1ea      	bne.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	695c      	ldr	r4, [r3, #20]
 8001e6a:	ea26 0404 	bic.w	r4, r6, r4
 8001e6e:	b2a4      	uxth	r4, r4
 8001e70:	3c00      	subs	r4, #0
 8001e72:	bf18      	it	ne
 8001e74:	2401      	movne	r4, #1
 8001e76:	e7e9      	b.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001e78:	2000      	movs	r0, #0
}
 8001e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e7e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001e7e:	b570      	push	{r4, r5, r6, lr}
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e8e:	d121      	bne.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ff1b 	bl	8001ccc <I2C_IsAcknowledgeFailed>
 8001e96:	b9f8      	cbnz	r0, 8001ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001e98:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001e9c:	d0f3      	beq.n	8001e86 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff fd9b 	bl	80019d8 <HAL_GetTick>
 8001ea2:	1b80      	subs	r0, r0, r6
 8001ea4:	42a8      	cmp	r0, r5
 8001ea6:	d801      	bhi.n	8001eac <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	d1ec      	bne.n	8001e86 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001eb4:	d1e7      	bne.n	8001e86 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ecc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	e000      	b.n	8001ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	e7fc      	b.n	8001ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001edc <I2C_RequestMemoryWrite>:
{
 8001edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	4691      	mov	r9, r2
 8001ee8:	461f      	mov	r7, r3
 8001eea:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001eee:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef0:	6803      	ldr	r3, [r0, #0]
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001ef8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001efa:	9600      	str	r6, [sp, #0]
 8001efc:	4643      	mov	r3, r8
 8001efe:	2200      	movs	r2, #0
 8001f00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f04:	f7ff fefb 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 8001f08:	b960      	cbnz	r0, 8001f24 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001f10:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f12:	4633      	mov	r3, r6
 8001f14:	4642      	mov	r2, r8
 8001f16:	4926      	ldr	r1, [pc, #152]	@ (8001fb0 <I2C_RequestMemoryWrite+0xd4>)
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff45 	bl	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f1e:	b168      	cbz	r0, 8001f3c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
 8001f22:	e008      	b.n	8001f36 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f2c:	d002      	beq.n	8001f34 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f32:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001f34:	2003      	movs	r0, #3
}
 8001f36:	b005      	add	sp, #20
 8001f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	9203      	str	r2, [sp, #12]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	9303      	str	r3, [sp, #12]
 8001f4a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4c:	4632      	mov	r2, r6
 8001f4e:	4641      	mov	r1, r8
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff ff94 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8001f56:	b930      	cbnz	r0, 8001f66 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f58:	2f01      	cmp	r7, #1
 8001f5a:	d10f      	bne.n	8001f7c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	fa5f f689 	uxtb.w	r6, r9
 8001f62:	611e      	str	r6, [r3, #16]
 8001f64:	e7e7      	b.n	8001f36 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d001      	beq.n	8001f70 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	e7e2      	b.n	8001f36 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	6822      	ldr	r2, [r4, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e7f7      	b.n	8001f6c <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001f82:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f84:	4632      	mov	r2, r6
 8001f86:	4641      	mov	r1, r8
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff78 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8001f8e:	b920      	cbnz	r0, 8001f9a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	fa5f f689 	uxtb.w	r6, r9
 8001f96:	611e      	str	r6, [r3, #16]
 8001f98:	e7cd      	b.n	8001f36 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d001      	beq.n	8001fa4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	e7c8      	b.n	8001f36 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e7f7      	b.n	8001fa0 <I2C_RequestMemoryWrite+0xc4>
 8001fb0:	00010002 	.word	0x00010002

08001fb4 <I2C_RequestMemoryRead>:
{
 8001fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	4604      	mov	r4, r0
 8001fbc:	460d      	mov	r5, r1
 8001fbe:	4616      	mov	r6, r2
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001fc4:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc8:	6802      	ldr	r2, [r0, #0]
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001fda:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fdc:	f8cd 8000 	str.w	r8, [sp]
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fe8:	f7ff fe89 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 8001fec:	b970      	cbnz	r0, 800200c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fee:	fa5f fa85 	uxtb.w	sl, r5
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001ff8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ffa:	4643      	mov	r3, r8
 8001ffc:	463a      	mov	r2, r7
 8001ffe:	4941      	ldr	r1, [pc, #260]	@ (8002104 <I2C_RequestMemoryRead+0x150>)
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fed1 	bl	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002006:	b168      	cbz	r0, 8002024 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002008:	2001      	movs	r0, #1
 800200a:	e008      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002014:	d002      	beq.n	800201c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800201a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3
}
 800201e:	b004      	add	sp, #16
 8002020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002024:	2300      	movs	r3, #0
 8002026:	9303      	str	r3, [sp, #12]
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	9203      	str	r2, [sp, #12]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002034:	4642      	mov	r2, r8
 8002036:	4639      	mov	r1, r7
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff ff20 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 800203e:	b980      	cbnz	r0, 8002062 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002040:	f1b9 0f01 	cmp.w	r9, #1
 8002044:	d118      	bne.n	8002078 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	b2f6      	uxtb	r6, r6
 800204a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800204c:	4642      	mov	r2, r8
 800204e:	4639      	mov	r1, r7
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff ff14 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8002056:	b368      	cbz	r0, 80020b4 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d024      	beq.n	80020a8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
 8002060:	e7dd      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002064:	2b04      	cmp	r3, #4
 8002066:	d001      	beq.n	800206c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8002068:	2001      	movs	r0, #1
 800206a:	e7d8      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	6822      	ldr	r2, [r4, #0]
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e7f7      	b.n	8002068 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	0a32      	lsrs	r2, r6, #8
 800207c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800207e:	4642      	mov	r2, r8
 8002080:	4639      	mov	r1, r7
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff fefb 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8002088:	b918      	cbnz	r0, 8002092 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	b2f6      	uxtb	r6, r6
 800208e:	611e      	str	r6, [r3, #16]
 8002090:	e7dc      	b.n	800204c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002094:	2b04      	cmp	r3, #4
 8002096:	d001      	beq.n	800209c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8002098:	2001      	movs	r0, #1
 800209a:	e7c0      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	6822      	ldr	r2, [r4, #0]
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e7f7      	b.n	8002098 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e7d4      	b.n	800205e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020be:	f8cd 8000 	str.w	r8, [sp]
 80020c2:	463b      	mov	r3, r7
 80020c4:	2200      	movs	r2, #0
 80020c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff fe17 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 80020d0:	b968      	cbnz	r0, 80020ee <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	f04a 0301 	orr.w	r3, sl, #1
 80020d8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020da:	4643      	mov	r3, r8
 80020dc:	463a      	mov	r2, r7
 80020de:	4909      	ldr	r1, [pc, #36]	@ (8002104 <I2C_RequestMemoryRead+0x150>)
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff fe61 	bl	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d099      	beq.n	800201e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
 80020ec:	e797      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020f6:	d002      	beq.n	80020fe <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fc:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80020fe:	2003      	movs	r0, #3
 8002100:	e78d      	b.n	800201e <I2C_RequestMemoryRead+0x6a>
 8002102:	bf00      	nop
 8002104:	00010002 	.word	0x00010002

08002108 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4604      	mov	r4, r0
 800210c:	460d      	mov	r5, r1
 800210e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f013 0f04 	tst.w	r3, #4
 8002118:	d121      	bne.n	800215e <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fdd6 	bl	8001ccc <I2C_IsAcknowledgeFailed>
 8002120:	b9f8      	cbnz	r0, 8002162 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002122:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002126:	d0f3      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002128:	f7ff fc56 	bl	80019d8 <HAL_GetTick>
 800212c:	1b80      	subs	r0, r0, r6
 800212e:	42a8      	cmp	r0, r5
 8002130:	d801      	bhi.n	8002136 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002132:	2d00      	cmp	r5, #0
 8002134:	d1ec      	bne.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f013 0f04 	tst.w	r3, #4
 800213e:	d1e7      	bne.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002140:	2300      	movs	r3, #0
 8002142:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	2220      	movs	r2, #32
 8002146:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002156:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800215a:	2001      	movs	r0, #1
 800215c:	e000      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800215e:	2000      	movs	r0, #0
}
 8002160:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
 8002164:	e7fc      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08002166 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002166:	b570      	push	{r4, r5, r6, lr}
 8002168:	4604      	mov	r4, r0
 800216a:	460d      	mov	r5, r1
 800216c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800216e:	e014      	b.n	800219a <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	2220      	movs	r2, #32
 800217c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002184:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002186:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002188:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
 800218e:	e025      	b.n	80021dc <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002198:	d010      	beq.n	80021bc <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	6958      	ldr	r0, [r3, #20]
 800219e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80021a2:	d11a      	bne.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021a4:	6958      	ldr	r0, [r3, #20]
 80021a6:	f010 0f10 	tst.w	r0, #16
 80021aa:	d1e1      	bne.n	8002170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7ff fc14 	bl	80019d8 <HAL_GetTick>
 80021b0:	1b80      	subs	r0, r0, r6
 80021b2:	42a8      	cmp	r0, r5
 80021b4:	d8ec      	bhi.n	8002190 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80021b6:	2d00      	cmp	r5, #0
 80021b8:	d1ef      	bne.n	800219a <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80021ba:	e7e9      	b.n	8002190 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021bc:	2300      	movs	r3, #0
 80021be:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c0:	2220      	movs	r2, #32
 80021c2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80021d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	e000      	b.n	80021dc <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80021da:	2000      	movs	r0, #0
}
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080021e0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f000 80cc 	beq.w	800237e <HAL_I2C_Init+0x19e>
{
 80021e6:	b570      	push	{r4, r5, r6, lr}
 80021e8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d077      	beq.n	80022e2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f2:	2324      	movs	r3, #36	@ 0x24
 80021f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002202:	6822      	ldr	r2, [r4, #0]
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800220a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002214:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002216:	f000 fe0f 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221a:	6862      	ldr	r2, [r4, #4]
 800221c:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_I2C_Init+0x1a8>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d864      	bhi.n	80022ec <HAL_I2C_Init+0x10c>
 8002222:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <HAL_I2C_Init+0x1ac>)
 8002224:	4298      	cmp	r0, r3
 8002226:	bf8c      	ite	hi
 8002228:	2300      	movhi	r3, #0
 800222a:	2301      	movls	r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 80a8 	bne.w	8002382 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8002232:	4957      	ldr	r1, [pc, #348]	@ (8002390 <HAL_I2C_Init+0x1b0>)
 8002234:	fba1 3100 	umull	r3, r1, r1, r0
 8002238:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223a:	6825      	ldr	r5, [r4, #0]
 800223c:	686a      	ldr	r2, [r5, #4]
 800223e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002242:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002246:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002248:	6821      	ldr	r1, [r4, #0]
 800224a:	6a0a      	ldr	r2, [r1, #32]
 800224c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002250:	6866      	ldr	r6, [r4, #4]
 8002252:	4d4d      	ldr	r5, [pc, #308]	@ (8002388 <HAL_I2C_Init+0x1a8>)
 8002254:	42ae      	cmp	r6, r5
 8002256:	d84f      	bhi.n	80022f8 <HAL_I2C_Init+0x118>
 8002258:	3301      	adds	r3, #1
 800225a:	4313      	orrs	r3, r2
 800225c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800225e:	6821      	ldr	r1, [r4, #0]
 8002260:	69ca      	ldr	r2, [r1, #28]
 8002262:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002266:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800226a:	6865      	ldr	r5, [r4, #4]
 800226c:	4b46      	ldr	r3, [pc, #280]	@ (8002388 <HAL_I2C_Init+0x1a8>)
 800226e:	429d      	cmp	r5, r3
 8002270:	d84c      	bhi.n	800230c <HAL_I2C_Init+0x12c>
 8002272:	1e43      	subs	r3, r0, #1
 8002274:	006d      	lsls	r5, r5, #1
 8002276:	fbb3 f3f5 	udiv	r3, r3, r5
 800227a:	3301      	adds	r3, #1
 800227c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002280:	4203      	tst	r3, r0
 8002282:	d078      	beq.n	8002376 <HAL_I2C_Init+0x196>
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	431a      	orrs	r2, r3
 800228a:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	6821      	ldr	r1, [r4, #0]
 800228e:	680b      	ldr	r3, [r1, #0]
 8002290:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002294:	69e2      	ldr	r2, [r4, #28]
 8002296:	6a20      	ldr	r0, [r4, #32]
 8002298:	4302      	orrs	r2, r0
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800229e:	6821      	ldr	r1, [r4, #0]
 80022a0:	688b      	ldr	r3, [r1, #8]
 80022a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022aa:	6922      	ldr	r2, [r4, #16]
 80022ac:	68e0      	ldr	r0, [r4, #12]
 80022ae:	4302      	orrs	r2, r0
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022b4:	6821      	ldr	r1, [r4, #0]
 80022b6:	68cb      	ldr	r3, [r1, #12]
 80022b8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022bc:	6962      	ldr	r2, [r4, #20]
 80022be:	69a0      	ldr	r0, [r4, #24]
 80022c0:	4302      	orrs	r2, r0
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	2000      	movs	r0, #0
 80022d2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d4:	2320      	movs	r3, #32
 80022d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80022e6:	f7ff f877 	bl	80013d8 <HAL_I2C_MspInit>
 80022ea:	e782      	b.n	80021f2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ec:	4b29      	ldr	r3, [pc, #164]	@ (8002394 <HAL_I2C_Init+0x1b4>)
 80022ee:	4298      	cmp	r0, r3
 80022f0:	bf8c      	ite	hi
 80022f2:	2300      	movhi	r3, #0
 80022f4:	2301      	movls	r3, #1
 80022f6:	e799      	b.n	800222c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80022fc:	fb05 f303 	mul.w	r3, r5, r3
 8002300:	4d25      	ldr	r5, [pc, #148]	@ (8002398 <HAL_I2C_Init+0x1b8>)
 8002302:	fba5 5303 	umull	r5, r3, r5, r3
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	3301      	adds	r3, #1
 800230a:	e7a6      	b.n	800225a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	68a6      	ldr	r6, [r4, #8]
 800230e:	b9be      	cbnz	r6, 8002340 <HAL_I2C_Init+0x160>
 8002310:	1e43      	subs	r3, r0, #1
 8002312:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002316:	fbb3 f3fc 	udiv	r3, r3, ip
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	bb43      	cbnz	r3, 800237a <HAL_I2C_Init+0x19a>
 8002328:	b9c6      	cbnz	r6, 800235c <HAL_I2C_Init+0x17c>
 800232a:	1e43      	subs	r3, r0, #1
 800232c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002330:	fbb3 f3f5 	udiv	r3, r3, r5
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800233e:	e7a3      	b.n	8002288 <HAL_I2C_Init+0xa8>
 8002340:	1e43      	subs	r3, r0, #1
 8002342:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002346:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800234a:	fbb3 f3fc 	udiv	r3, r3, ip
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	e7e4      	b.n	8002326 <HAL_I2C_Init+0x146>
 800235c:	1e43      	subs	r3, r0, #1
 800235e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002362:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002366:	fbb3 f3f5 	udiv	r3, r3, r5
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002374:	e788      	b.n	8002288 <HAL_I2C_Init+0xa8>
 8002376:	2304      	movs	r3, #4
 8002378:	e786      	b.n	8002288 <HAL_I2C_Init+0xa8>
 800237a:	2301      	movs	r3, #1
 800237c:	e784      	b.n	8002288 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
}
 8002380:	4770      	bx	lr
    return HAL_ERROR;
 8002382:	2001      	movs	r0, #1
 8002384:	e7ac      	b.n	80022e0 <HAL_I2C_Init+0x100>
 8002386:	bf00      	nop
 8002388:	000186a0 	.word	0x000186a0
 800238c:	001e847f 	.word	0x001e847f
 8002390:	431bde83 	.word	0x431bde83
 8002394:	003d08ff 	.word	0x003d08ff
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_I2C_Mem_Write>:
{
 800239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023a0:	b083      	sub	sp, #12
 80023a2:	4604      	mov	r4, r0
 80023a4:	460f      	mov	r7, r1
 80023a6:	4690      	mov	r8, r2
 80023a8:	4699      	mov	r9, r3
 80023aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fb14 	bl	80019d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b0:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80023b4:	2a20      	cmp	r2, #32
 80023b6:	d003      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80023b8:	2002      	movs	r0, #2
}
 80023ba:	b003      	add	sp, #12
 80023bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023c0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c2:	9000      	str	r0, [sp, #0]
 80023c4:	2319      	movs	r3, #25
 80023c6:	2201      	movs	r2, #1
 80023c8:	494a      	ldr	r1, [pc, #296]	@ (80024f4 <HAL_I2C_Mem_Write+0x158>)
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fc97 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f040 8089 	bne.w	80024e8 <HAL_I2C_Mem_Write+0x14c>
    __HAL_LOCK(hi2c);
 80023d6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f000 8086 	beq.w	80024ec <HAL_I2C_Mem_Write+0x150>
 80023e0:	2301      	movs	r3, #1
 80023e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f012 0f01 	tst.w	r2, #1
 80023ee:	d103      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f8:	6822      	ldr	r2, [r4, #0]
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002400:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002402:	2321      	movs	r3, #33	@ 0x21
 8002404:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002408:	2340      	movs	r3, #64	@ 0x40
 800240a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002414:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002416:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800241a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800241c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800241e:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <HAL_I2C_Mem_Write+0x15c>)
 8002422:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002424:	9501      	str	r5, [sp, #4]
 8002426:	9600      	str	r6, [sp, #0]
 8002428:	464b      	mov	r3, r9
 800242a:	4642      	mov	r2, r8
 800242c:	4639      	mov	r1, r7
 800242e:	4620      	mov	r0, r4
 8002430:	f7ff fd54 	bl	8001edc <I2C_RequestMemoryWrite>
 8002434:	2800      	cmp	r0, #0
 8002436:	d15b      	bne.n	80024f0 <HAL_I2C_Mem_Write+0x154>
    while (hi2c->XferSize > 0U)
 8002438:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d035      	beq.n	80024aa <HAL_I2C_Mem_Write+0x10e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	462a      	mov	r2, r5
 8002440:	4631      	mov	r1, r6
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fd1b 	bl	8001e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8002448:	bb20      	cbnz	r0, 8002494 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002452:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002454:	1c53      	adds	r3, r2, #1
 8002456:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002458:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800245a:	3901      	subs	r1, #1
 800245c:	b289      	uxth	r1, r1
 800245e:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002460:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	6958      	ldr	r0, [r3, #20]
 800246e:	f010 0f04 	tst.w	r0, #4
 8002472:	d0e1      	beq.n	8002438 <HAL_I2C_Mem_Write+0x9c>
 8002474:	2900      	cmp	r1, #0
 8002476:	d0df      	beq.n	8002438 <HAL_I2C_Mem_Write+0x9c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002478:	7852      	ldrb	r2, [r2, #1]
 800247a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800247c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800247e:	3301      	adds	r3, #1
 8002480:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002482:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002488:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002492:	e7d1      	b.n	8002438 <HAL_I2C_Mem_Write+0x9c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002496:	2b04      	cmp	r3, #4
 8002498:	d001      	beq.n	800249e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
 800249c:	e78d      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e7f7      	b.n	800249a <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	462a      	mov	r2, r5
 80024ac:	4631      	mov	r1, r6
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff fe2a 	bl	8002108 <I2C_WaitOnBTFFlagUntilTimeout>
 80024b4:	b150      	cbz	r0, 80024cc <HAL_I2C_Mem_Write+0x130>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x124>
      return HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
 80024be:	e77c      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e7f7      	b.n	80024bc <HAL_I2C_Mem_Write+0x120>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024d4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	2320      	movs	r3, #32
 80024d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80024e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80024e6:	e768      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80024e8:	2002      	movs	r0, #2
 80024ea:	e766      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80024ec:	2002      	movs	r0, #2
 80024ee:	e764      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
 80024f2:	e762      	b.n	80023ba <HAL_I2C_Mem_Write+0x1e>
 80024f4:	00100002 	.word	0x00100002
 80024f8:	ffff0000 	.word	0xffff0000

080024fc <HAL_I2C_Mem_Read>:
{
 80024fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002500:	b087      	sub	sp, #28
 8002502:	4604      	mov	r4, r0
 8002504:	460f      	mov	r7, r1
 8002506:	4690      	mov	r8, r2
 8002508:	4699      	mov	r9, r3
 800250a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fa64 	bl	80019d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002514:	2a20      	cmp	r2, #32
 8002516:	d004      	beq.n	8002522 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8002518:	2702      	movs	r7, #2
}
 800251a:	4638      	mov	r0, r7
 800251c:	b007      	add	sp, #28
 800251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002522:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002524:	9000      	str	r0, [sp, #0]
 8002526:	2319      	movs	r3, #25
 8002528:	2201      	movs	r2, #1
 800252a:	4989      	ldr	r1, [pc, #548]	@ (8002750 <HAL_I2C_Mem_Read+0x254>)
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff fbe6 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 8002532:	2800      	cmp	r0, #0
 8002534:	f040 814e 	bne.w	80027d4 <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 8002538:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	f000 814b 	beq.w	80027d8 <HAL_I2C_Mem_Read+0x2dc>
 8002542:	2301      	movs	r3, #1
 8002544:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f012 0f01 	tst.w	r2, #1
 8002550:	d103      	bne.n	800255a <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	6822      	ldr	r2, [r4, #0]
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002562:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002564:	2322      	movs	r3, #34	@ 0x22
 8002566:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800256a:	2340      	movs	r3, #64	@ 0x40
 800256c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002576:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002578:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800257c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002580:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002582:	4b74      	ldr	r3, [pc, #464]	@ (8002754 <HAL_I2C_Mem_Read+0x258>)
 8002584:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002586:	9501      	str	r5, [sp, #4]
 8002588:	9600      	str	r6, [sp, #0]
 800258a:	464b      	mov	r3, r9
 800258c:	4642      	mov	r2, r8
 800258e:	4639      	mov	r1, r7
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff fd0f 	bl	8001fb4 <I2C_RequestMemoryRead>
 8002596:	4607      	mov	r7, r0
 8002598:	2800      	cmp	r0, #0
 800259a:	f040 811f 	bne.w	80027dc <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 800259e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025a0:	b95b      	cbnz	r3, 80025ba <HAL_I2C_Mem_Read+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	9302      	str	r3, [sp, #8]
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	9202      	str	r2, [sp, #8]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	9202      	str	r2, [sp, #8]
 80025ae:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e075      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
    else if (hi2c->XferSize == 1U)
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d00a      	beq.n	80025d4 <HAL_I2C_Mem_Read+0xd8>
    else if (hi2c->XferSize == 2U)
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d01a      	beq.n	80025f8 <HAL_I2C_Mem_Read+0xfc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	9305      	str	r3, [sp, #20]
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	9205      	str	r2, [sp, #20]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	9305      	str	r3, [sp, #20]
 80025d0:	9b05      	ldr	r3, [sp, #20]
 80025d2:	e068      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025dc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	9203      	str	r2, [sp, #12]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	9203      	str	r2, [sp, #12]
 80025ec:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e056      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002600:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800260a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260c:	2300      	movs	r3, #0
 800260e:	9304      	str	r3, [sp, #16]
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	9204      	str	r2, [sp, #16]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	9b04      	ldr	r3, [sp, #16]
 800261c:	e043      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261e:	462a      	mov	r2, r5
 8002620:	4631      	mov	r1, r6
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff fd9f 	bl	8002166 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002628:	2800      	cmp	r0, #0
 800262a:	f040 80d9 	bne.w	80027e0 <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002634:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002636:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002638:	3301      	adds	r3, #1
 800263a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800263c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002642:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800264c:	e02b      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800264e:	9500      	str	r5, [sp, #0]
 8002650:	4633      	mov	r3, r6
 8002652:	2200      	movs	r2, #0
 8002654:	4940      	ldr	r1, [pc, #256]	@ (8002758 <HAL_I2C_Mem_Read+0x25c>)
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff fb51 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 800265c:	2800      	cmp	r0, #0
 800265e:	f040 80c1 	bne.w	80027e4 <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800266a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002672:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002674:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002676:	1c53      	adds	r3, r2, #1
 8002678:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800267a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002680:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29b      	uxth	r3, r3
 8002688:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002690:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002692:	3301      	adds	r3, #1
 8002694:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002696:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800269c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026a6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 808a 	beq.w	80027c2 <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d854      	bhi.n	800275c <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d0b3      	beq.n	800261e <HAL_I2C_Mem_Read+0x122>
        else if (hi2c->XferSize == 2U)
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d0c9      	beq.n	800264e <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	9500      	str	r5, [sp, #0]
 80026bc:	4633      	mov	r3, r6
 80026be:	2200      	movs	r2, #0
 80026c0:	4925      	ldr	r1, [pc, #148]	@ (8002758 <HAL_I2C_Mem_Read+0x25c>)
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff fb1b 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	f040 808d 	bne.w	80027e8 <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f6:	9500      	str	r5, [sp, #0]
 80026f8:	4633      	mov	r3, r6
 80026fa:	2200      	movs	r2, #0
 80026fc:	4916      	ldr	r1, [pc, #88]	@ (8002758 <HAL_I2C_Mem_Read+0x25c>)
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff fafd 	bl	8001cfe <I2C_WaitOnFlagUntilTimeout>
 8002704:	2800      	cmp	r0, #0
 8002706:	d171      	bne.n	80027ec <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002710:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002718:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800271a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800271c:	1c53      	adds	r3, r2, #1
 800271e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002720:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002726:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002736:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002738:	3301      	adds	r3, #1
 800273a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800273c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002742:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800274c:	e7ab      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
 800274e:	bf00      	nop
 8002750:	00100002 	.word	0x00100002
 8002754:	ffff0000 	.word	0xffff0000
 8002758:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275c:	462a      	mov	r2, r5
 800275e:	4631      	mov	r1, r6
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff fd00 	bl	8002166 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002766:	2800      	cmp	r0, #0
 8002768:	d142      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002770:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002772:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002774:	3301      	adds	r3, #1
 8002776:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002778:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800277a:	3a01      	subs	r2, #1
 800277c:	b292      	uxth	r2, r2
 800277e:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002780:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29b      	uxth	r3, r3
 8002788:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	f011 0f04 	tst.w	r1, #4
 8002792:	d088      	beq.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
          if (hi2c->XferSize == 3U)
 8002794:	2a03      	cmp	r2, #3
 8002796:	d00f      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800279e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027a2:	3301      	adds	r3, #1
 80027a4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80027a6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80027ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80027b6:	e776      	b.n	80026a6 <HAL_I2C_Mem_Read+0x1aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e7ea      	b.n	8002798 <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	2320      	movs	r3, #32
 80027c4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80027ce:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80027d2:	e6a2      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80027d4:	2702      	movs	r7, #2
 80027d6:	e6a0      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80027d8:	2702      	movs	r7, #2
 80027da:	e69e      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80027dc:	2701      	movs	r7, #1
 80027de:	e69c      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027e0:	2701      	movs	r7, #1
 80027e2:	e69a      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027e4:	2701      	movs	r7, #1
 80027e6:	e698      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027e8:	2701      	movs	r7, #1
 80027ea:	e696      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80027ec:	2701      	movs	r7, #1
 80027ee:	e694      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80027f0:	2701      	movs	r7, #1
 80027f2:	e692      	b.n	800251a <HAL_I2C_Mem_Read+0x1e>

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2100      	movs	r1, #0
 80027f8:	9100      	str	r1, [sp, #0]
 80027fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_MspInit+0x34>)
 80027fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
 8002804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002806:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	9101      	str	r1, [sp, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002812:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002822:	b002      	add	sp, #8
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800

0800282c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	2800      	cmp	r0, #0
 800282e:	f000 81e0 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x3c6>
{
 8002832:	b570      	push	{r4, r5, r6, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002838:	6803      	ldr	r3, [r0, #0]
 800283a:	f013 0f01 	tst.w	r3, #1
 800283e:	d03b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002840:	4b9f      	ldr	r3, [pc, #636]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d02c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002854:	2b08      	cmp	r3, #8
 8002856:	d021      	beq.n	800289c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285e:	d04f      	beq.n	8002900 <HAL_RCC_OscConfig+0xd4>
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002864:	d052      	beq.n	800290c <HAL_RCC_OscConfig+0xe0>
 8002866:	4b96      	ldr	r3, [pc, #600]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002876:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d050      	beq.n	8002920 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff f8ab 	bl	80019d8 <HAL_GetTick>
 8002882:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002884:	4b8e      	ldr	r3, [pc, #568]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800288c:	d114      	bne.n	80028b8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7ff f8a3 	bl	80019d8 <HAL_GetTick>
 8002892:	1b40      	subs	r0, r0, r5
 8002894:	2864      	cmp	r0, #100	@ 0x64
 8002896:	d9f5      	bls.n	8002884 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002898:	2003      	movs	r0, #3
 800289a:	e1b1      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289c:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80028a4:	d0d8      	beq.n	8002858 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a6:	4b86      	ldr	r3, [pc, #536]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028ae:	d003      	beq.n	80028b8 <HAL_RCC_OscConfig+0x8c>
 80028b0:	6863      	ldr	r3, [r4, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 819f 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f013 0f02 	tst.w	r3, #2
 80028be:	d054      	beq.n	800296a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f013 0f0c 	tst.w	r3, #12
 80028c8:	d03e      	beq.n	8002948 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d033      	beq.n	800293e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d6:	68e3      	ldr	r3, [r4, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d068      	beq.n	80029ae <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b79      	ldr	r3, [pc, #484]	@ (8002ac4 <HAL_RCC_OscConfig+0x298>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7ff f879 	bl	80019d8 <HAL_GetTick>
 80028e6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b75      	ldr	r3, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d154      	bne.n	800299c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7ff f871 	bl	80019d8 <HAL_GetTick>
 80028f6:	1b40      	subs	r0, r0, r5
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d9f5      	bls.n	80028e8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e17f      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002900:	4a6f      	ldr	r2, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e7b5      	b.n	8002878 <HAL_RCC_OscConfig+0x4c>
 800290c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e7ab      	b.n	8002878 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002920:	f7ff f85a 	bl	80019d8 <HAL_GetTick>
 8002924:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800292e:	d0c3      	beq.n	80028b8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff f852 	bl	80019d8 <HAL_GetTick>
 8002934:	1b40      	subs	r0, r0, r5
 8002936:	2864      	cmp	r0, #100	@ 0x64
 8002938:	d9f5      	bls.n	8002926 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800293a:	2003      	movs	r0, #3
 800293c:	e160      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293e:	4b60      	ldr	r3, [pc, #384]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002946:	d1c6      	bne.n	80028d6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002948:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f013 0f02 	tst.w	r3, #2
 8002950:	d003      	beq.n	800295a <HAL_RCC_OscConfig+0x12e>
 8002952:	68e3      	ldr	r3, [r4, #12]
 8002954:	2b01      	cmp	r3, #1
 8002956:	f040 8150 	bne.w	8002bfa <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4a59      	ldr	r2, [pc, #356]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002962:	6921      	ldr	r1, [r4, #16]
 8002964:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002968:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	f013 0f08 	tst.w	r3, #8
 8002970:	d042      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002972:	6963      	ldr	r3, [r4, #20]
 8002974:	b36b      	cbz	r3, 80029d2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <HAL_RCC_OscConfig+0x298>)
 8002978:	2201      	movs	r2, #1
 800297a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7ff f82b 	bl	80019d8 <HAL_GetTick>
 8002982:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002984:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002988:	f013 0f02 	tst.w	r3, #2
 800298c:	d134      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298e:	f7ff f823 	bl	80019d8 <HAL_GetTick>
 8002992:	1b40      	subs	r0, r0, r5
 8002994:	2802      	cmp	r0, #2
 8002996:	d9f5      	bls.n	8002984 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002998:	2003      	movs	r0, #3
 800299a:	e131      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4a48      	ldr	r2, [pc, #288]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029a4:	6921      	ldr	r1, [r4, #16]
 80029a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e7dd      	b.n	800296a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b45      	ldr	r3, [pc, #276]	@ (8002ac4 <HAL_RCC_OscConfig+0x298>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029b4:	f7ff f810 	bl	80019d8 <HAL_GetTick>
 80029b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f013 0f02 	tst.w	r3, #2
 80029c2:	d0d2      	beq.n	800296a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7ff f808 	bl	80019d8 <HAL_GetTick>
 80029c8:	1b40      	subs	r0, r0, r5
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d9f5      	bls.n	80029ba <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80029ce:	2003      	movs	r0, #3
 80029d0:	e116      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac4 <HAL_RCC_OscConfig+0x298>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fffd 	bl	80019d8 <HAL_GetTick>
 80029de:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e4:	f013 0f02 	tst.w	r3, #2
 80029e8:	d006      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fff5 	bl	80019d8 <HAL_GetTick>
 80029ee:	1b40      	subs	r0, r0, r5
 80029f0:	2802      	cmp	r0, #2
 80029f2:	d9f5      	bls.n	80029e0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e103      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f013 0f04 	tst.w	r3, #4
 80029fe:	d077      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a08:	d133      	bne.n	8002a72 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a22:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <HAL_RCC_OscConfig+0x29c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a2c:	d023      	beq.n	8002a76 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2e:	68a3      	ldr	r3, [r4, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d034      	beq.n	8002a9e <HAL_RCC_OscConfig+0x272>
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d038      	beq.n	8002aaa <HAL_RCC_OscConfig+0x27e>
 8002a38:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002a3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a44:	f022 0204 	bic.w	r2, r2, #4
 8002a48:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03d      	beq.n	8002acc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe ffc2 	bl	80019d8 <HAL_GetTick>
 8002a54:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	f013 0f02 	tst.w	r3, #2
 8002a5e:	d146      	bne.n	8002aee <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe ffba 	bl	80019d8 <HAL_GetTick>
 8002a64:	1b80      	subs	r0, r0, r6
 8002a66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a6a:	4298      	cmp	r0, r3
 8002a6c:	d9f3      	bls.n	8002a56 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a6e:	2003      	movs	r0, #3
 8002a70:	e0c6      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2500      	movs	r5, #0
 8002a74:	e7d6      	b.n	8002a24 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4a14      	ldr	r2, [pc, #80]	@ (8002ac8 <HAL_RCC_OscConfig+0x29c>)
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a80:	f7fe ffaa 	bl	80019d8 <HAL_GetTick>
 8002a84:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_OscConfig+0x29c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a8e:	d1ce      	bne.n	8002a2e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe ffa2 	bl	80019d8 <HAL_GetTick>
 8002a94:	1b80      	subs	r0, r0, r6
 8002a96:	2802      	cmp	r0, #2
 8002a98:	d9f5      	bls.n	8002a86 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	e0b0      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002aa0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa8:	e7cf      	b.n	8002a4a <HAL_RCC_OscConfig+0x21e>
 8002aaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_RCC_OscConfig+0x294>)
 8002aac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002aae:	f042 0204 	orr.w	r2, r2, #4
 8002ab2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ab4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	671a      	str	r2, [r3, #112]	@ 0x70
 8002abc:	e7c5      	b.n	8002a4a <HAL_RCC_OscConfig+0x21e>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fe ff84 	bl	80019d8 <HAL_GetTick>
 8002ad0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b52      	ldr	r3, [pc, #328]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	f013 0f02 	tst.w	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe ff7c 	bl	80019d8 <HAL_GetTick>
 8002ae0:	1b80      	subs	r0, r0, r6
 8002ae2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d9f3      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002aea:	2003      	movs	r0, #3
 8002aec:	e088      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aee:	b9ed      	cbnz	r5, 8002b2c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	69a3      	ldr	r3, [r4, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8083 	beq.w	8002bfe <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af8:	4a48      	ldr	r2, [pc, #288]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002afa:	6892      	ldr	r2, [r2, #8]
 8002afc:	f002 020c 	and.w	r2, r2, #12
 8002b00:	2a08      	cmp	r2, #8
 8002b02:	d051      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d017      	beq.n	8002b38 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b45      	ldr	r3, [pc, #276]	@ (8002c20 <HAL_RCC_OscConfig+0x3f4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe ff63 	bl	80019d8 <HAL_GetTick>
 8002b12:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b14:	4b41      	ldr	r3, [pc, #260]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b1c:	d042      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe ff5b 	bl	80019d8 <HAL_GetTick>
 8002b22:	1b00      	subs	r0, r0, r4
 8002b24:	2802      	cmp	r0, #2
 8002b26:	d9f5      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b28:	2003      	movs	r0, #3
 8002b2a:	e069      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002b2e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	e7db      	b.n	8002af0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <HAL_RCC_OscConfig+0x3f4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b3e:	f7fe ff4b 	bl	80019d8 <HAL_GetTick>
 8002b42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b44:	4b35      	ldr	r3, [pc, #212]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b4c:	d006      	beq.n	8002b5c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe ff43 	bl	80019d8 <HAL_GetTick>
 8002b52:	1b40      	subs	r0, r0, r5
 8002b54:	2802      	cmp	r0, #2
 8002b56:	d9f5      	bls.n	8002b44 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b58:	2003      	movs	r0, #3
 8002b5a:	e051      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5c:	69e3      	ldr	r3, [r4, #28]
 8002b5e:	6a22      	ldr	r2, [r4, #32]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b68:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b6a:	0852      	lsrs	r2, r2, #1
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b78:	4a28      	ldr	r2, [pc, #160]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002b7a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b28      	ldr	r3, [pc, #160]	@ (8002c20 <HAL_RCC_OscConfig+0x3f4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b82:	f7fe ff29 	bl	80019d8 <HAL_GetTick>
 8002b86:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe ff21 	bl	80019d8 <HAL_GetTick>
 8002b96:	1b00      	subs	r0, r0, r4
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d9f5      	bls.n	8002b88 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	e02f      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	e02d      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	e02b      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d02b      	beq.n	8002c04 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x3f0>)
 8002bae:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002bb4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	4291      	cmp	r1, r2
 8002bb8:	d126      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bbe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	428a      	cmp	r2, r1
 8002bc2:	d123      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002bca:	401a      	ands	r2, r3
 8002bcc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002bd0:	d11e      	bne.n	8002c10 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002bd6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002be6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002bec:	d114      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e006      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002bf2:	2001      	movs	r0, #1
}
 8002bf4:	4770      	bx	lr
        return HAL_ERROR;
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e002      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002bfe:	2000      	movs	r0, #0
}
 8002c00:	b002      	add	sp, #8
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c04:	2001      	movs	r0, #1
 8002c06:	e7fb      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002c08:	2001      	movs	r0, #1
 8002c0a:	e7f9      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	e7f7      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002c10:	2001      	movs	r0, #1
 8002c12:	e7f5      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002c14:	2001      	movs	r0, #1
 8002c16:	e7f3      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002c18:	2001      	movs	r0, #1
 8002c1a:	e7f1      	b.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470000 	.word	0x42470000

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c26:	4b26      	ldr	r3, [pc, #152]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d041      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x92>
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d141      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c44:	d012      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c4e:	481d      	ldr	r0, [pc, #116]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c50:	2300      	movs	r3, #0
 8002c52:	fba1 0100 	umull	r0, r1, r1, r0
 8002c56:	f7fd ffdf 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5a:	4b19      	ldr	r3, [pc, #100]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002c66:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c6a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c6e:	6858      	ldr	r0, [r3, #4]
 8002c70:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c74:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c78:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c7c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c80:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c84:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c88:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c8c:	ebb1 010c 	subs.w	r1, r1, ip
 8002c90:	eb63 030e 	sbc.w	r3, r3, lr
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9a:	00c9      	lsls	r1, r1, #3
 8002c9c:	eb11 0c00 	adds.w	ip, r1, r0
 8002ca0:	f143 0300 	adc.w	r3, r3, #0
 8002ca4:	0299      	lsls	r1, r3, #10
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002cac:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002cb0:	f7fd ffb2 	bl	8000c18 <__aeabi_uldivmod>
 8002cb4:	e7d1      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002cb6:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb8:	e7d7      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cba:	4803      	ldr	r0, [pc, #12]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002cbc:	e7d5      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x46>
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	017d7840 	.word	0x017d7840
 8002cc8:	00f42400 	.word	0x00f42400

08002ccc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	f000 809b 	beq.w	8002e08 <HAL_RCC_ClockConfig+0x13c>
{
 8002cd2:	b570      	push	{r4, r5, r6, lr}
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e18 <HAL_RCC_ClockConfig+0x14c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d208      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce4:	b2cb      	uxtb	r3, r1
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8002e18 <HAL_RCC_ClockConfig+0x14c>)
 8002ce8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	f040 808b 	bne.w	8002e0c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d017      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	f013 0f04 	tst.w	r3, #4
 8002d02:	d004      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4a45      	ldr	r2, [pc, #276]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d06:	6893      	ldr	r3, [r2, #8]
 8002d08:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	f013 0f08 	tst.w	r3, #8
 8002d14:	d004      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d16:	4a41      	ldr	r2, [pc, #260]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d18:	6893      	ldr	r3, [r2, #8]
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4a3e      	ldr	r2, [pc, #248]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d22:	6893      	ldr	r3, [r2, #8]
 8002d24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d28:	68a1      	ldr	r1, [r4, #8]
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	f013 0f01 	tst.w	r3, #1
 8002d34:	d032      	beq.n	8002d9c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d021      	beq.n	8002d80 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3c:	1e9a      	subs	r2, r3, #2
 8002d3e:	2a01      	cmp	r2, #1
 8002d40:	d925      	bls.n	8002d8e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4a36      	ldr	r2, [pc, #216]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	f012 0f02 	tst.w	r2, #2
 8002d4a:	d061      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4c:	4933      	ldr	r1, [pc, #204]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d4e:	688a      	ldr	r2, [r1, #8]
 8002d50:	f022 0203 	bic.w	r2, r2, #3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d58:	f7fe fe3e 	bl	80019d8 <HAL_GetTick>
 8002d5c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	6862      	ldr	r2, [r4, #4]
 8002d68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6e:	f7fe fe33 	bl	80019d8 <HAL_GetTick>
 8002d72:	1b80      	subs	r0, r0, r6
 8002d74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d78:	4298      	cmp	r0, r3
 8002d7a:	d9f0      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	e042      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d88:	d1e0      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e03b      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4a23      	ldr	r2, [pc, #140]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002d96:	d1d9      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
 8002d9a:	e034      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <HAL_RCC_ClockConfig+0x14c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	42ab      	cmp	r3, r5
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da8:	b2ea      	uxtb	r2, r5
 8002daa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_RCC_ClockConfig+0x14c>)
 8002dac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	d12d      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f013 0f04 	tst.w	r3, #4
 8002dbe:	d006      	beq.n	8002dce <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002dc2:	6893      	ldr	r3, [r2, #8]
 8002dc4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002dc8:	68e1      	ldr	r1, [r4, #12]
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f013 0f08 	tst.w	r3, #8
 8002dd4:	d007      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd6:	4a11      	ldr	r2, [pc, #68]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002dd8:	6893      	ldr	r3, [r2, #8]
 8002dda:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002dde:	6921      	ldr	r1, [r4, #16]
 8002de0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002de4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de6:	f7ff ff1d 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002dea:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <HAL_RCC_ClockConfig+0x150>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002df2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <HAL_RCC_ClockConfig+0x154>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	40d8      	lsrs	r0, r3
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_RCC_ClockConfig+0x158>)
 8002dfa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_ClockConfig+0x15c>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	f7fe fd9e 	bl	8001940 <HAL_InitTick>
  return HAL_OK;
 8002e04:	2000      	movs	r0, #0
}
 8002e06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e08:	2001      	movs	r0, #1
}
 8002e0a:	4770      	bx	lr
      return HAL_ERROR;
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	e7fa      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7f8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e14:	2001      	movs	r0, #1
 8002e16:	e7f6      	b.n	8002e06 <HAL_RCC_ClockConfig+0x13a>
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080070c0 	.word	0x080070c0
 8002e24:	20000008 	.word	0x20000008
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e2c:	4b01      	ldr	r3, [pc, #4]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000008 	.word	0x20000008

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e3a:	f7ff fff7 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e46:	4a03      	ldr	r2, [pc, #12]	@ (8002e54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e4a:	40d8      	lsrs	r0, r3
 8002e4c:	bd08      	pop	{r3, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	080070b8 	.word	0x080070b8

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e5a:	f7ff ffe7 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e66:	4a03      	ldr	r2, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e6a:	40d8      	lsrs	r0, r3
 8002e6c:	bd08      	pop	{r3, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	080070b8 	.word	0x080070b8

08002e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7c:	6a03      	ldr	r3, [r0, #32]
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e86:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e88:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e8c:	680c      	ldr	r4, [r1, #0]
 8002e8e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e90:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e94:	688b      	ldr	r3, [r1, #8]
 8002e96:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <TIM_OC1_SetConfig+0x50>)
 8002e9a:	4290      	cmp	r0, r2
 8002e9c:	d006      	beq.n	8002eac <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea2:	684a      	ldr	r2, [r1, #4]
 8002ea4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea6:	6203      	str	r3, [r0, #32]
}
 8002ea8:	bc30      	pop	{r4, r5}
 8002eaa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002eb0:	68ca      	ldr	r2, [r1, #12]
 8002eb2:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb4:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002ebc:	694a      	ldr	r2, [r1, #20]
 8002ebe:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec0:	698d      	ldr	r5, [r1, #24]
 8002ec2:	4315      	orrs	r5, r2
 8002ec4:	e7eb      	b.n	8002e9e <TIM_OC1_SetConfig+0x26>
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000

08002ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed0:	6a02      	ldr	r2, [r0, #32]
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eda:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002edc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee0:	680d      	ldr	r5, [r1, #0]
 8002ee2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ee8:	688a      	ldr	r2, [r1, #8]
 8002eea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eee:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <TIM_OC3_SetConfig+0x58>)
 8002ef0:	4290      	cmp	r0, r2
 8002ef2:	d006      	beq.n	8002f02 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef8:	684a      	ldr	r2, [r1, #4]
 8002efa:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efc:	6203      	str	r3, [r0, #32]
}
 8002efe:	bc30      	pop	{r4, r5}
 8002f00:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f06:	68ca      	ldr	r2, [r1, #12]
 8002f08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f10:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f14:	694a      	ldr	r2, [r1, #20]
 8002f16:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f1a:	698a      	ldr	r2, [r1, #24]
 8002f1c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002f20:	e7e8      	b.n	8002ef4 <TIM_OC3_SetConfig+0x28>
 8002f22:	bf00      	nop
 8002f24:	40010000 	.word	0x40010000

08002f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2c:	6a02      	ldr	r2, [r0, #32]
 8002f2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f32:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f38:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f3c:	680d      	ldr	r5, [r1, #0]
 8002f3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f46:	688d      	ldr	r5, [r1, #8]
 8002f48:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	4d07      	ldr	r5, [pc, #28]	@ (8002f6c <TIM_OC4_SetConfig+0x44>)
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d006      	beq.n	8002f60 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f52:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f54:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f56:	684a      	ldr	r2, [r1, #4]
 8002f58:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5a:	6203      	str	r3, [r0, #32]
}
 8002f5c:	bc30      	pop	{r4, r5}
 8002f5e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f60:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f64:	694d      	ldr	r5, [r1, #20]
 8002f66:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002f6a:	e7f2      	b.n	8002f52 <TIM_OC4_SetConfig+0x2a>
 8002f6c:	40010000 	.word	0x40010000

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f72:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f74:	6a04      	ldr	r4, [r0, #32]
 8002f76:	f024 0401 	bic.w	r4, r4, #1
 8002f7a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f7e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f82:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f86:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002f8a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f8e:	6203      	str	r3, [r0, #32]
}
 8002f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f96:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9a:	6a04      	ldr	r4, [r0, #32]
 8002f9c:	f024 0410 	bic.w	r4, r4, #16
 8002fa0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fb6:	6203      	str	r3, [r0, #32]
}
 8002fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fbe:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fca:	6083      	str	r3, [r0, #8]
}
 8002fcc:	4770      	bx	lr

08002fce <HAL_TIM_PWM_MspInit>:
}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_PeriodElapsedCallback>:
}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_IC_CaptureCallback>:
}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
}
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_IRQHandler>:
{
 8002fda:	b570      	push	{r4, r5, r6, lr}
 8002fdc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002fde:	6803      	ldr	r3, [r0, #0]
 8002fe0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fe2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fe4:	f015 0f02 	tst.w	r5, #2
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fea:	f016 0f02 	tst.w	r6, #2
 8002fee:	d00d      	beq.n	800300c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffa:	6803      	ldr	r3, [r0, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f013 0f03 	tst.w	r3, #3
 8003002:	d05e      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003004:	f7ff ffe6 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003008:	2300      	movs	r3, #0
 800300a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800300c:	f015 0f04 	tst.w	r5, #4
 8003010:	d012      	beq.n	8003038 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003012:	f016 0f04 	tst.w	r6, #4
 8003016:	d00f      	beq.n	8003038 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f06f 0204 	mvn.w	r2, #4
 800301e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003020:	2302      	movs	r3, #2
 8003022:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800302c:	d04f      	beq.n	80030ce <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff ffd0 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003034:	2300      	movs	r3, #0
 8003036:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003038:	f015 0f08 	tst.w	r5, #8
 800303c:	d012      	beq.n	8003064 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800303e:	f016 0f08 	tst.w	r6, #8
 8003042:	d00f      	beq.n	8003064 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f06f 0208 	mvn.w	r2, #8
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304c:	2304      	movs	r3, #4
 800304e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f013 0f03 	tst.w	r3, #3
 8003058:	d040      	beq.n	80030dc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ffba 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003060:	2300      	movs	r3, #0
 8003062:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003064:	f015 0f10 	tst.w	r5, #16
 8003068:	d012      	beq.n	8003090 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800306a:	f016 0f10 	tst.w	r6, #16
 800306e:	d00f      	beq.n	8003090 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f06f 0210 	mvn.w	r2, #16
 8003076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003078:	2308      	movs	r3, #8
 800307a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003084:	d031      	beq.n	80030ea <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ffa4 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308c:	2300      	movs	r3, #0
 800308e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003090:	f015 0f01 	tst.w	r5, #1
 8003094:	d002      	beq.n	800309c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003096:	f016 0f01 	tst.w	r6, #1
 800309a:	d12d      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800309c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80030a0:	d002      	beq.n	80030a8 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030a2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80030a6:	d12f      	bne.n	8003108 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030a8:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80030ac:	d002      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ae:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80030b2:	d131      	bne.n	8003118 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b4:	f015 0f20 	tst.w	r5, #32
 80030b8:	d002      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ba:	f016 0f20 	tst.w	r6, #32
 80030be:	d133      	bne.n	8003128 <HAL_TIM_IRQHandler+0x14e>
}
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	f7ff ff86 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff ff85 	bl	8002fd6 <HAL_TIM_PWM_PulseFinishedCallback>
 80030cc:	e79c      	b.n	8003008 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	4620      	mov	r0, r4
 80030d0:	f7ff ff7f 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff ff7e 	bl	8002fd6 <HAL_TIM_PWM_PulseFinishedCallback>
 80030da:	e7ab      	b.n	8003034 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff ff78 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff77 	bl	8002fd6 <HAL_TIM_PWM_PulseFinishedCallback>
 80030e8:	e7ba      	b.n	8003060 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff ff71 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff ff70 	bl	8002fd6 <HAL_TIM_PWM_PulseFinishedCallback>
 80030f6:	e7c9      	b.n	800308c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	f06f 0201 	mvn.w	r2, #1
 80030fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff ff65 	bl	8002fd0 <HAL_TIM_PeriodElapsedCallback>
 8003106:	e7c9      	b.n	800309c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800310e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003110:	4620      	mov	r0, r4
 8003112:	f000 fad1 	bl	80036b8 <HAL_TIMEx_BreakCallback>
 8003116:	e7c7      	b.n	80030a8 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800311e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff ff59 	bl	8002fd8 <HAL_TIM_TriggerCallback>
 8003126:	e7c5      	b.n	80030b4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	f06f 0220 	mvn.w	r2, #32
 800312e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003130:	4620      	mov	r0, r4
 8003132:	f000 fac0 	bl	80036b6 <HAL_TIMEx_CommutCallback>
}
 8003136:	e7c3      	b.n	80030c0 <HAL_TIM_IRQHandler+0xe6>

08003138 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003138:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <TIM_Base_SetConfig+0xa8>)
 800313c:	4290      	cmp	r0, r2
 800313e:	d00e      	beq.n	800315e <TIM_Base_SetConfig+0x26>
 8003140:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x26>
 8003146:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800314a:	4290      	cmp	r0, r2
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x26>
 800314e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003152:	4290      	cmp	r0, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x26>
 8003156:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800315a:	4290      	cmp	r0, r2
 800315c:	d103      	bne.n	8003166 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003162:	684a      	ldr	r2, [r1, #4]
 8003164:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <TIM_Base_SetConfig+0xa8>)
 8003168:	4290      	cmp	r0, r2
 800316a:	d01a      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 800316c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 8003172:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003176:	4290      	cmp	r0, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 800317a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800317e:	4290      	cmp	r0, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 8003182:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003186:	4290      	cmp	r0, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 800318a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800318e:	4290      	cmp	r0, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 8003192:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003196:	4290      	cmp	r0, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x6a>
 800319a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800319e:	4290      	cmp	r0, r2
 80031a0:	d103      	bne.n	80031aa <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a6:	68ca      	ldr	r2, [r1, #12]
 80031a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ae:	694a      	ldr	r2, [r1, #20]
 80031b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	688b      	ldr	r3, [r1, #8]
 80031b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <TIM_Base_SetConfig+0xa8>)
 80031be:	4298      	cmp	r0, r3
 80031c0:	d00a      	beq.n	80031d8 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 80031c2:	2301      	movs	r3, #1
 80031c4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031c6:	6903      	ldr	r3, [r0, #16]
 80031c8:	f013 0f01 	tst.w	r3, #1
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ce:	6903      	ldr	r3, [r0, #16]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6103      	str	r3, [r0, #16]
}
 80031d6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	690b      	ldr	r3, [r1, #16]
 80031da:	6303      	str	r3, [r0, #48]	@ 0x30
 80031dc:	e7f1      	b.n	80031c2 <TIM_Base_SetConfig+0x8a>
 80031de:	bf00      	nop
 80031e0:	40010000 	.word	0x40010000

080031e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80031e4:	b340      	cbz	r0, 8003238 <HAL_TIM_Base_Init+0x54>
{
 80031e6:	b510      	push	{r4, lr}
 80031e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031ee:	b1f3      	cbz	r3, 800322e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f6:	4621      	mov	r1, r4
 80031f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80031fc:	f7ff ff9c 	bl	8003138 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	2301      	movs	r3, #1
 8003202:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800320a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800320e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003212:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800321a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800321e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003222:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003226:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800322a:	2000      	movs	r0, #0
}
 800322c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800322e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003232:	f000 fc65 	bl	8003b00 <HAL_TIM_Base_MspInit>
 8003236:	e7db      	b.n	80031f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
}
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800323c:	b340      	cbz	r0, 8003290 <HAL_TIM_PWM_Init+0x54>
{
 800323e:	b510      	push	{r4, lr}
 8003240:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003246:	b1f3      	cbz	r3, 8003286 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324e:	4621      	mov	r1, r4
 8003250:	f851 0b04 	ldr.w	r0, [r1], #4
 8003254:	f7ff ff70 	bl	8003138 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003258:	2301      	movs	r3, #1
 800325a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003262:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003266:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800326a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003276:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800327a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800327e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003282:	2000      	movs	r0, #0
}
 8003284:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003286:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800328a:	f7ff fea0 	bl	8002fce <HAL_TIM_PWM_MspInit>
 800328e:	e7db      	b.n	8003248 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003290:	2001      	movs	r0, #1
}
 8003292:	4770      	bx	lr

08003294 <TIM_OC2_SetConfig>:
{
 8003294:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003296:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003298:	6a02      	ldr	r2, [r0, #32]
 800329a:	f022 0210 	bic.w	r2, r2, #16
 800329e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80032a0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80032a2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	680d      	ldr	r5, [r1, #0]
 80032aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80032ae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b2:	688d      	ldr	r5, [r1, #8]
 80032b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032b8:	4d0c      	ldr	r5, [pc, #48]	@ (80032ec <TIM_OC2_SetConfig+0x58>)
 80032ba:	42a8      	cmp	r0, r5
 80032bc:	d006      	beq.n	80032cc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80032be:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032c0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80032c2:	684a      	ldr	r2, [r1, #4]
 80032c4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80032c6:	6203      	str	r3, [r0, #32]
}
 80032c8:	bc30      	pop	{r4, r5}
 80032ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80032cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032d0:	68cd      	ldr	r5, [r1, #12]
 80032d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80032d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032da:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032de:	694d      	ldr	r5, [r1, #20]
 80032e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e4:	698d      	ldr	r5, [r1, #24]
 80032e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80032ea:	e7e8      	b.n	80032be <TIM_OC2_SetConfig+0x2a>
 80032ec:	40010000 	.word	0x40010000

080032f0 <HAL_TIM_PWM_ConfigChannel>:
{
 80032f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80032f2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d066      	beq.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80032fa:	4604      	mov	r4, r0
 80032fc:	460d      	mov	r5, r1
 80032fe:	2301      	movs	r3, #1
 8003300:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003304:	2a0c      	cmp	r2, #12
 8003306:	d85a      	bhi.n	80033be <HAL_TIM_PWM_ConfigChannel+0xce>
 8003308:	e8df f002 	tbb	[pc, r2]
 800330c:	59595907 	.word	0x59595907
 8003310:	5959591b 	.word	0x5959591b
 8003314:	59595930 	.word	0x59595930
 8003318:	44          	.byte	0x44
 8003319:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	f7ff fdac 	bl	8002e78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	6993      	ldr	r3, [r2, #24]
 8003324:	f043 0308 	orr.w	r3, r3, #8
 8003328:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6993      	ldr	r3, [r2, #24]
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6993      	ldr	r3, [r2, #24]
 8003338:	6929      	ldr	r1, [r5, #16]
 800333a:	430b      	orrs	r3, r1
 800333c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2000      	movs	r0, #0
      break;
 8003340:	e03e      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003342:	6800      	ldr	r0, [r0, #0]
 8003344:	f7ff ffa6 	bl	8003294 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	6993      	ldr	r3, [r2, #24]
 800334c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003350:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	6993      	ldr	r3, [r2, #24]
 8003356:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800335a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	6822      	ldr	r2, [r4, #0]
 800335e:	6993      	ldr	r3, [r2, #24]
 8003360:	6929      	ldr	r1, [r5, #16]
 8003362:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003366:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2000      	movs	r0, #0
      break;
 800336a:	e029      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336c:	6800      	ldr	r0, [r0, #0]
 800336e:	f7ff fdad 	bl	8002ecc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	69d3      	ldr	r3, [r2, #28]
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	69d3      	ldr	r3, [r2, #28]
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	69d3      	ldr	r3, [r2, #28]
 800338a:	6929      	ldr	r1, [r5, #16]
 800338c:	430b      	orrs	r3, r1
 800338e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2000      	movs	r0, #0
      break;
 8003392:	e015      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003394:	6800      	ldr	r0, [r0, #0]
 8003396:	f7ff fdc7 	bl	8002f28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	69d3      	ldr	r3, [r2, #28]
 800339e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	69d3      	ldr	r3, [r2, #28]
 80033a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	69d3      	ldr	r3, [r2, #28]
 80033b2:	6929      	ldr	r1, [r5, #16]
 80033b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033b8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2000      	movs	r0, #0
      break;
 80033bc:	e000      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80033be:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80033c0:	2300      	movs	r3, #0
 80033c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80033c8:	2002      	movs	r0, #2
 80033ca:	e7fc      	b.n	80033c6 <HAL_TIM_PWM_ConfigChannel+0xd6>

080033cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033cc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80033d8:	430a      	orrs	r2, r1
 80033da:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033de:	6082      	str	r2, [r0, #8]
}
 80033e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033e6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d078      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0xfa>
{
 80033ee:	b510      	push	{r4, lr}
 80033f0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80033f2:	2301      	movs	r3, #1
 80033f4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80033fe:	6802      	ldr	r2, [r0, #0]
 8003400:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800340a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	2b60      	cmp	r3, #96	@ 0x60
 8003410:	d04c      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0xc6>
 8003412:	d823      	bhi.n	800345c <HAL_TIM_ConfigClockSource+0x76>
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	d054      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0xdc>
 8003418:	d811      	bhi.n	800343e <HAL_TIM_ConfigClockSource+0x58>
 800341a:	2b20      	cmp	r3, #32
 800341c:	d003      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x40>
 800341e:	d80a      	bhi.n	8003436 <HAL_TIM_ConfigClockSource+0x50>
 8003420:	b10b      	cbz	r3, 8003426 <HAL_TIM_ConfigClockSource+0x40>
 8003422:	2b10      	cmp	r3, #16
 8003424:	d105      	bne.n	8003432 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003426:	4619      	mov	r1, r3
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	f7ff fdc8 	bl	8002fbe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2000      	movs	r0, #0
      break;
 8003430:	e028      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003432:	2001      	movs	r0, #1
 8003434:	e026      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003436:	2b30      	cmp	r3, #48	@ 0x30
 8003438:	d0f5      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	e022      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800343e:	2b50      	cmp	r3, #80	@ 0x50
 8003440:	d10a      	bne.n	8003458 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	68ca      	ldr	r2, [r1, #12]
 8003444:	6849      	ldr	r1, [r1, #4]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	f7ff fd92 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800344c:	2150      	movs	r1, #80	@ 0x50
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f7ff fdb5 	bl	8002fbe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2000      	movs	r0, #0
      break;
 8003456:	e015      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e013      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003460:	d03a      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0xf2>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003466:	d014      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xac>
 8003468:	2b70      	cmp	r3, #112	@ 0x70
 800346a:	d137      	bne.n	80034dc <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	68cb      	ldr	r3, [r1, #12]
 800346e:	684a      	ldr	r2, [r1, #4]
 8003470:	6889      	ldr	r1, [r1, #8]
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	f7ff ffaa 	bl	80033cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003480:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003484:	2301      	movs	r3, #1
 8003486:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800348a:	2300      	movs	r3, #0
 800348c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003490:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	68cb      	ldr	r3, [r1, #12]
 8003494:	684a      	ldr	r2, [r1, #4]
 8003496:	6889      	ldr	r1, [r1, #8]
 8003498:	6800      	ldr	r0, [r0, #0]
 800349a:	f7ff ff97 	bl	80033cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	6893      	ldr	r3, [r2, #8]
 80034a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2000      	movs	r0, #0
      break;
 80034aa:	e7eb      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ac:	68ca      	ldr	r2, [r1, #12]
 80034ae:	6849      	ldr	r1, [r1, #4]
 80034b0:	6800      	ldr	r0, [r0, #0]
 80034b2:	f7ff fd70 	bl	8002f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b6:	2160      	movs	r1, #96	@ 0x60
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f7ff fd80 	bl	8002fbe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2000      	movs	r0, #0
      break;
 80034c0:	e7e0      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	68ca      	ldr	r2, [r1, #12]
 80034c4:	6849      	ldr	r1, [r1, #4]
 80034c6:	6800      	ldr	r0, [r0, #0]
 80034c8:	f7ff fd52 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	2140      	movs	r1, #64	@ 0x40
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f7ff fd75 	bl	8002fbe <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2000      	movs	r0, #0
      break;
 80034d6:	e7d5      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80034d8:	2000      	movs	r0, #0
 80034da:	e7d3      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80034dc:	2001      	movs	r0, #1
 80034de:	e7d1      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80034e0:	2002      	movs	r0, #2
}
 80034e2:	4770      	bx	lr

080034e4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034e4:	f001 011f 	and.w	r1, r1, #31
 80034e8:	f04f 0c01 	mov.w	ip, #1
 80034ec:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034f0:	6a03      	ldr	r3, [r0, #32]
 80034f2:	ea23 030c 	bic.w	r3, r3, ip
 80034f6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034f8:	6a03      	ldr	r3, [r0, #32]
 80034fa:	408a      	lsls	r2, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	6203      	str	r3, [r0, #32]
}
 8003500:	4770      	bx	lr
	...

08003504 <HAL_TIM_PWM_Start>:
{
 8003504:	b510      	push	{r4, lr}
 8003506:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003508:	4608      	mov	r0, r1
 800350a:	bb89      	cbnz	r1, 8003570 <HAL_TIM_PWM_Start+0x6c>
 800350c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003510:	3b01      	subs	r3, #1
 8003512:	bf18      	it	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d160      	bne.n	80035dc <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800351a:	2800      	cmp	r0, #0
 800351c:	d13e      	bne.n	800359c <HAL_TIM_PWM_Start+0x98>
 800351e:	2302      	movs	r3, #2
 8003520:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003524:	2201      	movs	r2, #1
 8003526:	4601      	mov	r1, r0
 8003528:	6820      	ldr	r0, [r4, #0]
 800352a:	f7ff ffdb 	bl	80034e4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	4a2c      	ldr	r2, [pc, #176]	@ (80035e4 <HAL_TIM_PWM_Start+0xe0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d042      	beq.n	80035bc <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <HAL_TIM_PWM_Start+0xe0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d043      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003542:	d040      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
 8003544:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003548:	4293      	cmp	r3, r2
 800354a:	d03c      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
 800354c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003550:	4293      	cmp	r3, r2
 8003552:	d038      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
 8003554:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003558:	4293      	cmp	r3, r2
 800355a:	d034      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
 800355c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003560:	4293      	cmp	r3, r2
 8003562:	d030      	beq.n	80035c6 <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800356c:	2000      	movs	r0, #0
 800356e:	e034      	b.n	80035da <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003570:	2904      	cmp	r1, #4
 8003572:	d007      	beq.n	8003584 <HAL_TIM_PWM_Start+0x80>
 8003574:	2908      	cmp	r1, #8
 8003576:	d00b      	beq.n	8003590 <HAL_TIM_PWM_Start+0x8c>
 8003578:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800357c:	3b01      	subs	r3, #1
 800357e:	bf18      	it	ne
 8003580:	2301      	movne	r3, #1
 8003582:	e7c8      	b.n	8003516 <HAL_TIM_PWM_Start+0x12>
 8003584:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003588:	3b01      	subs	r3, #1
 800358a:	bf18      	it	ne
 800358c:	2301      	movne	r3, #1
 800358e:	e7c2      	b.n	8003516 <HAL_TIM_PWM_Start+0x12>
 8003590:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003594:	3b01      	subs	r3, #1
 8003596:	bf18      	it	ne
 8003598:	2301      	movne	r3, #1
 800359a:	e7bc      	b.n	8003516 <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359c:	2804      	cmp	r0, #4
 800359e:	d005      	beq.n	80035ac <HAL_TIM_PWM_Start+0xa8>
 80035a0:	2808      	cmp	r0, #8
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_PWM_Start+0xb0>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80035aa:	e7bb      	b.n	8003524 <HAL_TIM_PWM_Start+0x20>
 80035ac:	2302      	movs	r3, #2
 80035ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80035b2:	e7b7      	b.n	8003524 <HAL_TIM_PWM_Start+0x20>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80035ba:	e7b3      	b.n	8003524 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 80035bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80035c4:	e7b7      	b.n	8003536 <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	2a06      	cmp	r2, #6
 80035ce:	d007      	beq.n	80035e0 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035d8:	2000      	movs	r0, #0
}
 80035da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035dc:	2001      	movs	r0, #1
 80035de:	e7fc      	b.n	80035da <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 80035e0:	2000      	movs	r0, #0
 80035e2:	e7fa      	b.n	80035da <HAL_TIM_PWM_Start+0xd6>
 80035e4:	40010000 	.word	0x40010000

080035e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80035ec:	2a01      	cmp	r2, #1
 80035ee:	d035      	beq.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 80035f0:	b410      	push	{r4}
 80035f2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80035f4:	2201      	movs	r2, #1
 80035f6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	2202      	movs	r2, #2
 80035fc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003600:	6802      	ldr	r2, [r0, #0]
 8003602:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003604:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003606:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800360a:	6808      	ldr	r0, [r1, #0]
 800360c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003610:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4812      	ldr	r0, [pc, #72]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003616:	4282      	cmp	r2, r0
 8003618:	d012      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800361a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800361e:	d00f      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003620:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003624:	4282      	cmp	r2, r0
 8003626:	d00b      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003628:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800362c:	4282      	cmp	r2, r0
 800362e:	d007      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003630:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003634:	4282      	cmp	r2, r0
 8003636:	d003      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003638:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800363c:	4282      	cmp	r2, r0
 800363e:	d104      	bne.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003640:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003644:	6849      	ldr	r1, [r1, #4]
 8003646:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003648:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003650:	2000      	movs	r0, #0
 8003652:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800365a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800365c:	2002      	movs	r0, #2
}
 800365e:	4770      	bx	lr
 8003660:	40010000 	.word	0x40010000

08003664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003664:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d021      	beq.n	80036b2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800366e:	2301      	movs	r3, #1
 8003670:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003674:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367a:	6888      	ldr	r0, [r1, #8]
 800367c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800367e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003682:	6848      	ldr	r0, [r1, #4]
 8003684:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800368a:	6808      	ldr	r0, [r1, #0]
 800368c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800368e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003692:	6908      	ldr	r0, [r1, #16]
 8003694:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003696:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800369a:	6948      	ldr	r0, [r1, #20]
 800369c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800369e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a2:	69c9      	ldr	r1, [r1, #28]
 80036a4:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80036b0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80036b2:	2002      	movs	r0, #2
}
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b8:	4770      	bx	lr

080036ba <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	f102 030c 	add.w	r3, r2, #12
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	320c      	adds	r2, #12
 80036ca:	e842 3100 	strex	r1, r3, [r2]
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d1f3      	bne.n	80036ba <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	f102 0314 	add.w	r3, r2, #20
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	3214      	adds	r2, #20
 80036e2:	e842 3100 	strex	r1, r3, [r2]
 80036e6:	2900      	cmp	r1, #0
 80036e8:	d1f3      	bne.n	80036d2 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d005      	beq.n	80036fc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	2320      	movs	r3, #32
 80036f2:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	2300      	movs	r3, #0
 80036f8:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80036fa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	f102 030c 	add.w	r3, r2, #12
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	320c      	adds	r2, #12
 800370c:	e842 3100 	strex	r1, r3, [r2]
 8003710:	2900      	cmp	r1, #0
 8003712:	d1f3      	bne.n	80036fc <UART_EndRxTransfer+0x42>
 8003714:	e7ec      	b.n	80036f0 <UART_EndRxTransfer+0x36>
	...

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b510      	push	{r4, lr}
 800371a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800371c:	6802      	ldr	r2, [r0, #0]
 800371e:	6913      	ldr	r3, [r2, #16]
 8003720:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003724:	68c1      	ldr	r1, [r0, #12]
 8003726:	430b      	orrs	r3, r1
 8003728:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800372a:	6883      	ldr	r3, [r0, #8]
 800372c:	6902      	ldr	r2, [r0, #16]
 800372e:	431a      	orrs	r2, r3
 8003730:	6943      	ldr	r3, [r0, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	69c3      	ldr	r3, [r0, #28]
 8003736:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003738:	6801      	ldr	r1, [r0, #0]
 800373a:	68cb      	ldr	r3, [r1, #12]
 800373c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003740:	f023 030c 	bic.w	r3, r3, #12
 8003744:	4313      	orrs	r3, r2
 8003746:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003748:	6802      	ldr	r2, [r0, #0]
 800374a:	6953      	ldr	r3, [r2, #20]
 800374c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003750:	6981      	ldr	r1, [r0, #24]
 8003752:	430b      	orrs	r3, r1
 8003754:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003756:	6803      	ldr	r3, [r0, #0]
 8003758:	4a31      	ldr	r2, [pc, #196]	@ (8003820 <UART_SetConfig+0x108>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d006      	beq.n	800376c <UART_SetConfig+0x54>
 800375e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003762:	4293      	cmp	r3, r2
 8003764:	d002      	beq.n	800376c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003766:	f7ff fb67 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 800376a:	e001      	b.n	8003770 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7ff fb74 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003770:	69e3      	ldr	r3, [r4, #28]
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003776:	d029      	beq.n	80037cc <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003778:	2100      	movs	r1, #0
 800377a:	1803      	adds	r3, r0, r0
 800377c:	4149      	adcs	r1, r1
 800377e:	181b      	adds	r3, r3, r0
 8003780:	f141 0100 	adc.w	r1, r1, #0
 8003784:	00c9      	lsls	r1, r1, #3
 8003786:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1818      	adds	r0, r3, r0
 800378e:	6863      	ldr	r3, [r4, #4]
 8003790:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003794:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003798:	f141 0100 	adc.w	r1, r1, #0
 800379c:	f7fd fa3c 	bl	8000c18 <__aeabi_uldivmod>
 80037a0:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <UART_SetConfig+0x10c>)
 80037a2:	fba2 3100 	umull	r3, r1, r2, r0
 80037a6:	0949      	lsrs	r1, r1, #5
 80037a8:	2364      	movs	r3, #100	@ 0x64
 80037aa:	fb03 0311 	mls	r3, r3, r1, r0
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	@ 0x32
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	6821      	ldr	r1, [r4, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }
}
 80037ca:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037cc:	2300      	movs	r3, #0
 80037ce:	1802      	adds	r2, r0, r0
 80037d0:	eb43 0103 	adc.w	r1, r3, r3
 80037d4:	1812      	adds	r2, r2, r0
 80037d6:	f141 0100 	adc.w	r1, r1, #0
 80037da:	00c9      	lsls	r1, r1, #3
 80037dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037e0:	00d2      	lsls	r2, r2, #3
 80037e2:	1810      	adds	r0, r2, r0
 80037e4:	f141 0100 	adc.w	r1, r1, #0
 80037e8:	6862      	ldr	r2, [r4, #4]
 80037ea:	1892      	adds	r2, r2, r2
 80037ec:	415b      	adcs	r3, r3
 80037ee:	f7fd fa13 	bl	8000c18 <__aeabi_uldivmod>
 80037f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003824 <UART_SetConfig+0x10c>)
 80037f4:	fba2 3100 	umull	r3, r1, r2, r0
 80037f8:	0949      	lsrs	r1, r1, #5
 80037fa:	2364      	movs	r3, #100	@ 0x64
 80037fc:	fb03 0311 	mls	r3, r3, r1, r0
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	3332      	adds	r3, #50	@ 0x32
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	005a      	lsls	r2, r3, #1
 800380c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003810:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	6821      	ldr	r1, [r4, #0]
 800381a:	4413      	add	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
 800381e:	e7d4      	b.n	80037ca <UART_SetConfig+0xb2>
 8003820:	40011000 	.word	0x40011000
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <UART_WaitOnFlagUntilTimeout>:
{
 8003828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800382c:	b083      	sub	sp, #12
 800382e:	4605      	mov	r5, r0
 8003830:	460e      	mov	r6, r1
 8003832:	4617      	mov	r7, r2
 8003834:	4699      	mov	r9, r3
 8003836:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	681c      	ldr	r4, [r3, #0]
 800383e:	ea36 0404 	bics.w	r4, r6, r4
 8003842:	bf0c      	ite	eq
 8003844:	2401      	moveq	r4, #1
 8003846:	2400      	movne	r4, #0
 8003848:	42bc      	cmp	r4, r7
 800384a:	d128      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800384c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003850:	d0f3      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fe f8c1 	bl	80019d8 <HAL_GetTick>
 8003856:	eba0 0009 	sub.w	r0, r0, r9
 800385a:	4540      	cmp	r0, r8
 800385c:	d823      	bhi.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800385e:	f1b8 0f00 	cmp.w	r8, #0
 8003862:	d022      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	f012 0f04 	tst.w	r2, #4
 800386c:	d0e5      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
 800386e:	2e80      	cmp	r6, #128	@ 0x80
 8003870:	d0e3      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
 8003872:	2e40      	cmp	r6, #64	@ 0x40
 8003874:	d0e1      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	f012 0f08 	tst.w	r2, #8
 800387c:	d0dd      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800387e:	2400      	movs	r4, #0
 8003880:	9401      	str	r4, [sp, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	9201      	str	r2, [sp, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800388c:	4628      	mov	r0, r5
 800388e:	f7ff ff14 	bl	80036ba <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003892:	2308      	movs	r3, #8
 8003894:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003896:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800389a:	2001      	movs	r0, #1
 800389c:	e000      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800389e:	2000      	movs	r0, #0
}
 80038a0:	b003      	add	sp, #12
 80038a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80038a6:	2003      	movs	r0, #3
 80038a8:	e7fa      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x78>
 80038aa:	2003      	movs	r0, #3
 80038ac:	e7f8      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x78>

080038ae <HAL_UART_Init>:
  if (huart == NULL)
 80038ae:	b360      	cbz	r0, 800390a <HAL_UART_Init+0x5c>
{
 80038b0:	b510      	push	{r4, lr}
 80038b2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80038b4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80038b8:	b313      	cbz	r3, 8003900 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80038ba:	2324      	movs	r3, #36	@ 0x24
 80038bc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	68d3      	ldr	r3, [r2, #12]
 80038c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff ff24 	bl	8003718 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	6913      	ldr	r3, [r2, #16]
 80038d4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80038d8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	6953      	ldr	r3, [r2, #20]
 80038de:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80038e2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	68d3      	ldr	r3, [r2, #12]
 80038e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038ec:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	2000      	movs	r0, #0
 80038f0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f2:	2320      	movs	r3, #32
 80038f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038fc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80038fe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003900:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003904:	f000 f9f2 	bl	8003cec <HAL_UART_MspInit>
 8003908:	e7d7      	b.n	80038ba <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800390a:	2001      	movs	r0, #1
}
 800390c:	4770      	bx	lr

0800390e <HAL_UART_Transmit>:
{
 800390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003916:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800391a:	2b20      	cmp	r3, #32
 800391c:	d156      	bne.n	80039cc <HAL_UART_Transmit+0xbe>
 800391e:	4604      	mov	r4, r0
 8003920:	460d      	mov	r5, r1
 8003922:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003924:	2900      	cmp	r1, #0
 8003926:	d055      	beq.n	80039d4 <HAL_UART_Transmit+0xc6>
 8003928:	b90a      	cbnz	r2, 800392e <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800392a:	2001      	movs	r0, #1
 800392c:	e04f      	b.n	80039ce <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	2300      	movs	r3, #0
 8003930:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003932:	2321      	movs	r3, #33	@ 0x21
 8003934:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003938:	f7fe f84e 	bl	80019d8 <HAL_GetTick>
 800393c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800393e:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003942:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394c:	d002      	beq.n	8003954 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 800394e:	f04f 0800 	mov.w	r8, #0
 8003952:	e014      	b.n	800397e <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	b32b      	cbz	r3, 80039a4 <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8003958:	f04f 0800 	mov.w	r8, #0
 800395c:	e00f      	b.n	800397e <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 800395e:	2320      	movs	r3, #32
 8003960:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
 8003966:	e032      	b.n	80039ce <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003968:	f838 3b02 	ldrh.w	r3, [r8], #2
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003974:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003976:	b292      	uxth	r2, r2
 8003978:	3a01      	subs	r2, #1
 800397a:	b292      	uxth	r2, r2
 800397c:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800397e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003980:	b29b      	uxth	r3, r3
 8003982:	b193      	cbz	r3, 80039aa <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	9600      	str	r6, [sp, #0]
 8003986:	463b      	mov	r3, r7
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	@ 0x80
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff ff4b 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 8003992:	2800      	cmp	r0, #0
 8003994:	d1e3      	bne.n	800395e <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8003996:	2d00      	cmp	r5, #0
 8003998:	d0e6      	beq.n	8003968 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800399a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a2:	e7e7      	b.n	8003974 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 80039a4:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80039a6:	2500      	movs	r5, #0
 80039a8:	e7e9      	b.n	800397e <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	9600      	str	r6, [sp, #0]
 80039ac:	463b      	mov	r3, r7
 80039ae:	2200      	movs	r2, #0
 80039b0:	2140      	movs	r1, #64	@ 0x40
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff ff38 	bl	8003828 <UART_WaitOnFlagUntilTimeout>
 80039b8:	b918      	cbnz	r0, 80039c2 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80039ba:	2320      	movs	r3, #32
 80039bc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80039c0:	e005      	b.n	80039ce <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 80039c2:	2320      	movs	r3, #32
 80039c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80039c8:	2003      	movs	r0, #3
 80039ca:	e000      	b.n	80039ce <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80039cc:	2002      	movs	r0, #2
}
 80039ce:	b002      	add	sp, #8
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
 80039d6:	e7fa      	b.n	80039ce <HAL_UART_Transmit+0xc0>

080039d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039d8:	e7fe      	b.n	80039d8 <NMI_Handler>

080039da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039da:	e7fe      	b.n	80039da <HardFault_Handler>

080039dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <MemManage_Handler>

080039de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039de:	e7fe      	b.n	80039de <BusFault_Handler>

080039e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <UsageFault_Handler>

080039e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e2:	4770      	bx	lr

080039e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e4:	4770      	bx	lr

080039e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e6:	4770      	bx	lr

080039e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ea:	f7fd ffe9 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ee:	bd08      	pop	{r3, pc}

080039f0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80039f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f2:	4802      	ldr	r0, [pc, #8]	@ (80039fc <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80039f4:	f7ff faf1 	bl	8002fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80039f8:	bd08      	pop	{r3, pc}
 80039fa:	bf00      	nop
 80039fc:	20000268 	.word	0x20000268

08003a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a02:	4802      	ldr	r0, [pc, #8]	@ (8003a0c <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003a04:	f7ff fae9 	bl	8002fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a08:	bd08      	pop	{r3, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000268 	.word	0x20000268

08003a10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a12:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8003a14:	f7ff fae1 	bl	8002fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a18:	bd08      	pop	{r3, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000268 	.word	0x20000268

08003a20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a22:	4802      	ldr	r0, [pc, #8]	@ (8003a2c <TIM1_CC_IRQHandler+0xc>)
 8003a24:	f7ff fad9 	bl	8002fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a28:	bd08      	pop	{r3, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000268 	.word	0x20000268

08003a30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003a30:	2001      	movs	r0, #1
 8003a32:	4770      	bx	lr

08003a34 <_kill>:

int _kill(int pid, int sig)
{
 8003a34:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a36:	f000 ff9d 	bl	8004974 <__errno>
 8003a3a:	2316      	movs	r3, #22
 8003a3c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003a3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a42:	bd08      	pop	{r3, pc}

08003a44 <_exit>:

void _exit (int status)
{
 8003a44:	b508      	push	{r3, lr}
  _kill(status, -1);
 8003a46:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a4a:	f7ff fff3 	bl	8003a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a4e:	e7fe      	b.n	8003a4e <_exit+0xa>

08003a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	460c      	mov	r4, r1
 8003a54:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a56:	2500      	movs	r5, #0
 8003a58:	e006      	b.n	8003a68 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8003a5a:	f3af 8000 	nop.w
 8003a5e:	4621      	mov	r1, r4
 8003a60:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a64:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003a66:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a68:	42b5      	cmp	r5, r6
 8003a6a:	dbf6      	blt.n	8003a5a <_read+0xa>
  }

  return len;
}
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}

08003a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	460c      	mov	r4, r1
 8003a74:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a76:	2500      	movs	r5, #0
 8003a78:	e004      	b.n	8003a84 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003a7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a82:	3501      	adds	r5, #1
 8003a84:	42b5      	cmp	r5, r6
 8003a86:	dbf8      	blt.n	8003a7a <_write+0xa>
  }
  return len;
}
 8003a88:	4630      	mov	r0, r6
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a90:	4770      	bx	lr

08003a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a96:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4770      	bx	lr

08003a9c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	4770      	bx	lr

08003aa0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	4770      	bx	lr

08003aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8003adc <_sbrk+0x38>)
 8003aaa:	490d      	ldr	r1, [pc, #52]	@ (8003ae0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aac:	480d      	ldr	r0, [pc, #52]	@ (8003ae4 <_sbrk+0x40>)
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	b140      	cbz	r0, 8003ac4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ab2:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <_sbrk+0x40>)
 8003ab4:	6800      	ldr	r0, [r0, #0]
 8003ab6:	4403      	add	r3, r0
 8003ab8:	1a52      	subs	r2, r2, r1
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d806      	bhi.n	8003acc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <_sbrk+0x40>)
 8003ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003ac2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003ac4:	4807      	ldr	r0, [pc, #28]	@ (8003ae4 <_sbrk+0x40>)
 8003ac6:	4c08      	ldr	r4, [pc, #32]	@ (8003ae8 <_sbrk+0x44>)
 8003ac8:	6004      	str	r4, [r0, #0]
 8003aca:	e7f2      	b.n	8003ab2 <_sbrk+0xe>
    errno = ENOMEM;
 8003acc:	f000 ff52 	bl	8004974 <__errno>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ad8:	e7f3      	b.n	8003ac2 <_sbrk+0x1e>
 8003ada:	bf00      	nop
 8003adc:	20020000 	.word	0x20020000
 8003ae0:	00000400 	.word	0x00000400
 8003ae4:	20000264 	.word	0x20000264
 8003ae8:	20000448 	.word	0x20000448

08003aec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aec:	4a03      	ldr	r2, [pc, #12]	@ (8003afc <SystemInit+0x10>)
 8003aee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003af6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003b00:	6802      	ldr	r2, [r0, #0]
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d000      	beq.n	8003b0a <HAL_TIM_Base_MspInit+0xa>
 8003b08:	4770      	bx	lr
{
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b0e:	2400      	movs	r4, #0
 8003b10:	9401      	str	r4, [sp, #4]
 8003b12:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003b16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	2018      	movs	r0, #24
 8003b2e:	f7fd ffc1 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003b32:	2018      	movs	r0, #24
 8003b34:	f7fd ffce 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b38:	4622      	mov	r2, r4
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	2019      	movs	r0, #25
 8003b3e:	f7fd ffb9 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b42:	2019      	movs	r0, #25
 8003b44:	f7fd ffc6 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003b48:	4622      	mov	r2, r4
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	201a      	movs	r0, #26
 8003b4e:	f7fd ffb1 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003b52:	201a      	movs	r0, #26
 8003b54:	f7fd ffbe 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003b58:	4622      	mov	r2, r4
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	201b      	movs	r0, #27
 8003b5e:	f7fd ffa9 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003b62:	201b      	movs	r0, #27
 8003b64:	f7fd ffb6 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd10      	pop	{r4, pc}
 8003b6c:	40010000 	.word	0x40010000

08003b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b70:	b500      	push	{lr}
 8003b72:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	2300      	movs	r3, #0
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	9302      	str	r3, [sp, #8]
 8003b7a:	9303      	str	r3, [sp, #12]
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003b80:	6802      	ldr	r2, [r0, #0]
 8003b82:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <HAL_TIM_MspPostInit+0x50>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d002      	beq.n	8003b8e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b88:	b007      	add	sp, #28
 8003b8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_TIM_MspPostInit+0x54>)
 8003b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003baa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	a901      	add	r1, sp, #4
 8003bb6:	4804      	ldr	r0, [pc, #16]	@ (8003bc8 <HAL_TIM_MspPostInit+0x58>)
 8003bb8:	f7fd ffa4 	bl	8001b04 <HAL_GPIO_Init>
}
 8003bbc:	e7e4      	b.n	8003b88 <HAL_TIM_MspPostInit+0x18>
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020000 	.word	0x40020000

08003bcc <MX_TIM1_Init>:
{
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	9412      	str	r4, [sp, #72]	@ 0x48
 8003bd4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003bd6:	9414      	str	r4, [sp, #80]	@ 0x50
 8003bd8:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bda:	9410      	str	r4, [sp, #64]	@ 0x40
 8003bdc:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bde:	9409      	str	r4, [sp, #36]	@ 0x24
 8003be0:	940a      	str	r4, [sp, #40]	@ 0x28
 8003be2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003be4:	940c      	str	r4, [sp, #48]	@ 0x30
 8003be6:	940d      	str	r4, [sp, #52]	@ 0x34
 8003be8:	940e      	str	r4, [sp, #56]	@ 0x38
 8003bea:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bec:	2220      	movs	r2, #32
 8003bee:	4621      	mov	r1, r4
 8003bf0:	a801      	add	r0, sp, #4
 8003bf2:	f000 fe5d 	bl	80048b0 <memset>
  htim1.Instance = TIM1;
 8003bf6:	482e      	ldr	r0, [pc, #184]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb4 <MX_TIM1_Init+0xe8>)
 8003bfa:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 999;
 8003bfc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003c00:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1999;
 8003c04:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8003c08:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c0c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c10:	f7ff fae8 	bl	80031e4 <HAL_TIM_Base_Init>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d138      	bne.n	8003c8a <MX_TIM1_Init+0xbe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c1c:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c1e:	a912      	add	r1, sp, #72	@ 0x48
 8003c20:	4823      	ldr	r0, [pc, #140]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c22:	f7ff fbe0 	bl	80033e6 <HAL_TIM_ConfigClockSource>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d132      	bne.n	8003c90 <MX_TIM1_Init+0xc4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c2a:	4821      	ldr	r0, [pc, #132]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c2c:	f7ff fb06 	bl	800323c <HAL_TIM_PWM_Init>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d130      	bne.n	8003c96 <MX_TIM1_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c38:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c3a:	a910      	add	r1, sp, #64	@ 0x40
 8003c3c:	481c      	ldr	r0, [pc, #112]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c3e:	f7ff fcd3 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c42:	bb58      	cbnz	r0, 8003c9c <MX_TIM1_Init+0xd0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c44:	2360      	movs	r3, #96	@ 0x60
 8003c46:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 225;
 8003c48:	23e1      	movs	r3, #225	@ 0xe1
 8003c4a:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c50:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c52:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c54:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c56:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c58:	a909      	add	r1, sp, #36	@ 0x24
 8003c5a:	4815      	ldr	r0, [pc, #84]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c5c:	f7ff fb48 	bl	80032f0 <HAL_TIM_PWM_ConfigChannel>
 8003c60:	b9f8      	cbnz	r0, 8003ca2 <MX_TIM1_Init+0xd6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c66:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c68:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c6a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c6c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c72:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c74:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c76:	a901      	add	r1, sp, #4
 8003c78:	480d      	ldr	r0, [pc, #52]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c7a:	f7ff fcf3 	bl	8003664 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c7e:	b998      	cbnz	r0, 8003ca8 <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 8003c80:	480b      	ldr	r0, [pc, #44]	@ (8003cb0 <MX_TIM1_Init+0xe4>)
 8003c82:	f7ff ff75 	bl	8003b70 <HAL_TIM_MspPostInit>
}
 8003c86:	b016      	add	sp, #88	@ 0x58
 8003c88:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003c8a:	f7fd fcad 	bl	80015e8 <Error_Handler>
 8003c8e:	e7c3      	b.n	8003c18 <MX_TIM1_Init+0x4c>
    Error_Handler();
 8003c90:	f7fd fcaa 	bl	80015e8 <Error_Handler>
 8003c94:	e7c9      	b.n	8003c2a <MX_TIM1_Init+0x5e>
    Error_Handler();
 8003c96:	f7fd fca7 	bl	80015e8 <Error_Handler>
 8003c9a:	e7cb      	b.n	8003c34 <MX_TIM1_Init+0x68>
    Error_Handler();
 8003c9c:	f7fd fca4 	bl	80015e8 <Error_Handler>
 8003ca0:	e7d0      	b.n	8003c44 <MX_TIM1_Init+0x78>
    Error_Handler();
 8003ca2:	f7fd fca1 	bl	80015e8 <Error_Handler>
 8003ca6:	e7dc      	b.n	8003c62 <MX_TIM1_Init+0x96>
    Error_Handler();
 8003ca8:	f7fd fc9e 	bl	80015e8 <Error_Handler>
 8003cac:	e7e8      	b.n	8003c80 <MX_TIM1_Init+0xb4>
 8003cae:	bf00      	nop
 8003cb0:	20000268 	.word	0x20000268
 8003cb4:	40010000 	.word	0x40010000

08003cb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003cb8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cba:	480a      	ldr	r0, [pc, #40]	@ (8003ce4 <MX_USART1_UART_Init+0x2c>)
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <MX_USART1_UART_Init+0x30>)
 8003cbe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003cc0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003cc4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ccc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cce:	220c      	movs	r2, #12
 8003cd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cd6:	f7ff fdea 	bl	80038ae <HAL_UART_Init>
 8003cda:	b900      	cbnz	r0, 8003cde <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cdc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cde:	f7fd fc83 	bl	80015e8 <Error_Handler>
}
 8003ce2:	e7fb      	b.n	8003cdc <MX_USART1_UART_Init+0x24>
 8003ce4:	200002b0 	.word	0x200002b0
 8003ce8:	40011000 	.word	0x40011000

08003cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cec:	b500      	push	{lr}
 8003cee:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9303      	str	r3, [sp, #12]
 8003cf4:	9304      	str	r3, [sp, #16]
 8003cf6:	9305      	str	r3, [sp, #20]
 8003cf8:	9306      	str	r3, [sp, #24]
 8003cfa:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003cfc:	6802      	ldr	r2, [r0, #0]
 8003cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d02:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d002      	beq.n	8003d10 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d0a:	b009      	add	sp, #36	@ 0x24
 8003d0c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d10:	2100      	movs	r1, #0
 8003d12:	9101      	str	r1, [sp, #4]
 8003d14:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8003d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d1a:	f042 0210 	orr.w	r2, r2, #16
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d22:	f002 0210 	and.w	r2, r2, #16
 8003d26:	9201      	str	r2, [sp, #4]
 8003d28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	9102      	str	r1, [sp, #8]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	a903      	add	r1, sp, #12
 8003d52:	4802      	ldr	r0, [pc, #8]	@ (8003d5c <HAL_UART_MspInit+0x70>)
 8003d54:	f7fd fed6 	bl	8001b04 <HAL_GPIO_Init>
}
 8003d58:	e7d7      	b.n	8003d0a <HAL_UART_MspInit+0x1e>
 8003d5a:	bf00      	nop
 8003d5c:	40020000 	.word	0x40020000

08003d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d64:	f7ff fec2 	bl	8003aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d68:	480c      	ldr	r0, [pc, #48]	@ (8003d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d6a:	490d      	ldr	r1, [pc, #52]	@ (8003da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d70:	e002      	b.n	8003d78 <LoopCopyDataInit>

08003d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d76:	3304      	adds	r3, #4

08003d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d7c:	d3f9      	bcc.n	8003d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d80:	4c0a      	ldr	r4, [pc, #40]	@ (8003dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d84:	e001      	b.n	8003d8a <LoopFillZerobss>

08003d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d88:	3204      	adds	r2, #4

08003d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d8c:	d3fb      	bcc.n	8003d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d8e:	f000 fdf7 	bl	8004980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d92:	f7fd fc7b 	bl	800168c <main>
  bx  lr    
 8003d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003da4:	0800742c 	.word	0x0800742c
  ldr r2, =_sbss
 8003da8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003dac:	20000444 	.word	0x20000444

08003db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db0:	e7fe      	b.n	8003db0 <ADC_IRQHandler>

08003db2 <__cvt>:
 8003db2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db6:	ec57 6b10 	vmov	r6, r7, d0
 8003dba:	2f00      	cmp	r7, #0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	bfbb      	ittet	lt
 8003dc4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003dc8:	461f      	movlt	r7, r3
 8003dca:	2300      	movge	r3, #0
 8003dcc:	232d      	movlt	r3, #45	@ 0x2d
 8003dce:	700b      	strb	r3, [r1, #0]
 8003dd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dd2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dd6:	4691      	mov	r9, r2
 8003dd8:	f023 0820 	bic.w	r8, r3, #32
 8003ddc:	bfbc      	itt	lt
 8003dde:	4632      	movlt	r2, r6
 8003de0:	4616      	movlt	r6, r2
 8003de2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003de6:	d005      	beq.n	8003df4 <__cvt+0x42>
 8003de8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dec:	d100      	bne.n	8003df0 <__cvt+0x3e>
 8003dee:	3401      	adds	r4, #1
 8003df0:	2102      	movs	r1, #2
 8003df2:	e000      	b.n	8003df6 <__cvt+0x44>
 8003df4:	2103      	movs	r1, #3
 8003df6:	ab03      	add	r3, sp, #12
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	ab02      	add	r3, sp, #8
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	ec47 6b10 	vmov	d0, r6, r7
 8003e02:	4653      	mov	r3, sl
 8003e04:	4622      	mov	r2, r4
 8003e06:	f000 fe6b 	bl	8004ae0 <_dtoa_r>
 8003e0a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e0e:	4605      	mov	r5, r0
 8003e10:	d119      	bne.n	8003e46 <__cvt+0x94>
 8003e12:	f019 0f01 	tst.w	r9, #1
 8003e16:	d00e      	beq.n	8003e36 <__cvt+0x84>
 8003e18:	eb00 0904 	add.w	r9, r0, r4
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fe38 	bl	8000a98 <__aeabi_dcmpeq>
 8003e28:	b108      	cbz	r0, 8003e2e <__cvt+0x7c>
 8003e2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e2e:	2230      	movs	r2, #48	@ 0x30
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	454b      	cmp	r3, r9
 8003e34:	d31e      	bcc.n	8003e74 <__cvt+0xc2>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e3a:	1b5b      	subs	r3, r3, r5
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	b004      	add	sp, #16
 8003e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e4a:	eb00 0904 	add.w	r9, r0, r4
 8003e4e:	d1e5      	bne.n	8003e1c <__cvt+0x6a>
 8003e50:	7803      	ldrb	r3, [r0, #0]
 8003e52:	2b30      	cmp	r3, #48	@ 0x30
 8003e54:	d10a      	bne.n	8003e6c <__cvt+0xba>
 8003e56:	2200      	movs	r2, #0
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	f7fc fe1b 	bl	8000a98 <__aeabi_dcmpeq>
 8003e62:	b918      	cbnz	r0, 8003e6c <__cvt+0xba>
 8003e64:	f1c4 0401 	rsb	r4, r4, #1
 8003e68:	f8ca 4000 	str.w	r4, [sl]
 8003e6c:	f8da 3000 	ldr.w	r3, [sl]
 8003e70:	4499      	add	r9, r3
 8003e72:	e7d3      	b.n	8003e1c <__cvt+0x6a>
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e7d9      	b.n	8003e30 <__cvt+0x7e>

08003e7c <__exponent>:
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	bfba      	itte	lt
 8003e82:	4249      	neglt	r1, r1
 8003e84:	232d      	movlt	r3, #45	@ 0x2d
 8003e86:	232b      	movge	r3, #43	@ 0x2b
 8003e88:	2909      	cmp	r1, #9
 8003e8a:	7002      	strb	r2, [r0, #0]
 8003e8c:	7043      	strb	r3, [r0, #1]
 8003e8e:	dd29      	ble.n	8003ee4 <__exponent+0x68>
 8003e90:	f10d 0407 	add.w	r4, sp, #7
 8003e94:	4625      	mov	r5, r4
 8003e96:	270a      	movs	r7, #10
 8003e98:	4622      	mov	r2, r4
 8003e9a:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e9e:	fb07 1316 	mls	r3, r7, r6, r1
 8003ea2:	3330      	adds	r3, #48	@ 0x30
 8003ea4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	2b63      	cmp	r3, #99	@ 0x63
 8003eac:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	dcf1      	bgt.n	8003e98 <__exponent+0x1c>
 8003eb4:	3130      	adds	r1, #48	@ 0x30
 8003eb6:	1e93      	subs	r3, r2, #2
 8003eb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ebc:	1c41      	adds	r1, r0, #1
 8003ebe:	461c      	mov	r4, r3
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	d30a      	bcc.n	8003eda <__exponent+0x5e>
 8003ec4:	f10d 0309 	add.w	r3, sp, #9
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	42a5      	cmp	r5, r4
 8003ecc:	bf38      	it	cc
 8003ece:	2300      	movcc	r3, #0
 8003ed0:	1c82      	adds	r2, r0, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	1a18      	subs	r0, r3, r0
 8003ed6:	b003      	add	sp, #12
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eda:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ede:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ee2:	e7ed      	b.n	8003ec0 <__exponent+0x44>
 8003ee4:	2330      	movs	r3, #48	@ 0x30
 8003ee6:	3130      	adds	r1, #48	@ 0x30
 8003ee8:	7083      	strb	r3, [r0, #2]
 8003eea:	70c1      	strb	r1, [r0, #3]
 8003eec:	1d03      	adds	r3, r0, #4
 8003eee:	e7f1      	b.n	8003ed4 <__exponent+0x58>

08003ef0 <_printf_float>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b08d      	sub	sp, #52	@ 0x34
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003efc:	4616      	mov	r6, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	4605      	mov	r5, r0
 8003f02:	f000 fced 	bl	80048e0 <_localeconv_r>
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	9306      	str	r3, [sp, #24]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc f998 	bl	8000240 <strlen>
 8003f10:	2300      	movs	r3, #0
 8003f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f14:	f8d8 3000 	ldr.w	r3, [r8]
 8003f18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f1c:	f8d4 b000 	ldr.w	fp, [r4]
 8003f20:	9007      	str	r0, [sp, #28]
 8003f22:	3307      	adds	r3, #7
 8003f24:	f023 0307 	bic.w	r3, r3, #7
 8003f28:	ecb3 7b02 	vldmia	r3!, {d7}
 8003f2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f30:	f8c8 3000 	str.w	r3, [r8]
 8003f34:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8003f38:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003f3c:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8003f40:	4b9c      	ldr	r3, [pc, #624]	@ (80041b4 <_printf_float+0x2c4>)
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc fdd7 	bl	8000afc <__aeabi_dcmpun>
 8003f4e:	bb70      	cbnz	r0, 8003fae <_printf_float+0xbe>
 8003f50:	4b98      	ldr	r3, [pc, #608]	@ (80041b4 <_printf_float+0x2c4>)
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	f7fc fdb1 	bl	8000ac0 <__aeabi_dcmple>
 8003f5e:	bb30      	cbnz	r0, 8003fae <_printf_float+0xbe>
 8003f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2300      	movs	r3, #0
 8003f68:	f7fc fda0 	bl	8000aac <__aeabi_dcmplt>
 8003f6c:	b110      	cbz	r0, 8003f74 <_printf_float+0x84>
 8003f6e:	232d      	movs	r3, #45	@ 0x2d
 8003f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f74:	4a90      	ldr	r2, [pc, #576]	@ (80041b8 <_printf_float+0x2c8>)
 8003f76:	4b91      	ldr	r3, [pc, #580]	@ (80041bc <_printf_float+0x2cc>)
 8003f78:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f7c:	bf8c      	ite	hi
 8003f7e:	4690      	movhi	r8, r2
 8003f80:	4698      	movls	r8, r3
 8003f82:	2303      	movs	r3, #3
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	f02b 0304 	bic.w	r3, fp, #4
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	f04f 0900 	mov.w	r9, #0
 8003f90:	9700      	str	r7, [sp, #0]
 8003f92:	4633      	mov	r3, r6
 8003f94:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f96:	4621      	mov	r1, r4
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f000 f9d1 	bl	8004340 <_printf_common>
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	f040 808c 	bne.w	80040bc <_printf_float+0x1cc>
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fa8:	b00d      	add	sp, #52	@ 0x34
 8003faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f7fc fda1 	bl	8000afc <__aeabi_dcmpun>
 8003fba:	b140      	cbz	r0, 8003fce <_printf_float+0xde>
 8003fbc:	9b05      	ldr	r3, [sp, #20]
 8003fbe:	4a80      	ldr	r2, [pc, #512]	@ (80041c0 <_printf_float+0x2d0>)
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bfbc      	itt	lt
 8003fc4:	232d      	movlt	r3, #45	@ 0x2d
 8003fc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fca:	4b7e      	ldr	r3, [pc, #504]	@ (80041c4 <_printf_float+0x2d4>)
 8003fcc:	e7d4      	b.n	8003f78 <_printf_float+0x88>
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 8003fd6:	d13b      	bne.n	8004050 <_printf_float+0x160>
 8003fd8:	2306      	movs	r3, #6
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6022      	str	r2, [r4, #0]
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fe8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003fec:	ab09      	add	r3, sp, #36	@ 0x24
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8003ff6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f7ff fed9 	bl	8003db2 <__cvt>
 8004000:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004004:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004006:	4680      	mov	r8, r0
 8004008:	d129      	bne.n	800405e <_printf_float+0x16e>
 800400a:	1cc8      	adds	r0, r1, #3
 800400c:	db02      	blt.n	8004014 <_printf_float+0x124>
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	428b      	cmp	r3, r1
 8004012:	da41      	bge.n	8004098 <_printf_float+0x1a8>
 8004014:	f1aa 0a02 	sub.w	sl, sl, #2
 8004018:	fa5f fa8a 	uxtb.w	sl, sl
 800401c:	3901      	subs	r1, #1
 800401e:	4652      	mov	r2, sl
 8004020:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004024:	9109      	str	r1, [sp, #36]	@ 0x24
 8004026:	f7ff ff29 	bl	8003e7c <__exponent>
 800402a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800402c:	1813      	adds	r3, r2, r0
 800402e:	2a01      	cmp	r2, #1
 8004030:	4681      	mov	r9, r0
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	dc02      	bgt.n	800403c <_printf_float+0x14c>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	07d2      	lsls	r2, r2, #31
 800403a:	d501      	bpl.n	8004040 <_printf_float+0x150>
 800403c:	3301      	adds	r3, #1
 800403e:	6123      	str	r3, [r4, #16]
 8004040:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0a3      	beq.n	8003f90 <_printf_float+0xa0>
 8004048:	232d      	movs	r3, #45	@ 0x2d
 800404a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800404e:	e79f      	b.n	8003f90 <_printf_float+0xa0>
 8004050:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004054:	d1c2      	bne.n	8003fdc <_printf_float+0xec>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1c0      	bne.n	8003fdc <_printf_float+0xec>
 800405a:	2301      	movs	r3, #1
 800405c:	e7bd      	b.n	8003fda <_printf_float+0xea>
 800405e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004062:	d9db      	bls.n	800401c <_printf_float+0x12c>
 8004064:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004068:	d118      	bne.n	800409c <_printf_float+0x1ac>
 800406a:	2900      	cmp	r1, #0
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	dd0b      	ble.n	8004088 <_printf_float+0x198>
 8004070:	6121      	str	r1, [r4, #16]
 8004072:	b913      	cbnz	r3, 800407a <_printf_float+0x18a>
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	07d0      	lsls	r0, r2, #31
 8004078:	d502      	bpl.n	8004080 <_printf_float+0x190>
 800407a:	3301      	adds	r3, #1
 800407c:	440b      	add	r3, r1
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004082:	f04f 0900 	mov.w	r9, #0
 8004086:	e7db      	b.n	8004040 <_printf_float+0x150>
 8004088:	b913      	cbnz	r3, 8004090 <_printf_float+0x1a0>
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	07d2      	lsls	r2, r2, #31
 800408e:	d501      	bpl.n	8004094 <_printf_float+0x1a4>
 8004090:	3302      	adds	r3, #2
 8004092:	e7f4      	b.n	800407e <_printf_float+0x18e>
 8004094:	2301      	movs	r3, #1
 8004096:	e7f2      	b.n	800407e <_printf_float+0x18e>
 8004098:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800409c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800409e:	428b      	cmp	r3, r1
 80040a0:	dc05      	bgt.n	80040ae <_printf_float+0x1be>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	6121      	str	r1, [r4, #16]
 80040a6:	07d8      	lsls	r0, r3, #31
 80040a8:	d5ea      	bpl.n	8004080 <_printf_float+0x190>
 80040aa:	1c4b      	adds	r3, r1, #1
 80040ac:	e7e7      	b.n	800407e <_printf_float+0x18e>
 80040ae:	2900      	cmp	r1, #0
 80040b0:	bfd4      	ite	le
 80040b2:	f1c1 0202 	rsble	r2, r1, #2
 80040b6:	2201      	movgt	r2, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	e7e0      	b.n	800407e <_printf_float+0x18e>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	055a      	lsls	r2, r3, #21
 80040c0:	d407      	bmi.n	80040d2 <_printf_float+0x1e2>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	4642      	mov	r2, r8
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	d12b      	bne.n	8004128 <_printf_float+0x238>
 80040d0:	e768      	b.n	8003fa4 <_printf_float+0xb4>
 80040d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040d6:	f240 80dd 	bls.w	8004294 <_printf_float+0x3a4>
 80040da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040de:	2200      	movs	r2, #0
 80040e0:	2300      	movs	r3, #0
 80040e2:	f7fc fcd9 	bl	8000a98 <__aeabi_dcmpeq>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d033      	beq.n	8004152 <_printf_float+0x262>
 80040ea:	4a37      	ldr	r2, [pc, #220]	@ (80041c8 <_printf_float+0x2d8>)
 80040ec:	2301      	movs	r3, #1
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f af55 	beq.w	8003fa4 <_printf_float+0xb4>
 80040fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80040fe:	4543      	cmp	r3, r8
 8004100:	db02      	blt.n	8004108 <_printf_float+0x218>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	07d8      	lsls	r0, r3, #31
 8004106:	d50f      	bpl.n	8004128 <_printf_float+0x238>
 8004108:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800410c:	4631      	mov	r1, r6
 800410e:	4628      	mov	r0, r5
 8004110:	47b8      	blx	r7
 8004112:	3001      	adds	r0, #1
 8004114:	f43f af46 	beq.w	8003fa4 <_printf_float+0xb4>
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004120:	f104 0a1a 	add.w	sl, r4, #26
 8004124:	45c8      	cmp	r8, r9
 8004126:	dc09      	bgt.n	800413c <_printf_float+0x24c>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	079b      	lsls	r3, r3, #30
 800412c:	f100 8103 	bmi.w	8004336 <_printf_float+0x446>
 8004130:	68e0      	ldr	r0, [r4, #12]
 8004132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004134:	4298      	cmp	r0, r3
 8004136:	bfb8      	it	lt
 8004138:	4618      	movlt	r0, r3
 800413a:	e735      	b.n	8003fa8 <_printf_float+0xb8>
 800413c:	2301      	movs	r3, #1
 800413e:	4652      	mov	r2, sl
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af2c 	beq.w	8003fa4 <_printf_float+0xb4>
 800414c:	f109 0901 	add.w	r9, r9, #1
 8004150:	e7e8      	b.n	8004124 <_printf_float+0x234>
 8004152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc39      	bgt.n	80041cc <_printf_float+0x2dc>
 8004158:	4a1b      	ldr	r2, [pc, #108]	@ (80041c8 <_printf_float+0x2d8>)
 800415a:	2301      	movs	r3, #1
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	f43f af1e 	beq.w	8003fa4 <_printf_float+0xb4>
 8004168:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800416c:	ea59 0303 	orrs.w	r3, r9, r3
 8004170:	d102      	bne.n	8004178 <_printf_float+0x288>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	07d9      	lsls	r1, r3, #31
 8004176:	d5d7      	bpl.n	8004128 <_printf_float+0x238>
 8004178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f af0e 	beq.w	8003fa4 <_printf_float+0xb4>
 8004188:	f04f 0a00 	mov.w	sl, #0
 800418c:	f104 0b1a 	add.w	fp, r4, #26
 8004190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004192:	425b      	negs	r3, r3
 8004194:	4553      	cmp	r3, sl
 8004196:	dc01      	bgt.n	800419c <_printf_float+0x2ac>
 8004198:	464b      	mov	r3, r9
 800419a:	e793      	b.n	80040c4 <_printf_float+0x1d4>
 800419c:	2301      	movs	r3, #1
 800419e:	465a      	mov	r2, fp
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f aefc 	beq.w	8003fa4 <_printf_float+0xb4>
 80041ac:	f10a 0a01 	add.w	sl, sl, #1
 80041b0:	e7ee      	b.n	8004190 <_printf_float+0x2a0>
 80041b2:	bf00      	nop
 80041b4:	7fefffff 	.word	0x7fefffff
 80041b8:	080070d4 	.word	0x080070d4
 80041bc:	080070d0 	.word	0x080070d0
 80041c0:	080070dc 	.word	0x080070dc
 80041c4:	080070d8 	.word	0x080070d8
 80041c8:	080070e0 	.word	0x080070e0
 80041cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041d2:	4553      	cmp	r3, sl
 80041d4:	bfa8      	it	ge
 80041d6:	4653      	movge	r3, sl
 80041d8:	2b00      	cmp	r3, #0
 80041da:	4699      	mov	r9, r3
 80041dc:	dc36      	bgt.n	800424c <_printf_float+0x35c>
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e6:	f104 021a 	add.w	r2, r4, #26
 80041ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	eba3 0309 	sub.w	r3, r3, r9
 80041f2:	455b      	cmp	r3, fp
 80041f4:	dc31      	bgt.n	800425a <_printf_float+0x36a>
 80041f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f8:	459a      	cmp	sl, r3
 80041fa:	dc3a      	bgt.n	8004272 <_printf_float+0x382>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07da      	lsls	r2, r3, #31
 8004200:	d437      	bmi.n	8004272 <_printf_float+0x382>
 8004202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004204:	ebaa 0903 	sub.w	r9, sl, r3
 8004208:	9b04      	ldr	r3, [sp, #16]
 800420a:	ebaa 0303 	sub.w	r3, sl, r3
 800420e:	4599      	cmp	r9, r3
 8004210:	bfa8      	it	ge
 8004212:	4699      	movge	r9, r3
 8004214:	f1b9 0f00 	cmp.w	r9, #0
 8004218:	dc33      	bgt.n	8004282 <_printf_float+0x392>
 800421a:	f04f 0800 	mov.w	r8, #0
 800421e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004222:	f104 0b1a 	add.w	fp, r4, #26
 8004226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004228:	ebaa 0303 	sub.w	r3, sl, r3
 800422c:	eba3 0309 	sub.w	r3, r3, r9
 8004230:	4543      	cmp	r3, r8
 8004232:	f77f af79 	ble.w	8004128 <_printf_float+0x238>
 8004236:	2301      	movs	r3, #1
 8004238:	465a      	mov	r2, fp
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	f43f aeaf 	beq.w	8003fa4 <_printf_float+0xb4>
 8004246:	f108 0801 	add.w	r8, r8, #1
 800424a:	e7ec      	b.n	8004226 <_printf_float+0x336>
 800424c:	4642      	mov	r2, r8
 800424e:	4631      	mov	r1, r6
 8004250:	4628      	mov	r0, r5
 8004252:	47b8      	blx	r7
 8004254:	3001      	adds	r0, #1
 8004256:	d1c2      	bne.n	80041de <_printf_float+0x2ee>
 8004258:	e6a4      	b.n	8003fa4 <_printf_float+0xb4>
 800425a:	2301      	movs	r3, #1
 800425c:	4631      	mov	r1, r6
 800425e:	4628      	mov	r0, r5
 8004260:	9204      	str	r2, [sp, #16]
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	f43f ae9d 	beq.w	8003fa4 <_printf_float+0xb4>
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	f10b 0b01 	add.w	fp, fp, #1
 8004270:	e7bb      	b.n	80041ea <_printf_float+0x2fa>
 8004272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	d1c0      	bne.n	8004202 <_printf_float+0x312>
 8004280:	e690      	b.n	8003fa4 <_printf_float+0xb4>
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	464b      	mov	r3, r9
 8004286:	4442      	add	r2, r8
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	d1c3      	bne.n	800421a <_printf_float+0x32a>
 8004292:	e687      	b.n	8003fa4 <_printf_float+0xb4>
 8004294:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004298:	f1ba 0f01 	cmp.w	sl, #1
 800429c:	dc01      	bgt.n	80042a2 <_printf_float+0x3b2>
 800429e:	07db      	lsls	r3, r3, #31
 80042a0:	d536      	bpl.n	8004310 <_printf_float+0x420>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4642      	mov	r2, r8
 80042a6:	4631      	mov	r1, r6
 80042a8:	4628      	mov	r0, r5
 80042aa:	47b8      	blx	r7
 80042ac:	3001      	adds	r0, #1
 80042ae:	f43f ae79 	beq.w	8003fa4 <_printf_float+0xb4>
 80042b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f ae71 	beq.w	8003fa4 <_printf_float+0xb4>
 80042c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042c6:	2200      	movs	r2, #0
 80042c8:	2300      	movs	r3, #0
 80042ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80042ce:	f7fc fbe3 	bl	8000a98 <__aeabi_dcmpeq>
 80042d2:	b9c0      	cbnz	r0, 8004306 <_printf_float+0x416>
 80042d4:	4653      	mov	r3, sl
 80042d6:	f108 0201 	add.w	r2, r8, #1
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	d10c      	bne.n	80042fe <_printf_float+0x40e>
 80042e4:	e65e      	b.n	8003fa4 <_printf_float+0xb4>
 80042e6:	2301      	movs	r3, #1
 80042e8:	465a      	mov	r2, fp
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b8      	blx	r7
 80042f0:	3001      	adds	r0, #1
 80042f2:	f43f ae57 	beq.w	8003fa4 <_printf_float+0xb4>
 80042f6:	f108 0801 	add.w	r8, r8, #1
 80042fa:	45d0      	cmp	r8, sl
 80042fc:	dbf3      	blt.n	80042e6 <_printf_float+0x3f6>
 80042fe:	464b      	mov	r3, r9
 8004300:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004304:	e6df      	b.n	80040c6 <_printf_float+0x1d6>
 8004306:	f04f 0800 	mov.w	r8, #0
 800430a:	f104 0b1a 	add.w	fp, r4, #26
 800430e:	e7f4      	b.n	80042fa <_printf_float+0x40a>
 8004310:	2301      	movs	r3, #1
 8004312:	4642      	mov	r2, r8
 8004314:	e7e1      	b.n	80042da <_printf_float+0x3ea>
 8004316:	2301      	movs	r3, #1
 8004318:	464a      	mov	r2, r9
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	47b8      	blx	r7
 8004320:	3001      	adds	r0, #1
 8004322:	f43f ae3f 	beq.w	8003fa4 <_printf_float+0xb4>
 8004326:	f108 0801 	add.w	r8, r8, #1
 800432a:	68e3      	ldr	r3, [r4, #12]
 800432c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800432e:	1a5b      	subs	r3, r3, r1
 8004330:	4543      	cmp	r3, r8
 8004332:	dcf0      	bgt.n	8004316 <_printf_float+0x426>
 8004334:	e6fc      	b.n	8004130 <_printf_float+0x240>
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	f104 0919 	add.w	r9, r4, #25
 800433e:	e7f4      	b.n	800432a <_printf_float+0x43a>

08004340 <_printf_common>:
 8004340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	4616      	mov	r6, r2
 8004346:	4698      	mov	r8, r3
 8004348:	688a      	ldr	r2, [r1, #8]
 800434a:	690b      	ldr	r3, [r1, #16]
 800434c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004350:	4293      	cmp	r3, r2
 8004352:	bfb8      	it	lt
 8004354:	4613      	movlt	r3, r2
 8004356:	6033      	str	r3, [r6, #0]
 8004358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800435c:	4607      	mov	r7, r0
 800435e:	460c      	mov	r4, r1
 8004360:	b10a      	cbz	r2, 8004366 <_printf_common+0x26>
 8004362:	3301      	adds	r3, #1
 8004364:	6033      	str	r3, [r6, #0]
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	0699      	lsls	r1, r3, #26
 800436a:	bf42      	ittt	mi
 800436c:	6833      	ldrmi	r3, [r6, #0]
 800436e:	3302      	addmi	r3, #2
 8004370:	6033      	strmi	r3, [r6, #0]
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	f015 0506 	ands.w	r5, r5, #6
 8004378:	d106      	bne.n	8004388 <_printf_common+0x48>
 800437a:	f104 0a19 	add.w	sl, r4, #25
 800437e:	68e3      	ldr	r3, [r4, #12]
 8004380:	6832      	ldr	r2, [r6, #0]
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	42ab      	cmp	r3, r5
 8004386:	dc26      	bgt.n	80043d6 <_printf_common+0x96>
 8004388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	3b00      	subs	r3, #0
 8004390:	bf18      	it	ne
 8004392:	2301      	movne	r3, #1
 8004394:	0692      	lsls	r2, r2, #26
 8004396:	d42b      	bmi.n	80043f0 <_printf_common+0xb0>
 8004398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800439c:	4641      	mov	r1, r8
 800439e:	4638      	mov	r0, r7
 80043a0:	47c8      	blx	r9
 80043a2:	3001      	adds	r0, #1
 80043a4:	d01e      	beq.n	80043e4 <_printf_common+0xa4>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	f003 0306 	and.w	r3, r3, #6
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	bf02      	ittt	eq
 80043b2:	68e5      	ldreq	r5, [r4, #12]
 80043b4:	6833      	ldreq	r3, [r6, #0]
 80043b6:	1aed      	subeq	r5, r5, r3
 80043b8:	68a3      	ldr	r3, [r4, #8]
 80043ba:	bf0c      	ite	eq
 80043bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c0:	2500      	movne	r5, #0
 80043c2:	4293      	cmp	r3, r2
 80043c4:	bfc4      	itt	gt
 80043c6:	1a9b      	subgt	r3, r3, r2
 80043c8:	18ed      	addgt	r5, r5, r3
 80043ca:	2600      	movs	r6, #0
 80043cc:	341a      	adds	r4, #26
 80043ce:	42b5      	cmp	r5, r6
 80043d0:	d11a      	bne.n	8004408 <_printf_common+0xc8>
 80043d2:	2000      	movs	r0, #0
 80043d4:	e008      	b.n	80043e8 <_printf_common+0xa8>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4652      	mov	r2, sl
 80043da:	4641      	mov	r1, r8
 80043dc:	4638      	mov	r0, r7
 80043de:	47c8      	blx	r9
 80043e0:	3001      	adds	r0, #1
 80043e2:	d103      	bne.n	80043ec <_printf_common+0xac>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ec:	3501      	adds	r5, #1
 80043ee:	e7c6      	b.n	800437e <_printf_common+0x3e>
 80043f0:	18e1      	adds	r1, r4, r3
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	2030      	movs	r0, #48	@ 0x30
 80043f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043fa:	4422      	add	r2, r4
 80043fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004404:	3302      	adds	r3, #2
 8004406:	e7c7      	b.n	8004398 <_printf_common+0x58>
 8004408:	2301      	movs	r3, #1
 800440a:	4622      	mov	r2, r4
 800440c:	4641      	mov	r1, r8
 800440e:	4638      	mov	r0, r7
 8004410:	47c8      	blx	r9
 8004412:	3001      	adds	r0, #1
 8004414:	d0e6      	beq.n	80043e4 <_printf_common+0xa4>
 8004416:	3601      	adds	r6, #1
 8004418:	e7d9      	b.n	80043ce <_printf_common+0x8e>
	...

0800441c <_printf_i>:
 800441c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004420:	7e0f      	ldrb	r7, [r1, #24]
 8004422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004424:	2f78      	cmp	r7, #120	@ 0x78
 8004426:	4691      	mov	r9, r2
 8004428:	4680      	mov	r8, r0
 800442a:	460c      	mov	r4, r1
 800442c:	469a      	mov	sl, r3
 800442e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004432:	d807      	bhi.n	8004444 <_printf_i+0x28>
 8004434:	2f62      	cmp	r7, #98	@ 0x62
 8004436:	d80a      	bhi.n	800444e <_printf_i+0x32>
 8004438:	2f00      	cmp	r7, #0
 800443a:	f000 80d2 	beq.w	80045e2 <_printf_i+0x1c6>
 800443e:	2f58      	cmp	r7, #88	@ 0x58
 8004440:	f000 80b7 	beq.w	80045b2 <_printf_i+0x196>
 8004444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800444c:	e03a      	b.n	80044c4 <_printf_i+0xa8>
 800444e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004452:	2b15      	cmp	r3, #21
 8004454:	d8f6      	bhi.n	8004444 <_printf_i+0x28>
 8004456:	a101      	add	r1, pc, #4	@ (adr r1, 800445c <_printf_i+0x40>)
 8004458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800445c:	080044b5 	.word	0x080044b5
 8004460:	080044c9 	.word	0x080044c9
 8004464:	08004445 	.word	0x08004445
 8004468:	08004445 	.word	0x08004445
 800446c:	08004445 	.word	0x08004445
 8004470:	08004445 	.word	0x08004445
 8004474:	080044c9 	.word	0x080044c9
 8004478:	08004445 	.word	0x08004445
 800447c:	08004445 	.word	0x08004445
 8004480:	08004445 	.word	0x08004445
 8004484:	08004445 	.word	0x08004445
 8004488:	080045c9 	.word	0x080045c9
 800448c:	080044f3 	.word	0x080044f3
 8004490:	0800457f 	.word	0x0800457f
 8004494:	08004445 	.word	0x08004445
 8004498:	08004445 	.word	0x08004445
 800449c:	080045eb 	.word	0x080045eb
 80044a0:	08004445 	.word	0x08004445
 80044a4:	080044f3 	.word	0x080044f3
 80044a8:	08004445 	.word	0x08004445
 80044ac:	08004445 	.word	0x08004445
 80044b0:	08004587 	.word	0x08004587
 80044b4:	6833      	ldr	r3, [r6, #0]
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6032      	str	r2, [r6, #0]
 80044bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044c4:	2301      	movs	r3, #1
 80044c6:	e09d      	b.n	8004604 <_printf_i+0x1e8>
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	6820      	ldr	r0, [r4, #0]
 80044cc:	1d19      	adds	r1, r3, #4
 80044ce:	6031      	str	r1, [r6, #0]
 80044d0:	0606      	lsls	r6, r0, #24
 80044d2:	d501      	bpl.n	80044d8 <_printf_i+0xbc>
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	e003      	b.n	80044e0 <_printf_i+0xc4>
 80044d8:	0645      	lsls	r5, r0, #25
 80044da:	d5fb      	bpl.n	80044d4 <_printf_i+0xb8>
 80044dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	da03      	bge.n	80044ec <_printf_i+0xd0>
 80044e4:	232d      	movs	r3, #45	@ 0x2d
 80044e6:	426d      	negs	r5, r5
 80044e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ec:	4859      	ldr	r0, [pc, #356]	@ (8004654 <_printf_i+0x238>)
 80044ee:	230a      	movs	r3, #10
 80044f0:	e010      	b.n	8004514 <_printf_i+0xf8>
 80044f2:	6821      	ldr	r1, [r4, #0]
 80044f4:	6833      	ldr	r3, [r6, #0]
 80044f6:	0608      	lsls	r0, r1, #24
 80044f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80044fc:	d402      	bmi.n	8004504 <_printf_i+0xe8>
 80044fe:	0649      	lsls	r1, r1, #25
 8004500:	bf48      	it	mi
 8004502:	b2ad      	uxthmi	r5, r5
 8004504:	2f6f      	cmp	r7, #111	@ 0x6f
 8004506:	4853      	ldr	r0, [pc, #332]	@ (8004654 <_printf_i+0x238>)
 8004508:	6033      	str	r3, [r6, #0]
 800450a:	d159      	bne.n	80045c0 <_printf_i+0x1a4>
 800450c:	2308      	movs	r3, #8
 800450e:	2100      	movs	r1, #0
 8004510:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004514:	6866      	ldr	r6, [r4, #4]
 8004516:	60a6      	str	r6, [r4, #8]
 8004518:	2e00      	cmp	r6, #0
 800451a:	db05      	blt.n	8004528 <_printf_i+0x10c>
 800451c:	6821      	ldr	r1, [r4, #0]
 800451e:	432e      	orrs	r6, r5
 8004520:	f021 0104 	bic.w	r1, r1, #4
 8004524:	6021      	str	r1, [r4, #0]
 8004526:	d04d      	beq.n	80045c4 <_printf_i+0x1a8>
 8004528:	4616      	mov	r6, r2
 800452a:	fbb5 f1f3 	udiv	r1, r5, r3
 800452e:	fb03 5711 	mls	r7, r3, r1, r5
 8004532:	5dc7      	ldrb	r7, [r0, r7]
 8004534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004538:	462f      	mov	r7, r5
 800453a:	42bb      	cmp	r3, r7
 800453c:	460d      	mov	r5, r1
 800453e:	d9f4      	bls.n	800452a <_printf_i+0x10e>
 8004540:	2b08      	cmp	r3, #8
 8004542:	d10b      	bne.n	800455c <_printf_i+0x140>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	d508      	bpl.n	800455c <_printf_i+0x140>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	6861      	ldr	r1, [r4, #4]
 800454e:	4299      	cmp	r1, r3
 8004550:	bfde      	ittt	le
 8004552:	2330      	movle	r3, #48	@ 0x30
 8004554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004558:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800455c:	1b92      	subs	r2, r2, r6
 800455e:	6122      	str	r2, [r4, #16]
 8004560:	f8cd a000 	str.w	sl, [sp]
 8004564:	464b      	mov	r3, r9
 8004566:	aa03      	add	r2, sp, #12
 8004568:	4621      	mov	r1, r4
 800456a:	4640      	mov	r0, r8
 800456c:	f7ff fee8 	bl	8004340 <_printf_common>
 8004570:	3001      	adds	r0, #1
 8004572:	d14c      	bne.n	800460e <_printf_i+0x1f2>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004578:	b004      	add	sp, #16
 800457a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	4834      	ldr	r0, [pc, #208]	@ (8004658 <_printf_i+0x23c>)
 8004588:	2778      	movs	r7, #120	@ 0x78
 800458a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	6831      	ldr	r1, [r6, #0]
 8004592:	061f      	lsls	r7, r3, #24
 8004594:	f851 5b04 	ldr.w	r5, [r1], #4
 8004598:	d402      	bmi.n	80045a0 <_printf_i+0x184>
 800459a:	065f      	lsls	r7, r3, #25
 800459c:	bf48      	it	mi
 800459e:	b2ad      	uxthmi	r5, r5
 80045a0:	6031      	str	r1, [r6, #0]
 80045a2:	07d9      	lsls	r1, r3, #31
 80045a4:	bf44      	itt	mi
 80045a6:	f043 0320 	orrmi.w	r3, r3, #32
 80045aa:	6023      	strmi	r3, [r4, #0]
 80045ac:	b11d      	cbz	r5, 80045b6 <_printf_i+0x19a>
 80045ae:	2310      	movs	r3, #16
 80045b0:	e7ad      	b.n	800450e <_printf_i+0xf2>
 80045b2:	4828      	ldr	r0, [pc, #160]	@ (8004654 <_printf_i+0x238>)
 80045b4:	e7e9      	b.n	800458a <_printf_i+0x16e>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	f023 0320 	bic.w	r3, r3, #32
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	e7f6      	b.n	80045ae <_printf_i+0x192>
 80045c0:	230a      	movs	r3, #10
 80045c2:	e7a4      	b.n	800450e <_printf_i+0xf2>
 80045c4:	4616      	mov	r6, r2
 80045c6:	e7bb      	b.n	8004540 <_printf_i+0x124>
 80045c8:	6833      	ldr	r3, [r6, #0]
 80045ca:	6825      	ldr	r5, [r4, #0]
 80045cc:	6961      	ldr	r1, [r4, #20]
 80045ce:	1d18      	adds	r0, r3, #4
 80045d0:	6030      	str	r0, [r6, #0]
 80045d2:	062e      	lsls	r6, r5, #24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0x1c0>
 80045d8:	6019      	str	r1, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0x1c6>
 80045dc:	0668      	lsls	r0, r5, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0x1bc>
 80045e0:	8019      	strh	r1, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	4616      	mov	r6, r2
 80045e8:	e7ba      	b.n	8004560 <_printf_i+0x144>
 80045ea:	6833      	ldr	r3, [r6, #0]
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	6032      	str	r2, [r6, #0]
 80045f0:	681e      	ldr	r6, [r3, #0]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7fb fdd2 	bl	80001a0 <memchr>
 80045fc:	b108      	cbz	r0, 8004602 <_printf_i+0x1e6>
 80045fe:	1b80      	subs	r0, r0, r6
 8004600:	6060      	str	r0, [r4, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	2300      	movs	r3, #0
 8004608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800460c:	e7a8      	b.n	8004560 <_printf_i+0x144>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	4632      	mov	r2, r6
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d0ab      	beq.n	8004574 <_printf_i+0x158>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	d413      	bmi.n	800464a <_printf_i+0x22e>
 8004622:	68e0      	ldr	r0, [r4, #12]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	4298      	cmp	r0, r3
 8004628:	bfb8      	it	lt
 800462a:	4618      	movlt	r0, r3
 800462c:	e7a4      	b.n	8004578 <_printf_i+0x15c>
 800462e:	2301      	movs	r3, #1
 8004630:	4632      	mov	r2, r6
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	47d0      	blx	sl
 8004638:	3001      	adds	r0, #1
 800463a:	d09b      	beq.n	8004574 <_printf_i+0x158>
 800463c:	3501      	adds	r5, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	9903      	ldr	r1, [sp, #12]
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	42ab      	cmp	r3, r5
 8004646:	dcf2      	bgt.n	800462e <_printf_i+0x212>
 8004648:	e7eb      	b.n	8004622 <_printf_i+0x206>
 800464a:	2500      	movs	r5, #0
 800464c:	f104 0619 	add.w	r6, r4, #25
 8004650:	e7f5      	b.n	800463e <_printf_i+0x222>
 8004652:	bf00      	nop
 8004654:	080070e2 	.word	0x080070e2
 8004658:	080070f3 	.word	0x080070f3

0800465c <std>:
 800465c:	2300      	movs	r3, #0
 800465e:	b510      	push	{r4, lr}
 8004660:	4604      	mov	r4, r0
 8004662:	e9c0 3300 	strd	r3, r3, [r0]
 8004666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800466a:	6083      	str	r3, [r0, #8]
 800466c:	8181      	strh	r1, [r0, #12]
 800466e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004670:	81c2      	strh	r2, [r0, #14]
 8004672:	6183      	str	r3, [r0, #24]
 8004674:	4619      	mov	r1, r3
 8004676:	2208      	movs	r2, #8
 8004678:	305c      	adds	r0, #92	@ 0x5c
 800467a:	f000 f919 	bl	80048b0 <memset>
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <std+0x58>)
 8004680:	6263      	str	r3, [r4, #36]	@ 0x24
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <std+0x5c>)
 8004684:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <std+0x60>)
 8004688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <std+0x64>)
 800468c:	6323      	str	r3, [r4, #48]	@ 0x30
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <std+0x68>)
 8004690:	6224      	str	r4, [r4, #32]
 8004692:	429c      	cmp	r4, r3
 8004694:	d006      	beq.n	80046a4 <std+0x48>
 8004696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800469a:	4294      	cmp	r4, r2
 800469c:	d002      	beq.n	80046a4 <std+0x48>
 800469e:	33d0      	adds	r3, #208	@ 0xd0
 80046a0:	429c      	cmp	r4, r3
 80046a2:	d105      	bne.n	80046b0 <std+0x54>
 80046a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ac:	f000 b98c 	b.w	80049c8 <__retarget_lock_init_recursive>
 80046b0:	bd10      	pop	{r4, pc}
 80046b2:	bf00      	nop
 80046b4:	08004829 	.word	0x08004829
 80046b8:	0800484b 	.word	0x0800484b
 80046bc:	08004883 	.word	0x08004883
 80046c0:	080048a9 	.word	0x080048a9
 80046c4:	200002f8 	.word	0x200002f8

080046c8 <stdio_exit_handler>:
 80046c8:	4a02      	ldr	r2, [pc, #8]	@ (80046d4 <stdio_exit_handler+0xc>)
 80046ca:	4903      	ldr	r1, [pc, #12]	@ (80046d8 <stdio_exit_handler+0x10>)
 80046cc:	4803      	ldr	r0, [pc, #12]	@ (80046dc <stdio_exit_handler+0x14>)
 80046ce:	f000 b86b 	b.w	80047a8 <_fwalk_sglue>
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	0800637d 	.word	0x0800637d
 80046dc:	2000001c 	.word	0x2000001c

080046e0 <cleanup_stdio>:
 80046e0:	6841      	ldr	r1, [r0, #4]
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <cleanup_stdio+0x34>)
 80046e4:	4299      	cmp	r1, r3
 80046e6:	b510      	push	{r4, lr}
 80046e8:	4604      	mov	r4, r0
 80046ea:	d001      	beq.n	80046f0 <cleanup_stdio+0x10>
 80046ec:	f001 fe46 	bl	800637c <_fflush_r>
 80046f0:	68a1      	ldr	r1, [r4, #8]
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <cleanup_stdio+0x38>)
 80046f4:	4299      	cmp	r1, r3
 80046f6:	d002      	beq.n	80046fe <cleanup_stdio+0x1e>
 80046f8:	4620      	mov	r0, r4
 80046fa:	f001 fe3f 	bl	800637c <_fflush_r>
 80046fe:	68e1      	ldr	r1, [r4, #12]
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <cleanup_stdio+0x3c>)
 8004702:	4299      	cmp	r1, r3
 8004704:	d004      	beq.n	8004710 <cleanup_stdio+0x30>
 8004706:	4620      	mov	r0, r4
 8004708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470c:	f001 be36 	b.w	800637c <_fflush_r>
 8004710:	bd10      	pop	{r4, pc}
 8004712:	bf00      	nop
 8004714:	200002f8 	.word	0x200002f8
 8004718:	20000360 	.word	0x20000360
 800471c:	200003c8 	.word	0x200003c8

08004720 <global_stdio_init.part.0>:
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <global_stdio_init.part.0+0x34>)
 8004722:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <global_stdio_init.part.0+0x38>)
 8004724:	480d      	ldr	r0, [pc, #52]	@ (800475c <global_stdio_init.part.0+0x3c>)
 8004726:	b510      	push	{r4, lr}
 8004728:	2104      	movs	r1, #4
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	2200      	movs	r2, #0
 800472e:	f7ff ff95 	bl	800465c <std>
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <global_stdio_init.part.0+0x3c>)
 8004734:	2201      	movs	r2, #1
 8004736:	461c      	mov	r4, r3
 8004738:	2109      	movs	r1, #9
 800473a:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800473e:	f7ff ff8d 	bl	800465c <std>
 8004742:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004746:	2202      	movs	r2, #2
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	2112      	movs	r1, #18
 800474e:	f7ff bf85 	b.w	800465c <std>
 8004752:	bf00      	nop
 8004754:	20000430 	.word	0x20000430
 8004758:	080046c9 	.word	0x080046c9
 800475c:	200002f8 	.word	0x200002f8

08004760 <__sfp_lock_acquire>:
 8004760:	4801      	ldr	r0, [pc, #4]	@ (8004768 <__sfp_lock_acquire+0x8>)
 8004762:	f000 b932 	b.w	80049ca <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20000439 	.word	0x20000439

0800476c <__sfp_lock_release>:
 800476c:	4801      	ldr	r0, [pc, #4]	@ (8004774 <__sfp_lock_release+0x8>)
 800476e:	f000 b92d 	b.w	80049cc <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20000439 	.word	0x20000439

08004778 <__sinit>:
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
 800477c:	f7ff fff0 	bl	8004760 <__sfp_lock_acquire>
 8004780:	6a23      	ldr	r3, [r4, #32]
 8004782:	b11b      	cbz	r3, 800478c <__sinit+0x14>
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f7ff bff0 	b.w	800476c <__sfp_lock_release>
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <__sinit+0x28>)
 800478e:	6223      	str	r3, [r4, #32]
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <__sinit+0x2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f5      	bne.n	8004784 <__sinit+0xc>
 8004798:	f7ff ffc2 	bl	8004720 <global_stdio_init.part.0>
 800479c:	e7f2      	b.n	8004784 <__sinit+0xc>
 800479e:	bf00      	nop
 80047a0:	080046e1 	.word	0x080046e1
 80047a4:	20000430 	.word	0x20000430

080047a8 <_fwalk_sglue>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4607      	mov	r7, r0
 80047ae:	4688      	mov	r8, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	2600      	movs	r6, #0
 80047b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047b8:	f1b9 0901 	subs.w	r9, r9, #1
 80047bc:	d505      	bpl.n	80047ca <_fwalk_sglue+0x22>
 80047be:	6824      	ldr	r4, [r4, #0]
 80047c0:	2c00      	cmp	r4, #0
 80047c2:	d1f7      	bne.n	80047b4 <_fwalk_sglue+0xc>
 80047c4:	4630      	mov	r0, r6
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d907      	bls.n	80047e0 <_fwalk_sglue+0x38>
 80047d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d4:	3301      	adds	r3, #1
 80047d6:	d003      	beq.n	80047e0 <_fwalk_sglue+0x38>
 80047d8:	4629      	mov	r1, r5
 80047da:	4638      	mov	r0, r7
 80047dc:	47c0      	blx	r8
 80047de:	4306      	orrs	r6, r0
 80047e0:	3568      	adds	r5, #104	@ 0x68
 80047e2:	e7e9      	b.n	80047b8 <_fwalk_sglue+0x10>

080047e4 <siprintf>:
 80047e4:	b40e      	push	{r1, r2, r3}
 80047e6:	b510      	push	{r4, lr}
 80047e8:	b09d      	sub	sp, #116	@ 0x74
 80047ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047f4:	480a      	ldr	r0, [pc, #40]	@ (8004820 <siprintf+0x3c>)
 80047f6:	9107      	str	r1, [sp, #28]
 80047f8:	9104      	str	r1, [sp, #16]
 80047fa:	490a      	ldr	r1, [pc, #40]	@ (8004824 <siprintf+0x40>)
 80047fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004800:	9105      	str	r1, [sp, #20]
 8004802:	2400      	movs	r4, #0
 8004804:	a902      	add	r1, sp, #8
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800480c:	f001 fc38 	bl	8006080 <_svfiprintf_r>
 8004810:	9b02      	ldr	r3, [sp, #8]
 8004812:	701c      	strb	r4, [r3, #0]
 8004814:	b01d      	add	sp, #116	@ 0x74
 8004816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481a:	b003      	add	sp, #12
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000018 	.word	0x20000018
 8004824:	ffff0208 	.word	0xffff0208

08004828 <__sread>:
 8004828:	b510      	push	{r4, lr}
 800482a:	460c      	mov	r4, r1
 800482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004830:	f000 f87c 	bl	800492c <_read_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	bfab      	itete	ge
 8004838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800483a:	89a3      	ldrhlt	r3, [r4, #12]
 800483c:	181b      	addge	r3, r3, r0
 800483e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004842:	bfac      	ite	ge
 8004844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004846:	81a3      	strhlt	r3, [r4, #12]
 8004848:	bd10      	pop	{r4, pc}

0800484a <__swrite>:
 800484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	461f      	mov	r7, r3
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	05db      	lsls	r3, r3, #23
 8004854:	4605      	mov	r5, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4616      	mov	r6, r2
 800485a:	d505      	bpl.n	8004868 <__swrite+0x1e>
 800485c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004860:	2302      	movs	r3, #2
 8004862:	2200      	movs	r2, #0
 8004864:	f000 f850 	bl	8004908 <_lseek_r>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800486e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004872:	81a3      	strh	r3, [r4, #12]
 8004874:	4632      	mov	r2, r6
 8004876:	463b      	mov	r3, r7
 8004878:	4628      	mov	r0, r5
 800487a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	f000 b867 	b.w	8004950 <_write_r>

08004882 <__sseek>:
 8004882:	b510      	push	{r4, lr}
 8004884:	460c      	mov	r4, r1
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 f83d 	bl	8004908 <_lseek_r>
 800488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004892:	1c42      	adds	r2, r0, #1
 8004894:	bf0b      	itete	eq
 8004896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800489a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800489e:	81a3      	strheq	r3, [r4, #12]
 80048a0:	81a3      	strhne	r3, [r4, #12]
 80048a2:	bf18      	it	ne
 80048a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <__sclose>:
 80048a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ac:	f000 b81c 	b.w	80048e8 <_close_r>

080048b0 <memset>:
 80048b0:	4402      	add	r2, r0
 80048b2:	4603      	mov	r3, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <strcat>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4602      	mov	r2, r0
 80048c4:	7814      	ldrb	r4, [r2, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	3201      	adds	r2, #1
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d1fa      	bne.n	80048c4 <strcat+0x4>
 80048ce:	3b01      	subs	r3, #1
 80048d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d1f9      	bne.n	80048d0 <strcat+0x10>
 80048dc:	bd10      	pop	{r4, pc}
	...

080048e0 <_localeconv_r>:
 80048e0:	4800      	ldr	r0, [pc, #0]	@ (80048e4 <_localeconv_r+0x4>)
 80048e2:	4770      	bx	lr
 80048e4:	20000158 	.word	0x20000158

080048e8 <_close_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d06      	ldr	r5, [pc, #24]	@ (8004904 <_close_r+0x1c>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7ff f8ca 	bl	8003a8c <_close>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_close_r+0x1a>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_close_r+0x1a>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000434 	.word	0x20000434

08004908 <_lseek_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	@ (8004928 <_lseek_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7ff f8c2 	bl	8003aa0 <_lseek>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_lseek_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_lseek_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000434 	.word	0x20000434

0800492c <_read_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	@ (800494c <_read_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7ff f888 	bl	8003a50 <_read>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_read_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_read_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000434 	.word	0x20000434

08004950 <_write_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4d07      	ldr	r5, [pc, #28]	@ (8004970 <_write_r+0x20>)
 8004954:	4604      	mov	r4, r0
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	2200      	movs	r2, #0
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f7ff f886 	bl	8003a70 <_write>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_write_r+0x1e>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_write_r+0x1e>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	20000434 	.word	0x20000434

08004974 <__errno>:
 8004974:	4b01      	ldr	r3, [pc, #4]	@ (800497c <__errno+0x8>)
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000018 	.word	0x20000018

08004980 <__libc_init_array>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <__libc_init_array+0x38>)
 8004984:	4d0d      	ldr	r5, [pc, #52]	@ (80049bc <__libc_init_array+0x3c>)
 8004986:	1b5b      	subs	r3, r3, r5
 8004988:	109c      	asrs	r4, r3, #2
 800498a:	2600      	movs	r6, #0
 800498c:	42a6      	cmp	r6, r4
 800498e:	d109      	bne.n	80049a4 <__libc_init_array+0x24>
 8004990:	f002 f9ea 	bl	8006d68 <_init>
 8004994:	4d0a      	ldr	r5, [pc, #40]	@ (80049c0 <__libc_init_array+0x40>)
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <__libc_init_array+0x44>)
 8004998:	1b5b      	subs	r3, r3, r5
 800499a:	109c      	asrs	r4, r3, #2
 800499c:	2600      	movs	r6, #0
 800499e:	42a6      	cmp	r6, r4
 80049a0:	d105      	bne.n	80049ae <__libc_init_array+0x2e>
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a8:	4798      	blx	r3
 80049aa:	3601      	adds	r6, #1
 80049ac:	e7ee      	b.n	800498c <__libc_init_array+0xc>
 80049ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b2:	4798      	blx	r3
 80049b4:	3601      	adds	r6, #1
 80049b6:	e7f2      	b.n	800499e <__libc_init_array+0x1e>
 80049b8:	08007424 	.word	0x08007424
 80049bc:	08007424 	.word	0x08007424
 80049c0:	08007424 	.word	0x08007424
 80049c4:	08007428 	.word	0x08007428

080049c8 <__retarget_lock_init_recursive>:
 80049c8:	4770      	bx	lr

080049ca <__retarget_lock_acquire_recursive>:
 80049ca:	4770      	bx	lr

080049cc <__retarget_lock_release_recursive>:
 80049cc:	4770      	bx	lr

080049ce <quorem>:
 80049ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d2:	6903      	ldr	r3, [r0, #16]
 80049d4:	690c      	ldr	r4, [r1, #16]
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	4607      	mov	r7, r0
 80049da:	db7e      	blt.n	8004ada <quorem+0x10c>
 80049dc:	3c01      	subs	r4, #1
 80049de:	f101 0814 	add.w	r8, r1, #20
 80049e2:	00a3      	lsls	r3, r4, #2
 80049e4:	f100 0514 	add.w	r5, r0, #20
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049f8:	3301      	adds	r3, #1
 80049fa:	429a      	cmp	r2, r3
 80049fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a00:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a04:	d32e      	bcc.n	8004a64 <quorem+0x96>
 8004a06:	f04f 0a00 	mov.w	sl, #0
 8004a0a:	46c4      	mov	ip, r8
 8004a0c:	46ae      	mov	lr, r5
 8004a0e:	46d3      	mov	fp, sl
 8004a10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a14:	b298      	uxth	r0, r3
 8004a16:	fb06 a000 	mla	r0, r6, r0, sl
 8004a1a:	0c02      	lsrs	r2, r0, #16
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	fb06 2303 	mla	r3, r6, r3, r2
 8004a22:	f8de 2000 	ldr.w	r2, [lr]
 8004a26:	b280      	uxth	r0, r0
 8004a28:	b292      	uxth	r2, r2
 8004a2a:	1a12      	subs	r2, r2, r0
 8004a2c:	445a      	add	r2, fp
 8004a2e:	f8de 0000 	ldr.w	r0, [lr]
 8004a32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a40:	b292      	uxth	r2, r2
 8004a42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a46:	45e1      	cmp	r9, ip
 8004a48:	f84e 2b04 	str.w	r2, [lr], #4
 8004a4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a50:	d2de      	bcs.n	8004a10 <quorem+0x42>
 8004a52:	9b00      	ldr	r3, [sp, #0]
 8004a54:	58eb      	ldr	r3, [r5, r3]
 8004a56:	b92b      	cbnz	r3, 8004a64 <quorem+0x96>
 8004a58:	9b01      	ldr	r3, [sp, #4]
 8004a5a:	3b04      	subs	r3, #4
 8004a5c:	429d      	cmp	r5, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	d32f      	bcc.n	8004ac2 <quorem+0xf4>
 8004a62:	613c      	str	r4, [r7, #16]
 8004a64:	4638      	mov	r0, r7
 8004a66:	f001 f99f 	bl	8005da8 <__mcmp>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	db25      	blt.n	8004aba <quorem+0xec>
 8004a6e:	4629      	mov	r1, r5
 8004a70:	2000      	movs	r0, #0
 8004a72:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a76:	f8d1 c000 	ldr.w	ip, [r1]
 8004a7a:	fa1f fe82 	uxth.w	lr, r2
 8004a7e:	fa1f f38c 	uxth.w	r3, ip
 8004a82:	eba3 030e 	sub.w	r3, r3, lr
 8004a86:	4403      	add	r3, r0
 8004a88:	0c12      	lsrs	r2, r2, #16
 8004a8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a98:	45c1      	cmp	r9, r8
 8004a9a:	f841 3b04 	str.w	r3, [r1], #4
 8004a9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004aa2:	d2e6      	bcs.n	8004a72 <quorem+0xa4>
 8004aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aac:	b922      	cbnz	r2, 8004ab8 <quorem+0xea>
 8004aae:	3b04      	subs	r3, #4
 8004ab0:	429d      	cmp	r5, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	d30b      	bcc.n	8004ace <quorem+0x100>
 8004ab6:	613c      	str	r4, [r7, #16]
 8004ab8:	3601      	adds	r6, #1
 8004aba:	4630      	mov	r0, r6
 8004abc:	b003      	add	sp, #12
 8004abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	d1cb      	bne.n	8004a62 <quorem+0x94>
 8004aca:	3c01      	subs	r4, #1
 8004acc:	e7c6      	b.n	8004a5c <quorem+0x8e>
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	d1ef      	bne.n	8004ab6 <quorem+0xe8>
 8004ad6:	3c01      	subs	r4, #1
 8004ad8:	e7ea      	b.n	8004ab0 <quorem+0xe2>
 8004ada:	2000      	movs	r0, #0
 8004adc:	e7ee      	b.n	8004abc <quorem+0xee>
	...

08004ae0 <_dtoa_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	b099      	sub	sp, #100	@ 0x64
 8004ae6:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8004aea:	920c      	str	r2, [sp, #48]	@ 0x30
 8004aec:	69c2      	ldr	r2, [r0, #28]
 8004aee:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8004af0:	910a      	str	r1, [sp, #40]	@ 0x28
 8004af2:	ec57 6b10 	vmov	r6, r7, d0
 8004af6:	4681      	mov	r9, r0
 8004af8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004afa:	b982      	cbnz	r2, 8004b1e <_dtoa_r+0x3e>
 8004afc:	2010      	movs	r0, #16
 8004afe:	f000 fe21 	bl	8005744 <malloc>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f8c9 001c 	str.w	r0, [r9, #28]
 8004b08:	b920      	cbnz	r0, 8004b14 <_dtoa_r+0x34>
 8004b0a:	4bb1      	ldr	r3, [pc, #708]	@ (8004dd0 <_dtoa_r+0x2f0>)
 8004b0c:	21ef      	movs	r1, #239	@ 0xef
 8004b0e:	48b1      	ldr	r0, [pc, #708]	@ (8004dd4 <_dtoa_r+0x2f4>)
 8004b10:	f001 fc94 	bl	800643c <__assert_func>
 8004b14:	2300      	movs	r3, #0
 8004b16:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004b1a:	6003      	str	r3, [r0, #0]
 8004b1c:	60c3      	str	r3, [r0, #12]
 8004b1e:	6811      	ldr	r1, [r2, #0]
 8004b20:	b159      	cbz	r1, 8004b3a <_dtoa_r+0x5a>
 8004b22:	6852      	ldr	r2, [r2, #4]
 8004b24:	604a      	str	r2, [r1, #4]
 8004b26:	2301      	movs	r3, #1
 8004b28:	4093      	lsls	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
 8004b2c:	4648      	mov	r0, r9
 8004b2e:	f000 fefd 	bl	800592c <_Bfree>
 8004b32:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f1b7 0800 	subs.w	r8, r7, #0
 8004b3e:	bfb5      	itete	lt
 8004b40:	2301      	movlt	r3, #1
 8004b42:	2300      	movge	r3, #0
 8004b44:	6023      	strlt	r3, [r4, #0]
 8004b46:	6023      	strge	r3, [r4, #0]
 8004b48:	4ba3      	ldr	r3, [pc, #652]	@ (8004dd8 <_dtoa_r+0x2f8>)
 8004b4a:	bfbc      	itt	lt
 8004b4c:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 8004b50:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 8004b54:	ea33 0308 	bics.w	r3, r3, r8
 8004b58:	d11a      	bne.n	8004b90 <_dtoa_r+0xb0>
 8004b5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b5c:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8004b60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b64:	ea58 0806 	orrs.w	r8, r8, r6
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	f000 8574 	beq.w	8005656 <_dtoa_r+0xb76>
 8004b6e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b70:	b953      	cbnz	r3, 8004b88 <_dtoa_r+0xa8>
 8004b72:	4b9a      	ldr	r3, [pc, #616]	@ (8004ddc <_dtoa_r+0x2fc>)
 8004b74:	e021      	b.n	8004bba <_dtoa_r+0xda>
 8004b76:	4b9a      	ldr	r3, [pc, #616]	@ (8004de0 <_dtoa_r+0x300>)
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	9800      	ldr	r0, [sp, #0]
 8004b82:	b019      	add	sp, #100	@ 0x64
 8004b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b88:	4b94      	ldr	r3, [pc, #592]	@ (8004ddc <_dtoa_r+0x2fc>)
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	3303      	adds	r3, #3
 8004b8e:	e7f5      	b.n	8004b7c <_dtoa_r+0x9c>
 8004b90:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 8004b94:	2200      	movs	r2, #0
 8004b96:	ec51 0b17 	vmov	r0, r1, d7
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004ba0:	f7fb ff7a 	bl	8000a98 <__aeabi_dcmpeq>
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	b150      	cbz	r0, 8004bbe <_dtoa_r+0xde>
 8004ba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004baa:	2301      	movs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004bb0:	b113      	cbz	r3, 8004bb8 <_dtoa_r+0xd8>
 8004bb2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004bb4:	4b8b      	ldr	r3, [pc, #556]	@ (8004de4 <_dtoa_r+0x304>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b8b      	ldr	r3, [pc, #556]	@ (8004de8 <_dtoa_r+0x308>)
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	e7e0      	b.n	8004b80 <_dtoa_r+0xa0>
 8004bbe:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004bc2:	aa16      	add	r2, sp, #88	@ 0x58
 8004bc4:	a917      	add	r1, sp, #92	@ 0x5c
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f001 f9a2 	bl	8005f10 <__d2b>
 8004bcc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8004bd0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8004bd2:	9001      	str	r0, [sp, #4]
 8004bd4:	f000 8082 	beq.w	8004cdc <_dtoa_r+0x1fc>
 8004bd8:	9b07      	ldr	r3, [sp, #28]
 8004bda:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8004bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004be6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bea:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bee:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8004dec <_dtoa_r+0x30c>)
 8004bf8:	f7fb fb2e 	bl	8000258 <__aeabi_dsub>
 8004bfc:	a36e      	add	r3, pc, #440	@ (adr r3, 8004db8 <_dtoa_r+0x2d8>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fce1 	bl	80005c8 <__aeabi_dmul>
 8004c06:	a36e      	add	r3, pc, #440	@ (adr r3, 8004dc0 <_dtoa_r+0x2e0>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fb26 	bl	800025c <__adddf3>
 8004c10:	4606      	mov	r6, r0
 8004c12:	4620      	mov	r0, r4
 8004c14:	460f      	mov	r7, r1
 8004c16:	f7fb fc6d 	bl	80004f4 <__aeabi_i2d>
 8004c1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8004dc8 <_dtoa_r+0x2e8>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fcd2 	bl	80005c8 <__aeabi_dmul>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4630      	mov	r0, r6
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	f7fb fb16 	bl	800025c <__adddf3>
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	f7fb ff78 	bl	8000b28 <__aeabi_d2iz>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	4639      	mov	r1, r7
 8004c42:	f7fb ff33 	bl	8000aac <__aeabi_dcmplt>
 8004c46:	b148      	cbz	r0, 8004c5c <_dtoa_r+0x17c>
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f7fb fc53 	bl	80004f4 <__aeabi_i2d>
 8004c4e:	4632      	mov	r2, r6
 8004c50:	463b      	mov	r3, r7
 8004c52:	f7fb ff21 	bl	8000a98 <__aeabi_dcmpeq>
 8004c56:	b908      	cbnz	r0, 8004c5c <_dtoa_r+0x17c>
 8004c58:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c5c:	f1b8 0f16 	cmp.w	r8, #22
 8004c60:	d859      	bhi.n	8004d16 <_dtoa_r+0x236>
 8004c62:	4b63      	ldr	r3, [pc, #396]	@ (8004df0 <_dtoa_r+0x310>)
 8004c64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c70:	f7fb ff1c 	bl	8000aac <__aeabi_dcmplt>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d050      	beq.n	8004d1a <_dtoa_r+0x23a>
 8004c78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c80:	1b2d      	subs	r5, r5, r4
 8004c82:	1e6b      	subs	r3, r5, #1
 8004c84:	9308      	str	r3, [sp, #32]
 8004c86:	bf43      	ittte	mi
 8004c88:	2300      	movmi	r3, #0
 8004c8a:	f1c5 0701 	rsbmi	r7, r5, #1
 8004c8e:	9308      	strmi	r3, [sp, #32]
 8004c90:	2700      	movpl	r7, #0
 8004c92:	f1b8 0f00 	cmp.w	r8, #0
 8004c96:	db42      	blt.n	8004d1e <_dtoa_r+0x23e>
 8004c98:	9b08      	ldr	r3, [sp, #32]
 8004c9a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8004c9e:	4443      	add	r3, r8
 8004ca0:	9308      	str	r3, [sp, #32]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca8:	2b09      	cmp	r3, #9
 8004caa:	d86c      	bhi.n	8004d86 <_dtoa_r+0x2a6>
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	bfc4      	itt	gt
 8004cb0:	3b04      	subgt	r3, #4
 8004cb2:	930a      	strgt	r3, [sp, #40]	@ 0x28
 8004cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cb6:	f1a3 0302 	sub.w	r3, r3, #2
 8004cba:	bfcc      	ite	gt
 8004cbc:	2400      	movgt	r4, #0
 8004cbe:	2401      	movle	r4, #1
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d86c      	bhi.n	8004d9e <_dtoa_r+0x2be>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <_dtoa_r+0x1ec>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d7f 	.word	0x08004d7f
 8004cd0:	08004d83 	.word	0x08004d83
 8004cd4:	08004d45 	.word	0x08004d45
 8004cd8:	08004d2f 	.word	0x08004d2f
 8004cdc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004cde:	442c      	add	r4, r5
 8004ce0:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	bfc1      	itttt	gt
 8004ce8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cec:	fa08 f803 	lslgt.w	r8, r8, r3
 8004cf0:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 8004cf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cf8:	bfd6      	itet	le
 8004cfa:	f1c3 0320 	rsble	r3, r3, #32
 8004cfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004d02:	fa06 f003 	lslle.w	r0, r6, r3
 8004d06:	f7fb fbe5 	bl	80004d4 <__aeabi_ui2d>
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d10:	3c01      	subs	r4, #1
 8004d12:	9214      	str	r2, [sp, #80]	@ 0x50
 8004d14:	e76d      	b.n	8004bf2 <_dtoa_r+0x112>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e7b1      	b.n	8004c7e <_dtoa_r+0x19e>
 8004d1a:	9012      	str	r0, [sp, #72]	@ 0x48
 8004d1c:	e7b0      	b.n	8004c80 <_dtoa_r+0x1a0>
 8004d1e:	f1c8 0300 	rsb	r3, r8, #0
 8004d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d24:	2300      	movs	r3, #0
 8004d26:	eba7 0708 	sub.w	r7, r7, r8
 8004d2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d2c:	e7bb      	b.n	8004ca6 <_dtoa_r+0x1c6>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d34:	4443      	add	r3, r8
 8004d36:	9305      	str	r3, [sp, #20]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	bfb8      	it	lt
 8004d40:	2301      	movlt	r3, #1
 8004d42:	e006      	b.n	8004d52 <_dtoa_r+0x272>
 8004d44:	2301      	movs	r3, #1
 8004d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dd2a      	ble.n	8004da4 <_dtoa_r+0x2c4>
 8004d4e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d52:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004d56:	2100      	movs	r1, #0
 8004d58:	2204      	movs	r2, #4
 8004d5a:	f102 0514 	add.w	r5, r2, #20
 8004d5e:	429d      	cmp	r5, r3
 8004d60:	f101 0601 	add.w	r6, r1, #1
 8004d64:	d923      	bls.n	8004dae <_dtoa_r+0x2ce>
 8004d66:	6041      	str	r1, [r0, #4]
 8004d68:	4648      	mov	r0, r9
 8004d6a:	f000 fda1 	bl	80058b0 <_Balloc>
 8004d6e:	9000      	str	r0, [sp, #0]
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d141      	bne.n	8004df8 <_dtoa_r+0x318>
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <_dtoa_r+0x314>)
 8004d76:	4602      	mov	r2, r0
 8004d78:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d7c:	e6c7      	b.n	8004b0e <_dtoa_r+0x2e>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e7e1      	b.n	8004d46 <_dtoa_r+0x266>
 8004d82:	2300      	movs	r3, #0
 8004d84:	e7d4      	b.n	8004d30 <_dtoa_r+0x250>
 8004d86:	2401      	movs	r4, #1
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d92:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2312      	movs	r3, #18
 8004d9a:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d9c:	e7d9      	b.n	8004d52 <_dtoa_r+0x272>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004da2:	e7f4      	b.n	8004d8e <_dtoa_r+0x2ae>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004daa:	461a      	mov	r2, r3
 8004dac:	e7f5      	b.n	8004d9a <_dtoa_r+0x2ba>
 8004dae:	0052      	lsls	r2, r2, #1
 8004db0:	4631      	mov	r1, r6
 8004db2:	e7d2      	b.n	8004d5a <_dtoa_r+0x27a>
 8004db4:	f3af 8000 	nop.w
 8004db8:	636f4361 	.word	0x636f4361
 8004dbc:	3fd287a7 	.word	0x3fd287a7
 8004dc0:	8b60c8b3 	.word	0x8b60c8b3
 8004dc4:	3fc68a28 	.word	0x3fc68a28
 8004dc8:	509f79fb 	.word	0x509f79fb
 8004dcc:	3fd34413 	.word	0x3fd34413
 8004dd0:	08007111 	.word	0x08007111
 8004dd4:	08007128 	.word	0x08007128
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	0800710d 	.word	0x0800710d
 8004de0:	08007104 	.word	0x08007104
 8004de4:	080070e1 	.word	0x080070e1
 8004de8:	080070e0 	.word	0x080070e0
 8004dec:	3ff80000 	.word	0x3ff80000
 8004df0:	08007250 	.word	0x08007250
 8004df4:	0800716a 	.word	0x0800716a
 8004df8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004dfc:	9a00      	ldr	r2, [sp, #0]
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	9b04      	ldr	r3, [sp, #16]
 8004e02:	2b0e      	cmp	r3, #14
 8004e04:	f200 80a1 	bhi.w	8004f4a <_dtoa_r+0x46a>
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	f000 809e 	beq.w	8004f4a <_dtoa_r+0x46a>
 8004e0e:	f1b8 0f00 	cmp.w	r8, #0
 8004e12:	dd36      	ble.n	8004e82 <_dtoa_r+0x3a2>
 8004e14:	4b9e      	ldr	r3, [pc, #632]	@ (8005090 <_dtoa_r+0x5b0>)
 8004e16:	f008 020f 	and.w	r2, r8, #15
 8004e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e1e:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004e22:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004e26:	ea4f 1528 	mov.w	r5, r8, asr #4
 8004e2a:	d016      	beq.n	8004e5a <_dtoa_r+0x37a>
 8004e2c:	4b99      	ldr	r3, [pc, #612]	@ (8005094 <_dtoa_r+0x5b4>)
 8004e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e36:	f7fb fcf1 	bl	800081c <__aeabi_ddiv>
 8004e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e3e:	f005 050f 	and.w	r5, r5, #15
 8004e42:	2403      	movs	r4, #3
 8004e44:	4e93      	ldr	r6, [pc, #588]	@ (8005094 <_dtoa_r+0x5b4>)
 8004e46:	b975      	cbnz	r5, 8004e66 <_dtoa_r+0x386>
 8004e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	465b      	mov	r3, fp
 8004e50:	f7fb fce4 	bl	800081c <__aeabi_ddiv>
 8004e54:	4682      	mov	sl, r0
 8004e56:	468b      	mov	fp, r1
 8004e58:	e02d      	b.n	8004eb6 <_dtoa_r+0x3d6>
 8004e5a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e5e:	2402      	movs	r4, #2
 8004e60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e64:	e7ee      	b.n	8004e44 <_dtoa_r+0x364>
 8004e66:	07e9      	lsls	r1, r5, #31
 8004e68:	d508      	bpl.n	8004e7c <_dtoa_r+0x39c>
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e72:	f7fb fba9 	bl	80005c8 <__aeabi_dmul>
 8004e76:	3401      	adds	r4, #1
 8004e78:	4682      	mov	sl, r0
 8004e7a:	468b      	mov	fp, r1
 8004e7c:	106d      	asrs	r5, r5, #1
 8004e7e:	3608      	adds	r6, #8
 8004e80:	e7e1      	b.n	8004e46 <_dtoa_r+0x366>
 8004e82:	f000 80ad 	beq.w	8004fe0 <_dtoa_r+0x500>
 8004e86:	f1c8 0500 	rsb	r5, r8, #0
 8004e8a:	4b81      	ldr	r3, [pc, #516]	@ (8005090 <_dtoa_r+0x5b0>)
 8004e8c:	4e81      	ldr	r6, [pc, #516]	@ (8005094 <_dtoa_r+0x5b4>)
 8004e8e:	f005 020f 	and.w	r2, r5, #15
 8004e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e9e:	f7fb fb93 	bl	80005c8 <__aeabi_dmul>
 8004ea2:	112d      	asrs	r5, r5, #4
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	468b      	mov	fp, r1
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2402      	movs	r4, #2
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	f040 808c 	bne.w	8004fca <_dtoa_r+0x4ea>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1ce      	bne.n	8004e54 <_dtoa_r+0x374>
 8004eb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8095 	beq.w	8004fe8 <_dtoa_r+0x508>
 8004ebe:	4b76      	ldr	r3, [pc, #472]	@ (8005098 <_dtoa_r+0x5b8>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f7fb fdf1 	bl	8000aac <__aeabi_dcmplt>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	f000 808c 	beq.w	8004fe8 <_dtoa_r+0x508>
 8004ed0:	9b04      	ldr	r3, [sp, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8088 	beq.w	8004fe8 <_dtoa_r+0x508>
 8004ed8:	9b05      	ldr	r3, [sp, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	dd35      	ble.n	8004f4a <_dtoa_r+0x46a>
 8004ede:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800509c <_dtoa_r+0x5bc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	f7fb fb6c 	bl	80005c8 <__aeabi_dmul>
 8004ef0:	9e05      	ldr	r6, [sp, #20]
 8004ef2:	4682      	mov	sl, r0
 8004ef4:	468b      	mov	fp, r1
 8004ef6:	3401      	adds	r4, #1
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7fb fafb 	bl	80004f4 <__aeabi_i2d>
 8004efe:	4652      	mov	r2, sl
 8004f00:	465b      	mov	r3, fp
 8004f02:	f7fb fb61 	bl	80005c8 <__aeabi_dmul>
 8004f06:	4b66      	ldr	r3, [pc, #408]	@ (80050a0 <_dtoa_r+0x5c0>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f7fb f9a7 	bl	800025c <__adddf3>
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 8004f14:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	d169      	bne.n	8004ff0 <_dtoa_r+0x510>
 8004f1c:	4b61      	ldr	r3, [pc, #388]	@ (80050a4 <_dtoa_r+0x5c4>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	4650      	mov	r0, sl
 8004f22:	4659      	mov	r1, fp
 8004f24:	f7fb f998 	bl	8000258 <__aeabi_dsub>
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	468b      	mov	fp, r1
 8004f30:	f7fb fdda 	bl	8000ae8 <__aeabi_dcmpgt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f040 8294 	bne.w	8005462 <_dtoa_r+0x982>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8004f40:	4650      	mov	r0, sl
 8004f42:	4659      	mov	r1, fp
 8004f44:	f7fb fdb2 	bl	8000aac <__aeabi_dcmplt>
 8004f48:	bb20      	cbnz	r0, 8004f94 <_dtoa_r+0x4b4>
 8004f4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f2c0 8160 	blt.w	8005212 <_dtoa_r+0x732>
 8004f52:	f1b8 0f0e 	cmp.w	r8, #14
 8004f56:	f300 815c 	bgt.w	8005212 <_dtoa_r+0x732>
 8004f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005090 <_dtoa_r+0x5b0>)
 8004f5c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f60:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f280 80ee 	bge.w	8005148 <_dtoa_r+0x668>
 8004f6c:	9b04      	ldr	r3, [sp, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f300 80ea 	bgt.w	8005148 <_dtoa_r+0x668>
 8004f74:	d10e      	bne.n	8004f94 <_dtoa_r+0x4b4>
 8004f76:	4b4b      	ldr	r3, [pc, #300]	@ (80050a4 <_dtoa_r+0x5c4>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	f7fb fb23 	bl	80005c8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f8a:	f7fb fd99 	bl	8000ac0 <__aeabi_dcmple>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f000 826a 	beq.w	8005468 <_dtoa_r+0x988>
 8004f94:	2500      	movs	r5, #0
 8004f96:	462c      	mov	r4, r5
 8004f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f9a:	9e00      	ldr	r6, [sp, #0]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	4627      	mov	r7, r4
 8004fa2:	2400      	movs	r4, #0
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4648      	mov	r0, r9
 8004fa8:	f000 fcc0 	bl	800592c <_Bfree>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80c1 	beq.w	8005134 <_dtoa_r+0x654>
 8004fb2:	b12c      	cbz	r4, 8004fc0 <_dtoa_r+0x4e0>
 8004fb4:	42bc      	cmp	r4, r7
 8004fb6:	d003      	beq.n	8004fc0 <_dtoa_r+0x4e0>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4648      	mov	r0, r9
 8004fbc:	f000 fcb6 	bl	800592c <_Bfree>
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	4648      	mov	r0, r9
 8004fc4:	f000 fcb2 	bl	800592c <_Bfree>
 8004fc8:	e0b4      	b.n	8005134 <_dtoa_r+0x654>
 8004fca:	07ea      	lsls	r2, r5, #31
 8004fcc:	d505      	bpl.n	8004fda <_dtoa_r+0x4fa>
 8004fce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fd2:	f7fb faf9 	bl	80005c8 <__aeabi_dmul>
 8004fd6:	3401      	adds	r4, #1
 8004fd8:	2301      	movs	r3, #1
 8004fda:	106d      	asrs	r5, r5, #1
 8004fdc:	3608      	adds	r6, #8
 8004fde:	e765      	b.n	8004eac <_dtoa_r+0x3cc>
 8004fe0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8004fe4:	2402      	movs	r4, #2
 8004fe6:	e766      	b.n	8004eb6 <_dtoa_r+0x3d6>
 8004fe8:	9e04      	ldr	r6, [sp, #16]
 8004fea:	f8cd 8008 	str.w	r8, [sp, #8]
 8004fee:	e783      	b.n	8004ef8 <_dtoa_r+0x418>
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <_dtoa_r+0x5b0>)
 8004ff2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ff6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d055      	beq.n	80050ac <_dtoa_r+0x5cc>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	2000      	movs	r0, #0
 8005006:	4928      	ldr	r1, [pc, #160]	@ (80050a8 <_dtoa_r+0x5c8>)
 8005008:	f7fb fc08 	bl	800081c <__aeabi_ddiv>
 800500c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005010:	f7fb f922 	bl	8000258 <__aeabi_dsub>
 8005014:	9b00      	ldr	r3, [sp, #0]
 8005016:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800501a:	199d      	adds	r5, r3, r6
 800501c:	461e      	mov	r6, r3
 800501e:	4659      	mov	r1, fp
 8005020:	4650      	mov	r0, sl
 8005022:	f7fb fd81 	bl	8000b28 <__aeabi_d2iz>
 8005026:	4604      	mov	r4, r0
 8005028:	f7fb fa64 	bl	80004f4 <__aeabi_i2d>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4650      	mov	r0, sl
 8005032:	4659      	mov	r1, fp
 8005034:	f7fb f910 	bl	8000258 <__aeabi_dsub>
 8005038:	3430      	adds	r4, #48	@ 0x30
 800503a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800503e:	f806 4b01 	strb.w	r4, [r6], #1
 8005042:	4682      	mov	sl, r0
 8005044:	468b      	mov	fp, r1
 8005046:	f7fb fd31 	bl	8000aac <__aeabi_dcmplt>
 800504a:	2800      	cmp	r0, #0
 800504c:	d172      	bne.n	8005134 <_dtoa_r+0x654>
 800504e:	4652      	mov	r2, sl
 8005050:	465b      	mov	r3, fp
 8005052:	4911      	ldr	r1, [pc, #68]	@ (8005098 <_dtoa_r+0x5b8>)
 8005054:	2000      	movs	r0, #0
 8005056:	f7fb f8ff 	bl	8000258 <__aeabi_dsub>
 800505a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800505e:	f7fb fd25 	bl	8000aac <__aeabi_dcmplt>
 8005062:	2800      	cmp	r0, #0
 8005064:	f040 80b6 	bne.w	80051d4 <_dtoa_r+0x6f4>
 8005068:	42ae      	cmp	r6, r5
 800506a:	f43f af6e 	beq.w	8004f4a <_dtoa_r+0x46a>
 800506e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005072:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <_dtoa_r+0x5bc>)
 8005074:	2200      	movs	r2, #0
 8005076:	f7fb faa7 	bl	80005c8 <__aeabi_dmul>
 800507a:	4b08      	ldr	r3, [pc, #32]	@ (800509c <_dtoa_r+0x5bc>)
 800507c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005080:	2200      	movs	r2, #0
 8005082:	4650      	mov	r0, sl
 8005084:	4659      	mov	r1, fp
 8005086:	f7fb fa9f 	bl	80005c8 <__aeabi_dmul>
 800508a:	4682      	mov	sl, r0
 800508c:	468b      	mov	fp, r1
 800508e:	e7c6      	b.n	800501e <_dtoa_r+0x53e>
 8005090:	08007250 	.word	0x08007250
 8005094:	08007228 	.word	0x08007228
 8005098:	3ff00000 	.word	0x3ff00000
 800509c:	40240000 	.word	0x40240000
 80050a0:	401c0000 	.word	0x401c0000
 80050a4:	40140000 	.word	0x40140000
 80050a8:	3fe00000 	.word	0x3fe00000
 80050ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050b0:	f7fb fa8a 	bl	80005c8 <__aeabi_dmul>
 80050b4:	9b00      	ldr	r3, [sp, #0]
 80050b6:	9d00      	ldr	r5, [sp, #0]
 80050b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050bc:	4433      	add	r3, r6
 80050be:	9315      	str	r3, [sp, #84]	@ 0x54
 80050c0:	4659      	mov	r1, fp
 80050c2:	4650      	mov	r0, sl
 80050c4:	f7fb fd30 	bl	8000b28 <__aeabi_d2iz>
 80050c8:	4604      	mov	r4, r0
 80050ca:	f7fb fa13 	bl	80004f4 <__aeabi_i2d>
 80050ce:	3430      	adds	r4, #48	@ 0x30
 80050d0:	460b      	mov	r3, r1
 80050d2:	4602      	mov	r2, r0
 80050d4:	4659      	mov	r1, fp
 80050d6:	4650      	mov	r0, sl
 80050d8:	f7fb f8be 	bl	8000258 <__aeabi_dsub>
 80050dc:	f805 4b01 	strb.w	r4, [r5], #1
 80050e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80050e2:	429d      	cmp	r5, r3
 80050e4:	4682      	mov	sl, r0
 80050e6:	468b      	mov	fp, r1
 80050e8:	d127      	bne.n	800513a <_dtoa_r+0x65a>
 80050ea:	9b00      	ldr	r3, [sp, #0]
 80050ec:	2200      	movs	r2, #0
 80050ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80050f2:	441e      	add	r6, r3
 80050f4:	4bb3      	ldr	r3, [pc, #716]	@ (80053c4 <_dtoa_r+0x8e4>)
 80050f6:	f7fb f8b1 	bl	800025c <__adddf3>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4650      	mov	r0, sl
 8005100:	4659      	mov	r1, fp
 8005102:	f7fb fcf1 	bl	8000ae8 <__aeabi_dcmpgt>
 8005106:	2800      	cmp	r0, #0
 8005108:	d164      	bne.n	80051d4 <_dtoa_r+0x6f4>
 800510a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800510e:	49ad      	ldr	r1, [pc, #692]	@ (80053c4 <_dtoa_r+0x8e4>)
 8005110:	2000      	movs	r0, #0
 8005112:	f7fb f8a1 	bl	8000258 <__aeabi_dsub>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4650      	mov	r0, sl
 800511c:	4659      	mov	r1, fp
 800511e:	f7fb fcc5 	bl	8000aac <__aeabi_dcmplt>
 8005122:	2800      	cmp	r0, #0
 8005124:	f43f af11 	beq.w	8004f4a <_dtoa_r+0x46a>
 8005128:	4633      	mov	r3, r6
 800512a:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800512e:	2a30      	cmp	r2, #48	@ 0x30
 8005130:	d0fa      	beq.n	8005128 <_dtoa_r+0x648>
 8005132:	461e      	mov	r6, r3
 8005134:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005138:	e03a      	b.n	80051b0 <_dtoa_r+0x6d0>
 800513a:	4ba3      	ldr	r3, [pc, #652]	@ (80053c8 <_dtoa_r+0x8e8>)
 800513c:	2200      	movs	r2, #0
 800513e:	f7fb fa43 	bl	80005c8 <__aeabi_dmul>
 8005142:	4682      	mov	sl, r0
 8005144:	468b      	mov	fp, r1
 8005146:	e7bb      	b.n	80050c0 <_dtoa_r+0x5e0>
 8005148:	9e00      	ldr	r6, [sp, #0]
 800514a:	4652      	mov	r2, sl
 800514c:	465b      	mov	r3, fp
 800514e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005152:	f7fb fb63 	bl	800081c <__aeabi_ddiv>
 8005156:	f7fb fce7 	bl	8000b28 <__aeabi_d2iz>
 800515a:	4607      	mov	r7, r0
 800515c:	f7fb f9ca 	bl	80004f4 <__aeabi_i2d>
 8005160:	4652      	mov	r2, sl
 8005162:	465b      	mov	r3, fp
 8005164:	f7fb fa30 	bl	80005c8 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005170:	f7fb f872 	bl	8000258 <__aeabi_dsub>
 8005174:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8005178:	9c00      	ldr	r4, [sp, #0]
 800517a:	f806 cb01 	strb.w	ip, [r6], #1
 800517e:	eba6 0c04 	sub.w	ip, r6, r4
 8005182:	9c04      	ldr	r4, [sp, #16]
 8005184:	4564      	cmp	r4, ip
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	d133      	bne.n	80051f4 <_dtoa_r+0x714>
 800518c:	f7fb f866 	bl	800025c <__adddf3>
 8005190:	4652      	mov	r2, sl
 8005192:	465b      	mov	r3, fp
 8005194:	4604      	mov	r4, r0
 8005196:	460d      	mov	r5, r1
 8005198:	f7fb fca6 	bl	8000ae8 <__aeabi_dcmpgt>
 800519c:	b9c0      	cbnz	r0, 80051d0 <_dtoa_r+0x6f0>
 800519e:	4652      	mov	r2, sl
 80051a0:	465b      	mov	r3, fp
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb fc77 	bl	8000a98 <__aeabi_dcmpeq>
 80051aa:	b108      	cbz	r0, 80051b0 <_dtoa_r+0x6d0>
 80051ac:	07fb      	lsls	r3, r7, #31
 80051ae:	d40f      	bmi.n	80051d0 <_dtoa_r+0x6f0>
 80051b0:	9901      	ldr	r1, [sp, #4]
 80051b2:	4648      	mov	r0, r9
 80051b4:	f000 fbba 	bl	800592c <_Bfree>
 80051b8:	2300      	movs	r3, #0
 80051ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80051bc:	7033      	strb	r3, [r6, #0]
 80051be:	f108 0301 	add.w	r3, r8, #1
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f43f acda 	beq.w	8004b80 <_dtoa_r+0xa0>
 80051cc:	601e      	str	r6, [r3, #0]
 80051ce:	e4d7      	b.n	8004b80 <_dtoa_r+0xa0>
 80051d0:	f8cd 8008 	str.w	r8, [sp, #8]
 80051d4:	4633      	mov	r3, r6
 80051d6:	461e      	mov	r6, r3
 80051d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051dc:	2a39      	cmp	r2, #57	@ 0x39
 80051de:	d106      	bne.n	80051ee <_dtoa_r+0x70e>
 80051e0:	9a00      	ldr	r2, [sp, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d1f7      	bne.n	80051d6 <_dtoa_r+0x6f6>
 80051e6:	9a02      	ldr	r2, [sp, #8]
 80051e8:	3201      	adds	r2, #1
 80051ea:	9202      	str	r2, [sp, #8]
 80051ec:	2230      	movs	r2, #48	@ 0x30
 80051ee:	3201      	adds	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e79f      	b.n	8005134 <_dtoa_r+0x654>
 80051f4:	4b74      	ldr	r3, [pc, #464]	@ (80053c8 <_dtoa_r+0x8e8>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	f7fb f9e6 	bl	80005c8 <__aeabi_dmul>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005204:	2200      	movs	r2, #0
 8005206:	2300      	movs	r3, #0
 8005208:	f7fb fc46 	bl	8000a98 <__aeabi_dcmpeq>
 800520c:	2800      	cmp	r0, #0
 800520e:	d09c      	beq.n	800514a <_dtoa_r+0x66a>
 8005210:	e7ce      	b.n	80051b0 <_dtoa_r+0x6d0>
 8005212:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005214:	2a00      	cmp	r2, #0
 8005216:	f000 80e3 	beq.w	80053e0 <_dtoa_r+0x900>
 800521a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800521c:	2a01      	cmp	r2, #1
 800521e:	f300 80c2 	bgt.w	80053a6 <_dtoa_r+0x8c6>
 8005222:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005224:	2a00      	cmp	r2, #0
 8005226:	f000 80ba 	beq.w	800539e <_dtoa_r+0x8be>
 800522a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800522e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005230:	463e      	mov	r6, r7
 8005232:	9a08      	ldr	r2, [sp, #32]
 8005234:	2101      	movs	r1, #1
 8005236:	441a      	add	r2, r3
 8005238:	4648      	mov	r0, r9
 800523a:	441f      	add	r7, r3
 800523c:	9208      	str	r2, [sp, #32]
 800523e:	f000 fc29 	bl	8005a94 <__i2b>
 8005242:	4604      	mov	r4, r0
 8005244:	b156      	cbz	r6, 800525c <_dtoa_r+0x77c>
 8005246:	9b08      	ldr	r3, [sp, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dd07      	ble.n	800525c <_dtoa_r+0x77c>
 800524c:	42b3      	cmp	r3, r6
 800524e:	9a08      	ldr	r2, [sp, #32]
 8005250:	bfa8      	it	ge
 8005252:	4633      	movge	r3, r6
 8005254:	1aff      	subs	r7, r7, r3
 8005256:	1af6      	subs	r6, r6, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	9308      	str	r3, [sp, #32]
 800525c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525e:	b30b      	cbz	r3, 80052a4 <_dtoa_r+0x7c4>
 8005260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80c3 	beq.w	80053ee <_dtoa_r+0x90e>
 8005268:	2d00      	cmp	r5, #0
 800526a:	f000 80bd 	beq.w	80053e8 <_dtoa_r+0x908>
 800526e:	4621      	mov	r1, r4
 8005270:	462a      	mov	r2, r5
 8005272:	4648      	mov	r0, r9
 8005274:	f000 fcce 	bl	8005c14 <__pow5mult>
 8005278:	9a01      	ldr	r2, [sp, #4]
 800527a:	4601      	mov	r1, r0
 800527c:	4604      	mov	r4, r0
 800527e:	4648      	mov	r0, r9
 8005280:	f000 fc1e 	bl	8005ac0 <__multiply>
 8005284:	9901      	ldr	r1, [sp, #4]
 8005286:	4682      	mov	sl, r0
 8005288:	4648      	mov	r0, r9
 800528a:	f000 fb4f 	bl	800592c <_Bfree>
 800528e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005290:	1b5b      	subs	r3, r3, r5
 8005292:	9309      	str	r3, [sp, #36]	@ 0x24
 8005294:	f000 80ae 	beq.w	80053f4 <_dtoa_r+0x914>
 8005298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800529a:	4651      	mov	r1, sl
 800529c:	4648      	mov	r0, r9
 800529e:	f000 fcb9 	bl	8005c14 <__pow5mult>
 80052a2:	9001      	str	r0, [sp, #4]
 80052a4:	2101      	movs	r1, #1
 80052a6:	4648      	mov	r0, r9
 80052a8:	f000 fbf4 	bl	8005a94 <__i2b>
 80052ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052ae:	4605      	mov	r5, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 81d7 	beq.w	8005664 <_dtoa_r+0xb84>
 80052b6:	461a      	mov	r2, r3
 80052b8:	4601      	mov	r1, r0
 80052ba:	4648      	mov	r0, r9
 80052bc:	f000 fcaa 	bl	8005c14 <__pow5mult>
 80052c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	4605      	mov	r5, r0
 80052c6:	f300 809d 	bgt.w	8005404 <_dtoa_r+0x924>
 80052ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8094 	bne.w	80053fa <_dtoa_r+0x91a>
 80052d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 808e 	bne.w	80053fa <_dtoa_r+0x91a>
 80052de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052e4:	0d1b      	lsrs	r3, r3, #20
 80052e6:	051b      	lsls	r3, r3, #20
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8089 	beq.w	8005400 <_dtoa_r+0x920>
 80052ee:	9b08      	ldr	r3, [sp, #32]
 80052f0:	3301      	adds	r3, #1
 80052f2:	3701      	adds	r7, #1
 80052f4:	9308      	str	r3, [sp, #32]
 80052f6:	f04f 0a01 	mov.w	sl, #1
 80052fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 81b7 	beq.w	8005670 <_dtoa_r+0xb90>
 8005302:	692b      	ldr	r3, [r5, #16]
 8005304:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005308:	6918      	ldr	r0, [r3, #16]
 800530a:	f000 fb77 	bl	80059fc <__hi0bits>
 800530e:	f1c0 0020 	rsb	r0, r0, #32
 8005312:	9b08      	ldr	r3, [sp, #32]
 8005314:	4418      	add	r0, r3
 8005316:	f010 001f 	ands.w	r0, r0, #31
 800531a:	d07e      	beq.n	800541a <_dtoa_r+0x93a>
 800531c:	f1c0 0320 	rsb	r3, r0, #32
 8005320:	2b04      	cmp	r3, #4
 8005322:	dd72      	ble.n	800540a <_dtoa_r+0x92a>
 8005324:	9b08      	ldr	r3, [sp, #32]
 8005326:	f1c0 001c 	rsb	r0, r0, #28
 800532a:	4403      	add	r3, r0
 800532c:	4407      	add	r7, r0
 800532e:	4406      	add	r6, r0
 8005330:	9308      	str	r3, [sp, #32]
 8005332:	2f00      	cmp	r7, #0
 8005334:	dd05      	ble.n	8005342 <_dtoa_r+0x862>
 8005336:	9901      	ldr	r1, [sp, #4]
 8005338:	463a      	mov	r2, r7
 800533a:	4648      	mov	r0, r9
 800533c:	f000 fcc6 	bl	8005ccc <__lshift>
 8005340:	9001      	str	r0, [sp, #4]
 8005342:	9b08      	ldr	r3, [sp, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	dd05      	ble.n	8005354 <_dtoa_r+0x874>
 8005348:	4629      	mov	r1, r5
 800534a:	461a      	mov	r2, r3
 800534c:	4648      	mov	r0, r9
 800534e:	f000 fcbd 	bl	8005ccc <__lshift>
 8005352:	4605      	mov	r5, r0
 8005354:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d061      	beq.n	800541e <_dtoa_r+0x93e>
 800535a:	9801      	ldr	r0, [sp, #4]
 800535c:	4629      	mov	r1, r5
 800535e:	f000 fd23 	bl	8005da8 <__mcmp>
 8005362:	2800      	cmp	r0, #0
 8005364:	da5b      	bge.n	800541e <_dtoa_r+0x93e>
 8005366:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	9901      	ldr	r1, [sp, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	220a      	movs	r2, #10
 8005372:	4648      	mov	r0, r9
 8005374:	f000 fafc 	bl	8005970 <__multadd>
 8005378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800537a:	9001      	str	r0, [sp, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8179 	beq.w	8005674 <_dtoa_r+0xb94>
 8005382:	2300      	movs	r3, #0
 8005384:	4621      	mov	r1, r4
 8005386:	220a      	movs	r2, #10
 8005388:	4648      	mov	r0, r9
 800538a:	f000 faf1 	bl	8005970 <__multadd>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	4604      	mov	r4, r0
 8005394:	dc72      	bgt.n	800547c <_dtoa_r+0x99c>
 8005396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005398:	2b02      	cmp	r3, #2
 800539a:	dc49      	bgt.n	8005430 <_dtoa_r+0x950>
 800539c:	e06e      	b.n	800547c <_dtoa_r+0x99c>
 800539e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80053a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80053a4:	e743      	b.n	800522e <_dtoa_r+0x74e>
 80053a6:	9b04      	ldr	r3, [sp, #16]
 80053a8:	1e5d      	subs	r5, r3, #1
 80053aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	db0d      	blt.n	80053cc <_dtoa_r+0x8ec>
 80053b0:	1b5d      	subs	r5, r3, r5
 80053b2:	9b04      	ldr	r3, [sp, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f6bf af3b 	bge.w	8005230 <_dtoa_r+0x750>
 80053ba:	9b04      	ldr	r3, [sp, #16]
 80053bc:	1afe      	subs	r6, r7, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	e737      	b.n	8005232 <_dtoa_r+0x752>
 80053c2:	bf00      	nop
 80053c4:	3fe00000 	.word	0x3fe00000
 80053c8:	40240000 	.word	0x40240000
 80053cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053d0:	9509      	str	r5, [sp, #36]	@ 0x24
 80053d2:	1aeb      	subs	r3, r5, r3
 80053d4:	441a      	add	r2, r3
 80053d6:	920d      	str	r2, [sp, #52]	@ 0x34
 80053d8:	9b04      	ldr	r3, [sp, #16]
 80053da:	463e      	mov	r6, r7
 80053dc:	2500      	movs	r5, #0
 80053de:	e728      	b.n	8005232 <_dtoa_r+0x752>
 80053e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80053e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053e4:	463e      	mov	r6, r7
 80053e6:	e72d      	b.n	8005244 <_dtoa_r+0x764>
 80053e8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80053ec:	e754      	b.n	8005298 <_dtoa_r+0x7b8>
 80053ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053f0:	9901      	ldr	r1, [sp, #4]
 80053f2:	e753      	b.n	800529c <_dtoa_r+0x7bc>
 80053f4:	f8cd a004 	str.w	sl, [sp, #4]
 80053f8:	e754      	b.n	80052a4 <_dtoa_r+0x7c4>
 80053fa:	f04f 0a00 	mov.w	sl, #0
 80053fe:	e77c      	b.n	80052fa <_dtoa_r+0x81a>
 8005400:	469a      	mov	sl, r3
 8005402:	e77a      	b.n	80052fa <_dtoa_r+0x81a>
 8005404:	f04f 0a00 	mov.w	sl, #0
 8005408:	e77b      	b.n	8005302 <_dtoa_r+0x822>
 800540a:	d092      	beq.n	8005332 <_dtoa_r+0x852>
 800540c:	9a08      	ldr	r2, [sp, #32]
 800540e:	331c      	adds	r3, #28
 8005410:	441a      	add	r2, r3
 8005412:	441f      	add	r7, r3
 8005414:	441e      	add	r6, r3
 8005416:	9208      	str	r2, [sp, #32]
 8005418:	e78b      	b.n	8005332 <_dtoa_r+0x852>
 800541a:	4603      	mov	r3, r0
 800541c:	e7f6      	b.n	800540c <_dtoa_r+0x92c>
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	f8cd 8008 	str.w	r8, [sp, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dc23      	bgt.n	8005470 <_dtoa_r+0x990>
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800542c:	2b02      	cmp	r3, #2
 800542e:	dd21      	ble.n	8005474 <_dtoa_r+0x994>
 8005430:	9b05      	ldr	r3, [sp, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f adb0 	bne.w	8004f98 <_dtoa_r+0x4b8>
 8005438:	4629      	mov	r1, r5
 800543a:	2205      	movs	r2, #5
 800543c:	4648      	mov	r0, r9
 800543e:	f000 fa97 	bl	8005970 <__multadd>
 8005442:	4601      	mov	r1, r0
 8005444:	4605      	mov	r5, r0
 8005446:	9801      	ldr	r0, [sp, #4]
 8005448:	f000 fcae 	bl	8005da8 <__mcmp>
 800544c:	2800      	cmp	r0, #0
 800544e:	f77f ada3 	ble.w	8004f98 <_dtoa_r+0x4b8>
 8005452:	9e00      	ldr	r6, [sp, #0]
 8005454:	2331      	movs	r3, #49	@ 0x31
 8005456:	f806 3b01 	strb.w	r3, [r6], #1
 800545a:	9b02      	ldr	r3, [sp, #8]
 800545c:	3301      	adds	r3, #1
 800545e:	9302      	str	r3, [sp, #8]
 8005460:	e59e      	b.n	8004fa0 <_dtoa_r+0x4c0>
 8005462:	4635      	mov	r5, r6
 8005464:	462c      	mov	r4, r5
 8005466:	e7f4      	b.n	8005452 <_dtoa_r+0x972>
 8005468:	9d04      	ldr	r5, [sp, #16]
 800546a:	f8cd 8008 	str.w	r8, [sp, #8]
 800546e:	e7f9      	b.n	8005464 <_dtoa_r+0x984>
 8005470:	9b04      	ldr	r3, [sp, #16]
 8005472:	9305      	str	r3, [sp, #20]
 8005474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8100 	beq.w	800567c <_dtoa_r+0xb9c>
 800547c:	2e00      	cmp	r6, #0
 800547e:	dd05      	ble.n	800548c <_dtoa_r+0x9ac>
 8005480:	4621      	mov	r1, r4
 8005482:	4632      	mov	r2, r6
 8005484:	4648      	mov	r0, r9
 8005486:	f000 fc21 	bl	8005ccc <__lshift>
 800548a:	4604      	mov	r4, r0
 800548c:	f1ba 0f00 	cmp.w	sl, #0
 8005490:	d05a      	beq.n	8005548 <_dtoa_r+0xa68>
 8005492:	6861      	ldr	r1, [r4, #4]
 8005494:	4648      	mov	r0, r9
 8005496:	f000 fa0b 	bl	80058b0 <_Balloc>
 800549a:	4606      	mov	r6, r0
 800549c:	b928      	cbnz	r0, 80054aa <_dtoa_r+0x9ca>
 800549e:	4b82      	ldr	r3, [pc, #520]	@ (80056a8 <_dtoa_r+0xbc8>)
 80054a0:	4602      	mov	r2, r0
 80054a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80054a6:	f7ff bb32 	b.w	8004b0e <_dtoa_r+0x2e>
 80054aa:	6922      	ldr	r2, [r4, #16]
 80054ac:	3202      	adds	r2, #2
 80054ae:	0092      	lsls	r2, r2, #2
 80054b0:	f104 010c 	add.w	r1, r4, #12
 80054b4:	300c      	adds	r0, #12
 80054b6:	f000 ffb3 	bl	8006420 <memcpy>
 80054ba:	2201      	movs	r2, #1
 80054bc:	4631      	mov	r1, r6
 80054be:	4648      	mov	r0, r9
 80054c0:	f000 fc04 	bl	8005ccc <__lshift>
 80054c4:	4607      	mov	r7, r0
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	9a00      	ldr	r2, [sp, #0]
 80054ca:	f103 0b01 	add.w	fp, r3, #1
 80054ce:	9b05      	ldr	r3, [sp, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	9306      	str	r3, [sp, #24]
 80054d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80054e0:	4629      	mov	r1, r5
 80054e2:	9801      	ldr	r0, [sp, #4]
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	f7ff fa72 	bl	80049ce <quorem>
 80054ea:	4621      	mov	r1, r4
 80054ec:	9005      	str	r0, [sp, #20]
 80054ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80054f2:	9801      	ldr	r0, [sp, #4]
 80054f4:	f000 fc58 	bl	8005da8 <__mcmp>
 80054f8:	463a      	mov	r2, r7
 80054fa:	4680      	mov	r8, r0
 80054fc:	4629      	mov	r1, r5
 80054fe:	4648      	mov	r0, r9
 8005500:	f000 fc6e 	bl	8005de0 <__mdiff>
 8005504:	68c2      	ldr	r2, [r0, #12]
 8005506:	4606      	mov	r6, r0
 8005508:	bb02      	cbnz	r2, 800554c <_dtoa_r+0xa6c>
 800550a:	4601      	mov	r1, r0
 800550c:	9801      	ldr	r0, [sp, #4]
 800550e:	f000 fc4b 	bl	8005da8 <__mcmp>
 8005512:	4602      	mov	r2, r0
 8005514:	4631      	mov	r1, r6
 8005516:	4648      	mov	r0, r9
 8005518:	9209      	str	r2, [sp, #36]	@ 0x24
 800551a:	f000 fa07 	bl	800592c <_Bfree>
 800551e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8005522:	ea42 0103 	orr.w	r1, r2, r3
 8005526:	9b08      	ldr	r3, [sp, #32]
 8005528:	4319      	orrs	r1, r3
 800552a:	465e      	mov	r6, fp
 800552c:	d110      	bne.n	8005550 <_dtoa_r+0xa70>
 800552e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005532:	d02b      	beq.n	800558c <_dtoa_r+0xaac>
 8005534:	f1b8 0f00 	cmp.w	r8, #0
 8005538:	dd02      	ble.n	8005540 <_dtoa_r+0xa60>
 800553a:	9b05      	ldr	r3, [sp, #20]
 800553c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005540:	9b04      	ldr	r3, [sp, #16]
 8005542:	f883 a000 	strb.w	sl, [r3]
 8005546:	e52d      	b.n	8004fa4 <_dtoa_r+0x4c4>
 8005548:	4627      	mov	r7, r4
 800554a:	e7bc      	b.n	80054c6 <_dtoa_r+0x9e6>
 800554c:	2201      	movs	r2, #1
 800554e:	e7e1      	b.n	8005514 <_dtoa_r+0xa34>
 8005550:	f1b8 0f00 	cmp.w	r8, #0
 8005554:	db06      	blt.n	8005564 <_dtoa_r+0xa84>
 8005556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005558:	ea48 0803 	orr.w	r8, r8, r3
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	ea58 0803 	orrs.w	r8, r8, r3
 8005562:	d120      	bne.n	80055a6 <_dtoa_r+0xac6>
 8005564:	2a00      	cmp	r2, #0
 8005566:	ddeb      	ble.n	8005540 <_dtoa_r+0xa60>
 8005568:	9901      	ldr	r1, [sp, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	4648      	mov	r0, r9
 800556e:	f000 fbad 	bl	8005ccc <__lshift>
 8005572:	4629      	mov	r1, r5
 8005574:	9001      	str	r0, [sp, #4]
 8005576:	f000 fc17 	bl	8005da8 <__mcmp>
 800557a:	2800      	cmp	r0, #0
 800557c:	dc03      	bgt.n	8005586 <_dtoa_r+0xaa6>
 800557e:	d1df      	bne.n	8005540 <_dtoa_r+0xa60>
 8005580:	f01a 0f01 	tst.w	sl, #1
 8005584:	d0dc      	beq.n	8005540 <_dtoa_r+0xa60>
 8005586:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800558a:	d1d6      	bne.n	800553a <_dtoa_r+0xa5a>
 800558c:	9a04      	ldr	r2, [sp, #16]
 800558e:	2339      	movs	r3, #57	@ 0x39
 8005590:	7013      	strb	r3, [r2, #0]
 8005592:	4633      	mov	r3, r6
 8005594:	461e      	mov	r6, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800559c:	2a39      	cmp	r2, #57	@ 0x39
 800559e:	d052      	beq.n	8005646 <_dtoa_r+0xb66>
 80055a0:	3201      	adds	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	e4fe      	b.n	8004fa4 <_dtoa_r+0x4c4>
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	dd07      	ble.n	80055ba <_dtoa_r+0xada>
 80055aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80055ae:	d0ed      	beq.n	800558c <_dtoa_r+0xaac>
 80055b0:	9a04      	ldr	r2, [sp, #16]
 80055b2:	f10a 0301 	add.w	r3, sl, #1
 80055b6:	7013      	strb	r3, [r2, #0]
 80055b8:	e4f4      	b.n	8004fa4 <_dtoa_r+0x4c4>
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	f80b ac01 	strb.w	sl, [fp, #-1]
 80055c0:	455b      	cmp	r3, fp
 80055c2:	d02a      	beq.n	800561a <_dtoa_r+0xb3a>
 80055c4:	9901      	ldr	r1, [sp, #4]
 80055c6:	2300      	movs	r3, #0
 80055c8:	220a      	movs	r2, #10
 80055ca:	4648      	mov	r0, r9
 80055cc:	f000 f9d0 	bl	8005970 <__multadd>
 80055d0:	42bc      	cmp	r4, r7
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f04f 020a 	mov.w	r2, #10
 80055dc:	4621      	mov	r1, r4
 80055de:	4648      	mov	r0, r9
 80055e0:	d106      	bne.n	80055f0 <_dtoa_r+0xb10>
 80055e2:	f000 f9c5 	bl	8005970 <__multadd>
 80055e6:	4604      	mov	r4, r0
 80055e8:	4607      	mov	r7, r0
 80055ea:	f10b 0b01 	add.w	fp, fp, #1
 80055ee:	e775      	b.n	80054dc <_dtoa_r+0x9fc>
 80055f0:	f000 f9be 	bl	8005970 <__multadd>
 80055f4:	4639      	mov	r1, r7
 80055f6:	4604      	mov	r4, r0
 80055f8:	2300      	movs	r3, #0
 80055fa:	220a      	movs	r2, #10
 80055fc:	4648      	mov	r0, r9
 80055fe:	f000 f9b7 	bl	8005970 <__multadd>
 8005602:	4607      	mov	r7, r0
 8005604:	e7f1      	b.n	80055ea <_dtoa_r+0xb0a>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	1e5e      	subs	r6, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	9b00      	ldr	r3, [sp, #0]
 800560e:	bfd8      	it	le
 8005610:	2600      	movle	r6, #0
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	4627      	mov	r7, r4
 8005616:	4416      	add	r6, r2
 8005618:	2400      	movs	r4, #0
 800561a:	9901      	ldr	r1, [sp, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	4648      	mov	r0, r9
 8005620:	f000 fb54 	bl	8005ccc <__lshift>
 8005624:	4629      	mov	r1, r5
 8005626:	9001      	str	r0, [sp, #4]
 8005628:	f000 fbbe 	bl	8005da8 <__mcmp>
 800562c:	2800      	cmp	r0, #0
 800562e:	dcb0      	bgt.n	8005592 <_dtoa_r+0xab2>
 8005630:	d102      	bne.n	8005638 <_dtoa_r+0xb58>
 8005632:	f01a 0f01 	tst.w	sl, #1
 8005636:	d1ac      	bne.n	8005592 <_dtoa_r+0xab2>
 8005638:	4633      	mov	r3, r6
 800563a:	461e      	mov	r6, r3
 800563c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005640:	2a30      	cmp	r2, #48	@ 0x30
 8005642:	d0fa      	beq.n	800563a <_dtoa_r+0xb5a>
 8005644:	e4ae      	b.n	8004fa4 <_dtoa_r+0x4c4>
 8005646:	9a00      	ldr	r2, [sp, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d1a3      	bne.n	8005594 <_dtoa_r+0xab4>
 800564c:	9b02      	ldr	r3, [sp, #8]
 800564e:	3301      	adds	r3, #1
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	2331      	movs	r3, #49	@ 0x31
 8005654:	e7af      	b.n	80055b6 <_dtoa_r+0xad6>
 8005656:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f aa8c 	bne.w	8004b76 <_dtoa_r+0x96>
 800565e:	4b13      	ldr	r3, [pc, #76]	@ (80056ac <_dtoa_r+0xbcc>)
 8005660:	f7ff baab 	b.w	8004bba <_dtoa_r+0xda>
 8005664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005666:	2b01      	cmp	r3, #1
 8005668:	f77f ae2f 	ble.w	80052ca <_dtoa_r+0x7ea>
 800566c:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005670:	2001      	movs	r0, #1
 8005672:	e64e      	b.n	8005312 <_dtoa_r+0x832>
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f77f aed7 	ble.w	800542a <_dtoa_r+0x94a>
 800567c:	9e00      	ldr	r6, [sp, #0]
 800567e:	9801      	ldr	r0, [sp, #4]
 8005680:	4629      	mov	r1, r5
 8005682:	f7ff f9a4 	bl	80049ce <quorem>
 8005686:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800568a:	9b00      	ldr	r3, [sp, #0]
 800568c:	f806 ab01 	strb.w	sl, [r6], #1
 8005690:	1af2      	subs	r2, r6, r3
 8005692:	9b05      	ldr	r3, [sp, #20]
 8005694:	4293      	cmp	r3, r2
 8005696:	ddb6      	ble.n	8005606 <_dtoa_r+0xb26>
 8005698:	9901      	ldr	r1, [sp, #4]
 800569a:	2300      	movs	r3, #0
 800569c:	220a      	movs	r2, #10
 800569e:	4648      	mov	r0, r9
 80056a0:	f000 f966 	bl	8005970 <__multadd>
 80056a4:	9001      	str	r0, [sp, #4]
 80056a6:	e7ea      	b.n	800567e <_dtoa_r+0xb9e>
 80056a8:	0800716a 	.word	0x0800716a
 80056ac:	08007104 	.word	0x08007104

080056b0 <_free_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4605      	mov	r5, r0
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d041      	beq.n	800573c <_free_r+0x8c>
 80056b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056bc:	1f0c      	subs	r4, r1, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfb8      	it	lt
 80056c2:	18e4      	addlt	r4, r4, r3
 80056c4:	f000 f8e8 	bl	8005898 <__malloc_lock>
 80056c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <_free_r+0x90>)
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	b933      	cbnz	r3, 80056dc <_free_r+0x2c>
 80056ce:	6063      	str	r3, [r4, #4]
 80056d0:	6014      	str	r4, [r2, #0]
 80056d2:	4628      	mov	r0, r5
 80056d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056d8:	f000 b8e4 	b.w	80058a4 <__malloc_unlock>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d908      	bls.n	80056f2 <_free_r+0x42>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	1821      	adds	r1, r4, r0
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf01      	itttt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	1809      	addeq	r1, r1, r0
 80056ee:	6021      	streq	r1, [r4, #0]
 80056f0:	e7ed      	b.n	80056ce <_free_r+0x1e>
 80056f2:	461a      	mov	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b10b      	cbz	r3, 80056fc <_free_r+0x4c>
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d9fa      	bls.n	80056f2 <_free_r+0x42>
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	1850      	adds	r0, r2, r1
 8005700:	42a0      	cmp	r0, r4
 8005702:	d10b      	bne.n	800571c <_free_r+0x6c>
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	4401      	add	r1, r0
 8005708:	1850      	adds	r0, r2, r1
 800570a:	4283      	cmp	r3, r0
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	d1e0      	bne.n	80056d2 <_free_r+0x22>
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	4408      	add	r0, r1
 8005718:	6010      	str	r0, [r2, #0]
 800571a:	e7da      	b.n	80056d2 <_free_r+0x22>
 800571c:	d902      	bls.n	8005724 <_free_r+0x74>
 800571e:	230c      	movs	r3, #12
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	e7d6      	b.n	80056d2 <_free_r+0x22>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	1821      	adds	r1, r4, r0
 8005728:	428b      	cmp	r3, r1
 800572a:	bf04      	itt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	bf04      	itt	eq
 8005734:	1809      	addeq	r1, r1, r0
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	6054      	str	r4, [r2, #4]
 800573a:	e7ca      	b.n	80056d2 <_free_r+0x22>
 800573c:	bd38      	pop	{r3, r4, r5, pc}
 800573e:	bf00      	nop
 8005740:	20000440 	.word	0x20000440

08005744 <malloc>:
 8005744:	4b02      	ldr	r3, [pc, #8]	@ (8005750 <malloc+0xc>)
 8005746:	4601      	mov	r1, r0
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	f000 b825 	b.w	8005798 <_malloc_r>
 800574e:	bf00      	nop
 8005750:	20000018 	.word	0x20000018

08005754 <sbrk_aligned>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4e0f      	ldr	r6, [pc, #60]	@ (8005794 <sbrk_aligned+0x40>)
 8005758:	460c      	mov	r4, r1
 800575a:	6831      	ldr	r1, [r6, #0]
 800575c:	4605      	mov	r5, r0
 800575e:	b911      	cbnz	r1, 8005766 <sbrk_aligned+0x12>
 8005760:	f000 fe4e 	bl	8006400 <_sbrk_r>
 8005764:	6030      	str	r0, [r6, #0]
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fe49 	bl	8006400 <_sbrk_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d103      	bne.n	800577a <sbrk_aligned+0x26>
 8005772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005776:	4620      	mov	r0, r4
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	1cc4      	adds	r4, r0, #3
 800577c:	f024 0403 	bic.w	r4, r4, #3
 8005780:	42a0      	cmp	r0, r4
 8005782:	d0f8      	beq.n	8005776 <sbrk_aligned+0x22>
 8005784:	1a21      	subs	r1, r4, r0
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fe3a 	bl	8006400 <_sbrk_r>
 800578c:	3001      	adds	r0, #1
 800578e:	d1f2      	bne.n	8005776 <sbrk_aligned+0x22>
 8005790:	e7ef      	b.n	8005772 <sbrk_aligned+0x1e>
 8005792:	bf00      	nop
 8005794:	2000043c 	.word	0x2000043c

08005798 <_malloc_r>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	1ccd      	adds	r5, r1, #3
 800579e:	f025 0503 	bic.w	r5, r5, #3
 80057a2:	3508      	adds	r5, #8
 80057a4:	2d0c      	cmp	r5, #12
 80057a6:	bf38      	it	cc
 80057a8:	250c      	movcc	r5, #12
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	4606      	mov	r6, r0
 80057ae:	db01      	blt.n	80057b4 <_malloc_r+0x1c>
 80057b0:	42a9      	cmp	r1, r5
 80057b2:	d904      	bls.n	80057be <_malloc_r+0x26>
 80057b4:	230c      	movs	r3, #12
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	2000      	movs	r0, #0
 80057ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005894 <_malloc_r+0xfc>
 80057c2:	f000 f869 	bl	8005898 <__malloc_lock>
 80057c6:	f8d8 3000 	ldr.w	r3, [r8]
 80057ca:	461c      	mov	r4, r3
 80057cc:	bb44      	cbnz	r4, 8005820 <_malloc_r+0x88>
 80057ce:	4629      	mov	r1, r5
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff ffbf 	bl	8005754 <sbrk_aligned>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	4604      	mov	r4, r0
 80057da:	d158      	bne.n	800588e <_malloc_r+0xf6>
 80057dc:	f8d8 4000 	ldr.w	r4, [r8]
 80057e0:	4627      	mov	r7, r4
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d143      	bne.n	800586e <_malloc_r+0xd6>
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d04b      	beq.n	8005882 <_malloc_r+0xea>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	4639      	mov	r1, r7
 80057ee:	4630      	mov	r0, r6
 80057f0:	eb04 0903 	add.w	r9, r4, r3
 80057f4:	f000 fe04 	bl	8006400 <_sbrk_r>
 80057f8:	4581      	cmp	r9, r0
 80057fa:	d142      	bne.n	8005882 <_malloc_r+0xea>
 80057fc:	6821      	ldr	r1, [r4, #0]
 80057fe:	1a6d      	subs	r5, r5, r1
 8005800:	4629      	mov	r1, r5
 8005802:	4630      	mov	r0, r6
 8005804:	f7ff ffa6 	bl	8005754 <sbrk_aligned>
 8005808:	3001      	adds	r0, #1
 800580a:	d03a      	beq.n	8005882 <_malloc_r+0xea>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	442b      	add	r3, r5
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	f8d8 3000 	ldr.w	r3, [r8]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	bb62      	cbnz	r2, 8005874 <_malloc_r+0xdc>
 800581a:	f8c8 7000 	str.w	r7, [r8]
 800581e:	e00f      	b.n	8005840 <_malloc_r+0xa8>
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	1b52      	subs	r2, r2, r5
 8005824:	d420      	bmi.n	8005868 <_malloc_r+0xd0>
 8005826:	2a0b      	cmp	r2, #11
 8005828:	d917      	bls.n	800585a <_malloc_r+0xc2>
 800582a:	1961      	adds	r1, r4, r5
 800582c:	42a3      	cmp	r3, r4
 800582e:	6025      	str	r5, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	6059      	strne	r1, [r3, #4]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	bf08      	it	eq
 8005838:	f8c8 1000 	streq.w	r1, [r8]
 800583c:	5162      	str	r2, [r4, r5]
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f82f 	bl	80058a4 <__malloc_unlock>
 8005846:	f104 000b 	add.w	r0, r4, #11
 800584a:	1d23      	adds	r3, r4, #4
 800584c:	f020 0007 	bic.w	r0, r0, #7
 8005850:	1ac2      	subs	r2, r0, r3
 8005852:	bf1c      	itt	ne
 8005854:	1a1b      	subne	r3, r3, r0
 8005856:	50a3      	strne	r3, [r4, r2]
 8005858:	e7af      	b.n	80057ba <_malloc_r+0x22>
 800585a:	6862      	ldr	r2, [r4, #4]
 800585c:	42a3      	cmp	r3, r4
 800585e:	bf0c      	ite	eq
 8005860:	f8c8 2000 	streq.w	r2, [r8]
 8005864:	605a      	strne	r2, [r3, #4]
 8005866:	e7eb      	b.n	8005840 <_malloc_r+0xa8>
 8005868:	4623      	mov	r3, r4
 800586a:	6864      	ldr	r4, [r4, #4]
 800586c:	e7ae      	b.n	80057cc <_malloc_r+0x34>
 800586e:	463c      	mov	r4, r7
 8005870:	687f      	ldr	r7, [r7, #4]
 8005872:	e7b6      	b.n	80057e2 <_malloc_r+0x4a>
 8005874:	461a      	mov	r2, r3
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	d1fb      	bne.n	8005874 <_malloc_r+0xdc>
 800587c:	2300      	movs	r3, #0
 800587e:	6053      	str	r3, [r2, #4]
 8005880:	e7de      	b.n	8005840 <_malloc_r+0xa8>
 8005882:	230c      	movs	r3, #12
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	4630      	mov	r0, r6
 8005888:	f000 f80c 	bl	80058a4 <__malloc_unlock>
 800588c:	e794      	b.n	80057b8 <_malloc_r+0x20>
 800588e:	6005      	str	r5, [r0, #0]
 8005890:	e7d6      	b.n	8005840 <_malloc_r+0xa8>
 8005892:	bf00      	nop
 8005894:	20000440 	.word	0x20000440

08005898 <__malloc_lock>:
 8005898:	4801      	ldr	r0, [pc, #4]	@ (80058a0 <__malloc_lock+0x8>)
 800589a:	f7ff b896 	b.w	80049ca <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	20000438 	.word	0x20000438

080058a4 <__malloc_unlock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	@ (80058ac <__malloc_unlock+0x8>)
 80058a6:	f7ff b891 	b.w	80049cc <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	20000438 	.word	0x20000438

080058b0 <_Balloc>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	69c4      	ldr	r4, [r0, #28]
 80058b4:	4605      	mov	r5, r0
 80058b6:	460e      	mov	r6, r1
 80058b8:	b984      	cbnz	r4, 80058dc <_Balloc+0x2c>
 80058ba:	2010      	movs	r0, #16
 80058bc:	f7ff ff42 	bl	8005744 <malloc>
 80058c0:	4604      	mov	r4, r0
 80058c2:	61e8      	str	r0, [r5, #28]
 80058c4:	b928      	cbnz	r0, 80058d2 <_Balloc+0x22>
 80058c6:	4602      	mov	r2, r0
 80058c8:	4b16      	ldr	r3, [pc, #88]	@ (8005924 <_Balloc+0x74>)
 80058ca:	4817      	ldr	r0, [pc, #92]	@ (8005928 <_Balloc+0x78>)
 80058cc:	216b      	movs	r1, #107	@ 0x6b
 80058ce:	f000 fdb5 	bl	800643c <__assert_func>
 80058d2:	2300      	movs	r3, #0
 80058d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	60c3      	str	r3, [r0, #12]
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	b953      	cbnz	r3, 80058f6 <_Balloc+0x46>
 80058e0:	2221      	movs	r2, #33	@ 0x21
 80058e2:	2104      	movs	r1, #4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fdc7 	bl	8006478 <_calloc_r>
 80058ea:	69eb      	ldr	r3, [r5, #28]
 80058ec:	60e0      	str	r0, [r4, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	b90b      	cbnz	r3, 80058f6 <_Balloc+0x46>
 80058f2:	2000      	movs	r0, #0
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058fa:	b130      	cbz	r0, 800590a <_Balloc+0x5a>
 80058fc:	6802      	ldr	r2, [r0, #0]
 80058fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005902:	2300      	movs	r3, #0
 8005904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005908:	e7f4      	b.n	80058f4 <_Balloc+0x44>
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f406 	lsl.w	r4, r1, r6
 8005910:	1d62      	adds	r2, r4, #5
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	4628      	mov	r0, r5
 8005916:	f000 fdaf 	bl	8006478 <_calloc_r>
 800591a:	2800      	cmp	r0, #0
 800591c:	d0e9      	beq.n	80058f2 <_Balloc+0x42>
 800591e:	e9c0 6401 	strd	r6, r4, [r0, #4]
 8005922:	e7ee      	b.n	8005902 <_Balloc+0x52>
 8005924:	08007111 	.word	0x08007111
 8005928:	0800717b 	.word	0x0800717b

0800592c <_Bfree>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	69c6      	ldr	r6, [r0, #28]
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b976      	cbnz	r6, 8005954 <_Bfree+0x28>
 8005936:	2010      	movs	r0, #16
 8005938:	f7ff ff04 	bl	8005744 <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	61e8      	str	r0, [r5, #28]
 8005940:	b920      	cbnz	r0, 800594c <_Bfree+0x20>
 8005942:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <_Bfree+0x3c>)
 8005944:	4809      	ldr	r0, [pc, #36]	@ (800596c <_Bfree+0x40>)
 8005946:	218f      	movs	r1, #143	@ 0x8f
 8005948:	f000 fd78 	bl	800643c <__assert_func>
 800594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005950:	6006      	str	r6, [r0, #0]
 8005952:	60c6      	str	r6, [r0, #12]
 8005954:	b13c      	cbz	r4, 8005966 <_Bfree+0x3a>
 8005956:	69eb      	ldr	r3, [r5, #28]
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	08007111 	.word	0x08007111
 800596c:	0800717b 	.word	0x0800717b

08005970 <__multadd>:
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	690d      	ldr	r5, [r1, #16]
 8005976:	4607      	mov	r7, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461e      	mov	r6, r3
 800597c:	f101 0c14 	add.w	ip, r1, #20
 8005980:	2000      	movs	r0, #0
 8005982:	f8dc 3000 	ldr.w	r3, [ip]
 8005986:	b299      	uxth	r1, r3
 8005988:	fb02 6101 	mla	r1, r2, r1, r6
 800598c:	0c1e      	lsrs	r6, r3, #16
 800598e:	0c0b      	lsrs	r3, r1, #16
 8005990:	fb02 3306 	mla	r3, r2, r6, r3
 8005994:	b289      	uxth	r1, r1
 8005996:	3001      	adds	r0, #1
 8005998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800599c:	4285      	cmp	r5, r0
 800599e:	f84c 1b04 	str.w	r1, [ip], #4
 80059a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059a6:	dcec      	bgt.n	8005982 <__multadd+0x12>
 80059a8:	b30e      	cbz	r6, 80059ee <__multadd+0x7e>
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc19      	bgt.n	80059e4 <__multadd+0x74>
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	4638      	mov	r0, r7
 80059b4:	3101      	adds	r1, #1
 80059b6:	f7ff ff7b 	bl	80058b0 <_Balloc>
 80059ba:	4680      	mov	r8, r0
 80059bc:	b928      	cbnz	r0, 80059ca <__multadd+0x5a>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <__multadd+0x84>)
 80059c2:	480d      	ldr	r0, [pc, #52]	@ (80059f8 <__multadd+0x88>)
 80059c4:	21ba      	movs	r1, #186	@ 0xba
 80059c6:	f000 fd39 	bl	800643c <__assert_func>
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	3202      	adds	r2, #2
 80059ce:	f104 010c 	add.w	r1, r4, #12
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	300c      	adds	r0, #12
 80059d6:	f000 fd23 	bl	8006420 <memcpy>
 80059da:	4621      	mov	r1, r4
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ffa5 	bl	800592c <_Bfree>
 80059e2:	4644      	mov	r4, r8
 80059e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059e8:	3501      	adds	r5, #1
 80059ea:	615e      	str	r6, [r3, #20]
 80059ec:	6125      	str	r5, [r4, #16]
 80059ee:	4620      	mov	r0, r4
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	0800716a 	.word	0x0800716a
 80059f8:	0800717b 	.word	0x0800717b

080059fc <__hi0bits>:
 80059fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a00:	4603      	mov	r3, r0
 8005a02:	bf36      	itet	cc
 8005a04:	0403      	lslcc	r3, r0, #16
 8005a06:	2000      	movcs	r0, #0
 8005a08:	2010      	movcc	r0, #16
 8005a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a0e:	bf3c      	itt	cc
 8005a10:	021b      	lslcc	r3, r3, #8
 8005a12:	3008      	addcc	r0, #8
 8005a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a18:	bf3c      	itt	cc
 8005a1a:	011b      	lslcc	r3, r3, #4
 8005a1c:	3004      	addcc	r0, #4
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a22:	bf3c      	itt	cc
 8005a24:	009b      	lslcc	r3, r3, #2
 8005a26:	3002      	addcc	r0, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db05      	blt.n	8005a38 <__hi0bits+0x3c>
 8005a2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a30:	f100 0001 	add.w	r0, r0, #1
 8005a34:	bf08      	it	eq
 8005a36:	2020      	moveq	r0, #32
 8005a38:	4770      	bx	lr

08005a3a <__lo0bits>:
 8005a3a:	6803      	ldr	r3, [r0, #0]
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	f013 0007 	ands.w	r0, r3, #7
 8005a42:	d00b      	beq.n	8005a5c <__lo0bits+0x22>
 8005a44:	07d9      	lsls	r1, r3, #31
 8005a46:	d421      	bmi.n	8005a8c <__lo0bits+0x52>
 8005a48:	0798      	lsls	r0, r3, #30
 8005a4a:	bf49      	itett	mi
 8005a4c:	085b      	lsrmi	r3, r3, #1
 8005a4e:	089b      	lsrpl	r3, r3, #2
 8005a50:	2001      	movmi	r0, #1
 8005a52:	6013      	strmi	r3, [r2, #0]
 8005a54:	bf5c      	itt	pl
 8005a56:	6013      	strpl	r3, [r2, #0]
 8005a58:	2002      	movpl	r0, #2
 8005a5a:	4770      	bx	lr
 8005a5c:	b299      	uxth	r1, r3
 8005a5e:	b909      	cbnz	r1, 8005a64 <__lo0bits+0x2a>
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	2010      	movs	r0, #16
 8005a64:	b2d9      	uxtb	r1, r3
 8005a66:	b909      	cbnz	r1, 8005a6c <__lo0bits+0x32>
 8005a68:	3008      	adds	r0, #8
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	0719      	lsls	r1, r3, #28
 8005a6e:	bf04      	itt	eq
 8005a70:	091b      	lsreq	r3, r3, #4
 8005a72:	3004      	addeq	r0, #4
 8005a74:	0799      	lsls	r1, r3, #30
 8005a76:	bf04      	itt	eq
 8005a78:	089b      	lsreq	r3, r3, #2
 8005a7a:	3002      	addeq	r0, #2
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d403      	bmi.n	8005a88 <__lo0bits+0x4e>
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	f100 0001 	add.w	r0, r0, #1
 8005a86:	d003      	beq.n	8005a90 <__lo0bits+0x56>
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4770      	bx	lr
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	4770      	bx	lr
 8005a90:	2020      	movs	r0, #32
 8005a92:	4770      	bx	lr

08005a94 <__i2b>:
 8005a94:	b510      	push	{r4, lr}
 8005a96:	460c      	mov	r4, r1
 8005a98:	2101      	movs	r1, #1
 8005a9a:	f7ff ff09 	bl	80058b0 <_Balloc>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	b928      	cbnz	r0, 8005aae <__i2b+0x1a>
 8005aa2:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <__i2b+0x24>)
 8005aa4:	4805      	ldr	r0, [pc, #20]	@ (8005abc <__i2b+0x28>)
 8005aa6:	f240 1145 	movw	r1, #325	@ 0x145
 8005aaa:	f000 fcc7 	bl	800643c <__assert_func>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	6144      	str	r4, [r0, #20]
 8005ab2:	6103      	str	r3, [r0, #16]
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop
 8005ab8:	0800716a 	.word	0x0800716a
 8005abc:	0800717b 	.word	0x0800717b

08005ac0 <__multiply>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005ac8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005acc:	45d1      	cmp	r9, sl
 8005ace:	b085      	sub	sp, #20
 8005ad0:	4688      	mov	r8, r1
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	db04      	blt.n	8005ae0 <__multiply+0x20>
 8005ad6:	4653      	mov	r3, sl
 8005ad8:	460c      	mov	r4, r1
 8005ada:	46ca      	mov	sl, r9
 8005adc:	4690      	mov	r8, r2
 8005ade:	4699      	mov	r9, r3
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	6861      	ldr	r1, [r4, #4]
 8005ae4:	eb0a 0609 	add.w	r6, sl, r9
 8005ae8:	42b3      	cmp	r3, r6
 8005aea:	bfb8      	it	lt
 8005aec:	3101      	addlt	r1, #1
 8005aee:	f7ff fedf 	bl	80058b0 <_Balloc>
 8005af2:	b930      	cbnz	r0, 8005b02 <__multiply+0x42>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b45      	ldr	r3, [pc, #276]	@ (8005c0c <__multiply+0x14c>)
 8005af8:	4845      	ldr	r0, [pc, #276]	@ (8005c10 <__multiply+0x150>)
 8005afa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005afe:	f000 fc9d 	bl	800643c <__assert_func>
 8005b02:	f100 0514 	add.w	r5, r0, #20
 8005b06:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	42bb      	cmp	r3, r7
 8005b10:	d31f      	bcc.n	8005b52 <__multiply+0x92>
 8005b12:	f104 0c14 	add.w	ip, r4, #20
 8005b16:	f108 0114 	add.w	r1, r8, #20
 8005b1a:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 8005b1e:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 8005b22:	9202      	str	r2, [sp, #8]
 8005b24:	1b1a      	subs	r2, r3, r4
 8005b26:	3a15      	subs	r2, #21
 8005b28:	f022 0203 	bic.w	r2, r2, #3
 8005b2c:	3415      	adds	r4, #21
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	bf88      	it	hi
 8005b32:	2200      	movhi	r2, #0
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	9a02      	ldr	r2, [sp, #8]
 8005b38:	9103      	str	r1, [sp, #12]
 8005b3a:	428a      	cmp	r2, r1
 8005b3c:	d80c      	bhi.n	8005b58 <__multiply+0x98>
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	dd03      	ble.n	8005b4a <__multiply+0x8a>
 8005b42:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d05d      	beq.n	8005c06 <__multiply+0x146>
 8005b4a:	6106      	str	r6, [r0, #16]
 8005b4c:	b005      	add	sp, #20
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	f843 2b04 	str.w	r2, [r3], #4
 8005b56:	e7da      	b.n	8005b0e <__multiply+0x4e>
 8005b58:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b5c:	f1ba 0f00 	cmp.w	sl, #0
 8005b60:	d024      	beq.n	8005bac <__multiply+0xec>
 8005b62:	46e0      	mov	r8, ip
 8005b64:	46a9      	mov	r9, r5
 8005b66:	f04f 0e00 	mov.w	lr, #0
 8005b6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b6e:	f8d9 4000 	ldr.w	r4, [r9]
 8005b72:	fa1f fb82 	uxth.w	fp, r2
 8005b76:	b2a4      	uxth	r4, r4
 8005b78:	fb0a 440b 	mla	r4, sl, fp, r4
 8005b7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b80:	f8d9 2000 	ldr.w	r2, [r9]
 8005b84:	4474      	add	r4, lr
 8005b86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b8a:	fb0a e20b 	mla	r2, sl, fp, lr
 8005b8e:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005b92:	b2a4      	uxth	r4, r4
 8005b94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005b98:	4543      	cmp	r3, r8
 8005b9a:	f849 4b04 	str.w	r4, [r9], #4
 8005b9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ba2:	d8e2      	bhi.n	8005b6a <__multiply+0xaa>
 8005ba4:	9a01      	ldr	r2, [sp, #4]
 8005ba6:	18aa      	adds	r2, r5, r2
 8005ba8:	f8c2 e004 	str.w	lr, [r2, #4]
 8005bac:	9a03      	ldr	r2, [sp, #12]
 8005bae:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8005bb2:	3104      	adds	r1, #4
 8005bb4:	f1b8 0f00 	cmp.w	r8, #0
 8005bb8:	d023      	beq.n	8005c02 <__multiply+0x142>
 8005bba:	682a      	ldr	r2, [r5, #0]
 8005bbc:	46e6      	mov	lr, ip
 8005bbe:	4691      	mov	r9, r2
 8005bc0:	46aa      	mov	sl, r5
 8005bc2:	f04f 0b00 	mov.w	fp, #0
 8005bc6:	f8be 4000 	ldrh.w	r4, [lr]
 8005bca:	fb08 b404 	mla	r4, r8, r4, fp
 8005bce:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 8005bd2:	b292      	uxth	r2, r2
 8005bd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bd8:	f84a 2b04 	str.w	r2, [sl], #4
 8005bdc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005be0:	f8da 9000 	ldr.w	r9, [sl]
 8005be4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005be8:	fa1f f289 	uxth.w	r2, r9
 8005bec:	fb08 220b 	mla	r2, r8, fp, r2
 8005bf0:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005bf4:	4573      	cmp	r3, lr
 8005bf6:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005bfa:	d8e4      	bhi.n	8005bc6 <__multiply+0x106>
 8005bfc:	9c01      	ldr	r4, [sp, #4]
 8005bfe:	192c      	adds	r4, r5, r4
 8005c00:	6062      	str	r2, [r4, #4]
 8005c02:	3504      	adds	r5, #4
 8005c04:	e797      	b.n	8005b36 <__multiply+0x76>
 8005c06:	3e01      	subs	r6, #1
 8005c08:	e799      	b.n	8005b3e <__multiply+0x7e>
 8005c0a:	bf00      	nop
 8005c0c:	0800716a 	.word	0x0800716a
 8005c10:	0800717b 	.word	0x0800717b

08005c14 <__pow5mult>:
 8005c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	4617      	mov	r7, r2
 8005c1a:	f012 0203 	ands.w	r2, r2, #3
 8005c1e:	4680      	mov	r8, r0
 8005c20:	460d      	mov	r5, r1
 8005c22:	d007      	beq.n	8005c34 <__pow5mult+0x20>
 8005c24:	4c26      	ldr	r4, [pc, #152]	@ (8005cc0 <__pow5mult+0xac>)
 8005c26:	3a01      	subs	r2, #1
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c2e:	f7ff fe9f 	bl	8005970 <__multadd>
 8005c32:	4605      	mov	r5, r0
 8005c34:	10bf      	asrs	r7, r7, #2
 8005c36:	d03f      	beq.n	8005cb8 <__pow5mult+0xa4>
 8005c38:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8005c3c:	b994      	cbnz	r4, 8005c64 <__pow5mult+0x50>
 8005c3e:	2010      	movs	r0, #16
 8005c40:	f7ff fd80 	bl	8005744 <malloc>
 8005c44:	4604      	mov	r4, r0
 8005c46:	f8c8 001c 	str.w	r0, [r8, #28]
 8005c4a:	b930      	cbnz	r0, 8005c5a <__pow5mult+0x46>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <__pow5mult+0xb0>)
 8005c50:	481d      	ldr	r0, [pc, #116]	@ (8005cc8 <__pow5mult+0xb4>)
 8005c52:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c56:	f000 fbf1 	bl	800643c <__assert_func>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005c60:	6003      	str	r3, [r0, #0]
 8005c62:	60c3      	str	r3, [r0, #12]
 8005c64:	68a6      	ldr	r6, [r4, #8]
 8005c66:	b946      	cbnz	r6, 8005c7a <__pow5mult+0x66>
 8005c68:	f240 2171 	movw	r1, #625	@ 0x271
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f7ff ff11 	bl	8005a94 <__i2b>
 8005c72:	2300      	movs	r3, #0
 8005c74:	60a0      	str	r0, [r4, #8]
 8005c76:	4606      	mov	r6, r0
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	462c      	mov	r4, r5
 8005c7c:	f04f 0900 	mov.w	r9, #0
 8005c80:	f007 0301 	and.w	r3, r7, #1
 8005c84:	107f      	asrs	r7, r7, #1
 8005c86:	b153      	cbz	r3, 8005c9e <__pow5mult+0x8a>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	f7ff ff17 	bl	8005ac0 <__multiply>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4605      	mov	r5, r0
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff fe48 	bl	800592c <_Bfree>
 8005c9c:	b167      	cbz	r7, 8005cb8 <__pow5mult+0xa4>
 8005c9e:	6830      	ldr	r0, [r6, #0]
 8005ca0:	b938      	cbnz	r0, 8005cb2 <__pow5mult+0x9e>
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff ff0a 	bl	8005ac0 <__multiply>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	f8c0 9000 	str.w	r9, [r0]
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	462c      	mov	r4, r5
 8005cb6:	e7e3      	b.n	8005c80 <__pow5mult+0x6c>
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08007218 	.word	0x08007218
 8005cc4:	08007111 	.word	0x08007111
 8005cc8:	0800717b 	.word	0x0800717b

08005ccc <__lshift>:
 8005ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	4607      	mov	r7, r0
 8005cde:	4615      	mov	r5, r2
 8005ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ce4:	f108 0901 	add.w	r9, r8, #1
 8005ce8:	454b      	cmp	r3, r9
 8005cea:	db0b      	blt.n	8005d04 <__lshift+0x38>
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7ff fddf 	bl	80058b0 <_Balloc>
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	b948      	cbnz	r0, 8005d0a <__lshift+0x3e>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b29      	ldr	r3, [pc, #164]	@ (8005da0 <__lshift+0xd4>)
 8005cfa:	482a      	ldr	r0, [pc, #168]	@ (8005da4 <__lshift+0xd8>)
 8005cfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d00:	f000 fb9c 	bl	800643c <__assert_func>
 8005d04:	3101      	adds	r1, #1
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	e7ee      	b.n	8005ce8 <__lshift+0x1c>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f100 0c14 	add.w	ip, r0, #20
 8005d10:	f100 0210 	add.w	r2, r0, #16
 8005d14:	4619      	mov	r1, r3
 8005d16:	4553      	cmp	r3, sl
 8005d18:	db35      	blt.n	8005d86 <__lshift+0xba>
 8005d1a:	6922      	ldr	r2, [r4, #16]
 8005d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d24:	f104 0314 	add.w	r3, r4, #20
 8005d28:	f015 0e1f 	ands.w	lr, r5, #31
 8005d2c:	4661      	mov	r1, ip
 8005d2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005d32:	d02c      	beq.n	8005d8e <__lshift+0xc2>
 8005d34:	f1ce 0a20 	rsb	sl, lr, #32
 8005d38:	2500      	movs	r5, #0
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	468b      	mov	fp, r1
 8005d3e:	fa00 f00e 	lsl.w	r0, r0, lr
 8005d42:	4328      	orrs	r0, r5
 8005d44:	f8cb 0000 	str.w	r0, [fp]
 8005d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	f101 0104 	add.w	r1, r1, #4
 8005d52:	fa25 f50a 	lsr.w	r5, r5, sl
 8005d56:	d8f0      	bhi.n	8005d3a <__lshift+0x6e>
 8005d58:	1b13      	subs	r3, r2, r4
 8005d5a:	3b15      	subs	r3, #21
 8005d5c:	f023 0303 	bic.w	r3, r3, #3
 8005d60:	f104 0115 	add.w	r1, r4, #21
 8005d64:	428a      	cmp	r2, r1
 8005d66:	bf38      	it	cc
 8005d68:	2300      	movcc	r3, #0
 8005d6a:	449c      	add	ip, r3
 8005d6c:	f8cc 5004 	str.w	r5, [ip, #4]
 8005d70:	b905      	cbnz	r5, 8005d74 <__lshift+0xa8>
 8005d72:	46c1      	mov	r9, r8
 8005d74:	4638      	mov	r0, r7
 8005d76:	f8c6 9010 	str.w	r9, [r6, #16]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	f7ff fdd6 	bl	800592c <_Bfree>
 8005d80:	4630      	mov	r0, r6
 8005d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	e7c3      	b.n	8005d16 <__lshift+0x4a>
 8005d8e:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d92:	600d      	str	r5, [r1, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	f101 0104 	add.w	r1, r1, #4
 8005d9a:	d8f8      	bhi.n	8005d8e <__lshift+0xc2>
 8005d9c:	e7e9      	b.n	8005d72 <__lshift+0xa6>
 8005d9e:	bf00      	nop
 8005da0:	0800716a 	.word	0x0800716a
 8005da4:	0800717b 	.word	0x0800717b

08005da8 <__mcmp>:
 8005da8:	690a      	ldr	r2, [r1, #16]
 8005daa:	4603      	mov	r3, r0
 8005dac:	6900      	ldr	r0, [r0, #16]
 8005dae:	1a80      	subs	r0, r0, r2
 8005db0:	b530      	push	{r4, r5, lr}
 8005db2:	d10e      	bne.n	8005dd2 <__mcmp+0x2a>
 8005db4:	3314      	adds	r3, #20
 8005db6:	3114      	adds	r1, #20
 8005db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005dc8:	4295      	cmp	r5, r2
 8005dca:	d003      	beq.n	8005dd4 <__mcmp+0x2c>
 8005dcc:	d205      	bcs.n	8005dda <__mcmp+0x32>
 8005dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dd2:	bd30      	pop	{r4, r5, pc}
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d3f3      	bcc.n	8005dc0 <__mcmp+0x18>
 8005dd8:	e7fb      	b.n	8005dd2 <__mcmp+0x2a>
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e7f9      	b.n	8005dd2 <__mcmp+0x2a>
	...

08005de0 <__mdiff>:
 8005de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	468a      	mov	sl, r1
 8005de6:	4606      	mov	r6, r0
 8005de8:	4611      	mov	r1, r2
 8005dea:	4650      	mov	r0, sl
 8005dec:	4614      	mov	r4, r2
 8005dee:	f7ff ffdb 	bl	8005da8 <__mcmp>
 8005df2:	1e05      	subs	r5, r0, #0
 8005df4:	d112      	bne.n	8005e1c <__mdiff+0x3c>
 8005df6:	4629      	mov	r1, r5
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff fd59 	bl	80058b0 <_Balloc>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	b928      	cbnz	r0, 8005e0e <__mdiff+0x2e>
 8005e02:	4b41      	ldr	r3, [pc, #260]	@ (8005f08 <__mdiff+0x128>)
 8005e04:	f240 2137 	movw	r1, #567	@ 0x237
 8005e08:	4840      	ldr	r0, [pc, #256]	@ (8005f0c <__mdiff+0x12c>)
 8005e0a:	f000 fb17 	bl	800643c <__assert_func>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e14:	4610      	mov	r0, r2
 8005e16:	b003      	add	sp, #12
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	bfbc      	itt	lt
 8005e1e:	4653      	movlt	r3, sl
 8005e20:	46a2      	movlt	sl, r4
 8005e22:	4630      	mov	r0, r6
 8005e24:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005e28:	bfba      	itte	lt
 8005e2a:	461c      	movlt	r4, r3
 8005e2c:	2501      	movlt	r5, #1
 8005e2e:	2500      	movge	r5, #0
 8005e30:	f7ff fd3e 	bl	80058b0 <_Balloc>
 8005e34:	4602      	mov	r2, r0
 8005e36:	b918      	cbnz	r0, 8005e40 <__mdiff+0x60>
 8005e38:	4b33      	ldr	r3, [pc, #204]	@ (8005f08 <__mdiff+0x128>)
 8005e3a:	f240 2145 	movw	r1, #581	@ 0x245
 8005e3e:	e7e3      	b.n	8005e08 <__mdiff+0x28>
 8005e40:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005e44:	6926      	ldr	r6, [r4, #16]
 8005e46:	60c5      	str	r5, [r0, #12]
 8005e48:	f10a 0914 	add.w	r9, sl, #20
 8005e4c:	f104 0e14 	add.w	lr, r4, #20
 8005e50:	f100 0514 	add.w	r5, r0, #20
 8005e54:	f10a 0310 	add.w	r3, sl, #16
 8005e58:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 8005e5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	46ab      	mov	fp, r5
 8005e64:	f04f 0c00 	mov.w	ip, #0
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	fa1f f38a 	uxth.w	r3, sl
 8005e78:	4619      	mov	r1, r3
 8005e7a:	b283      	uxth	r3, r0
 8005e7c:	1acb      	subs	r3, r1, r3
 8005e7e:	0c00      	lsrs	r0, r0, #16
 8005e80:	4463      	add	r3, ip
 8005e82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e90:	4576      	cmp	r6, lr
 8005e92:	f84b 3b04 	str.w	r3, [fp], #4
 8005e96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e9a:	d8e5      	bhi.n	8005e68 <__mdiff+0x88>
 8005e9c:	1b33      	subs	r3, r6, r4
 8005e9e:	3b15      	subs	r3, #21
 8005ea0:	3415      	adds	r4, #21
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	42a6      	cmp	r6, r4
 8005ea8:	bf38      	it	cc
 8005eaa:	2300      	movcc	r3, #0
 8005eac:	18e8      	adds	r0, r5, r3
 8005eae:	444b      	add	r3, r9
 8005eb0:	1d1c      	adds	r4, r3, #4
 8005eb2:	3004      	adds	r0, #4
 8005eb4:	4626      	mov	r6, r4
 8005eb6:	eba5 0509 	sub.w	r5, r5, r9
 8005eba:	4546      	cmp	r6, r8
 8005ebc:	eb06 0e05 	add.w	lr, r6, r5
 8005ec0:	d30e      	bcc.n	8005ee0 <__mdiff+0x100>
 8005ec2:	f108 0103 	add.w	r1, r8, #3
 8005ec6:	1b09      	subs	r1, r1, r4
 8005ec8:	f021 0103 	bic.w	r1, r1, #3
 8005ecc:	3301      	adds	r3, #1
 8005ece:	4598      	cmp	r8, r3
 8005ed0:	bf38      	it	cc
 8005ed2:	2100      	movcc	r1, #0
 8005ed4:	4401      	add	r1, r0
 8005ed6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005eda:	b19b      	cbz	r3, 8005f04 <__mdiff+0x124>
 8005edc:	6117      	str	r7, [r2, #16]
 8005ede:	e799      	b.n	8005e14 <__mdiff+0x34>
 8005ee0:	f856 1b04 	ldr.w	r1, [r6], #4
 8005ee4:	46e2      	mov	sl, ip
 8005ee6:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005eea:	fa1c fc81 	uxtah	ip, ip, r1
 8005eee:	4451      	add	r1, sl
 8005ef0:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8005ef4:	b289      	uxth	r1, r1
 8005ef6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8005efa:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8005efe:	f8ce 1000 	str.w	r1, [lr]
 8005f02:	e7da      	b.n	8005eba <__mdiff+0xda>
 8005f04:	3f01      	subs	r7, #1
 8005f06:	e7e6      	b.n	8005ed6 <__mdiff+0xf6>
 8005f08:	0800716a 	.word	0x0800716a
 8005f0c:	0800717b 	.word	0x0800717b

08005f10 <__d2b>:
 8005f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	460f      	mov	r7, r1
 8005f16:	2101      	movs	r1, #1
 8005f18:	ec59 8b10 	vmov	r8, r9, d0
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	f7ff fcc7 	bl	80058b0 <_Balloc>
 8005f22:	4604      	mov	r4, r0
 8005f24:	b930      	cbnz	r0, 8005f34 <__d2b+0x24>
 8005f26:	4602      	mov	r2, r0
 8005f28:	4b23      	ldr	r3, [pc, #140]	@ (8005fb8 <__d2b+0xa8>)
 8005f2a:	4824      	ldr	r0, [pc, #144]	@ (8005fbc <__d2b+0xac>)
 8005f2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f30:	f000 fa84 	bl	800643c <__assert_func>
 8005f34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f3c:	b10d      	cbz	r5, 8005f42 <__d2b+0x32>
 8005f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	f1b8 0300 	subs.w	r3, r8, #0
 8005f48:	d023      	beq.n	8005f92 <__d2b+0x82>
 8005f4a:	4668      	mov	r0, sp
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	f7ff fd74 	bl	8005a3a <__lo0bits>
 8005f52:	9900      	ldr	r1, [sp, #0]
 8005f54:	b1d8      	cbz	r0, 8005f8e <__d2b+0x7e>
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	f1c0 0320 	rsb	r3, r0, #32
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	430b      	orrs	r3, r1
 8005f62:	40c2      	lsrs	r2, r0
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	61a3      	str	r3, [r4, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2201      	moveq	r2, #1
 8005f72:	2202      	movne	r2, #2
 8005f74:	6122      	str	r2, [r4, #16]
 8005f76:	b1a5      	cbz	r5, 8005fa2 <__d2b+0x92>
 8005f78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f7c:	4405      	add	r5, r0
 8005f7e:	603d      	str	r5, [r7, #0]
 8005f80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f84:	6030      	str	r0, [r6, #0]
 8005f86:	4620      	mov	r0, r4
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8e:	6161      	str	r1, [r4, #20]
 8005f90:	e7ea      	b.n	8005f68 <__d2b+0x58>
 8005f92:	a801      	add	r0, sp, #4
 8005f94:	f7ff fd51 	bl	8005a3a <__lo0bits>
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	3020      	adds	r0, #32
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	e7e8      	b.n	8005f74 <__d2b+0x64>
 8005fa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005faa:	6038      	str	r0, [r7, #0]
 8005fac:	6918      	ldr	r0, [r3, #16]
 8005fae:	f7ff fd25 	bl	80059fc <__hi0bits>
 8005fb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fb6:	e7e5      	b.n	8005f84 <__d2b+0x74>
 8005fb8:	0800716a 	.word	0x0800716a
 8005fbc:	0800717b 	.word	0x0800717b

08005fc0 <__ssputs_r>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	688e      	ldr	r6, [r1, #8]
 8005fc6:	461f      	mov	r7, r3
 8005fc8:	42be      	cmp	r6, r7
 8005fca:	4682      	mov	sl, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	4690      	mov	r8, r2
 8005fd0:	4633      	mov	r3, r6
 8005fd2:	d853      	bhi.n	800607c <__ssputs_r+0xbc>
 8005fd4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005fd8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8005fdc:	d02b      	beq.n	8006036 <__ssputs_r+0x76>
 8005fde:	6965      	ldr	r5, [r4, #20]
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6909      	ldr	r1, [r1, #16]
 8005fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe8:	eba3 0901 	sub.w	r9, r3, r1
 8005fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff0:	1c7b      	adds	r3, r7, #1
 8005ff2:	106d      	asrs	r5, r5, #1
 8005ff4:	444b      	add	r3, r9
 8005ff6:	42ab      	cmp	r3, r5
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	bf84      	itt	hi
 8005ffc:	461d      	movhi	r5, r3
 8005ffe:	462a      	movhi	r2, r5
 8006000:	0543      	lsls	r3, r0, #21
 8006002:	d527      	bpl.n	8006054 <__ssputs_r+0x94>
 8006004:	4611      	mov	r1, r2
 8006006:	4650      	mov	r0, sl
 8006008:	f7ff fbc6 	bl	8005798 <_malloc_r>
 800600c:	4606      	mov	r6, r0
 800600e:	b358      	cbz	r0, 8006068 <__ssputs_r+0xa8>
 8006010:	6921      	ldr	r1, [r4, #16]
 8006012:	464a      	mov	r2, r9
 8006014:	f000 fa04 	bl	8006420 <memcpy>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800601e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006022:	81a3      	strh	r3, [r4, #12]
 8006024:	6126      	str	r6, [r4, #16]
 8006026:	6165      	str	r5, [r4, #20]
 8006028:	444e      	add	r6, r9
 800602a:	eba5 0509 	sub.w	r5, r5, r9
 800602e:	6026      	str	r6, [r4, #0]
 8006030:	60a5      	str	r5, [r4, #8]
 8006032:	463e      	mov	r6, r7
 8006034:	463b      	mov	r3, r7
 8006036:	461f      	mov	r7, r3
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	463a      	mov	r2, r7
 800603c:	4641      	mov	r1, r8
 800603e:	f000 f9c5 	bl	80063cc <memmove>
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	443b      	add	r3, r7
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	2000      	movs	r0, #0
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006054:	4650      	mov	r0, sl
 8006056:	f000 fa35 	bl	80064c4 <_realloc_r>
 800605a:	4606      	mov	r6, r0
 800605c:	2800      	cmp	r0, #0
 800605e:	d1e1      	bne.n	8006024 <__ssputs_r+0x64>
 8006060:	6921      	ldr	r1, [r4, #16]
 8006062:	4650      	mov	r0, sl
 8006064:	f7ff fb24 	bl	80056b0 <_free_r>
 8006068:	230c      	movs	r3, #12
 800606a:	f8ca 3000 	str.w	r3, [sl]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800607a:	e7e9      	b.n	8006050 <__ssputs_r+0x90>
 800607c:	463e      	mov	r6, r7
 800607e:	e7db      	b.n	8006038 <__ssputs_r+0x78>

08006080 <_svfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	4698      	mov	r8, r3
 8006086:	898b      	ldrh	r3, [r1, #12]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	b09d      	sub	sp, #116	@ 0x74
 800608c:	4607      	mov	r7, r0
 800608e:	460d      	mov	r5, r1
 8006090:	4614      	mov	r4, r2
 8006092:	d510      	bpl.n	80060b6 <_svfiprintf_r+0x36>
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	b973      	cbnz	r3, 80060b6 <_svfiprintf_r+0x36>
 8006098:	2140      	movs	r1, #64	@ 0x40
 800609a:	f7ff fb7d 	bl	8005798 <_malloc_r>
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	6128      	str	r0, [r5, #16]
 80060a2:	b930      	cbnz	r0, 80060b2 <_svfiprintf_r+0x32>
 80060a4:	230c      	movs	r3, #12
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060ac:	b01d      	add	sp, #116	@ 0x74
 80060ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b2:	2340      	movs	r3, #64	@ 0x40
 80060b4:	616b      	str	r3, [r5, #20]
 80060b6:	2300      	movs	r3, #0
 80060b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ba:	2320      	movs	r3, #32
 80060bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c4:	2330      	movs	r3, #48	@ 0x30
 80060c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006264 <_svfiprintf_r+0x1e4>
 80060ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060ce:	f04f 0901 	mov.w	r9, #1
 80060d2:	4623      	mov	r3, r4
 80060d4:	469a      	mov	sl, r3
 80060d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060da:	b10a      	cbz	r2, 80060e0 <_svfiprintf_r+0x60>
 80060dc:	2a25      	cmp	r2, #37	@ 0x25
 80060de:	d1f9      	bne.n	80060d4 <_svfiprintf_r+0x54>
 80060e0:	ebba 0b04 	subs.w	fp, sl, r4
 80060e4:	d00b      	beq.n	80060fe <_svfiprintf_r+0x7e>
 80060e6:	465b      	mov	r3, fp
 80060e8:	4622      	mov	r2, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	4638      	mov	r0, r7
 80060ee:	f7ff ff67 	bl	8005fc0 <__ssputs_r>
 80060f2:	3001      	adds	r0, #1
 80060f4:	f000 80a7 	beq.w	8006246 <_svfiprintf_r+0x1c6>
 80060f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fa:	445a      	add	r2, fp
 80060fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80060fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 809f 	beq.w	8006246 <_svfiprintf_r+0x1c6>
 8006108:	2300      	movs	r3, #0
 800610a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800610e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006112:	f10a 0a01 	add.w	sl, sl, #1
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800611e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006120:	4654      	mov	r4, sl
 8006122:	2205      	movs	r2, #5
 8006124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006128:	484e      	ldr	r0, [pc, #312]	@ (8006264 <_svfiprintf_r+0x1e4>)
 800612a:	f7fa f839 	bl	80001a0 <memchr>
 800612e:	9a04      	ldr	r2, [sp, #16]
 8006130:	b9d8      	cbnz	r0, 800616a <_svfiprintf_r+0xea>
 8006132:	06d0      	lsls	r0, r2, #27
 8006134:	bf44      	itt	mi
 8006136:	2320      	movmi	r3, #32
 8006138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800613c:	0711      	lsls	r1, r2, #28
 800613e:	bf44      	itt	mi
 8006140:	232b      	movmi	r3, #43	@ 0x2b
 8006142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006146:	f89a 3000 	ldrb.w	r3, [sl]
 800614a:	2b2a      	cmp	r3, #42	@ 0x2a
 800614c:	d015      	beq.n	800617a <_svfiprintf_r+0xfa>
 800614e:	9a07      	ldr	r2, [sp, #28]
 8006150:	4654      	mov	r4, sl
 8006152:	2000      	movs	r0, #0
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	4621      	mov	r1, r4
 800615a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615e:	3b30      	subs	r3, #48	@ 0x30
 8006160:	2b09      	cmp	r3, #9
 8006162:	d94b      	bls.n	80061fc <_svfiprintf_r+0x17c>
 8006164:	b1b0      	cbz	r0, 8006194 <_svfiprintf_r+0x114>
 8006166:	9207      	str	r2, [sp, #28]
 8006168:	e014      	b.n	8006194 <_svfiprintf_r+0x114>
 800616a:	eba0 0308 	sub.w	r3, r0, r8
 800616e:	fa09 f303 	lsl.w	r3, r9, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	46a2      	mov	sl, r4
 8006178:	e7d2      	b.n	8006120 <_svfiprintf_r+0xa0>
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	1d19      	adds	r1, r3, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	9103      	str	r1, [sp, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfbb      	ittet	lt
 8006186:	425b      	neglt	r3, r3
 8006188:	f042 0202 	orrlt.w	r2, r2, #2
 800618c:	9307      	strge	r3, [sp, #28]
 800618e:	9307      	strlt	r3, [sp, #28]
 8006190:	bfb8      	it	lt
 8006192:	9204      	strlt	r2, [sp, #16]
 8006194:	7823      	ldrb	r3, [r4, #0]
 8006196:	2b2e      	cmp	r3, #46	@ 0x2e
 8006198:	d10a      	bne.n	80061b0 <_svfiprintf_r+0x130>
 800619a:	7863      	ldrb	r3, [r4, #1]
 800619c:	2b2a      	cmp	r3, #42	@ 0x2a
 800619e:	d132      	bne.n	8006206 <_svfiprintf_r+0x186>
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9203      	str	r2, [sp, #12]
 80061a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061ac:	3402      	adds	r4, #2
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006274 <_svfiprintf_r+0x1f4>
 80061b4:	7821      	ldrb	r1, [r4, #0]
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	f7f9 fff1 	bl	80001a0 <memchr>
 80061be:	b138      	cbz	r0, 80061d0 <_svfiprintf_r+0x150>
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	2240      	movs	r2, #64	@ 0x40
 80061c8:	4082      	lsls	r2, r0
 80061ca:	4313      	orrs	r3, r2
 80061cc:	3401      	adds	r4, #1
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d4:	4824      	ldr	r0, [pc, #144]	@ (8006268 <_svfiprintf_r+0x1e8>)
 80061d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061da:	2206      	movs	r2, #6
 80061dc:	f7f9 ffe0 	bl	80001a0 <memchr>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d036      	beq.n	8006252 <_svfiprintf_r+0x1d2>
 80061e4:	4b21      	ldr	r3, [pc, #132]	@ (800626c <_svfiprintf_r+0x1ec>)
 80061e6:	bb1b      	cbnz	r3, 8006230 <_svfiprintf_r+0x1b0>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	3307      	adds	r3, #7
 80061ec:	f023 0307 	bic.w	r3, r3, #7
 80061f0:	3308      	adds	r3, #8
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f6:	4433      	add	r3, r6
 80061f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061fa:	e76a      	b.n	80060d2 <_svfiprintf_r+0x52>
 80061fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006200:	460c      	mov	r4, r1
 8006202:	2001      	movs	r0, #1
 8006204:	e7a8      	b.n	8006158 <_svfiprintf_r+0xd8>
 8006206:	2300      	movs	r3, #0
 8006208:	3401      	adds	r4, #1
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0c0a 	mov.w	ip, #10
 8006212:	4620      	mov	r0, r4
 8006214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006218:	3a30      	subs	r2, #48	@ 0x30
 800621a:	2a09      	cmp	r2, #9
 800621c:	d903      	bls.n	8006226 <_svfiprintf_r+0x1a6>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0c6      	beq.n	80061b0 <_svfiprintf_r+0x130>
 8006222:	9105      	str	r1, [sp, #20]
 8006224:	e7c4      	b.n	80061b0 <_svfiprintf_r+0x130>
 8006226:	fb0c 2101 	mla	r1, ip, r1, r2
 800622a:	4604      	mov	r4, r0
 800622c:	2301      	movs	r3, #1
 800622e:	e7f0      	b.n	8006212 <_svfiprintf_r+0x192>
 8006230:	ab03      	add	r3, sp, #12
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	462a      	mov	r2, r5
 8006236:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <_svfiprintf_r+0x1f0>)
 8006238:	a904      	add	r1, sp, #16
 800623a:	4638      	mov	r0, r7
 800623c:	f7fd fe58 	bl	8003ef0 <_printf_float>
 8006240:	1c42      	adds	r2, r0, #1
 8006242:	4606      	mov	r6, r0
 8006244:	d1d6      	bne.n	80061f4 <_svfiprintf_r+0x174>
 8006246:	89ab      	ldrh	r3, [r5, #12]
 8006248:	065b      	lsls	r3, r3, #25
 800624a:	f53f af2d 	bmi.w	80060a8 <_svfiprintf_r+0x28>
 800624e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006250:	e72c      	b.n	80060ac <_svfiprintf_r+0x2c>
 8006252:	ab03      	add	r3, sp, #12
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	462a      	mov	r2, r5
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <_svfiprintf_r+0x1f0>)
 800625a:	a904      	add	r1, sp, #16
 800625c:	4638      	mov	r0, r7
 800625e:	f7fe f8dd 	bl	800441c <_printf_i>
 8006262:	e7ed      	b.n	8006240 <_svfiprintf_r+0x1c0>
 8006264:	080071be 	.word	0x080071be
 8006268:	080071c8 	.word	0x080071c8
 800626c:	08003ef1 	.word	0x08003ef1
 8006270:	08005fc1 	.word	0x08005fc1
 8006274:	080071c4 	.word	0x080071c4

08006278 <__sflush_r>:
 8006278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	0716      	lsls	r6, r2, #28
 8006282:	4605      	mov	r5, r0
 8006284:	460c      	mov	r4, r1
 8006286:	d451      	bmi.n	800632c <__sflush_r+0xb4>
 8006288:	684b      	ldr	r3, [r1, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dc02      	bgt.n	8006294 <__sflush_r+0x1c>
 800628e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	dd49      	ble.n	8006328 <__sflush_r+0xb0>
 8006294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006296:	2e00      	cmp	r6, #0
 8006298:	d046      	beq.n	8006328 <__sflush_r+0xb0>
 800629a:	2300      	movs	r3, #0
 800629c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062a0:	682f      	ldr	r7, [r5, #0]
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	d031      	beq.n	800630a <__sflush_r+0x92>
 80062a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	0759      	lsls	r1, r3, #29
 80062ac:	d505      	bpl.n	80062ba <__sflush_r+0x42>
 80062ae:	6863      	ldr	r3, [r4, #4]
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062b4:	b10b      	cbz	r3, 80062ba <__sflush_r+0x42>
 80062b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b0      	blx	r6
 80062c4:	1c42      	adds	r2, r0, #1
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	d106      	bne.n	80062da <__sflush_r+0x62>
 80062cc:	6829      	ldr	r1, [r5, #0]
 80062ce:	291d      	cmp	r1, #29
 80062d0:	d846      	bhi.n	8006360 <__sflush_r+0xe8>
 80062d2:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <__sflush_r+0x100>)
 80062d4:	40ca      	lsrs	r2, r1
 80062d6:	07d6      	lsls	r6, r2, #31
 80062d8:	d542      	bpl.n	8006360 <__sflush_r+0xe8>
 80062da:	2200      	movs	r2, #0
 80062dc:	6062      	str	r2, [r4, #4]
 80062de:	04d9      	lsls	r1, r3, #19
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	6022      	str	r2, [r4, #0]
 80062e4:	d504      	bpl.n	80062f0 <__sflush_r+0x78>
 80062e6:	1c42      	adds	r2, r0, #1
 80062e8:	d101      	bne.n	80062ee <__sflush_r+0x76>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	b903      	cbnz	r3, 80062f0 <__sflush_r+0x78>
 80062ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80062f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062f2:	602f      	str	r7, [r5, #0]
 80062f4:	b1c1      	cbz	r1, 8006328 <__sflush_r+0xb0>
 80062f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062fa:	4299      	cmp	r1, r3
 80062fc:	d002      	beq.n	8006304 <__sflush_r+0x8c>
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff f9d6 	bl	80056b0 <_free_r>
 8006304:	2300      	movs	r3, #0
 8006306:	6363      	str	r3, [r4, #52]	@ 0x34
 8006308:	e00e      	b.n	8006328 <__sflush_r+0xb0>
 800630a:	6a21      	ldr	r1, [r4, #32]
 800630c:	2301      	movs	r3, #1
 800630e:	4628      	mov	r0, r5
 8006310:	47b0      	blx	r6
 8006312:	4602      	mov	r2, r0
 8006314:	1c50      	adds	r0, r2, #1
 8006316:	d1c7      	bne.n	80062a8 <__sflush_r+0x30>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c4      	beq.n	80062a8 <__sflush_r+0x30>
 800631e:	2b1d      	cmp	r3, #29
 8006320:	d001      	beq.n	8006326 <__sflush_r+0xae>
 8006322:	2b16      	cmp	r3, #22
 8006324:	d11a      	bne.n	800635c <__sflush_r+0xe4>
 8006326:	602f      	str	r7, [r5, #0]
 8006328:	2000      	movs	r0, #0
 800632a:	e01e      	b.n	800636a <__sflush_r+0xf2>
 800632c:	690f      	ldr	r7, [r1, #16]
 800632e:	2f00      	cmp	r7, #0
 8006330:	d0fa      	beq.n	8006328 <__sflush_r+0xb0>
 8006332:	0793      	lsls	r3, r2, #30
 8006334:	680e      	ldr	r6, [r1, #0]
 8006336:	bf08      	it	eq
 8006338:	694b      	ldreq	r3, [r1, #20]
 800633a:	600f      	str	r7, [r1, #0]
 800633c:	bf18      	it	ne
 800633e:	2300      	movne	r3, #0
 8006340:	eba6 0807 	sub.w	r8, r6, r7
 8006344:	608b      	str	r3, [r1, #8]
 8006346:	f1b8 0f00 	cmp.w	r8, #0
 800634a:	dded      	ble.n	8006328 <__sflush_r+0xb0>
 800634c:	6a21      	ldr	r1, [r4, #32]
 800634e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006350:	4643      	mov	r3, r8
 8006352:	463a      	mov	r2, r7
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	2800      	cmp	r0, #0
 800635a:	dc08      	bgt.n	800636e <__sflush_r+0xf6>
 800635c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636e:	4407      	add	r7, r0
 8006370:	eba8 0800 	sub.w	r8, r8, r0
 8006374:	e7e7      	b.n	8006346 <__sflush_r+0xce>
 8006376:	bf00      	nop
 8006378:	20400001 	.word	0x20400001

0800637c <_fflush_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	690b      	ldr	r3, [r1, #16]
 8006380:	4605      	mov	r5, r0
 8006382:	460c      	mov	r4, r1
 8006384:	b913      	cbnz	r3, 800638c <_fflush_r+0x10>
 8006386:	2500      	movs	r5, #0
 8006388:	4628      	mov	r0, r5
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	b118      	cbz	r0, 8006396 <_fflush_r+0x1a>
 800638e:	6a03      	ldr	r3, [r0, #32]
 8006390:	b90b      	cbnz	r3, 8006396 <_fflush_r+0x1a>
 8006392:	f7fe f9f1 	bl	8004778 <__sinit>
 8006396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f3      	beq.n	8006386 <_fflush_r+0xa>
 800639e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063a0:	07d0      	lsls	r0, r2, #31
 80063a2:	d404      	bmi.n	80063ae <_fflush_r+0x32>
 80063a4:	0599      	lsls	r1, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_fflush_r+0x32>
 80063a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063aa:	f7fe fb0e 	bl	80049ca <__retarget_lock_acquire_recursive>
 80063ae:	4628      	mov	r0, r5
 80063b0:	4621      	mov	r1, r4
 80063b2:	f7ff ff61 	bl	8006278 <__sflush_r>
 80063b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063b8:	07da      	lsls	r2, r3, #31
 80063ba:	4605      	mov	r5, r0
 80063bc:	d4e4      	bmi.n	8006388 <_fflush_r+0xc>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	059b      	lsls	r3, r3, #22
 80063c2:	d4e1      	bmi.n	8006388 <_fflush_r+0xc>
 80063c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c6:	f7fe fb01 	bl	80049cc <__retarget_lock_release_recursive>
 80063ca:	e7dd      	b.n	8006388 <_fflush_r+0xc>

080063cc <memmove>:
 80063cc:	4288      	cmp	r0, r1
 80063ce:	b510      	push	{r4, lr}
 80063d0:	eb01 0402 	add.w	r4, r1, r2
 80063d4:	d902      	bls.n	80063dc <memmove+0x10>
 80063d6:	4284      	cmp	r4, r0
 80063d8:	4623      	mov	r3, r4
 80063da:	d807      	bhi.n	80063ec <memmove+0x20>
 80063dc:	1e43      	subs	r3, r0, #1
 80063de:	42a1      	cmp	r1, r4
 80063e0:	d007      	beq.n	80063f2 <memmove+0x26>
 80063e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ea:	e7f8      	b.n	80063de <memmove+0x12>
 80063ec:	4402      	add	r2, r0
 80063ee:	4282      	cmp	r2, r0
 80063f0:	d100      	bne.n	80063f4 <memmove+0x28>
 80063f2:	bd10      	pop	{r4, pc}
 80063f4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80063f8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80063fc:	e7f7      	b.n	80063ee <memmove+0x22>
	...

08006400 <_sbrk_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d06      	ldr	r5, [pc, #24]	@ (800641c <_sbrk_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fd fb4a 	bl	8003aa4 <_sbrk>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_sbrk_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_sbrk_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000434 	.word	0x20000434

08006420 <memcpy>:
 8006420:	440a      	add	r2, r1
 8006422:	4291      	cmp	r1, r2
 8006424:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006428:	d100      	bne.n	800642c <memcpy+0xc>
 800642a:	4770      	bx	lr
 800642c:	b510      	push	{r4, lr}
 800642e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006436:	4291      	cmp	r1, r2
 8006438:	d1f9      	bne.n	800642e <memcpy+0xe>
 800643a:	bd10      	pop	{r4, pc}

0800643c <__assert_func>:
 800643c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800643e:	4614      	mov	r4, r2
 8006440:	461a      	mov	r2, r3
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <__assert_func+0x2c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4605      	mov	r5, r0
 8006448:	68d8      	ldr	r0, [r3, #12]
 800644a:	b14c      	cbz	r4, 8006460 <__assert_func+0x24>
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <__assert_func+0x30>)
 800644e:	9100      	str	r1, [sp, #0]
 8006450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006454:	4906      	ldr	r1, [pc, #24]	@ (8006470 <__assert_func+0x34>)
 8006456:	462b      	mov	r3, r5
 8006458:	f000 f870 	bl	800653c <fiprintf>
 800645c:	f000 f880 	bl	8006560 <abort>
 8006460:	4b04      	ldr	r3, [pc, #16]	@ (8006474 <__assert_func+0x38>)
 8006462:	461c      	mov	r4, r3
 8006464:	e7f3      	b.n	800644e <__assert_func+0x12>
 8006466:	bf00      	nop
 8006468:	20000018 	.word	0x20000018
 800646c:	080071d9 	.word	0x080071d9
 8006470:	080071e6 	.word	0x080071e6
 8006474:	08007214 	.word	0x08007214

08006478 <_calloc_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	fba1 5402 	umull	r5, r4, r1, r2
 800647e:	b934      	cbnz	r4, 800648e <_calloc_r+0x16>
 8006480:	4629      	mov	r1, r5
 8006482:	f7ff f989 	bl	8005798 <_malloc_r>
 8006486:	4606      	mov	r6, r0
 8006488:	b928      	cbnz	r0, 8006496 <_calloc_r+0x1e>
 800648a:	4630      	mov	r0, r6
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	220c      	movs	r2, #12
 8006490:	6002      	str	r2, [r0, #0]
 8006492:	2600      	movs	r6, #0
 8006494:	e7f9      	b.n	800648a <_calloc_r+0x12>
 8006496:	462a      	mov	r2, r5
 8006498:	4621      	mov	r1, r4
 800649a:	f7fe fa09 	bl	80048b0 <memset>
 800649e:	e7f4      	b.n	800648a <_calloc_r+0x12>

080064a0 <__ascii_mbtowc>:
 80064a0:	b082      	sub	sp, #8
 80064a2:	b901      	cbnz	r1, 80064a6 <__ascii_mbtowc+0x6>
 80064a4:	a901      	add	r1, sp, #4
 80064a6:	b142      	cbz	r2, 80064ba <__ascii_mbtowc+0x1a>
 80064a8:	b14b      	cbz	r3, 80064be <__ascii_mbtowc+0x1e>
 80064aa:	7813      	ldrb	r3, [r2, #0]
 80064ac:	600b      	str	r3, [r1, #0]
 80064ae:	7812      	ldrb	r2, [r2, #0]
 80064b0:	1e10      	subs	r0, r2, #0
 80064b2:	bf18      	it	ne
 80064b4:	2001      	movne	r0, #1
 80064b6:	b002      	add	sp, #8
 80064b8:	4770      	bx	lr
 80064ba:	4610      	mov	r0, r2
 80064bc:	e7fb      	b.n	80064b6 <__ascii_mbtowc+0x16>
 80064be:	f06f 0001 	mvn.w	r0, #1
 80064c2:	e7f8      	b.n	80064b6 <__ascii_mbtowc+0x16>

080064c4 <_realloc_r>:
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	4607      	mov	r7, r0
 80064ca:	4614      	mov	r4, r2
 80064cc:	460d      	mov	r5, r1
 80064ce:	b921      	cbnz	r1, 80064da <_realloc_r+0x16>
 80064d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4611      	mov	r1, r2
 80064d6:	f7ff b95f 	b.w	8005798 <_malloc_r>
 80064da:	b92a      	cbnz	r2, 80064e8 <_realloc_r+0x24>
 80064dc:	f7ff f8e8 	bl	80056b0 <_free_r>
 80064e0:	4625      	mov	r5, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e8:	f000 f841 	bl	800656e <_malloc_usable_size_r>
 80064ec:	4284      	cmp	r4, r0
 80064ee:	4606      	mov	r6, r0
 80064f0:	d802      	bhi.n	80064f8 <_realloc_r+0x34>
 80064f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064f6:	d8f4      	bhi.n	80064e2 <_realloc_r+0x1e>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4638      	mov	r0, r7
 80064fc:	f7ff f94c 	bl	8005798 <_malloc_r>
 8006500:	4680      	mov	r8, r0
 8006502:	b908      	cbnz	r0, 8006508 <_realloc_r+0x44>
 8006504:	4645      	mov	r5, r8
 8006506:	e7ec      	b.n	80064e2 <_realloc_r+0x1e>
 8006508:	42b4      	cmp	r4, r6
 800650a:	4622      	mov	r2, r4
 800650c:	4629      	mov	r1, r5
 800650e:	bf28      	it	cs
 8006510:	4632      	movcs	r2, r6
 8006512:	f7ff ff85 	bl	8006420 <memcpy>
 8006516:	4629      	mov	r1, r5
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff f8c9 	bl	80056b0 <_free_r>
 800651e:	e7f1      	b.n	8006504 <_realloc_r+0x40>

08006520 <__ascii_wctomb>:
 8006520:	4603      	mov	r3, r0
 8006522:	4608      	mov	r0, r1
 8006524:	b141      	cbz	r1, 8006538 <__ascii_wctomb+0x18>
 8006526:	2aff      	cmp	r2, #255	@ 0xff
 8006528:	d904      	bls.n	8006534 <__ascii_wctomb+0x14>
 800652a:	228a      	movs	r2, #138	@ 0x8a
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006532:	4770      	bx	lr
 8006534:	700a      	strb	r2, [r1, #0]
 8006536:	2001      	movs	r0, #1
 8006538:	4770      	bx	lr
	...

0800653c <fiprintf>:
 800653c:	b40e      	push	{r1, r2, r3}
 800653e:	b503      	push	{r0, r1, lr}
 8006540:	4601      	mov	r1, r0
 8006542:	ab03      	add	r3, sp, #12
 8006544:	4805      	ldr	r0, [pc, #20]	@ (800655c <fiprintf+0x20>)
 8006546:	f853 2b04 	ldr.w	r2, [r3], #4
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	f000 f83f 	bl	80065d0 <_vfiprintf_r>
 8006552:	b002      	add	sp, #8
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	20000018 	.word	0x20000018

08006560 <abort>:
 8006560:	b508      	push	{r3, lr}
 8006562:	2006      	movs	r0, #6
 8006564:	f000 fa06 	bl	8006974 <raise>
 8006568:	2001      	movs	r0, #1
 800656a:	f7fd fa6b 	bl	8003a44 <_exit>

0800656e <_malloc_usable_size_r>:
 800656e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006572:	1f18      	subs	r0, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfbc      	itt	lt
 8006578:	580b      	ldrlt	r3, [r1, r0]
 800657a:	18c0      	addlt	r0, r0, r3
 800657c:	4770      	bx	lr

0800657e <__sfputc_r>:
 800657e:	6893      	ldr	r3, [r2, #8]
 8006580:	3b01      	subs	r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	b410      	push	{r4}
 8006586:	6093      	str	r3, [r2, #8]
 8006588:	da08      	bge.n	800659c <__sfputc_r+0x1e>
 800658a:	6994      	ldr	r4, [r2, #24]
 800658c:	42a3      	cmp	r3, r4
 800658e:	db01      	blt.n	8006594 <__sfputc_r+0x16>
 8006590:	290a      	cmp	r1, #10
 8006592:	d103      	bne.n	800659c <__sfputc_r+0x1e>
 8006594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006598:	f000 b932 	b.w	8006800 <__swbuf_r>
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	1c58      	adds	r0, r3, #1
 80065a0:	6010      	str	r0, [r2, #0]
 80065a2:	7019      	strb	r1, [r3, #0]
 80065a4:	4608      	mov	r0, r1
 80065a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <__sfputs_r>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	4614      	mov	r4, r2
 80065b4:	18d5      	adds	r5, r2, r3
 80065b6:	42ac      	cmp	r4, r5
 80065b8:	d101      	bne.n	80065be <__sfputs_r+0x12>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e007      	b.n	80065ce <__sfputs_r+0x22>
 80065be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c2:	463a      	mov	r2, r7
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff ffda 	bl	800657e <__sfputc_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d1f3      	bne.n	80065b6 <__sfputs_r+0xa>
 80065ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065d0 <_vfiprintf_r>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	460d      	mov	r5, r1
 80065d6:	b09d      	sub	sp, #116	@ 0x74
 80065d8:	4614      	mov	r4, r2
 80065da:	4698      	mov	r8, r3
 80065dc:	4606      	mov	r6, r0
 80065de:	b118      	cbz	r0, 80065e8 <_vfiprintf_r+0x18>
 80065e0:	6a03      	ldr	r3, [r0, #32]
 80065e2:	b90b      	cbnz	r3, 80065e8 <_vfiprintf_r+0x18>
 80065e4:	f7fe f8c8 	bl	8004778 <__sinit>
 80065e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_vfiprintf_r+0x2a>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_vfiprintf_r+0x2a>
 80065f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065f6:	f7fe f9e8 	bl	80049ca <__retarget_lock_acquire_recursive>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	071b      	lsls	r3, r3, #28
 80065fe:	d501      	bpl.n	8006604 <_vfiprintf_r+0x34>
 8006600:	692b      	ldr	r3, [r5, #16]
 8006602:	b99b      	cbnz	r3, 800662c <_vfiprintf_r+0x5c>
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f938 	bl	800687c <__swsetup_r>
 800660c:	b170      	cbz	r0, 800662c <_vfiprintf_r+0x5c>
 800660e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006610:	07dc      	lsls	r4, r3, #31
 8006612:	d504      	bpl.n	800661e <_vfiprintf_r+0x4e>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006618:	b01d      	add	sp, #116	@ 0x74
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	0598      	lsls	r0, r3, #22
 8006622:	d4f7      	bmi.n	8006614 <_vfiprintf_r+0x44>
 8006624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006626:	f7fe f9d1 	bl	80049cc <__retarget_lock_release_recursive>
 800662a:	e7f3      	b.n	8006614 <_vfiprintf_r+0x44>
 800662c:	2300      	movs	r3, #0
 800662e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006630:	2320      	movs	r3, #32
 8006632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006636:	f8cd 800c 	str.w	r8, [sp, #12]
 800663a:	2330      	movs	r3, #48	@ 0x30
 800663c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067ec <_vfiprintf_r+0x21c>
 8006640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006644:	f04f 0901 	mov.w	r9, #1
 8006648:	4623      	mov	r3, r4
 800664a:	469a      	mov	sl, r3
 800664c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006650:	b10a      	cbz	r2, 8006656 <_vfiprintf_r+0x86>
 8006652:	2a25      	cmp	r2, #37	@ 0x25
 8006654:	d1f9      	bne.n	800664a <_vfiprintf_r+0x7a>
 8006656:	ebba 0b04 	subs.w	fp, sl, r4
 800665a:	d00b      	beq.n	8006674 <_vfiprintf_r+0xa4>
 800665c:	465b      	mov	r3, fp
 800665e:	4622      	mov	r2, r4
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ffa2 	bl	80065ac <__sfputs_r>
 8006668:	3001      	adds	r0, #1
 800666a:	f000 80a7 	beq.w	80067bc <_vfiprintf_r+0x1ec>
 800666e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006670:	445a      	add	r2, fp
 8006672:	9209      	str	r2, [sp, #36]	@ 0x24
 8006674:	f89a 3000 	ldrb.w	r3, [sl]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 809f 	beq.w	80067bc <_vfiprintf_r+0x1ec>
 800667e:	2300      	movs	r3, #0
 8006680:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	9307      	str	r3, [sp, #28]
 8006690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006694:	931a      	str	r3, [sp, #104]	@ 0x68
 8006696:	4654      	mov	r4, sl
 8006698:	2205      	movs	r2, #5
 800669a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669e:	4853      	ldr	r0, [pc, #332]	@ (80067ec <_vfiprintf_r+0x21c>)
 80066a0:	f7f9 fd7e 	bl	80001a0 <memchr>
 80066a4:	9a04      	ldr	r2, [sp, #16]
 80066a6:	b9d8      	cbnz	r0, 80066e0 <_vfiprintf_r+0x110>
 80066a8:	06d1      	lsls	r1, r2, #27
 80066aa:	bf44      	itt	mi
 80066ac:	2320      	movmi	r3, #32
 80066ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b2:	0713      	lsls	r3, r2, #28
 80066b4:	bf44      	itt	mi
 80066b6:	232b      	movmi	r3, #43	@ 0x2b
 80066b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066bc:	f89a 3000 	ldrb.w	r3, [sl]
 80066c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c2:	d015      	beq.n	80066f0 <_vfiprintf_r+0x120>
 80066c4:	9a07      	ldr	r2, [sp, #28]
 80066c6:	4654      	mov	r4, sl
 80066c8:	2000      	movs	r0, #0
 80066ca:	f04f 0c0a 	mov.w	ip, #10
 80066ce:	4621      	mov	r1, r4
 80066d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d4:	3b30      	subs	r3, #48	@ 0x30
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	d94b      	bls.n	8006772 <_vfiprintf_r+0x1a2>
 80066da:	b1b0      	cbz	r0, 800670a <_vfiprintf_r+0x13a>
 80066dc:	9207      	str	r2, [sp, #28]
 80066de:	e014      	b.n	800670a <_vfiprintf_r+0x13a>
 80066e0:	eba0 0308 	sub.w	r3, r0, r8
 80066e4:	fa09 f303 	lsl.w	r3, r9, r3
 80066e8:	4313      	orrs	r3, r2
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	46a2      	mov	sl, r4
 80066ee:	e7d2      	b.n	8006696 <_vfiprintf_r+0xc6>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	1d19      	adds	r1, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	9103      	str	r1, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfbb      	ittet	lt
 80066fc:	425b      	neglt	r3, r3
 80066fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006702:	9307      	strge	r3, [sp, #28]
 8006704:	9307      	strlt	r3, [sp, #28]
 8006706:	bfb8      	it	lt
 8006708:	9204      	strlt	r2, [sp, #16]
 800670a:	7823      	ldrb	r3, [r4, #0]
 800670c:	2b2e      	cmp	r3, #46	@ 0x2e
 800670e:	d10a      	bne.n	8006726 <_vfiprintf_r+0x156>
 8006710:	7863      	ldrb	r3, [r4, #1]
 8006712:	2b2a      	cmp	r3, #42	@ 0x2a
 8006714:	d132      	bne.n	800677c <_vfiprintf_r+0x1ac>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	9203      	str	r2, [sp, #12]
 800671e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006722:	3402      	adds	r4, #2
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067fc <_vfiprintf_r+0x22c>
 800672a:	7821      	ldrb	r1, [r4, #0]
 800672c:	2203      	movs	r2, #3
 800672e:	4650      	mov	r0, sl
 8006730:	f7f9 fd36 	bl	80001a0 <memchr>
 8006734:	b138      	cbz	r0, 8006746 <_vfiprintf_r+0x176>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	eba0 000a 	sub.w	r0, r0, sl
 800673c:	2240      	movs	r2, #64	@ 0x40
 800673e:	4082      	lsls	r2, r0
 8006740:	4313      	orrs	r3, r2
 8006742:	3401      	adds	r4, #1
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674a:	4829      	ldr	r0, [pc, #164]	@ (80067f0 <_vfiprintf_r+0x220>)
 800674c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006750:	2206      	movs	r2, #6
 8006752:	f7f9 fd25 	bl	80001a0 <memchr>
 8006756:	2800      	cmp	r0, #0
 8006758:	d03f      	beq.n	80067da <_vfiprintf_r+0x20a>
 800675a:	4b26      	ldr	r3, [pc, #152]	@ (80067f4 <_vfiprintf_r+0x224>)
 800675c:	bb1b      	cbnz	r3, 80067a6 <_vfiprintf_r+0x1d6>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	3307      	adds	r3, #7
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	3308      	adds	r3, #8
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676c:	443b      	add	r3, r7
 800676e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006770:	e76a      	b.n	8006648 <_vfiprintf_r+0x78>
 8006772:	fb0c 3202 	mla	r2, ip, r2, r3
 8006776:	460c      	mov	r4, r1
 8006778:	2001      	movs	r0, #1
 800677a:	e7a8      	b.n	80066ce <_vfiprintf_r+0xfe>
 800677c:	2300      	movs	r3, #0
 800677e:	3401      	adds	r4, #1
 8006780:	9305      	str	r3, [sp, #20]
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	4620      	mov	r0, r4
 800678a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678e:	3a30      	subs	r2, #48	@ 0x30
 8006790:	2a09      	cmp	r2, #9
 8006792:	d903      	bls.n	800679c <_vfiprintf_r+0x1cc>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0c6      	beq.n	8006726 <_vfiprintf_r+0x156>
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	e7c4      	b.n	8006726 <_vfiprintf_r+0x156>
 800679c:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a0:	4604      	mov	r4, r0
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7f0      	b.n	8006788 <_vfiprintf_r+0x1b8>
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <_vfiprintf_r+0x228>)
 80067ae:	a904      	add	r1, sp, #16
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7fd fb9d 	bl	8003ef0 <_printf_float>
 80067b6:	4607      	mov	r7, r0
 80067b8:	1c78      	adds	r0, r7, #1
 80067ba:	d1d6      	bne.n	800676a <_vfiprintf_r+0x19a>
 80067bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067be:	07d9      	lsls	r1, r3, #31
 80067c0:	d405      	bmi.n	80067ce <_vfiprintf_r+0x1fe>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_vfiprintf_r+0x1fe>
 80067c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ca:	f7fe f8ff 	bl	80049cc <__retarget_lock_release_recursive>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	065b      	lsls	r3, r3, #25
 80067d2:	f53f af1f 	bmi.w	8006614 <_vfiprintf_r+0x44>
 80067d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d8:	e71e      	b.n	8006618 <_vfiprintf_r+0x48>
 80067da:	ab03      	add	r3, sp, #12
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	462a      	mov	r2, r5
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <_vfiprintf_r+0x228>)
 80067e2:	a904      	add	r1, sp, #16
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7fd fe19 	bl	800441c <_printf_i>
 80067ea:	e7e4      	b.n	80067b6 <_vfiprintf_r+0x1e6>
 80067ec:	080071be 	.word	0x080071be
 80067f0:	080071c8 	.word	0x080071c8
 80067f4:	08003ef1 	.word	0x08003ef1
 80067f8:	080065ad 	.word	0x080065ad
 80067fc:	080071c4 	.word	0x080071c4

08006800 <__swbuf_r>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	460e      	mov	r6, r1
 8006804:	4614      	mov	r4, r2
 8006806:	4605      	mov	r5, r0
 8006808:	b118      	cbz	r0, 8006812 <__swbuf_r+0x12>
 800680a:	6a03      	ldr	r3, [r0, #32]
 800680c:	b90b      	cbnz	r3, 8006812 <__swbuf_r+0x12>
 800680e:	f7fd ffb3 	bl	8004778 <__sinit>
 8006812:	69a3      	ldr	r3, [r4, #24]
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	071a      	lsls	r2, r3, #28
 800681a:	d501      	bpl.n	8006820 <__swbuf_r+0x20>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	b943      	cbnz	r3, 8006832 <__swbuf_r+0x32>
 8006820:	4621      	mov	r1, r4
 8006822:	4628      	mov	r0, r5
 8006824:	f000 f82a 	bl	800687c <__swsetup_r>
 8006828:	b118      	cbz	r0, 8006832 <__swbuf_r+0x32>
 800682a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800682e:	4638      	mov	r0, r7
 8006830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	6922      	ldr	r2, [r4, #16]
 8006836:	1a98      	subs	r0, r3, r2
 8006838:	6963      	ldr	r3, [r4, #20]
 800683a:	b2f6      	uxtb	r6, r6
 800683c:	4283      	cmp	r3, r0
 800683e:	4637      	mov	r7, r6
 8006840:	dc05      	bgt.n	800684e <__swbuf_r+0x4e>
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fd99 	bl	800637c <_fflush_r>
 800684a:	2800      	cmp	r0, #0
 800684c:	d1ed      	bne.n	800682a <__swbuf_r+0x2a>
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	3b01      	subs	r3, #1
 8006852:	60a3      	str	r3, [r4, #8]
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	701e      	strb	r6, [r3, #0]
 800685c:	6962      	ldr	r2, [r4, #20]
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	429a      	cmp	r2, r3
 8006862:	d004      	beq.n	800686e <__swbuf_r+0x6e>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	07db      	lsls	r3, r3, #31
 8006868:	d5e1      	bpl.n	800682e <__swbuf_r+0x2e>
 800686a:	2e0a      	cmp	r6, #10
 800686c:	d1df      	bne.n	800682e <__swbuf_r+0x2e>
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff fd83 	bl	800637c <_fflush_r>
 8006876:	2800      	cmp	r0, #0
 8006878:	d0d9      	beq.n	800682e <__swbuf_r+0x2e>
 800687a:	e7d6      	b.n	800682a <__swbuf_r+0x2a>

0800687c <__swsetup_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4b28      	ldr	r3, [pc, #160]	@ (8006920 <__swsetup_r+0xa4>)
 8006880:	4605      	mov	r5, r0
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	460c      	mov	r4, r1
 8006886:	b118      	cbz	r0, 8006890 <__swsetup_r+0x14>
 8006888:	6a03      	ldr	r3, [r0, #32]
 800688a:	b90b      	cbnz	r3, 8006890 <__swsetup_r+0x14>
 800688c:	f7fd ff74 	bl	8004778 <__sinit>
 8006890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006894:	0719      	lsls	r1, r3, #28
 8006896:	d421      	bmi.n	80068dc <__swsetup_r+0x60>
 8006898:	06da      	lsls	r2, r3, #27
 800689a:	d407      	bmi.n	80068ac <__swsetup_r+0x30>
 800689c:	2209      	movs	r2, #9
 800689e:	602a      	str	r2, [r5, #0]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068aa:	e031      	b.n	8006910 <__swsetup_r+0x94>
 80068ac:	0758      	lsls	r0, r3, #29
 80068ae:	d512      	bpl.n	80068d6 <__swsetup_r+0x5a>
 80068b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068b2:	b141      	cbz	r1, 80068c6 <__swsetup_r+0x4a>
 80068b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068b8:	4299      	cmp	r1, r3
 80068ba:	d002      	beq.n	80068c2 <__swsetup_r+0x46>
 80068bc:	4628      	mov	r0, r5
 80068be:	f7fe fef7 	bl	80056b0 <_free_r>
 80068c2:	2300      	movs	r3, #0
 80068c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068c6:	2200      	movs	r2, #0
 80068c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068cc:	6062      	str	r2, [r4, #4]
 80068ce:	6922      	ldr	r2, [r4, #16]
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068d6:	f043 0308 	orr.w	r3, r3, #8
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	b942      	cbnz	r2, 80068f2 <__swsetup_r+0x76>
 80068e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e8:	d003      	beq.n	80068f2 <__swsetup_r+0x76>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f881 	bl	80069f4 <__smakebuf_r>
 80068f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f6:	f013 0201 	ands.w	r2, r3, #1
 80068fa:	d00a      	beq.n	8006912 <__swsetup_r+0x96>
 80068fc:	2200      	movs	r2, #0
 80068fe:	60a2      	str	r2, [r4, #8]
 8006900:	6962      	ldr	r2, [r4, #20]
 8006902:	4252      	negs	r2, r2
 8006904:	61a2      	str	r2, [r4, #24]
 8006906:	6922      	ldr	r2, [r4, #16]
 8006908:	b942      	cbnz	r2, 800691c <__swsetup_r+0xa0>
 800690a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800690e:	d1c7      	bne.n	80068a0 <__swsetup_r+0x24>
 8006910:	bd38      	pop	{r3, r4, r5, pc}
 8006912:	0799      	lsls	r1, r3, #30
 8006914:	bf58      	it	pl
 8006916:	6962      	ldrpl	r2, [r4, #20]
 8006918:	60a2      	str	r2, [r4, #8]
 800691a:	e7f4      	b.n	8006906 <__swsetup_r+0x8a>
 800691c:	2000      	movs	r0, #0
 800691e:	e7f7      	b.n	8006910 <__swsetup_r+0x94>
 8006920:	20000018 	.word	0x20000018

08006924 <_raise_r>:
 8006924:	291f      	cmp	r1, #31
 8006926:	b538      	push	{r3, r4, r5, lr}
 8006928:	4605      	mov	r5, r0
 800692a:	460c      	mov	r4, r1
 800692c:	d904      	bls.n	8006938 <_raise_r+0x14>
 800692e:	2316      	movs	r3, #22
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800693a:	b112      	cbz	r2, 8006942 <_raise_r+0x1e>
 800693c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006940:	b94b      	cbnz	r3, 8006956 <_raise_r+0x32>
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f830 	bl	80069a8 <_getpid_r>
 8006948:	4622      	mov	r2, r4
 800694a:	4601      	mov	r1, r0
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006952:	f000 b817 	b.w	8006984 <_kill_r>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d00a      	beq.n	8006970 <_raise_r+0x4c>
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	d103      	bne.n	8006966 <_raise_r+0x42>
 800695e:	2316      	movs	r3, #22
 8006960:	6003      	str	r3, [r0, #0]
 8006962:	2001      	movs	r0, #1
 8006964:	e7e7      	b.n	8006936 <_raise_r+0x12>
 8006966:	2100      	movs	r1, #0
 8006968:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800696c:	4620      	mov	r0, r4
 800696e:	4798      	blx	r3
 8006970:	2000      	movs	r0, #0
 8006972:	e7e0      	b.n	8006936 <_raise_r+0x12>

08006974 <raise>:
 8006974:	4b02      	ldr	r3, [pc, #8]	@ (8006980 <raise+0xc>)
 8006976:	4601      	mov	r1, r0
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	f7ff bfd3 	b.w	8006924 <_raise_r>
 800697e:	bf00      	nop
 8006980:	20000018 	.word	0x20000018

08006984 <_kill_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d07      	ldr	r5, [pc, #28]	@ (80069a4 <_kill_r+0x20>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	f7fd f84f 	bl	8003a34 <_kill>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d102      	bne.n	80069a0 <_kill_r+0x1c>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	b103      	cbz	r3, 80069a0 <_kill_r+0x1c>
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	bf00      	nop
 80069a4:	20000434 	.word	0x20000434

080069a8 <_getpid_r>:
 80069a8:	f7fd b842 	b.w	8003a30 <_getpid>

080069ac <__swhatbuf_r>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	b096      	sub	sp, #88	@ 0x58
 80069b8:	4615      	mov	r5, r2
 80069ba:	461e      	mov	r6, r3
 80069bc:	da0a      	bge.n	80069d4 <__swhatbuf_r+0x28>
 80069be:	89a1      	ldrh	r1, [r4, #12]
 80069c0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80069c4:	d113      	bne.n	80069ee <__swhatbuf_r+0x42>
 80069c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069ca:	2000      	movs	r0, #0
 80069cc:	6031      	str	r1, [r6, #0]
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	b016      	add	sp, #88	@ 0x58
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	466a      	mov	r2, sp
 80069d6:	f000 f847 	bl	8006a68 <_fstat_r>
 80069da:	2800      	cmp	r0, #0
 80069dc:	dbef      	blt.n	80069be <__swhatbuf_r+0x12>
 80069de:	9901      	ldr	r1, [sp, #4]
 80069e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069e8:	4259      	negs	r1, r3
 80069ea:	4159      	adcs	r1, r3
 80069ec:	e7eb      	b.n	80069c6 <__swhatbuf_r+0x1a>
 80069ee:	2100      	movs	r1, #0
 80069f0:	2240      	movs	r2, #64	@ 0x40
 80069f2:	e7ea      	b.n	80069ca <__swhatbuf_r+0x1e>

080069f4 <__smakebuf_r>:
 80069f4:	898b      	ldrh	r3, [r1, #12]
 80069f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069f8:	079e      	lsls	r6, r3, #30
 80069fa:	4605      	mov	r5, r0
 80069fc:	460c      	mov	r4, r1
 80069fe:	d507      	bpl.n	8006a10 <__smakebuf_r+0x1c>
 8006a00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	2301      	movs	r3, #1
 8006a0a:	6163      	str	r3, [r4, #20]
 8006a0c:	b002      	add	sp, #8
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	ab01      	add	r3, sp, #4
 8006a12:	466a      	mov	r2, sp
 8006a14:	f7ff ffca 	bl	80069ac <__swhatbuf_r>
 8006a18:	9e00      	ldr	r6, [sp, #0]
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	f7fe febb 	bl	8005798 <_malloc_r>
 8006a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a26:	b938      	cbnz	r0, 8006a38 <__smakebuf_r+0x44>
 8006a28:	059a      	lsls	r2, r3, #22
 8006a2a:	d4ef      	bmi.n	8006a0c <__smakebuf_r+0x18>
 8006a2c:	f023 0303 	bic.w	r3, r3, #3
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	e7e3      	b.n	8006a00 <__smakebuf_r+0xc>
 8006a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	6020      	str	r0, [r4, #0]
 8006a42:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0e0      	beq.n	8006a0c <__smakebuf_r+0x18>
 8006a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f81c 	bl	8006a8c <_isatty_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d0d9      	beq.n	8006a0c <__smakebuf_r+0x18>
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	81a3      	strh	r3, [r4, #12]
 8006a64:	e7d2      	b.n	8006a0c <__smakebuf_r+0x18>
	...

08006a68 <_fstat_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d07      	ldr	r5, [pc, #28]	@ (8006a88 <_fstat_r+0x20>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	4611      	mov	r1, r2
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	f7fd f80c 	bl	8003a92 <_fstat>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	d102      	bne.n	8006a84 <_fstat_r+0x1c>
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	b103      	cbz	r3, 8006a84 <_fstat_r+0x1c>
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
 8006a86:	bf00      	nop
 8006a88:	20000434 	.word	0x20000434

08006a8c <_isatty_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d06      	ldr	r5, [pc, #24]	@ (8006aa8 <_isatty_r+0x1c>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7fd f800 	bl	8003a9c <_isatty>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_isatty_r+0x1a>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_isatty_r+0x1a>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20000434 	.word	0x20000434

08006aac <__udivmoddi4>:
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	468c      	mov	ip, r1
 8006ab2:	468e      	mov	lr, r1
 8006ab4:	9e08      	ldr	r6, [sp, #32]
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4619      	mov	r1, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 80d0 	bne.w	8006c62 <__udivmoddi4+0x1b6>
 8006ac2:	4572      	cmp	r2, lr
 8006ac4:	d947      	bls.n	8006b56 <__udivmoddi4+0xaa>
 8006ac6:	fab2 f782 	clz	r7, r2
 8006aca:	b14f      	cbz	r7, 8006ae0 <__udivmoddi4+0x34>
 8006acc:	f1c7 0320 	rsb	r3, r7, #32
 8006ad0:	fa0e fc07 	lsl.w	ip, lr, r7
 8006ad4:	fa20 f303 	lsr.w	r3, r0, r3
 8006ad8:	40bd      	lsls	r5, r7
 8006ada:	ea43 0c0c 	orr.w	ip, r3, ip
 8006ade:	40bc      	lsls	r4, r7
 8006ae0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006ae4:	b2a8      	uxth	r0, r5
 8006ae6:	fbbc f8fe 	udiv	r8, ip, lr
 8006aea:	0c23      	lsrs	r3, r4, #16
 8006aec:	fb0e cc18 	mls	ip, lr, r8, ip
 8006af0:	fb08 f900 	mul.w	r9, r8, r0
 8006af4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006af8:	4599      	cmp	r9, r3
 8006afa:	d928      	bls.n	8006b4e <__udivmoddi4+0xa2>
 8006afc:	18eb      	adds	r3, r5, r3
 8006afe:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006b02:	d204      	bcs.n	8006b0e <__udivmoddi4+0x62>
 8006b04:	4599      	cmp	r9, r3
 8006b06:	d902      	bls.n	8006b0e <__udivmoddi4+0x62>
 8006b08:	f1a8 0202 	sub.w	r2, r8, #2
 8006b0c:	442b      	add	r3, r5
 8006b0e:	eba3 0309 	sub.w	r3, r3, r9
 8006b12:	b2a4      	uxth	r4, r4
 8006b14:	fbb3 fcfe 	udiv	ip, r3, lr
 8006b18:	fb0e 331c 	mls	r3, lr, ip, r3
 8006b1c:	fb0c f000 	mul.w	r0, ip, r0
 8006b20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d914      	bls.n	8006b52 <__udivmoddi4+0xa6>
 8006b28:	192c      	adds	r4, r5, r4
 8006b2a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006b2e:	d204      	bcs.n	8006b3a <__udivmoddi4+0x8e>
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d902      	bls.n	8006b3a <__udivmoddi4+0x8e>
 8006b34:	f1ac 0302 	sub.w	r3, ip, #2
 8006b38:	442c      	add	r4, r5
 8006b3a:	1a24      	subs	r4, r4, r0
 8006b3c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8006b40:	b11e      	cbz	r6, 8006b4a <__udivmoddi4+0x9e>
 8006b42:	40fc      	lsrs	r4, r7
 8006b44:	2300      	movs	r3, #0
 8006b46:	6034      	str	r4, [r6, #0]
 8006b48:	6073      	str	r3, [r6, #4]
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	4642      	mov	r2, r8
 8006b50:	e7dd      	b.n	8006b0e <__udivmoddi4+0x62>
 8006b52:	4663      	mov	r3, ip
 8006b54:	e7f1      	b.n	8006b3a <__udivmoddi4+0x8e>
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d079      	beq.n	8006c4e <__udivmoddi4+0x1a2>
 8006b5a:	fab2 f382 	clz	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03f      	beq.n	8006be2 <__udivmoddi4+0x136>
 8006b62:	4619      	mov	r1, r3
 8006b64:	f1c1 0320 	rsb	r3, r1, #32
 8006b68:	fa02 f501 	lsl.w	r5, r2, r1
 8006b6c:	fa2e f203 	lsr.w	r2, lr, r3
 8006b70:	fa0e fe01 	lsl.w	lr, lr, r1
 8006b74:	fa20 f303 	lsr.w	r3, r0, r3
 8006b78:	ea43 030e 	orr.w	r3, r3, lr
 8006b7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006b80:	fa00 f401 	lsl.w	r4, r0, r1
 8006b84:	fbb2 fcfe 	udiv	ip, r2, lr
 8006b88:	b2af      	uxth	r7, r5
 8006b8a:	fb0e 201c 	mls	r0, lr, ip, r2
 8006b8e:	0c1a      	lsrs	r2, r3, #16
 8006b90:	fb0c f807 	mul.w	r8, ip, r7
 8006b94:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b98:	4590      	cmp	r8, r2
 8006b9a:	d95a      	bls.n	8006c52 <__udivmoddi4+0x1a6>
 8006b9c:	18aa      	adds	r2, r5, r2
 8006b9e:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006ba2:	d204      	bcs.n	8006bae <__udivmoddi4+0x102>
 8006ba4:	4590      	cmp	r8, r2
 8006ba6:	d902      	bls.n	8006bae <__udivmoddi4+0x102>
 8006ba8:	f1ac 0002 	sub.w	r0, ip, #2
 8006bac:	442a      	add	r2, r5
 8006bae:	eba2 0208 	sub.w	r2, r2, r8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	fbb2 fcfe 	udiv	ip, r2, lr
 8006bb8:	fb0e 221c 	mls	r2, lr, ip, r2
 8006bbc:	fb0c f707 	mul.w	r7, ip, r7
 8006bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bc4:	429f      	cmp	r7, r3
 8006bc6:	d946      	bls.n	8006c56 <__udivmoddi4+0x1aa>
 8006bc8:	18eb      	adds	r3, r5, r3
 8006bca:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8006bce:	d204      	bcs.n	8006bda <__udivmoddi4+0x12e>
 8006bd0:	429f      	cmp	r7, r3
 8006bd2:	d902      	bls.n	8006bda <__udivmoddi4+0x12e>
 8006bd4:	f1ac 0202 	sub.w	r2, ip, #2
 8006bd8:	442b      	add	r3, r5
 8006bda:	1bdb      	subs	r3, r3, r7
 8006bdc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006be0:	e002      	b.n	8006be8 <__udivmoddi4+0x13c>
 8006be2:	ebae 0302 	sub.w	r3, lr, r2
 8006be6:	2201      	movs	r2, #1
 8006be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006bec:	b2af      	uxth	r7, r5
 8006bee:	fbb3 fcfe 	udiv	ip, r3, lr
 8006bf2:	0c20      	lsrs	r0, r4, #16
 8006bf4:	fb0e 331c 	mls	r3, lr, ip, r3
 8006bf8:	fb0c f807 	mul.w	r8, ip, r7
 8006bfc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8006c00:	4598      	cmp	r8, r3
 8006c02:	d92a      	bls.n	8006c5a <__udivmoddi4+0x1ae>
 8006c04:	18eb      	adds	r3, r5, r3
 8006c06:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006c0a:	d204      	bcs.n	8006c16 <__udivmoddi4+0x16a>
 8006c0c:	4598      	cmp	r8, r3
 8006c0e:	d902      	bls.n	8006c16 <__udivmoddi4+0x16a>
 8006c10:	f1ac 0002 	sub.w	r0, ip, #2
 8006c14:	442b      	add	r3, r5
 8006c16:	eba3 0308 	sub.w	r3, r3, r8
 8006c1a:	b2a4      	uxth	r4, r4
 8006c1c:	fbb3 fcfe 	udiv	ip, r3, lr
 8006c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8006c24:	fb0c f707 	mul.w	r7, ip, r7
 8006c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006c2c:	42a7      	cmp	r7, r4
 8006c2e:	d916      	bls.n	8006c5e <__udivmoddi4+0x1b2>
 8006c30:	192c      	adds	r4, r5, r4
 8006c32:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006c36:	d204      	bcs.n	8006c42 <__udivmoddi4+0x196>
 8006c38:	42a7      	cmp	r7, r4
 8006c3a:	d902      	bls.n	8006c42 <__udivmoddi4+0x196>
 8006c3c:	f1ac 0302 	sub.w	r3, ip, #2
 8006c40:	442c      	add	r4, r5
 8006c42:	1be4      	subs	r4, r4, r7
 8006c44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006c48:	460f      	mov	r7, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	e778      	b.n	8006b40 <__udivmoddi4+0x94>
 8006c4e:	211f      	movs	r1, #31
 8006c50:	e788      	b.n	8006b64 <__udivmoddi4+0xb8>
 8006c52:	4660      	mov	r0, ip
 8006c54:	e7ab      	b.n	8006bae <__udivmoddi4+0x102>
 8006c56:	4662      	mov	r2, ip
 8006c58:	e7bf      	b.n	8006bda <__udivmoddi4+0x12e>
 8006c5a:	4660      	mov	r0, ip
 8006c5c:	e7db      	b.n	8006c16 <__udivmoddi4+0x16a>
 8006c5e:	4663      	mov	r3, ip
 8006c60:	e7ef      	b.n	8006c42 <__udivmoddi4+0x196>
 8006c62:	4573      	cmp	r3, lr
 8006c64:	d906      	bls.n	8006c74 <__udivmoddi4+0x1c8>
 8006c66:	b916      	cbnz	r6, 8006c6e <__udivmoddi4+0x1c2>
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	e76d      	b.n	8006b4a <__udivmoddi4+0x9e>
 8006c6e:	e9c6 0e00 	strd	r0, lr, [r6]
 8006c72:	e7f9      	b.n	8006c68 <__udivmoddi4+0x1bc>
 8006c74:	fab3 f783 	clz	r7, r3
 8006c78:	b987      	cbnz	r7, 8006c9c <__udivmoddi4+0x1f0>
 8006c7a:	4573      	cmp	r3, lr
 8006c7c:	d301      	bcc.n	8006c82 <__udivmoddi4+0x1d6>
 8006c7e:	4282      	cmp	r2, r0
 8006c80:	d807      	bhi.n	8006c92 <__udivmoddi4+0x1e6>
 8006c82:	1a84      	subs	r4, r0, r2
 8006c84:	eb6e 0303 	sbc.w	r3, lr, r3
 8006c88:	2001      	movs	r0, #1
 8006c8a:	469c      	mov	ip, r3
 8006c8c:	b91e      	cbnz	r6, 8006c96 <__udivmoddi4+0x1ea>
 8006c8e:	2100      	movs	r1, #0
 8006c90:	e75b      	b.n	8006b4a <__udivmoddi4+0x9e>
 8006c92:	4638      	mov	r0, r7
 8006c94:	e7fa      	b.n	8006c8c <__udivmoddi4+0x1e0>
 8006c96:	e9c6 4c00 	strd	r4, ip, [r6]
 8006c9a:	e7f8      	b.n	8006c8e <__udivmoddi4+0x1e2>
 8006c9c:	f1c7 0c20 	rsb	ip, r7, #32
 8006ca0:	40bb      	lsls	r3, r7
 8006ca2:	fa22 f50c 	lsr.w	r5, r2, ip
 8006ca6:	431d      	orrs	r5, r3
 8006ca8:	fa20 f10c 	lsr.w	r1, r0, ip
 8006cac:	fa2e f30c 	lsr.w	r3, lr, ip
 8006cb0:	fa0e fe07 	lsl.w	lr, lr, r7
 8006cb4:	ea41 010e 	orr.w	r1, r1, lr
 8006cb8:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8006cbc:	fa00 f407 	lsl.w	r4, r0, r7
 8006cc0:	fbb3 f8f9 	udiv	r8, r3, r9
 8006cc4:	fa1f fe85 	uxth.w	lr, r5
 8006cc8:	fb09 3018 	mls	r0, r9, r8, r3
 8006ccc:	0c0b      	lsrs	r3, r1, #16
 8006cce:	fb08 fa0e 	mul.w	sl, r8, lr
 8006cd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cd6:	459a      	cmp	sl, r3
 8006cd8:	fa02 f207 	lsl.w	r2, r2, r7
 8006cdc:	d940      	bls.n	8006d60 <__udivmoddi4+0x2b4>
 8006cde:	18eb      	adds	r3, r5, r3
 8006ce0:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006ce4:	d204      	bcs.n	8006cf0 <__udivmoddi4+0x244>
 8006ce6:	459a      	cmp	sl, r3
 8006ce8:	d902      	bls.n	8006cf0 <__udivmoddi4+0x244>
 8006cea:	f1a8 0002 	sub.w	r0, r8, #2
 8006cee:	442b      	add	r3, r5
 8006cf0:	eba3 030a 	sub.w	r3, r3, sl
 8006cf4:	b289      	uxth	r1, r1
 8006cf6:	fbb3 f8f9 	udiv	r8, r3, r9
 8006cfa:	fb09 3318 	mls	r3, r9, r8, r3
 8006cfe:	fb08 fe0e 	mul.w	lr, r8, lr
 8006d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006d06:	458e      	cmp	lr, r1
 8006d08:	d92c      	bls.n	8006d64 <__udivmoddi4+0x2b8>
 8006d0a:	1869      	adds	r1, r5, r1
 8006d0c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006d10:	d204      	bcs.n	8006d1c <__udivmoddi4+0x270>
 8006d12:	458e      	cmp	lr, r1
 8006d14:	d902      	bls.n	8006d1c <__udivmoddi4+0x270>
 8006d16:	f1a8 0302 	sub.w	r3, r8, #2
 8006d1a:	4429      	add	r1, r5
 8006d1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006d20:	fba0 9802 	umull	r9, r8, r0, r2
 8006d24:	eba1 010e 	sub.w	r1, r1, lr
 8006d28:	4541      	cmp	r1, r8
 8006d2a:	46ce      	mov	lr, r9
 8006d2c:	4643      	mov	r3, r8
 8006d2e:	d302      	bcc.n	8006d36 <__udivmoddi4+0x28a>
 8006d30:	d106      	bne.n	8006d40 <__udivmoddi4+0x294>
 8006d32:	454c      	cmp	r4, r9
 8006d34:	d204      	bcs.n	8006d40 <__udivmoddi4+0x294>
 8006d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8006d3a:	eb68 0305 	sbc.w	r3, r8, r5
 8006d3e:	3801      	subs	r0, #1
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	d0a4      	beq.n	8006c8e <__udivmoddi4+0x1e2>
 8006d44:	ebb4 020e 	subs.w	r2, r4, lr
 8006d48:	eb61 0103 	sbc.w	r1, r1, r3
 8006d4c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8006d50:	fa22 f307 	lsr.w	r3, r2, r7
 8006d54:	ea4c 0303 	orr.w	r3, ip, r3
 8006d58:	40f9      	lsrs	r1, r7
 8006d5a:	e9c6 3100 	strd	r3, r1, [r6]
 8006d5e:	e796      	b.n	8006c8e <__udivmoddi4+0x1e2>
 8006d60:	4640      	mov	r0, r8
 8006d62:	e7c5      	b.n	8006cf0 <__udivmoddi4+0x244>
 8006d64:	4643      	mov	r3, r8
 8006d66:	e7d9      	b.n	8006d1c <__udivmoddi4+0x270>

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
