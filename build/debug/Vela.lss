
build/debug/Vela.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b28  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08006cc8  08006cc8  00007cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007314  08007314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800731c  0800731c  0000831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007320  08007320  00008320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08007324  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000278  200001d4  080074f8  000091d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000044c  080074f8  0000944c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003102c  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000086cb  00000000  00000000  0003a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0001327d  00000000  00000000  000428fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001928  00000000  00000000  00055b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013b1  00000000  00000000  000574a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c7df  00000000  00000000  00058851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00006ea9  00000000  00000000  00075030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000003c  00000000  00000000  0007bed9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d50  00000000  00000000  0007bf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000189  00000000  00000000  0007fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_ldivmod>:
 8000b78:	b97b      	cbnz	r3, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7a:	b972      	cbnz	r2, 8000b9a <__aeabi_ldivmod+0x22>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bfbe      	ittt	lt
 8000b80:	2000      	movlt	r0, #0
 8000b82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b86:	e006      	blt.n	8000b96 <__aeabi_ldivmod+0x1e>
 8000b88:	bf08      	it	eq
 8000b8a:	2800      	cmpeq	r0, #0
 8000b8c:	bf1c      	itt	ne
 8000b8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b92:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b96:	f000 b857 	b.w	8000c48 <__aeabi_idiv0>
 8000b9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	db09      	blt.n	8000bba <__aeabi_ldivmod+0x42>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db1a      	blt.n	8000be0 <__aeabi_ldivmod+0x68>
 8000baa:	f005 ff23 	bl	80069f4 <__udivmoddi4>
 8000bae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb6:	b004      	add	sp, #16
 8000bb8:	4770      	bx	lr
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db1b      	blt.n	8000bfc <__aeabi_ldivmod+0x84>
 8000bc4:	f005 ff16 	bl	80069f4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	f005 ff05 	bl	80069f4 <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfa:	4770      	bx	lr
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c02:	f005 fef7 	bl	80069f4 <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2c:	f000 b80c 	b.w	8000c48 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f005 fedc 	bl	80069f4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__do_global_dtors_aux>:
 8000c4c:	b510      	push	{r4, lr}
 8000c4e:	4c05      	ldr	r4, [pc, #20]	@ (8000c64 <__do_global_dtors_aux+0x18>)
 8000c50:	7823      	ldrb	r3, [r4, #0]
 8000c52:	b933      	cbnz	r3, 8000c62 <__do_global_dtors_aux+0x16>
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__do_global_dtors_aux+0x1c>)
 8000c56:	b113      	cbz	r3, 8000c5e <__do_global_dtors_aux+0x12>
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <__do_global_dtors_aux+0x20>)
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	2301      	movs	r3, #1
 8000c60:	7023      	strb	r3, [r4, #0]
 8000c62:	bd10      	pop	{r4, pc}
 8000c64:	200001d4 	.word	0x200001d4
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	08006cb0 	.word	0x08006cb0

08000c70 <frame_dummy>:
 8000c70:	b508      	push	{r3, lr}
 8000c72:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <frame_dummy+0x10>)
 8000c74:	b11b      	cbz	r3, 8000c7e <frame_dummy+0xe>
 8000c76:	4903      	ldr	r1, [pc, #12]	@ (8000c84 <frame_dummy+0x14>)
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <frame_dummy+0x18>)
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	00000000 	.word	0x00000000
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	08006cb0 	.word	0x08006cb0

08000c8c <send_message>:

  send_message(buffer, PRIORITY_LOW);
}

void send_message(char *msg, Msg_Priority priority)
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	4604      	mov	r4, r0
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 0xFF);
 8000c90:	f7ff fad6 	bl	8000240 <strlen>
 8000c94:	23ff      	movs	r3, #255	@ 0xff
 8000c96:	b282      	uxth	r2, r0
 8000c98:	4621      	mov	r1, r4
 8000c9a:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <send_message+0x18>)
 8000c9c:	f002 fdd9 	bl	8003852 <HAL_UART_Transmit>
}
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200002b8 	.word	0x200002b8

08000ca8 <send_reg_log>:
{
 8000ca8:	b530      	push	{r4, r5, lr}
 8000caa:	b09b      	sub	sp, #108	@ 0x6c
  switch (status)
 8000cac:	2803      	cmp	r0, #3
 8000cae:	d803      	bhi.n	8000cb8 <send_reg_log+0x10>
 8000cb0:	e8df f000 	tbb	[pc, r0]
 8000cb4:	27250429 	.word	0x27250429
 8000cb8:	2500      	movs	r5, #0
 8000cba:	e000      	b.n	8000cbe <send_reg_log+0x16>
      message = "ERROR";
 8000cbc:	4d13      	ldr	r5, [pc, #76]	@ (8000d0c <send_reg_log+0x64>)
  strcat(buffer, reg);
 8000cbe:	ac01      	add	r4, sp, #4
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f003 fd9f 	bl	8004804 <strcat>
  strcat(buffer, ": ");
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff faba 	bl	8000240 <strlen>
 8000ccc:	1822      	adds	r2, r4, r0
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <send_reg_log+0x68>)
 8000cd0:	8819      	ldrh	r1, [r3, #0]
 8000cd2:	789b      	ldrb	r3, [r3, #2]
 8000cd4:	5221      	strh	r1, [r4, r0]
 8000cd6:	7093      	strb	r3, [r2, #2]
  strcat(buffer, message);
 8000cd8:	4629      	mov	r1, r5
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f003 fd92 	bl	8004804 <strcat>
  strcat(buffer, "\n\r\0");
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	f7ff faad 	bl	8000240 <strlen>
 8000ce6:	1822      	adds	r2, r4, r0
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <send_reg_log+0x6c>)
 8000cea:	8819      	ldrh	r1, [r3, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	5221      	strh	r1, [r4, r0]
 8000cf0:	7093      	strb	r3, [r2, #2]
  send_message(buffer, PRIORITY_LOW);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff ffc9 	bl	8000c8c <send_message>
}
 8000cfa:	b01b      	add	sp, #108	@ 0x6c
 8000cfc:	bd30      	pop	{r4, r5, pc}
      message = "BUSY";
 8000cfe:	4d06      	ldr	r5, [pc, #24]	@ (8000d18 <send_reg_log+0x70>)
      break;
 8000d00:	e7dd      	b.n	8000cbe <send_reg_log+0x16>
      message = "TIMEOUT";
 8000d02:	4d06      	ldr	r5, [pc, #24]	@ (8000d1c <send_reg_log+0x74>)
      break;
 8000d04:	e7db      	b.n	8000cbe <send_reg_log+0x16>
      message = "OK";
 8000d06:	4d06      	ldr	r5, [pc, #24]	@ (8000d20 <send_reg_log+0x78>)
 8000d08:	e7d9      	b.n	8000cbe <send_reg_log+0x16>
 8000d0a:	bf00      	nop
 8000d0c:	08006da4 	.word	0x08006da4
 8000d10:	08006dbc 	.word	0x08006dbc
 8000d14:	08006cc8 	.word	0x08006cc8
 8000d18:	08006dac 	.word	0x08006dac
 8000d1c:	08006db4 	.word	0x08006db4
 8000d20:	08006d9c 	.word	0x08006d9c

08000d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d24:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2100      	movs	r1, #0
 8000d28:	9100      	str	r1, [sp, #0]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <MX_GPIO_Init+0x34>)
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d36:	f002 0201 	and.w	r2, r2, #1
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	9101      	str	r1, [sp, #4]
 8000d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d42:	f042 0202 	orr.w	r2, r2, #2
 8000d46:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]

}
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d5c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5e:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <MX_I2C1_Init+0x30>)
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_I2C1_Init+0x34>)
 8000d62:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_I2C1_Init+0x38>)
 8000d66:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d72:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d78:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7c:	f001 f9d2 	bl	8002124 <HAL_I2C_Init>
 8000d80:	b900      	cbnz	r0, 8000d84 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d84:	f000 fbbc 	bl	8001500 <Error_Handler>
}
 8000d88:	e7fb      	b.n	8000d82 <MX_I2C1_Init+0x26>
 8000d8a:	bf00      	nop
 8000d8c:	200001f0 	.word	0x200001f0
 8000d90:	40005400 	.word	0x40005400
 8000d94:	000186a0 	.word	0x000186a0

08000d98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d98:	b530      	push	{r4, r5, lr}
 8000d9a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	9304      	str	r3, [sp, #16]
 8000da2:	9305      	str	r3, [sp, #20]
 8000da4:	9306      	str	r3, [sp, #24]
 8000da6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_I2C_MspInit+0x64>)
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d001      	beq.n	8000db4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db0:	b009      	add	sp, #36	@ 0x24
 8000db2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	2500      	movs	r5, #0
 8000db6:	9501      	str	r5, [sp, #4]
 8000db8:	4c11      	ldr	r4, [pc, #68]	@ (8000e00 <HAL_I2C_MspInit+0x68>)
 8000dba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dcc:	23c0      	movs	r3, #192	@ 0xc0
 8000dce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	a903      	add	r1, sp, #12
 8000dde:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <HAL_I2C_MspInit+0x6c>)
 8000de0:	f000 fe32 	bl	8001a48 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de4:	9502      	str	r5, [sp, #8]
 8000de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dec:	6423      	str	r3, [r4, #64]	@ 0x40
 8000dee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	9b02      	ldr	r3, [sp, #8]
}
 8000df8:	e7da      	b.n	8000db0 <HAL_I2C_MspInit+0x18>
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <bmp280_compensate_T_int32>:
// t_fine carries fine temperature as global value
int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <bmp280_compensate_T_int32+0x3c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	005a      	lsls	r2, r3, #1
 8000e0e:	ebc2 02e0 	rsb	r2, r2, r0, asr #3
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <bmp280_compensate_T_int32+0x40>)
 8000e14:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000e18:	fb01 f202 	mul.w	r2, r1, r2
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000e1c:	ebc3 1020 	rsb	r0, r3, r0, asr #4
 8000e20:	fb00 f000 	mul.w	r0, r0, r0
	>> 12) *
 8000e24:	1300      	asrs	r0, r0, #12
	((int32_t)dig_T3)) >> 14;
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <bmp280_compensate_T_int32+0x44>)
 8000e28:	f9b3 3000 	ldrsh.w	r3, [r3]
	>> 12) *
 8000e2c:	fb03 f000 	mul.w	r0, r3, r0
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))
 8000e30:	1380      	asrs	r0, r0, #14
	t_fine = var1 + var2;
 8000e32:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <bmp280_compensate_T_int32+0x48>)
 8000e38:	6018      	str	r0, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000e3e:	3080      	adds	r0, #128	@ 0x80
	return T;
}
 8000e40:	1200      	asrs	r0, r0, #8
 8000e42:	4770      	bx	lr
 8000e44:	20000266 	.word	0x20000266
 8000e48:	20000264 	.word	0x20000264
 8000e4c:	20000262 	.word	0x20000262
 8000e50:	20000244 	.word	0x20000244

08000e54 <bmp280_compensate_P_int64>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e56:	4b66      	ldr	r3, [pc, #408]	@ (8000ff0 <bmp280_compensate_P_int64+0x19c>)
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	17cb      	asrs	r3, r1, #31
 8000e5c:	f5b1 31fa 	subs.w	r1, r1, #128000	@ 0x1f400
 8000e60:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e64:	fb01 f403 	mul.w	r4, r1, r3
 8000e68:	fba1 2601 	umull	r2, r6, r1, r1
 8000e6c:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8000e70:	4c60      	ldr	r4, [pc, #384]	@ (8000ff4 <bmp280_compensate_P_int64+0x1a0>)
 8000e72:	f9b4 5000 	ldrsh.w	r5, [r4]
 8000e76:	17ec      	asrs	r4, r5, #31
 8000e78:	fb02 f404 	mul.w	r4, r2, r4
 8000e7c:	fb05 4406 	mla	r4, r5, r6, r4
 8000e80:	fba2 7505 	umull	r7, r5, r2, r5
 8000e84:	442c      	add	r4, r5
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000e86:	4d5c      	ldr	r5, [pc, #368]	@ (8000ff8 <bmp280_compensate_P_int64+0x1a4>)
 8000e88:	f9b5 c000 	ldrsh.w	ip, [r5]
 8000e8c:	ea4f 75ec 	mov.w	r5, ip, asr #31
 8000e90:	fb0c fe03 	mul.w	lr, ip, r3
 8000e94:	fb01 ee05 	mla	lr, r1, r5, lr
 8000e98:	fbac c501 	umull	ip, r5, ip, r1
 8000e9c:	44ae      	add	lr, r5
 8000e9e:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
 8000ea2:	ea4e 3edc 	orr.w	lr, lr, ip, lsr #15
 8000ea6:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 8000eaa:	eb1c 0c07 	adds.w	ip, ip, r7
 8000eae:	eb44 040e 	adc.w	r4, r4, lr
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000eb2:	4d52      	ldr	r5, [pc, #328]	@ (8000ffc <bmp280_compensate_P_int64+0x1a8>)
 8000eb4:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000eb8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000ebc:	4d50      	ldr	r5, [pc, #320]	@ (8001000 <bmp280_compensate_P_int64+0x1ac>)
 8000ebe:	f9b5 e000 	ldrsh.w	lr, [r5]
 8000ec2:	ea4f 75ee 	mov.w	r5, lr, asr #31
 8000ec6:	fb02 f505 	mul.w	r5, r2, r5
 8000eca:	fb0e 5506 	mla	r5, lr, r6, r5
 8000ece:	fba2 2e0e 	umull	r2, lr, r2, lr
 8000ed2:	4475      	add	r5, lr
 8000ed4:	0a12      	lsrs	r2, r2, #8
 8000ed6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8000eda:	4e4a      	ldr	r6, [pc, #296]	@ (8001004 <bmp280_compensate_P_int64+0x1b0>)
 8000edc:	f9b6 e000 	ldrsh.w	lr, [r6]
 8000ee0:	ea4f 76ee 	mov.w	r6, lr, asr #31
 8000ee4:	fb0e f303 	mul.w	r3, lr, r3
 8000ee8:	fb01 3306 	mla	r3, r1, r6, r3
 8000eec:	fbae e101 	umull	lr, r1, lr, r1
 8000ef0:	440b      	add	r3, r1
 8000ef2:	031b      	lsls	r3, r3, #12
 8000ef4:	ea43 531e 	orr.w	r3, r3, lr, lsr #20
 8000ef8:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 8000efc:	eb12 020e 	adds.w	r2, r2, lr
 8000f00:	eb43 2325 	adc.w	r3, r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000f04:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000f08:	493f      	ldr	r1, [pc, #252]	@ (8001008 <bmp280_compensate_P_int64+0x1b4>)
 8000f0a:	880d      	ldrh	r5, [r1, #0]
 8000f0c:	fba2 2105 	umull	r2, r1, r2, r5
 8000f10:	fb05 1103 	mla	r1, r5, r3, r1
 8000f14:	104a      	asrs	r2, r1, #1
 8000f16:	17cb      	asrs	r3, r1, #31

	if (var1 == 0)
 8000f18:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8000f1c:	d065      	beq.n	8000fea <bmp280_compensate_P_int64+0x196>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576-adc_P;
 8000f1e:	f5c0 1e80 	rsb	lr, r0, #1048576	@ 0x100000
	p = (((p<<31)-var2)*3125)/var1;
 8000f22:	ea4f 016e 	mov.w	r1, lr, asr #1
 8000f26:	ea4f 7ece 	mov.w	lr, lr, lsl #31
 8000f2a:	ebbe 0e0c 	subs.w	lr, lr, ip
 8000f2e:	eb61 0404 	sbc.w	r4, r1, r4
 8000f32:	eb1e 0c0e 	adds.w	ip, lr, lr
 8000f36:	eb44 0104 	adc.w	r1, r4, r4
 8000f3a:	eb1c 0c0e 	adds.w	ip, ip, lr
 8000f3e:	eb44 0101 	adc.w	r1, r4, r1
 8000f42:	0188      	lsls	r0, r1, #6
 8000f44:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8000f48:	ea4f 158c 	mov.w	r5, ip, lsl #6
 8000f4c:	eb1c 0c05 	adds.w	ip, ip, r5
 8000f50:	eb41 0100 	adc.w	r1, r1, r0
 8000f54:	0089      	lsls	r1, r1, #2
 8000f56:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8000f5a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f5e:	eb1c 0c0e 	adds.w	ip, ip, lr
 8000f62:	eb44 0101 	adc.w	r1, r4, r1
 8000f66:	0089      	lsls	r1, r1, #2
 8000f68:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8000f6c:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8000f70:	eb10 000e 	adds.w	r0, r0, lr
 8000f74:	eb44 0101 	adc.w	r1, r4, r1
 8000f78:	f7ff fdfe 	bl	8000b78 <__aeabi_ldivmod>
 8000f7c:	4603      	mov	r3, r0
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <bmp280_compensate_P_int64+0x1b8>)
 8000f80:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000f84:	17ef      	asrs	r7, r5, #31
 8000f86:	0b42      	lsrs	r2, r0, #13
 8000f88:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f8c:	134e      	asrs	r6, r1, #13
 8000f8e:	fb05 f406 	mul.w	r4, r5, r6
 8000f92:	fb02 4407 	mla	r4, r2, r7, r4
 8000f96:	fba5 5702 	umull	r5, r7, r5, r2
 8000f9a:	443c      	add	r4, r7
 8000f9c:	fb02 f404 	mul.w	r4, r2, r4
 8000fa0:	fb05 4406 	mla	r4, r5, r6, r4
 8000fa4:	fba2 2505 	umull	r2, r5, r2, r5
 8000fa8:	442c      	add	r4, r5
 8000faa:	0e52      	lsrs	r2, r2, #25
 8000fac:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000fb0:	4d17      	ldr	r5, [pc, #92]	@ (8001010 <bmp280_compensate_P_int64+0x1bc>)
 8000fb2:	f9b5 5000 	ldrsh.w	r5, [r5]
 8000fb6:	17ef      	asrs	r7, r5, #31
 8000fb8:	fb05 f601 	mul.w	r6, r5, r1
 8000fbc:	fb07 6000 	mla	r0, r7, r0, r6
 8000fc0:	fba5 5603 	umull	r5, r6, r5, r3
 8000fc4:	4430      	add	r0, r6
 8000fc6:	0ced      	lsrs	r5, r5, #19
 8000fc8:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000fcc:	189b      	adds	r3, r3, r2
 8000fce:	eb41 6164 	adc.w	r1, r1, r4, asr #25
 8000fd2:	195b      	adds	r3, r3, r5
 8000fd4:	eb41 41e0 	adc.w	r1, r1, r0, asr #19
 8000fd8:	0a18      	lsrs	r0, r3, #8
 8000fda:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <bmp280_compensate_P_int64+0x1c0>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
	return (uint32_t)p;
 8000fe4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
 8000fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0; // avoid exception caused by division by zero
 8000fea:	2000      	movs	r0, #0
 8000fec:	e7fc      	b.n	8000fe8 <bmp280_compensate_P_int64+0x194>
 8000fee:	bf00      	nop
 8000ff0:	20000244 	.word	0x20000244
 8000ff4:	20000256 	.word	0x20000256
 8000ff8:	20000258 	.word	0x20000258
 8000ffc:	2000025a 	.word	0x2000025a
 8001000:	2000025c 	.word	0x2000025c
 8001004:	2000025e 	.word	0x2000025e
 8001008:	20000260 	.word	0x20000260
 800100c:	20000250 	.word	0x20000250
 8001010:	20000252 	.word	0x20000252
 8001014:	20000254 	.word	0x20000254

08001018 <InitBmp>:

void InitBmp()
{
 8001018:	b530      	push	{r4, r5, lr}
 800101a:	b08d      	sub	sp, #52	@ 0x34
	uint16_t Register_ID = 0xD0; //Адрес регистра в котором хранится значение ID
	uint8_t Data[1]; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	HAL_I2C_Mem_Read(&hi2c1, Address_Bmp280, Register_ID, I2C_MEMADD_SIZE_8BIT, Data, Size_, Timeout_);
 800101c:	23ff      	movs	r3, #255	@ 0xff
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	22d0      	movs	r2, #208	@ 0xd0
 800102a:	21ec      	movs	r1, #236	@ 0xec
 800102c:	4813      	ldr	r0, [pc, #76]	@ (800107c <InitBmp+0x64>)
 800102e:	f001 fa07 	bl	8002440 <HAL_I2C_Mem_Read>
	if (Data[0] == 0x58)
 8001032:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8001036:	2b58      	cmp	r3, #88	@ 0x58
 8001038:	d013      	beq.n	8001062 <InitBmp+0x4a>
	{
		char buffer [28] = "BMP 0x58 READ SUCCESSFULLY\n\r";
		send_message(buffer, PRIORITY_HIGH);
	} else
	{
		char buffer [20] = "BMP READ ERROR\n\r";
 800103a:	f10d 0c10 	add.w	ip, sp, #16
 800103e:	4c10      	ldr	r4, [pc, #64]	@ (8001080 <InitBmp+0x68>)
 8001040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f88c 3000 	strb.w	r3, [ip]
 800104c:	2300      	movs	r3, #0
 800104e:	f8ad 3021 	strh.w	r3, [sp, #33]	@ 0x21
 8001052:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
		send_message(buffer, PRIORITY_HIGH);
 8001056:	2102      	movs	r1, #2
 8001058:	a804      	add	r0, sp, #16
 800105a:	f7ff fe17 	bl	8000c8c <send_message>

	}
}
 800105e:	b00d      	add	sp, #52	@ 0x34
 8001060:	bd30      	pop	{r4, r5, pc}
		char buffer [28] = "BMP 0x58 READ SUCCESSFULLY\n\r";
 8001062:	ac04      	add	r4, sp, #16
 8001064:	4d07      	ldr	r5, [pc, #28]	@ (8001084 <InitBmp+0x6c>)
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		send_message(buffer, PRIORITY_HIGH);
 8001072:	2102      	movs	r1, #2
 8001074:	a804      	add	r0, sp, #16
 8001076:	f7ff fe09 	bl	8000c8c <send_message>
 800107a:	e7f0      	b.n	800105e <InitBmp+0x46>
 800107c:	200001f0 	.word	0x200001f0
 8001080:	08006ccc 	.word	0x08006ccc
 8001084:	08006dc0 	.word	0x08006dc0

08001088 <Read_Dig_Variables>:

void Read_Dig_Variables()
{
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	b084      	sub	sp, #16
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T1, 2, 0xFF), "dig_T1");
 800108c:	4c50      	ldr	r4, [pc, #320]	@ (80011d0 <Read_Dig_Variables+0x148>)
 800108e:	26ff      	movs	r6, #255	@ 0xff
 8001090:	9602      	str	r6, [sp, #8]
 8001092:	2502      	movs	r5, #2
 8001094:	9501      	str	r5, [sp, #4]
 8001096:	4b4f      	ldr	r3, [pc, #316]	@ (80011d4 <Read_Dig_Variables+0x14c>)
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2288      	movs	r2, #136	@ 0x88
 800109e:	21ec      	movs	r1, #236	@ 0xec
 80010a0:	4620      	mov	r0, r4
 80010a2:	f001 f9cd 	bl	8002440 <HAL_I2C_Mem_Read>
 80010a6:	494c      	ldr	r1, [pc, #304]	@ (80011d8 <Read_Dig_Variables+0x150>)
 80010a8:	f7ff fdfe 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T2, 2, 0xFF), "dig_T2");
 80010ac:	9602      	str	r6, [sp, #8]
 80010ae:	9501      	str	r5, [sp, #4]
 80010b0:	4b4a      	ldr	r3, [pc, #296]	@ (80011dc <Read_Dig_Variables+0x154>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	228a      	movs	r2, #138	@ 0x8a
 80010b8:	21ec      	movs	r1, #236	@ 0xec
 80010ba:	4620      	mov	r0, r4
 80010bc:	f001 f9c0 	bl	8002440 <HAL_I2C_Mem_Read>
 80010c0:	4947      	ldr	r1, [pc, #284]	@ (80011e0 <Read_Dig_Variables+0x158>)
 80010c2:	f7ff fdf1 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_T3, 2, 0xFF), "dig_T3");
 80010c6:	9602      	str	r6, [sp, #8]
 80010c8:	9501      	str	r5, [sp, #4]
 80010ca:	4b46      	ldr	r3, [pc, #280]	@ (80011e4 <Read_Dig_Variables+0x15c>)
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	228c      	movs	r2, #140	@ 0x8c
 80010d2:	21ec      	movs	r1, #236	@ 0xec
 80010d4:	4620      	mov	r0, r4
 80010d6:	f001 f9b3 	bl	8002440 <HAL_I2C_Mem_Read>
 80010da:	4943      	ldr	r1, [pc, #268]	@ (80011e8 <Read_Dig_Variables+0x160>)
 80010dc:	f7ff fde4 	bl	8000ca8 <send_reg_log>
  
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x8E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P1, 2, 0xFF), "dig_P1");
 80010e0:	9602      	str	r6, [sp, #8]
 80010e2:	9501      	str	r5, [sp, #4]
 80010e4:	4b41      	ldr	r3, [pc, #260]	@ (80011ec <Read_Dig_Variables+0x164>)
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	228e      	movs	r2, #142	@ 0x8e
 80010ec:	21ec      	movs	r1, #236	@ 0xec
 80010ee:	4620      	mov	r0, r4
 80010f0:	f001 f9a6 	bl	8002440 <HAL_I2C_Mem_Read>
 80010f4:	493e      	ldr	r1, [pc, #248]	@ (80011f0 <Read_Dig_Variables+0x168>)
 80010f6:	f7ff fdd7 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x90, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P2, 2, 0xFF), "dig_P2");
 80010fa:	9602      	str	r6, [sp, #8]
 80010fc:	9501      	str	r5, [sp, #4]
 80010fe:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <Read_Dig_Variables+0x16c>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	2290      	movs	r2, #144	@ 0x90
 8001106:	21ec      	movs	r1, #236	@ 0xec
 8001108:	4620      	mov	r0, r4
 800110a:	f001 f999 	bl	8002440 <HAL_I2C_Mem_Read>
 800110e:	493a      	ldr	r1, [pc, #232]	@ (80011f8 <Read_Dig_Variables+0x170>)
 8001110:	f7ff fdca 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x92, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P3, 2, 0xFF), "dig_P3");
 8001114:	9602      	str	r6, [sp, #8]
 8001116:	9501      	str	r5, [sp, #4]
 8001118:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <Read_Dig_Variables+0x174>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2292      	movs	r2, #146	@ 0x92
 8001120:	21ec      	movs	r1, #236	@ 0xec
 8001122:	4620      	mov	r0, r4
 8001124:	f001 f98c 	bl	8002440 <HAL_I2C_Mem_Read>
 8001128:	4935      	ldr	r1, [pc, #212]	@ (8001200 <Read_Dig_Variables+0x178>)
 800112a:	f7ff fdbd 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x94, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P4, 2, 0xFF), "dig_P4");
 800112e:	9602      	str	r6, [sp, #8]
 8001130:	9501      	str	r5, [sp, #4]
 8001132:	4b34      	ldr	r3, [pc, #208]	@ (8001204 <Read_Dig_Variables+0x17c>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	2294      	movs	r2, #148	@ 0x94
 800113a:	21ec      	movs	r1, #236	@ 0xec
 800113c:	4620      	mov	r0, r4
 800113e:	f001 f97f 	bl	8002440 <HAL_I2C_Mem_Read>
 8001142:	4931      	ldr	r1, [pc, #196]	@ (8001208 <Read_Dig_Variables+0x180>)
 8001144:	f7ff fdb0 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x96, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P5, 2, 0xFF), "dig_P5");
 8001148:	9602      	str	r6, [sp, #8]
 800114a:	9501      	str	r5, [sp, #4]
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <Read_Dig_Variables+0x184>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2296      	movs	r2, #150	@ 0x96
 8001154:	21ec      	movs	r1, #236	@ 0xec
 8001156:	4620      	mov	r0, r4
 8001158:	f001 f972 	bl	8002440 <HAL_I2C_Mem_Read>
 800115c:	492c      	ldr	r1, [pc, #176]	@ (8001210 <Read_Dig_Variables+0x188>)
 800115e:	f7ff fda3 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x98, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P6, 2, 0xFF), "dig_P6");
 8001162:	9602      	str	r6, [sp, #8]
 8001164:	9501      	str	r5, [sp, #4]
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <Read_Dig_Variables+0x18c>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	2298      	movs	r2, #152	@ 0x98
 800116e:	21ec      	movs	r1, #236	@ 0xec
 8001170:	4620      	mov	r0, r4
 8001172:	f001 f965 	bl	8002440 <HAL_I2C_Mem_Read>
 8001176:	4928      	ldr	r1, [pc, #160]	@ (8001218 <Read_Dig_Variables+0x190>)
 8001178:	f7ff fd96 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9A, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P7, 2, 0xFF), "dig_P7");
 800117c:	9602      	str	r6, [sp, #8]
 800117e:	9501      	str	r5, [sp, #4]
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <Read_Dig_Variables+0x194>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	229a      	movs	r2, #154	@ 0x9a
 8001188:	21ec      	movs	r1, #236	@ 0xec
 800118a:	4620      	mov	r0, r4
 800118c:	f001 f958 	bl	8002440 <HAL_I2C_Mem_Read>
 8001190:	4923      	ldr	r1, [pc, #140]	@ (8001220 <Read_Dig_Variables+0x198>)
 8001192:	f7ff fd89 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9C, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P8, 2, 0xFF), "dig_P8");
 8001196:	9602      	str	r6, [sp, #8]
 8001198:	9501      	str	r5, [sp, #4]
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <Read_Dig_Variables+0x19c>)
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	229c      	movs	r2, #156	@ 0x9c
 80011a2:	21ec      	movs	r1, #236	@ 0xec
 80011a4:	4620      	mov	r0, r4
 80011a6:	f001 f94b 	bl	8002440 <HAL_I2C_Mem_Read>
 80011aa:	491f      	ldr	r1, [pc, #124]	@ (8001228 <Read_Dig_Variables+0x1a0>)
 80011ac:	f7ff fd7c 	bl	8000ca8 <send_reg_log>
  send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0x9E, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&dig_P9, 2, 0xFF), "dig_P9");
 80011b0:	9602      	str	r6, [sp, #8]
 80011b2:	9501      	str	r5, [sp, #4]
 80011b4:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <Read_Dig_Variables+0x1a4>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	229e      	movs	r2, #158	@ 0x9e
 80011bc:	21ec      	movs	r1, #236	@ 0xec
 80011be:	4620      	mov	r0, r4
 80011c0:	f001 f93e 	bl	8002440 <HAL_I2C_Mem_Read>
 80011c4:	491a      	ldr	r1, [pc, #104]	@ (8001230 <Read_Dig_Variables+0x1a8>)
 80011c6:	f7ff fd6f 	bl	8000ca8 <send_reg_log>
}
 80011ca:	b004      	add	sp, #16
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	bf00      	nop
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	20000266 	.word	0x20000266
 80011d8:	08006de0 	.word	0x08006de0
 80011dc:	20000264 	.word	0x20000264
 80011e0:	08006de8 	.word	0x08006de8
 80011e4:	20000262 	.word	0x20000262
 80011e8:	08006df0 	.word	0x08006df0
 80011ec:	20000260 	.word	0x20000260
 80011f0:	08006df8 	.word	0x08006df8
 80011f4:	2000025e 	.word	0x2000025e
 80011f8:	08006e00 	.word	0x08006e00
 80011fc:	2000025c 	.word	0x2000025c
 8001200:	08006e08 	.word	0x08006e08
 8001204:	2000025a 	.word	0x2000025a
 8001208:	08006e10 	.word	0x08006e10
 800120c:	20000258 	.word	0x20000258
 8001210:	08006e18 	.word	0x08006e18
 8001214:	20000256 	.word	0x20000256
 8001218:	08006e20 	.word	0x08006e20
 800121c:	20000254 	.word	0x20000254
 8001220:	08006e28 	.word	0x08006e28
 8001224:	20000252 	.word	0x20000252
 8001228:	08006e30 	.word	0x08006e30
 800122c:	20000250 	.word	0x20000250
 8001230:	08006e38 	.word	0x08006e38

08001234 <Acc_LSM_Init>:

void Acc_LSM_Init()
{
 8001234:	b530      	push	{r4, r5, lr}
 8001236:	b0b9      	sub	sp, #228	@ 0xe4
  char str_buf[100] =  "--------------------LSM6DS33 init--------------------------\n\r";
 8001238:	4c42      	ldr	r4, [pc, #264]	@ (8001344 <Acc_LSM_Init+0x110>)
 800123a:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 800123e:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 8001242:	46f4      	mov	ip, lr
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	6861      	ldr	r1, [r4, #4]
 8001248:	68a2      	ldr	r2, [r4, #8]
 800124a:	68e3      	ldr	r3, [r4, #12]
 800124c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001250:	3410      	adds	r4, #16
 8001252:	46e6      	mov	lr, ip
 8001254:	42ac      	cmp	r4, r5
 8001256:	d1f4      	bne.n	8001242 <Acc_LSM_Init+0xe>
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	6861      	ldr	r1, [r4, #4]
 800125c:	68a2      	ldr	r2, [r4, #8]
 800125e:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	f8ae 3000 	strh.w	r3, [lr]
 8001268:	2226      	movs	r2, #38	@ 0x26
 800126a:	2100      	movs	r1, #0
 800126c:	f10d 00ba 	add.w	r0, sp, #186	@ 0xba
 8001270:	f003 fac0 	bl	80047f4 <memset>
  send_message(str_buf, PRIORITY_HIGH);
 8001274:	2102      	movs	r1, #2
 8001276:	a81f      	add	r0, sp, #124	@ 0x7c
 8001278:	f7ff fd08 	bl	8000c8c <send_message>
	uint16_t register_address = 0x0F; //Адрес регистра в котором хранится значение ID
	uint8_t data; //Массив в котором МЫ будем хранить данные с регистра устройства
	uint16_t Size_ = 1; //Длина запрашиваемых данных, 1 байт = 1 регистр
	uint32_t Timeout_ = 0xFF; //Таймаут, 255 мс

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, register_address, I2C_MEMADD_SIZE_8BIT, &data, Size_, Timeout_), "WHO AM I");
 800127c:	23ff      	movs	r3, #255	@ 0xff
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	220f      	movs	r2, #15
 800128c:	21d4      	movs	r1, #212	@ 0xd4
 800128e:	482e      	ldr	r0, [pc, #184]	@ (8001348 <Acc_LSM_Init+0x114>)
 8001290:	f001 f8d6 	bl	8002440 <HAL_I2C_Mem_Read>
 8001294:	492d      	ldr	r1, [pc, #180]	@ (800134c <Acc_LSM_Init+0x118>)
 8001296:	f7ff fd07 	bl	8000ca8 <send_reg_log>
	if (data == 0x69)
 800129a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800129e:	2b69      	cmp	r3, #105	@ 0x69
 80012a0:	d01d      	beq.n	80012de <Acc_LSM_Init+0xaa>

    uint8_t acc_power_mode = 0b01000100;
    send_reg_log(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, 0xFF), "ctrl_meas");
	} else
	{
		char buffer [50] = "ACCELEROMETER READ ERROR\n\r";
 80012a2:	ac05      	add	r4, sp, #20
 80012a4:	4d2a      	ldr	r5, [pc, #168]	@ (8001350 <Acc_LSM_Init+0x11c>)
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ae:	c403      	stmia	r4!, {r0, r1}
 80012b0:	f824 2b02 	strh.w	r2, [r4], #2
 80012b4:	0c12      	lsrs	r2, r2, #16
 80012b6:	7022      	strb	r2, [r4, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8cd 302f 	str.w	r3, [sp, #47]	@ 0x2f
 80012be:	f8cd 3033 	str.w	r3, [sp, #51]	@ 0x33
 80012c2:	f8cd 3037 	str.w	r3, [sp, #55]	@ 0x37
 80012c6:	f8cd 303b 	str.w	r3, [sp, #59]	@ 0x3b
 80012ca:	f8cd 303f 	str.w	r3, [sp, #63]	@ 0x3f
 80012ce:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
		send_message(buffer, PRIORITY_HIGH);
 80012d2:	2102      	movs	r1, #2
 80012d4:	a805      	add	r0, sp, #20
 80012d6:	f7ff fcd9 	bl	8000c8c <send_message>
	}
}
 80012da:	b039      	add	sp, #228	@ 0xe4
 80012dc:	bd30      	pop	{r4, r5, pc}
		char buffer [100] = "ACCELEROMETER READ SUCCESSFULLY (nice)\n\r";
 80012de:	4c1d      	ldr	r4, [pc, #116]	@ (8001354 <Acc_LSM_Init+0x120>)
 80012e0:	f10d 0c14 	add.w	ip, sp, #20
 80012e4:	f104 0e20 	add.w	lr, r4, #32
 80012e8:	4665      	mov	r5, ip
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	6861      	ldr	r1, [r4, #4]
 80012ee:	68a2      	ldr	r2, [r4, #8]
 80012f0:	68e3      	ldr	r3, [r4, #12]
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	3410      	adds	r4, #16
 80012f6:	46ac      	mov	ip, r5
 80012f8:	4574      	cmp	r4, lr
 80012fa:	d1f5      	bne.n	80012e8 <Acc_LSM_Init+0xb4>
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	6861      	ldr	r1, [r4, #4]
 8001300:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8001304:	7a23      	ldrb	r3, [r4, #8]
 8001306:	f88c 3000 	strb.w	r3, [ip]
 800130a:	223b      	movs	r2, #59	@ 0x3b
 800130c:	2100      	movs	r1, #0
 800130e:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 8001312:	f003 fa6f 	bl	80047f4 <memset>
		send_message(buffer, PRIORITY_HIGH);
 8001316:	2102      	movs	r1, #2
 8001318:	a805      	add	r0, sp, #20
 800131a:	f7ff fcb7 	bl	8000c8c <send_message>
    uint8_t acc_power_mode = 0b01000100;
 800131e:	2344      	movs	r3, #68	@ 0x44
 8001320:	f88d 3013 	strb.w	r3, [sp, #19]
    send_reg_log(HAL_I2C_Mem_Write(&hi2c1, dev_address, 0x10, I2C_MEMADD_SIZE_8BIT, &acc_power_mode, 1, 0xFF), "ctrl_meas");
 8001324:	23ff      	movs	r3, #255	@ 0xff
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	f10d 0213 	add.w	r2, sp, #19
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	2210      	movs	r2, #16
 8001334:	21d4      	movs	r1, #212	@ 0xd4
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <Acc_LSM_Init+0x114>)
 8001338:	f000 ffd2 	bl	80022e0 <HAL_I2C_Mem_Write>
 800133c:	4906      	ldr	r1, [pc, #24]	@ (8001358 <Acc_LSM_Init+0x124>)
 800133e:	f7ff fcb3 	bl	8000ca8 <send_reg_log>
 8001342:	e7ca      	b.n	80012da <Acc_LSM_Init+0xa6>
 8001344:	08006e58 	.word	0x08006e58
 8001348:	200001f0 	.word	0x200001f0
 800134c:	08006e40 	.word	0x08006e40
 8001350:	08006ce0 	.word	0x08006ce0
 8001354:	08006e98 	.word	0x08006e98
 8001358:	08006e4c 	.word	0x08006e4c
 800135c:	00000000 	.word	0x00000000

08001360 <Read_Acc>:

void Read_Acc(double* buffer_xyz)
{
 8001360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001364:	b089      	sub	sp, #36	@ 0x24
 8001366:	4680      	mov	r8, r0
	uint8_t dev_address = 0b11010100;
  uint16_t raw_val[2];

	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x28, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTX_L_XL");
 8001368:	4e5d      	ldr	r6, [pc, #372]	@ (80014e0 <Read_Acc+0x180>)
 800136a:	27ff      	movs	r7, #255	@ 0xff
 800136c:	9702      	str	r7, [sp, #8]
 800136e:	2401      	movs	r4, #1
 8001370:	9401      	str	r4, [sp, #4]
 8001372:	f10d 0b1c 	add.w	fp, sp, #28
 8001376:	f8cd b000 	str.w	fp, [sp]
 800137a:	4623      	mov	r3, r4
 800137c:	2228      	movs	r2, #40	@ 0x28
 800137e:	21d4      	movs	r1, #212	@ 0xd4
 8001380:	4630      	mov	r0, r6
 8001382:	f001 f85d 	bl	8002440 <HAL_I2C_Mem_Read>
 8001386:	4957      	ldr	r1, [pc, #348]	@ (80014e4 <Read_Acc+0x184>)
 8001388:	f7ff fc8e 	bl	8000ca8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x29, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTX_H_XL");
 800138c:	9702      	str	r7, [sp, #8]
 800138e:	9401      	str	r4, [sp, #4]
 8001390:	f10d 0a1d 	add.w	sl, sp, #29
 8001394:	f8cd a000 	str.w	sl, [sp]
 8001398:	4623      	mov	r3, r4
 800139a:	2229      	movs	r2, #41	@ 0x29
 800139c:	21d4      	movs	r1, #212	@ 0xd4
 800139e:	4630      	mov	r0, r6
 80013a0:	f001 f84e 	bl	8002440 <HAL_I2C_Mem_Read>
 80013a4:	4950      	ldr	r1, [pc, #320]	@ (80014e8 <Read_Acc+0x188>)
 80013a6:	f7ff fc7f 	bl	8000ca8 <send_reg_log>

  int16_t x_val = raw_val[1] << 8 | raw_val[0];
 80013aa:	f8bd 501e 	ldrh.w	r5, [sp, #30]
 80013ae:	022d      	lsls	r5, r5, #8
 80013b0:	b22d      	sxth	r5, r5
 80013b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80013b6:	431d      	orrs	r5, r3
  raw_val[0] = raw_val[1] = 0;
 80013b8:	f04f 0900 	mov.w	r9, #0
 80013bc:	f8ad 901e 	strh.w	r9, [sp, #30]
 80013c0:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTY_L_XL");
 80013c4:	9702      	str	r7, [sp, #8]
 80013c6:	9401      	str	r4, [sp, #4]
 80013c8:	f8cd b000 	str.w	fp, [sp]
 80013cc:	4623      	mov	r3, r4
 80013ce:	222a      	movs	r2, #42	@ 0x2a
 80013d0:	21d4      	movs	r1, #212	@ 0xd4
 80013d2:	4630      	mov	r0, r6
 80013d4:	f001 f834 	bl	8002440 <HAL_I2C_Mem_Read>
 80013d8:	4944      	ldr	r1, [pc, #272]	@ (80014ec <Read_Acc+0x18c>)
 80013da:	f7ff fc65 	bl	8000ca8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTY_H_XL");
 80013de:	9702      	str	r7, [sp, #8]
 80013e0:	9401      	str	r4, [sp, #4]
 80013e2:	f8cd a000 	str.w	sl, [sp]
 80013e6:	4623      	mov	r3, r4
 80013e8:	222b      	movs	r2, #43	@ 0x2b
 80013ea:	21d4      	movs	r1, #212	@ 0xd4
 80013ec:	4630      	mov	r0, r6
 80013ee:	f001 f827 	bl	8002440 <HAL_I2C_Mem_Read>
 80013f2:	493f      	ldr	r1, [pc, #252]	@ (80014f0 <Read_Acc+0x190>)
 80013f4:	f7ff fc58 	bl	8000ca8 <send_reg_log>

  int16_t y_val = raw_val[1] << 8 | raw_val[0];
 80013f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8001404:	4313      	orrs	r3, r2
 8001406:	9305      	str	r3, [sp, #20]
  raw_val[0] = raw_val[1] = 0;
 8001408:	f8ad 901e 	strh.w	r9, [sp, #30]
 800140c:	f8ad 901c 	strh.w	r9, [sp, #28]
  
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val, 1, 0xFF), "OUTZ_L_XL");
 8001410:	9702      	str	r7, [sp, #8]
 8001412:	9401      	str	r4, [sp, #4]
 8001414:	f8cd b000 	str.w	fp, [sp]
 8001418:	4623      	mov	r3, r4
 800141a:	222c      	movs	r2, #44	@ 0x2c
 800141c:	21d4      	movs	r1, #212	@ 0xd4
 800141e:	4630      	mov	r0, r6
 8001420:	f001 f80e 	bl	8002440 <HAL_I2C_Mem_Read>
 8001424:	4933      	ldr	r1, [pc, #204]	@ (80014f4 <Read_Acc+0x194>)
 8001426:	f7ff fc3f 	bl	8000ca8 <send_reg_log>
	send_reg_log(HAL_I2C_Mem_Read(&hi2c1, dev_address, 0x2D, I2C_MEMADD_SIZE_8BIT, (uint8_t*)raw_val+1, 1, 0xFF), "OUTZ_H_XL");
 800142a:	9702      	str	r7, [sp, #8]
 800142c:	9401      	str	r4, [sp, #4]
 800142e:	f8cd a000 	str.w	sl, [sp]
 8001432:	4623      	mov	r3, r4
 8001434:	222d      	movs	r2, #45	@ 0x2d
 8001436:	21d4      	movs	r1, #212	@ 0xd4
 8001438:	4630      	mov	r0, r6
 800143a:	f001 f801 	bl	8002440 <HAL_I2C_Mem_Read>
 800143e:	492e      	ldr	r1, [pc, #184]	@ (80014f8 <Read_Acc+0x198>)
 8001440:	f7ff fc32 	bl	8000ca8 <send_reg_log>

  int16_t z_val = raw_val[1] << 8 | raw_val[0];
 8001444:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 8001448:	0224      	lsls	r4, r4, #8
 800144a:	b224      	sxth	r4, r4
 800144c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8001450:	431c      	orrs	r4, r3

  buffer_xyz[0] = ((double)x_val * 0.488/1000)*9.81;
 8001452:	4628      	mov	r0, r5
 8001454:	f7ff f84e 	bl	80004f4 <__aeabi_i2d>
 8001458:	a31d      	add	r3, pc, #116	@ (adr r3, 80014d0 <Read_Acc+0x170>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f8b3 	bl	80005c8 <__aeabi_dmul>
 8001462:	2200      	movs	r2, #0
 8001464:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <Read_Acc+0x19c>)
 8001466:	f7ff f9d9 	bl	800081c <__aeabi_ddiv>
 800146a:	a31b      	add	r3, pc, #108	@ (adr r3, 80014d8 <Read_Acc+0x178>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8aa 	bl	80005c8 <__aeabi_dmul>
 8001474:	e9c8 0100 	strd	r0, r1, [r8]
  buffer_xyz[1] = ((double)y_val * 0.488/1000)*9.81;
 8001478:	9805      	ldr	r0, [sp, #20]
 800147a:	f7ff f83b 	bl	80004f4 <__aeabi_i2d>
 800147e:	a314      	add	r3, pc, #80	@ (adr r3, 80014d0 <Read_Acc+0x170>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f8a0 	bl	80005c8 <__aeabi_dmul>
 8001488:	2200      	movs	r2, #0
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <Read_Acc+0x19c>)
 800148c:	f7ff f9c6 	bl	800081c <__aeabi_ddiv>
 8001490:	a311      	add	r3, pc, #68	@ (adr r3, 80014d8 <Read_Acc+0x178>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f897 	bl	80005c8 <__aeabi_dmul>
 800149a:	e9c8 0102 	strd	r0, r1, [r8, #8]
  buffer_xyz[2] = ((double)z_val * 0.488/1000)*9.81;
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff f828 	bl	80004f4 <__aeabi_i2d>
 80014a4:	a30a      	add	r3, pc, #40	@ (adr r3, 80014d0 <Read_Acc+0x170>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f88d 	bl	80005c8 <__aeabi_dmul>
 80014ae:	2200      	movs	r2, #0
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <Read_Acc+0x19c>)
 80014b2:	f7ff f9b3 	bl	800081c <__aeabi_ddiv>
 80014b6:	a308      	add	r3, pc, #32	@ (adr r3, 80014d8 <Read_Acc+0x178>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f884 	bl	80005c8 <__aeabi_dmul>
 80014c0:	e9c8 0104 	strd	r0, r1, [r8, #16]
}
 80014c4:	b009      	add	sp, #36	@ 0x24
 80014c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ca:	bf00      	nop
 80014cc:	f3af 8000 	nop.w
 80014d0:	5a1cac08 	.word	0x5a1cac08
 80014d4:	3fdf3b64 	.word	0x3fdf3b64
 80014d8:	51eb851f 	.word	0x51eb851f
 80014dc:	40239eb8 	.word	0x40239eb8
 80014e0:	200001f0 	.word	0x200001f0
 80014e4:	08006ec4 	.word	0x08006ec4
 80014e8:	08006ed0 	.word	0x08006ed0
 80014ec:	08006edc 	.word	0x08006edc
 80014f0:	08006ee8 	.word	0x08006ee8
 80014f4:	08006ef4 	.word	0x08006ef4
 80014f8:	08006f00 	.word	0x08006f00
 80014fc:	408f4000 	.word	0x408f4000

08001500 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001502:	e7fe      	b.n	8001502 <Error_Handler+0x2>

08001504 <SystemClock_Config>:
{
 8001504:	b510      	push	{r4, lr}
 8001506:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001508:	ac08      	add	r4, sp, #32
 800150a:	2230      	movs	r2, #48	@ 0x30
 800150c:	2100      	movs	r1, #0
 800150e:	4620      	mov	r0, r4
 8001510:	f003 f970 	bl	80047f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	2300      	movs	r3, #0
 8001516:	9303      	str	r3, [sp, #12]
 8001518:	9304      	str	r3, [sp, #16]
 800151a:	9305      	str	r3, [sp, #20]
 800151c:	9306      	str	r3, [sp, #24]
 800151e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	4a1e      	ldr	r2, [pc, #120]	@ (800159c <SystemClock_Config+0x98>)
 8001524:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001526:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800152a:	6411      	str	r1, [r2, #64]	@ 0x40
 800152c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800152e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <SystemClock_Config+0x9c>)
 800153a:	6811      	ldr	r1, [r2, #0]
 800153c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001540:	6011      	str	r1, [r2, #0]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001548:	9202      	str	r2, [sp, #8]
 800154a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2202      	movs	r2, #2
 800154e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2101      	movs	r1, #1
 8001552:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001554:	2110      	movs	r1, #16
 8001556:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001558:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001560:	2364      	movs	r3, #100	@ 0x64
 8001562:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001564:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001566:	2304      	movs	r3, #4
 8001568:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156a:	4620      	mov	r0, r4
 800156c:	f001 f900 	bl	8002770 <HAL_RCC_OscConfig>
 8001570:	b980      	cbnz	r0, 8001594 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001582:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001586:	2103      	movs	r1, #3
 8001588:	a803      	add	r0, sp, #12
 800158a:	f001 fb41 	bl	8002c10 <HAL_RCC_ClockConfig>
 800158e:	b918      	cbnz	r0, 8001598 <SystemClock_Config+0x94>
}
 8001590:	b014      	add	sp, #80	@ 0x50
 8001592:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001594:	f7ff ffb4 	bl	8001500 <Error_Handler>
    Error_Handler();
 8001598:	f7ff ffb2 	bl	8001500 <Error_Handler>
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <main>:
{
 80015a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
    char data[100] =  "F411 says: I'm alive\n\r\0";
 80015ac:	4da4      	ldr	r5, [pc, #656]	@ (8001840 <main+0x29c>)
 80015ae:	ac8b      	add	r4, sp, #556	@ 0x22c
 80015b0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80015b2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80015b4:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 80015b6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015bc:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 80015be:	c403      	stmia	r4!, {r0, r1}
 80015c0:	224c      	movs	r2, #76	@ 0x4c
 80015c2:	2100      	movs	r1, #0
 80015c4:	4620      	mov	r0, r4
 80015c6:	f003 f915 	bl	80047f4 <memset>
    send_message(data, PRIORITY_HIGH);
 80015ca:	2102      	movs	r1, #2
 80015cc:	a88b      	add	r0, sp, #556	@ 0x22c
 80015ce:	f7ff fb5d 	bl	8000c8c <send_message>
  HAL_Init();
 80015d2:	f000 f97d 	bl	80018d0 <HAL_Init>
  SystemClock_Config();
 80015d6:	f7ff ff95 	bl	8001504 <SystemClock_Config>
  MX_GPIO_Init();
 80015da:	f7ff fba3 	bl	8000d24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015de:	f7ff fbbd 	bl	8000d5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015e2:	f002 fb0b 	bl	8003bfc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80015e6:	f002 fa93 	bl	8003b10 <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015ea:	2100      	movs	r1, #0
 80015ec:	4895      	ldr	r0, [pc, #596]	@ (8001844 <main+0x2a0>)
 80015ee:	f001 ff2b 	bl	8003448 <HAL_TIM_PWM_Start>
  Acc_LSM_Init();
 80015f2:	f7ff fe1f 	bl	8001234 <Acc_LSM_Init>
  InitBmp();
 80015f6:	f7ff fd0f 	bl	8001018 <InitBmp>
  Read_Dig_Variables();
 80015fa:	f7ff fd45 	bl	8001088 <Read_Dig_Variables>
  uint8_t ctrl_meas = 0b01001001;
 80015fe:	2349      	movs	r3, #73	@ 0x49
 8001600:	f88d 322b 	strb.w	r3, [sp, #555]	@ 0x22b
  send_reg_log(HAL_I2C_Mem_Write(&hi2c1, 0x76 << 1, 0xF4, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, 1, 0xFF), "ctrl_meas");
 8001604:	23ff      	movs	r3, #255	@ 0xff
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	f20d 222b 	addw	r2, sp, #555	@ 0x22b
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	22f4      	movs	r2, #244	@ 0xf4
 8001614:	21ec      	movs	r1, #236	@ 0xec
 8001616:	488c      	ldr	r0, [pc, #560]	@ (8001848 <main+0x2a4>)
 8001618:	f000 fe62 	bl	80022e0 <HAL_I2C_Mem_Write>
 800161c:	498b      	ldr	r1, [pc, #556]	@ (800184c <main+0x2a8>)
 800161e:	f7ff fb43 	bl	8000ca8 <send_reg_log>
    HAL_Delay(1000);
 8001622:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001626:	f000 f97f 	bl	8001928 <HAL_Delay>
    char data[100] =  "------------------------BMP----------------------\n\r\0";
 800162a:	ae0d      	add	r6, sp, #52	@ 0x34
 800162c:	4c84      	ldr	r4, [pc, #528]	@ (8001840 <main+0x29c>)
 800162e:	f104 0c60 	add.w	ip, r4, #96	@ 0x60
 8001632:	4635      	mov	r5, r6
 8001634:	3490      	adds	r4, #144	@ 0x90
 8001636:	46ae      	mov	lr, r5
 8001638:	f8dc 0000 	ldr.w	r0, [ip]
 800163c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001640:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8001644:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001648:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800164c:	f10c 0c10 	add.w	ip, ip, #16
 8001650:	4675      	mov	r5, lr
 8001652:	45a4      	cmp	ip, r4
 8001654:	d1ef      	bne.n	8001636 <main+0x92>
 8001656:	f8dc 0000 	ldr.w	r0, [ip]
 800165a:	f8ce 0000 	str.w	r0, [lr]
 800165e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8001662:	f88e 3004 	strb.w	r3, [lr, #4]
 8001666:	222f      	movs	r2, #47	@ 0x2f
 8001668:	2100      	movs	r1, #0
 800166a:	f106 0035 	add.w	r0, r6, #53	@ 0x35
 800166e:	f003 f8c1 	bl	80047f4 <memset>
    send_message(data, PRIORITY_HIGH);
 8001672:	2102      	movs	r1, #2
 8001674:	a80d      	add	r0, sp, #52	@ 0x34
 8001676:	f7ff fb09 	bl	8000c8c <send_message>
    temp_raw[0] = temp_raw[1] = temp_raw[2]  = 0;
 800167a:	ad04      	add	r5, sp, #16
 800167c:	f04f 0800 	mov.w	r8, #0
 8001680:	f88d 8012 	strb.w	r8, [sp, #18]
 8001684:	f88d 8011 	strb.w	r8, [sp, #17]
 8001688:	f88d 8010 	strb.w	r8, [sp, #16]
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFA, I2C_MEMADD_SIZE_8BIT, temp_raw, 1, 0xFF), "temp_msb");
 800168c:	4e6e      	ldr	r6, [pc, #440]	@ (8001848 <main+0x2a4>)
 800168e:	27ff      	movs	r7, #255	@ 0xff
 8001690:	9702      	str	r7, [sp, #8]
 8001692:	2401      	movs	r4, #1
 8001694:	9401      	str	r4, [sp, #4]
 8001696:	9500      	str	r5, [sp, #0]
 8001698:	4623      	mov	r3, r4
 800169a:	22fa      	movs	r2, #250	@ 0xfa
 800169c:	21ec      	movs	r1, #236	@ 0xec
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 fece 	bl	8002440 <HAL_I2C_Mem_Read>
 80016a4:	496a      	ldr	r1, [pc, #424]	@ (8001850 <main+0x2ac>)
 80016a6:	f7ff faff 	bl	8000ca8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFB, I2C_MEMADD_SIZE_8BIT, temp_raw+1, 1, 0xFF), "temp_lsb");
 80016aa:	9702      	str	r7, [sp, #8]
 80016ac:	9401      	str	r4, [sp, #4]
 80016ae:	f10d 0311 	add.w	r3, sp, #17
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4623      	mov	r3, r4
 80016b6:	22fb      	movs	r2, #251	@ 0xfb
 80016b8:	21ec      	movs	r1, #236	@ 0xec
 80016ba:	4630      	mov	r0, r6
 80016bc:	f000 fec0 	bl	8002440 <HAL_I2C_Mem_Read>
 80016c0:	4964      	ldr	r1, [pc, #400]	@ (8001854 <main+0x2b0>)
 80016c2:	f7ff faf1 	bl	8000ca8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xFC, I2C_MEMADD_SIZE_8BIT, temp_raw+2, 1, 0xFF), "temp_xlsb");
 80016c6:	9702      	str	r7, [sp, #8]
 80016c8:	9401      	str	r4, [sp, #4]
 80016ca:	f10d 0312 	add.w	r3, sp, #18
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4623      	mov	r3, r4
 80016d2:	22fc      	movs	r2, #252	@ 0xfc
 80016d4:	21ec      	movs	r1, #236	@ 0xec
 80016d6:	4630      	mov	r0, r6
 80016d8:	f000 feb2 	bl	8002440 <HAL_I2C_Mem_Read>
 80016dc:	495e      	ldr	r1, [pc, #376]	@ (8001858 <main+0x2b4>)
 80016de:	f7ff fae3 	bl	8000ca8 <send_reg_log>
    int32_t temp_raw_32 = (int32_t) ( ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | ((uint32_t)temp_raw[2] >> 4) );
 80016e2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80016e6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80016f0:	f89d 0012 	ldrb.w	r0, [sp, #18]
    actual_temp = 0;
 80016f4:	4d59      	ldr	r5, [pc, #356]	@ (800185c <main+0x2b8>)
 80016f6:	f8c5 8000 	str.w	r8, [r5]
    actual_temp = bmp280_compensate_T_int32(temp_raw_32);
 80016fa:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 80016fe:	f7ff fb83 	bl	8000e08 <bmp280_compensate_T_int32>
 8001702:	6028      	str	r0, [r5, #0]
    sprintf(temp_str, "Temperature: %.2f Celsius\n\n\r", ((float)actual_temp)/100);
 8001704:	ee07 0a90 	vmov	s15, r0
 8001708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001860 <main+0x2bc>
 8001710:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001714:	ee17 0a90 	vmov	r0, s15
 8001718:	f7fe fefe 	bl	8000518 <__aeabi_f2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	ad26      	add	r5, sp, #152	@ 0x98
 8001722:	4950      	ldr	r1, [pc, #320]	@ (8001864 <main+0x2c0>)
 8001724:	4628      	mov	r0, r5
 8001726:	f002 ffff 	bl	8004728 <siprintf>
    send_message(temp_str, PRIORITY_HIGH);
 800172a:	2102      	movs	r1, #2
 800172c:	4628      	mov	r0, r5
 800172e:	f7ff faad 	bl	8000c8c <send_message>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF7, I2C_MEMADD_SIZE_8BIT, pressure_raw, 1, 0xFF), "press_msb");
 8001732:	9702      	str	r7, [sp, #8]
 8001734:	9401      	str	r4, [sp, #4]
 8001736:	ad05      	add	r5, sp, #20
 8001738:	9500      	str	r5, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	22f7      	movs	r2, #247	@ 0xf7
 800173e:	21ec      	movs	r1, #236	@ 0xec
 8001740:	4630      	mov	r0, r6
 8001742:	f000 fe7d 	bl	8002440 <HAL_I2C_Mem_Read>
 8001746:	4948      	ldr	r1, [pc, #288]	@ (8001868 <main+0x2c4>)
 8001748:	f7ff faae 	bl	8000ca8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF8, I2C_MEMADD_SIZE_8BIT, pressure_raw+1, 1, 0xFF), "press_lsb");
 800174c:	9702      	str	r7, [sp, #8]
 800174e:	9401      	str	r4, [sp, #4]
 8001750:	f10d 0315 	add.w	r3, sp, #21
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4623      	mov	r3, r4
 8001758:	22f8      	movs	r2, #248	@ 0xf8
 800175a:	21ec      	movs	r1, #236	@ 0xec
 800175c:	4630      	mov	r0, r6
 800175e:	f000 fe6f 	bl	8002440 <HAL_I2C_Mem_Read>
 8001762:	4942      	ldr	r1, [pc, #264]	@ (800186c <main+0x2c8>)
 8001764:	f7ff faa0 	bl	8000ca8 <send_reg_log>
    send_reg_log(HAL_I2C_Mem_Read(&hi2c1, 0x76 << 1, 0xF9, I2C_MEMADD_SIZE_8BIT, pressure_raw+2, 1, 0xFF), "press_xlsb");
 8001768:	9702      	str	r7, [sp, #8]
 800176a:	9401      	str	r4, [sp, #4]
 800176c:	f10d 0316 	add.w	r3, sp, #22
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4623      	mov	r3, r4
 8001774:	22f9      	movs	r2, #249	@ 0xf9
 8001776:	21ec      	movs	r1, #236	@ 0xec
 8001778:	4630      	mov	r0, r6
 800177a:	f000 fe61 	bl	8002440 <HAL_I2C_Mem_Read>
 800177e:	493c      	ldr	r1, [pc, #240]	@ (8001870 <main+0x2cc>)
 8001780:	f7ff fa92 	bl	8000ca8 <send_reg_log>
    int32_t pressure_raw_32 = (int32_t) ( ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | ((uint32_t)pressure_raw[2] >> 4) );
 8001784:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001788:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001792:	f89d 0016 	ldrb.w	r0, [sp, #22]
    actual_pressure = bmp280_compensate_P_int64(pressure_raw_32);
 8001796:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 800179a:	f7ff fb5b 	bl	8000e54 <bmp280_compensate_P_int64>
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <main+0x2d0>)
 80017a0:	6018      	str	r0, [r3, #0]
    sprintf(pressure_str, "Pressure: %.4f Pa\n\n\r",  ((float)actual_pressure)/256);
 80017a2:	ee07 0a90 	vmov	s15, r0
 80017a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017aa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001878 <main+0x2d4>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	ee17 0a90 	vmov	r0, s15
 80017b6:	f7fe feaf 	bl	8000518 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	ac3f      	add	r4, sp, #252	@ 0xfc
 80017c0:	492e      	ldr	r1, [pc, #184]	@ (800187c <main+0x2d8>)
 80017c2:	4620      	mov	r0, r4
 80017c4:	f002 ffb0 	bl	8004728 <siprintf>
    send_message(pressure_str, PRIORITY_HIGH);
 80017c8:	2102      	movs	r1, #2
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff fa5e 	bl	8000c8c <send_message>
    char data1[100] =  "------------------------ACC----------------------\n\r\0";
 80017d0:	f50d 7cb0 	add.w	ip, sp, #352	@ 0x160
 80017d4:	4e1a      	ldr	r6, [pc, #104]	@ (8001840 <main+0x29c>)
 80017d6:	f106 0498 	add.w	r4, r6, #152	@ 0x98
 80017da:	4667      	mov	r7, ip
 80017dc:	36c8      	adds	r6, #200	@ 0xc8
 80017de:	463d      	mov	r5, r7
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	68a2      	ldr	r2, [r4, #8]
 80017e6:	68e3      	ldr	r3, [r4, #12]
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	3410      	adds	r4, #16
 80017ec:	462f      	mov	r7, r5
 80017ee:	42b4      	cmp	r4, r6
 80017f0:	d1f5      	bne.n	80017de <main+0x23a>
 80017f2:	6820      	ldr	r0, [r4, #0]
 80017f4:	6028      	str	r0, [r5, #0]
 80017f6:	7923      	ldrb	r3, [r4, #4]
 80017f8:	712b      	strb	r3, [r5, #4]
 80017fa:	222f      	movs	r2, #47	@ 0x2f
 80017fc:	2100      	movs	r1, #0
 80017fe:	f10c 0035 	add.w	r0, ip, #53	@ 0x35
 8001802:	f002 fff7 	bl	80047f4 <memset>
    send_message(data1, PRIORITY_HIGH);
 8001806:	2102      	movs	r1, #2
 8001808:	a858      	add	r0, sp, #352	@ 0x160
 800180a:	f7ff fa3f 	bl	8000c8c <send_message>
    Read_Acc(acc_vals);
 800180e:	ac06      	add	r4, sp, #24
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fda5 	bl	8001360 <Read_Acc>
    sprintf(acc_str, "Acceleration: (%0.4f, %0.4f, %0.4f) \n\n\r", acc_vals[0], acc_vals[1], acc_vals[2]);
 8001816:	ad71      	add	r5, sp, #452	@ 0x1c4
 8001818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800181c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001820:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001824:	e9cd 2300 	strd	r2, r3, [sp]
 8001828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800182c:	4914      	ldr	r1, [pc, #80]	@ (8001880 <main+0x2dc>)
 800182e:	4628      	mov	r0, r5
 8001830:	f002 ff7a 	bl	8004728 <siprintf>
    send_message(acc_str, PRIORITY_HIGH);
 8001834:	2102      	movs	r1, #2
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff fa28 	bl	8000c8c <send_message>
  while (1)
 800183c:	e6f1      	b.n	8001622 <main+0x7e>
 800183e:	bf00      	nop
 8001840:	08006ccc 	.word	0x08006ccc
 8001844:	20000270 	.word	0x20000270
 8001848:	200001f0 	.word	0x200001f0
 800184c:	08006e4c 	.word	0x08006e4c
 8001850:	08006f0c 	.word	0x08006f0c
 8001854:	08006f18 	.word	0x08006f18
 8001858:	08006f24 	.word	0x08006f24
 800185c:	2000024c 	.word	0x2000024c
 8001860:	42c80000 	.word	0x42c80000
 8001864:	08006f30 	.word	0x08006f30
 8001868:	08006f50 	.word	0x08006f50
 800186c:	08006f5c 	.word	0x08006f5c
 8001870:	08006f68 	.word	0x08006f68
 8001874:	20000248 	.word	0x20000248
 8001878:	3b800000 	.word	0x3b800000
 800187c:	08006f74 	.word	0x08006f74
 8001880:	08006f8c 	.word	0x08006f8c

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b510      	push	{r4, lr}
 8001886:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_InitTick+0x40>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001890:	fbb3 f3f2 	udiv	r3, r3, r2
 8001894:	4a0c      	ldr	r2, [pc, #48]	@ (80018c8 <HAL_InitTick+0x44>)
 8001896:	6810      	ldr	r0, [r2, #0]
 8001898:	fbb0 f0f3 	udiv	r0, r0, r3
 800189c:	f000 f8c0 	bl	8001a20 <HAL_SYSTICK_Config>
 80018a0:	b968      	cbnz	r0, 80018be <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	2c0f      	cmp	r4, #15
 80018a4:	d901      	bls.n	80018aa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e00a      	b.n	80018c0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	4621      	mov	r1, r4
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b2:	f000 f8a1 	bl	80019f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_InitTick+0x48>)
 80018b8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2000      	movs	r0, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
}
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_Init>:
{
 80018d0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_Init+0x30>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018ea:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f871 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f7ff ffc6 	bl	8001884 <HAL_InitTick>
  HAL_MspInit();
 80018f8:	f000 ff1e 	bl	8002738 <HAL_MspInit>
}
 80018fc:	2000      	movs	r0, #0
 80018fe:	bd08      	pop	{r3, pc}
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001904:	4a03      	ldr	r2, [pc, #12]	@ (8001914 <HAL_IncTick+0x10>)
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_IncTick+0x14>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	440b      	add	r3, r1
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000268 	.word	0x20000268
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800191c:	4b01      	ldr	r3, [pc, #4]	@ (8001924 <HAL_GetTick+0x8>)
 800191e:	6818      	ldr	r0, [r3, #0]
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000268 	.word	0x20000268

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b538      	push	{r3, r4, r5, lr}
 800192a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fff6 	bl	800191c <HAL_GetTick>
 8001930:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001936:	d002      	beq.n	800193e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <HAL_Delay+0x24>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193e:	f7ff ffed 	bl	800191c <HAL_GetTick>
 8001942:	1b40      	subs	r0, r0, r5
 8001944:	42a0      	cmp	r0, r4
 8001946:	d3fa      	bcc.n	800193e <HAL_Delay+0x16>
  {
  }
}
 8001948:	bd38      	pop	{r3, r4, r5, pc}
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001950:	2800      	cmp	r0, #0
 8001952:	db07      	blt.n	8001964 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001954:	f000 021f 	and.w	r2, r0, #31
 8001958:	0940      	lsrs	r0, r0, #5
 800195a:	2301      	movs	r3, #1
 800195c:	4093      	lsls	r3, r2
 800195e:	4a02      	ldr	r2, [pc, #8]	@ (8001968 <__NVIC_EnableIRQ+0x18>)
 8001960:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800196c:	2800      	cmp	r0, #0
 800196e:	db08      	blt.n	8001982 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	0109      	lsls	r1, r1, #4
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001978:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800197c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001980:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	f000 000f 	and.w	r0, r0, #15
 8001986:	0109      	lsls	r1, r1, #4
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	4b01      	ldr	r3, [pc, #4]	@ (8001990 <__NVIC_SetPriority+0x24>)
 800198c:	5419      	strb	r1, [r3, r0]
  }
}
 800198e:	4770      	bx	lr
 8001990:	e000ed14 	.word	0xe000ed14

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001996:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199a:	f1c0 0c07 	rsb	ip, r0, #7
 800199e:	f1bc 0f04 	cmp.w	ip, #4
 80019a2:	bf28      	it	cs
 80019a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a8:	1d03      	adds	r3, r0, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d90f      	bls.n	80019ce <NVIC_EncodePriority+0x3a>
 80019ae:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80019b4:	fa0e f00c 	lsl.w	r0, lr, ip
 80019b8:	ea21 0100 	bic.w	r1, r1, r0
 80019bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019be:	fa0e fe03 	lsl.w	lr, lr, r3
 80019c2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80019c6:	ea41 0002 	orr.w	r0, r1, r2
 80019ca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	2300      	movs	r3, #0
 80019d0:	e7ee      	b.n	80019b0 <NVIC_EncodePriority+0x1c>
	...

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	0200      	lsls	r0, r0, #8
 80019e2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80019f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f8:	b510      	push	{r4, lr}
 80019fa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_NVIC_SetPriority+0x1c>)
 80019fe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a00:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001a04:	f7ff ffc6 	bl	8001994 <NVIC_EncodePriority>
 8001a08:	4601      	mov	r1, r0
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ffae 	bl	800196c <__NVIC_SetPriority>
}
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	f7ff ff99 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001a1e:	bd08      	pop	{r3, pc}

08001a20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	3801      	subs	r0, #1
 8001a22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001a26:	d20b      	bcs.n	8001a40 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001a2c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <HAL_SYSTICK_Config+0x24>)
 8001a30:	21f0      	movs	r1, #240	@ 0xf0
 8001a32:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a36:	2000      	movs	r0, #0
 8001a38:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a40:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	f200 80d7 	bhi.w	8001bfe <HAL_GPIO_Init+0x1b6>
{
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	e065      	b.n	8001b22 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a56:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001a5c:	2403      	movs	r4, #3
 8001a5e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a62:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a66:	68cc      	ldr	r4, [r1, #12]
 8001a68:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a6c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001a6e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a72:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	684a      	ldr	r2, [r1, #4]
 8001a78:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001a80:	6042      	str	r2, [r0, #4]
 8001a82:	e05c      	b.n	8001b3e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	08dc      	lsrs	r4, r3, #3
 8001a86:	3408      	adds	r4, #8
 8001a88:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8c:	f003 0507 	and.w	r5, r3, #7
 8001a90:	00ad      	lsls	r5, r5, #2
 8001a92:	f04f 0e0f 	mov.w	lr, #15
 8001a96:	fa0e fe05 	lsl.w	lr, lr, r5
 8001a9a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9e:	690a      	ldr	r2, [r1, #16]
 8001aa0:	40aa      	lsls	r2, r5
 8001aa2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001aaa:	e05c      	b.n	8001b66 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aac:	2204      	movs	r2, #4
 8001aae:	e000      	b.n	8001ab2 <HAL_GPIO_Init+0x6a>
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ab6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab8:	3402      	adds	r4, #2
 8001aba:	4d51      	ldr	r5, [pc, #324]	@ (8001c00 <HAL_GPIO_Init+0x1b8>)
 8001abc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac0:	4a50      	ldr	r2, [pc, #320]	@ (8001c04 <HAL_GPIO_Init+0x1bc>)
 8001ac2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	ea6f 020c 	mvn.w	r2, ip
 8001ac8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001acc:	684e      	ldr	r6, [r1, #4]
 8001ace:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001ad2:	d001      	beq.n	8001ad8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001ad4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001ad8:	4c4a      	ldr	r4, [pc, #296]	@ (8001c04 <HAL_GPIO_Init+0x1bc>)
 8001ada:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001adc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae2:	684e      	ldr	r6, [r1, #4]
 8001ae4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001ae8:	d001      	beq.n	8001aee <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001aea:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001aee:	4c45      	ldr	r4, [pc, #276]	@ (8001c04 <HAL_GPIO_Init+0x1bc>)
 8001af0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001af2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af8:	684e      	ldr	r6, [r1, #4]
 8001afa:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001afe:	d001      	beq.n	8001b04 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001b00:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001b04:	4c3f      	ldr	r4, [pc, #252]	@ (8001c04 <HAL_GPIO_Init+0x1bc>)
 8001b06:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b08:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0c:	684d      	ldr	r5, [r1, #4]
 8001b0e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001b12:	d001      	beq.n	8001b18 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001b14:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001b18:	4c3a      	ldr	r4, [pc, #232]	@ (8001c04 <HAL_GPIO_Init+0x1bc>)
 8001b1a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	d86b      	bhi.n	8001bfa <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001b22:	2201      	movs	r2, #1
 8001b24:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	680c      	ldr	r4, [r1, #0]
 8001b28:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001b2c:	ea32 0404 	bics.w	r4, r2, r4
 8001b30:	d1f4      	bne.n	8001b1c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	684c      	ldr	r4, [r1, #4]
 8001b34:	f004 0403 	and.w	r4, r4, #3
 8001b38:	3c01      	subs	r4, #1
 8001b3a:	2c01      	cmp	r4, #1
 8001b3c:	d98b      	bls.n	8001a56 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3e:	684a      	ldr	r2, [r1, #4]
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	2a03      	cmp	r2, #3
 8001b46:	d009      	beq.n	8001b5c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001b48:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	005d      	lsls	r5, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	40aa      	lsls	r2, r5
 8001b50:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	688a      	ldr	r2, [r1, #8]
 8001b56:	40aa      	lsls	r2, r5
 8001b58:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001b5a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5c:	684a      	ldr	r2, [r1, #4]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	2a02      	cmp	r2, #2
 8001b64:	d08e      	beq.n	8001a84 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001b66:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b68:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b72:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b76:	684a      	ldr	r2, [r1, #4]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b80:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001b82:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	684a      	ldr	r2, [r1, #4]
 8001b86:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001b8a:	d0c7      	beq.n	8001b1c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_GPIO_Init+0x1c0>)
 8001b92:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001b94:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001b98:	6454      	str	r4, [r2, #68]	@ 0x44
 8001b9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b9c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba4:	089c      	lsrs	r4, r3, #2
 8001ba6:	1ca5      	adds	r5, r4, #2
 8001ba8:	4a15      	ldr	r2, [pc, #84]	@ (8001c00 <HAL_GPIO_Init+0x1b8>)
 8001baa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bae:	f003 0e03 	and.w	lr, r3, #3
 8001bb2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001bbc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc0:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <HAL_GPIO_Init+0x1c4>)
 8001bc2:	4290      	cmp	r0, r2
 8001bc4:	f43f af74 	beq.w	8001ab0 <HAL_GPIO_Init+0x68>
 8001bc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bcc:	4290      	cmp	r0, r2
 8001bce:	d00e      	beq.n	8001bee <HAL_GPIO_Init+0x1a6>
 8001bd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd4:	4290      	cmp	r0, r2
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_GPIO_Init+0x1aa>
 8001bd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bdc:	4290      	cmp	r0, r2
 8001bde:	d00a      	beq.n	8001bf6 <HAL_GPIO_Init+0x1ae>
 8001be0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001be4:	4290      	cmp	r0, r2
 8001be6:	f43f af61 	beq.w	8001aac <HAL_GPIO_Init+0x64>
 8001bea:	2207      	movs	r2, #7
 8001bec:	e761      	b.n	8001ab2 <HAL_GPIO_Init+0x6a>
 8001bee:	2201      	movs	r2, #1
 8001bf0:	e75f      	b.n	8001ab2 <HAL_GPIO_Init+0x6a>
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	e75d      	b.n	8001ab2 <HAL_GPIO_Init+0x6a>
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	e75b      	b.n	8001ab2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
 8001bfe:	4770      	bx	lr
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40013c00 	.word	0x40013c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000

08001c10 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c10:	6803      	ldr	r3, [r0, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001c18:	d101      	bne.n	8001c1e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001c1a:	2000      	movs	r0, #0
}
 8001c1c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c22:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c32:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001c3a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
 8001c40:	4770      	bx	lr

08001c42 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c46:	4606      	mov	r6, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	4617      	mov	r7, r2
 8001c4c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c4e:	e03b      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c50:	f7ff fe64 	bl	800191c <HAL_GetTick>
 8001c54:	9b06      	ldr	r3, [sp, #24]
 8001c56:	1ac0      	subs	r0, r0, r3
 8001c58:	4540      	cmp	r0, r8
 8001c5a:	d802      	bhi.n	8001c62 <I2C_WaitOnFlagUntilTimeout+0x20>
 8001c5c:	f1b8 0f00 	cmp.w	r8, #0
 8001c60:	d132      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c62:	2d01      	cmp	r5, #1
 8001c64:	d018      	beq.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c66:	6833      	ldr	r3, [r6, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	ea24 0303 	bic.w	r3, r4, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	429f      	cmp	r7, r3
 8001c78:	d126      	bne.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c84:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c88:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001c8a:	f042 0220 	orr.w	r2, r2, #32
 8001c8e:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001c90:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001c94:	2001      	movs	r0, #1
 8001c96:	e027      	b.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c98:	6833      	ldr	r3, [r6, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	ea24 0303 	bic.w	r3, r4, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	e7e5      	b.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001caa:	6833      	ldr	r3, [r6, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	ea24 0c03 	bic.w	ip, r4, r3
 8001cb2:	fa1f fc8c 	uxth.w	ip, ip
 8001cb6:	fabc fc8c 	clz	ip, ip
 8001cba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001cbe:	4567      	cmp	r7, ip
 8001cc0:	d111      	bne.n	8001ce6 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001cc6:	d1c3      	bne.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc8:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001ccc:	2d01      	cmp	r5, #1
 8001cce:	d0ec      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x68>
 8001cd0:	6833      	ldr	r3, [r6, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	ea24 0c03 	bic.w	ip, r4, r3
 8001cd8:	fa1f fc8c 	uxth.w	ip, ip
 8001cdc:	fabc fc8c 	clz	ip, ip
 8001ce0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001ce4:	e7eb      	b.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
}
 8001ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	460e      	mov	r6, r1
 8001cf4:	4690      	mov	r8, r2
 8001cf6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf8:	e053      	b.n	8001da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d08:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d14:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d18:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001d1a:	f042 0204 	orr.w	r2, r2, #4
 8001d1e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001d20:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001d24:	2001      	movs	r0, #1
 8001d26:	e04a      	b.n	8001dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7ff fdf8 	bl	800191c <HAL_GetTick>
 8001d2c:	eba0 0009 	sub.w	r0, r0, r9
 8001d30:	4540      	cmp	r0, r8
 8001d32:	d802      	bhi.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001d34:	f1b8 0f00 	cmp.w	r8, #0
 8001d38:	d133      	bne.n	8001da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d3a:	2f01      	cmp	r7, #1
 8001d3c:	d017      	beq.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	ea26 0303 	bic.w	r3, r6, r3
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b00      	subs	r3, #0
 8001d4a:	bf18      	it	ne
 8001d4c:	2301      	movne	r3, #1
 8001d4e:	b343      	cbz	r3, 8001da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d54:	2220      	movs	r2, #32
 8001d56:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5a:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d5e:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001d66:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e027      	b.n	8001dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	ea26 0303 	bic.w	r3, r6, r3
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b00      	subs	r3, #0
 8001d7a:	bf18      	it	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	e7e6      	b.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	699c      	ldr	r4, [r3, #24]
 8001d84:	ea26 0404 	bic.w	r4, r6, r4
 8001d88:	b2a4      	uxth	r4, r4
 8001d8a:	3c00      	subs	r4, #0
 8001d8c:	bf18      	it	ne
 8001d8e:	2401      	movne	r4, #1
 8001d90:	b1a4      	cbz	r4, 8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001d9a:	d1ae      	bne.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001d9c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001da0:	d1c2      	bne.n	8001d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001da6:	2f01      	cmp	r7, #1
 8001da8:	d1ea      	bne.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	695c      	ldr	r4, [r3, #20]
 8001dae:	ea26 0404 	bic.w	r4, r6, r4
 8001db2:	b2a4      	uxth	r4, r4
 8001db4:	3c00      	subs	r4, #0
 8001db6:	bf18      	it	ne
 8001db8:	2401      	movne	r4, #1
 8001dba:	e7e9      	b.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001dbc:	2000      	movs	r0, #0
}
 8001dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001dc2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001dc2:	b570      	push	{r4, r5, r6, lr}
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001dd2:	d121      	bne.n	8001e18 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff ff1b 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8001dda:	b9f8      	cbnz	r0, 8001e1c <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001ddc:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001de0:	d0f3      	beq.n	8001dca <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de2:	f7ff fd9b 	bl	800191c <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	42a8      	cmp	r0, r5
 8001dea:	d801      	bhi.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001dec:	2d00      	cmp	r5, #0
 8001dee:	d1ec      	bne.n	8001dca <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001df8:	d1e7      	bne.n	8001dca <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e04:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e10:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
 8001e16:	e000      	b.n	8001e1a <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001e18:	2000      	movs	r0, #0
}
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	e7fc      	b.n	8001e1a <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001e20 <I2C_RequestMemoryWrite>:
{
 8001e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e24:	b085      	sub	sp, #20
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	4691      	mov	r9, r2
 8001e2c:	461f      	mov	r7, r3
 8001e2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001e32:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001e3c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e3e:	9600      	str	r6, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	2200      	movs	r2, #0
 8001e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e48:	f7ff fefb 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	b960      	cbnz	r0, 8001e68 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001e54:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e56:	4633      	mov	r3, r6
 8001e58:	4642      	mov	r2, r8
 8001e5a:	4926      	ldr	r1, [pc, #152]	@ (8001ef4 <I2C_RequestMemoryWrite+0xd4>)
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7ff ff45 	bl	8001cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e62:	b168      	cbz	r0, 8001e80 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e008      	b.n	8001e7a <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e70:	d002      	beq.n	8001e78 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e76:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001e78:	2003      	movs	r0, #3
}
 8001e7a:	b005      	add	sp, #20
 8001e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	9303      	str	r3, [sp, #12]
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	9203      	str	r2, [sp, #12]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	9303      	str	r3, [sp, #12]
 8001e8e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e90:	4632      	mov	r2, r6
 8001e92:	4641      	mov	r1, r8
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff94 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e9a:	b930      	cbnz	r0, 8001eaa <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9c:	2f01      	cmp	r7, #1
 8001e9e:	d10f      	bne.n	8001ec0 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	fa5f f689 	uxtb.w	r6, r9
 8001ea6:	611e      	str	r6, [r3, #16]
 8001ea8:	e7e7      	b.n	8001e7a <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d001      	beq.n	8001eb4 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	e7e2      	b.n	8001e7a <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e7f7      	b.n	8001eb0 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001ec6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec8:	4632      	mov	r2, r6
 8001eca:	4641      	mov	r1, r8
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff78 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed2:	b920      	cbnz	r0, 8001ede <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	fa5f f689 	uxtb.w	r6, r9
 8001eda:	611e      	str	r6, [r3, #16]
 8001edc:	e7cd      	b.n	8001e7a <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ede:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d001      	beq.n	8001ee8 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7c8      	b.n	8001e7a <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e7f7      	b.n	8001ee4 <I2C_RequestMemoryWrite+0xc4>
 8001ef4:	00010002 	.word	0x00010002

08001ef8 <I2C_RequestMemoryRead>:
{
 8001ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
 8001f02:	4616      	mov	r6, r2
 8001f04:	4699      	mov	r9, r3
 8001f06:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001f08:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0c:	6802      	ldr	r2, [r0, #0]
 8001f0e:	6813      	ldr	r3, [r2, #0]
 8001f10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f14:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f16:	6803      	ldr	r3, [r0, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001f1e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f20:	f8cd 8000 	str.w	r8, [sp]
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f2c:	f7ff fe89 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	b970      	cbnz	r0, 8001f50 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f32:	fa5f fa85 	uxtb.w	sl, r5
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001f3c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f3e:	4643      	mov	r3, r8
 8001f40:	463a      	mov	r2, r7
 8001f42:	4941      	ldr	r1, [pc, #260]	@ (8002048 <I2C_RequestMemoryRead+0x150>)
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fed1 	bl	8001cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4a:	b168      	cbz	r0, 8001f68 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	e008      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f58:	d002      	beq.n	8001f60 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f5e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
}
 8001f62:	b004      	add	sp, #16
 8001f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9303      	str	r3, [sp, #12]
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	9203      	str	r2, [sp, #12]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f78:	4642      	mov	r2, r8
 8001f7a:	4639      	mov	r1, r7
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff20 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f82:	b980      	cbnz	r0, 8001fa6 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f84:	f1b9 0f01 	cmp.w	r9, #1
 8001f88:	d118      	bne.n	8001fbc <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	b2f6      	uxtb	r6, r6
 8001f8e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f90:	4642      	mov	r2, r8
 8001f92:	4639      	mov	r1, r7
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff14 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9a:	b368      	cbz	r0, 8001ff8 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d024      	beq.n	8001fec <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	e7dd      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d001      	beq.n	8001fb0 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7d8      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	6813      	ldr	r3, [r2, #0]
 8001fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e7f7      	b.n	8001fac <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	0a32      	lsrs	r2, r6, #8
 8001fc0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	4642      	mov	r2, r8
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fefb 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fcc:	b918      	cbnz	r0, 8001fd6 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	b2f6      	uxtb	r6, r6
 8001fd2:	611e      	str	r6, [r3, #16]
 8001fd4:	e7dc      	b.n	8001f90 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d001      	beq.n	8001fe0 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e7c0      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e7f7      	b.n	8001fdc <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	6813      	ldr	r3, [r2, #0]
 8001ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e7d4      	b.n	8001fa2 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002002:	f8cd 8000 	str.w	r8, [sp]
 8002006:	463b      	mov	r3, r7
 8002008:	2200      	movs	r2, #0
 800200a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fe17 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8002014:	b968      	cbnz	r0, 8002032 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	f04a 0301 	orr.w	r3, sl, #1
 800201c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800201e:	4643      	mov	r3, r8
 8002020:	463a      	mov	r2, r7
 8002022:	4909      	ldr	r1, [pc, #36]	@ (8002048 <I2C_RequestMemoryRead+0x150>)
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fe61 	bl	8001cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800202a:	2800      	cmp	r0, #0
 800202c:	d099      	beq.n	8001f62 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800202e:	2001      	movs	r0, #1
 8002030:	e797      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800203a:	d002      	beq.n	8002042 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800203c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002040:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e78d      	b.n	8001f62 <I2C_RequestMemoryRead+0x6a>
 8002046:	bf00      	nop
 8002048:	00010002 	.word	0x00010002

0800204c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	4604      	mov	r4, r0
 8002050:	460d      	mov	r5, r1
 8002052:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f013 0f04 	tst.w	r3, #4
 800205c:	d121      	bne.n	80020a2 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff fdd6 	bl	8001c10 <I2C_IsAcknowledgeFailed>
 8002064:	b9f8      	cbnz	r0, 80020a6 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002066:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800206a:	d0f3      	beq.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206c:	f7ff fc56 	bl	800191c <HAL_GetTick>
 8002070:	1b80      	subs	r0, r0, r6
 8002072:	42a8      	cmp	r0, r5
 8002074:	d801      	bhi.n	800207a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002076:	2d00      	cmp	r5, #0
 8002078:	d1ec      	bne.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f013 0f04 	tst.w	r3, #4
 8002082:	d1e7      	bne.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002084:	2300      	movs	r3, #0
 8002086:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002088:	2220      	movs	r2, #32
 800208a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800209a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
 80020a0:	e000      	b.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80020a2:	2000      	movs	r0, #0
}
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	e7fc      	b.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080020aa <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	4604      	mov	r4, r0
 80020ae:	460d      	mov	r5, r1
 80020b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b2:	e014      	b.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020be:	2220      	movs	r2, #32
 80020c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80020ca:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80020cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
 80020d2:	e025      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020dc:	d010      	beq.n	8002100 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	6958      	ldr	r0, [r3, #20]
 80020e2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80020e6:	d11a      	bne.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020e8:	6958      	ldr	r0, [r3, #20]
 80020ea:	f010 0f10 	tst.w	r0, #16
 80020ee:	d1e1      	bne.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7ff fc14 	bl	800191c <HAL_GetTick>
 80020f4:	1b80      	subs	r0, r0, r6
 80020f6:	42a8      	cmp	r0, r5
 80020f8:	d8ec      	bhi.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80020fa:	2d00      	cmp	r5, #0
 80020fc:	d1ef      	bne.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80020fe:	e7e9      	b.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002100:	2300      	movs	r3, #0
 8002102:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002104:	2220      	movs	r2, #32
 8002106:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002110:	f042 0220 	orr.w	r2, r2, #32
 8002114:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002116:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
 800211c:	e000      	b.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 800211e:	2000      	movs	r0, #0
}
 8002120:	bd70      	pop	{r4, r5, r6, pc}
	...

08002124 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002124:	2800      	cmp	r0, #0
 8002126:	f000 80cc 	beq.w	80022c2 <HAL_I2C_Init+0x19e>
{
 800212a:	b570      	push	{r4, r5, r6, lr}
 800212c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002132:	2b00      	cmp	r3, #0
 8002134:	d077      	beq.n	8002226 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002136:	2324      	movs	r3, #36	@ 0x24
 8002138:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800213c:	6822      	ldr	r2, [r4, #0]
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002158:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800215a:	f000 fe0f 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215e:	6862      	ldr	r2, [r4, #4]
 8002160:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_I2C_Init+0x1a8>)
 8002162:	429a      	cmp	r2, r3
 8002164:	d864      	bhi.n	8002230 <HAL_I2C_Init+0x10c>
 8002166:	4b5a      	ldr	r3, [pc, #360]	@ (80022d0 <HAL_I2C_Init+0x1ac>)
 8002168:	4298      	cmp	r0, r3
 800216a:	bf8c      	ite	hi
 800216c:	2300      	movhi	r3, #0
 800216e:	2301      	movls	r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 80a8 	bne.w	80022c6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8002176:	4957      	ldr	r1, [pc, #348]	@ (80022d4 <HAL_I2C_Init+0x1b0>)
 8002178:	fba1 3100 	umull	r3, r1, r1, r0
 800217c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217e:	6825      	ldr	r5, [r4, #0]
 8002180:	686a      	ldr	r2, [r5, #4]
 8002182:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002186:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800218a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218c:	6821      	ldr	r1, [r4, #0]
 800218e:	6a0a      	ldr	r2, [r1, #32]
 8002190:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002194:	6866      	ldr	r6, [r4, #4]
 8002196:	4d4d      	ldr	r5, [pc, #308]	@ (80022cc <HAL_I2C_Init+0x1a8>)
 8002198:	42ae      	cmp	r6, r5
 800219a:	d84f      	bhi.n	800223c <HAL_I2C_Init+0x118>
 800219c:	3301      	adds	r3, #1
 800219e:	4313      	orrs	r3, r2
 80021a0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a2:	6821      	ldr	r1, [r4, #0]
 80021a4:	69ca      	ldr	r2, [r1, #28]
 80021a6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80021aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021ae:	6865      	ldr	r5, [r4, #4]
 80021b0:	4b46      	ldr	r3, [pc, #280]	@ (80022cc <HAL_I2C_Init+0x1a8>)
 80021b2:	429d      	cmp	r5, r3
 80021b4:	d84c      	bhi.n	8002250 <HAL_I2C_Init+0x12c>
 80021b6:	1e43      	subs	r3, r0, #1
 80021b8:	006d      	lsls	r5, r5, #1
 80021ba:	fbb3 f3f5 	udiv	r3, r3, r5
 80021be:	3301      	adds	r3, #1
 80021c0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80021c4:	4203      	tst	r3, r0
 80021c6:	d078      	beq.n	80022ba <HAL_I2C_Init+0x196>
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	431a      	orrs	r2, r3
 80021ce:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d0:	6821      	ldr	r1, [r4, #0]
 80021d2:	680b      	ldr	r3, [r1, #0]
 80021d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80021d8:	69e2      	ldr	r2, [r4, #28]
 80021da:	6a20      	ldr	r0, [r4, #32]
 80021dc:	4302      	orrs	r2, r0
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e2:	6821      	ldr	r1, [r4, #0]
 80021e4:	688b      	ldr	r3, [r1, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ee:	6922      	ldr	r2, [r4, #16]
 80021f0:	68e0      	ldr	r0, [r4, #12]
 80021f2:	4302      	orrs	r2, r0
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f8:	6821      	ldr	r1, [r4, #0]
 80021fa:	68cb      	ldr	r3, [r1, #12]
 80021fc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002200:	6962      	ldr	r2, [r4, #20]
 8002202:	69a0      	ldr	r0, [r4, #24]
 8002204:	4302      	orrs	r2, r0
 8002206:	4313      	orrs	r3, r2
 8002208:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	2000      	movs	r0, #0
 8002216:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002218:	2320      	movs	r3, #32
 800221a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002224:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002226:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800222a:	f7fe fdb5 	bl	8000d98 <HAL_I2C_MspInit>
 800222e:	e782      	b.n	8002136 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_I2C_Init+0x1b4>)
 8002232:	4298      	cmp	r0, r3
 8002234:	bf8c      	ite	hi
 8002236:	2300      	movhi	r3, #0
 8002238:	2301      	movls	r3, #1
 800223a:	e799      	b.n	8002170 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002240:	fb05 f303 	mul.w	r3, r5, r3
 8002244:	4d25      	ldr	r5, [pc, #148]	@ (80022dc <HAL_I2C_Init+0x1b8>)
 8002246:	fba5 5303 	umull	r5, r3, r5, r3
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	3301      	adds	r3, #1
 800224e:	e7a6      	b.n	800219e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	68a6      	ldr	r6, [r4, #8]
 8002252:	b9be      	cbnz	r6, 8002284 <HAL_I2C_Init+0x160>
 8002254:	1e43      	subs	r3, r0, #1
 8002256:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800225a:	fbb3 f3fc 	udiv	r3, r3, ip
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	bb43      	cbnz	r3, 80022be <HAL_I2C_Init+0x19a>
 800226c:	b9c6      	cbnz	r6, 80022a0 <HAL_I2C_Init+0x17c>
 800226e:	1e43      	subs	r3, r0, #1
 8002270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002274:	fbb3 f3f5 	udiv	r3, r3, r5
 8002278:	3301      	adds	r3, #1
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002282:	e7a3      	b.n	80021cc <HAL_I2C_Init+0xa8>
 8002284:	1e43      	subs	r3, r0, #1
 8002286:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800228a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800228e:	fbb3 f3fc 	udiv	r3, r3, ip
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	e7e4      	b.n	800226a <HAL_I2C_Init+0x146>
 80022a0:	1e43      	subs	r3, r0, #1
 80022a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022a6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022aa:	fbb3 f3f5 	udiv	r3, r3, r5
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b8:	e788      	b.n	80021cc <HAL_I2C_Init+0xa8>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e786      	b.n	80021cc <HAL_I2C_Init+0xa8>
 80022be:	2301      	movs	r3, #1
 80022c0:	e784      	b.n	80021cc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	4770      	bx	lr
    return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e7ac      	b.n	8002224 <HAL_I2C_Init+0x100>
 80022ca:	bf00      	nop
 80022cc:	000186a0 	.word	0x000186a0
 80022d0:	001e847f 	.word	0x001e847f
 80022d4:	431bde83 	.word	0x431bde83
 80022d8:	003d08ff 	.word	0x003d08ff
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_I2C_Mem_Write>:
{
 80022e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022e4:	b083      	sub	sp, #12
 80022e6:	4604      	mov	r4, r0
 80022e8:	460f      	mov	r7, r1
 80022ea:	4690      	mov	r8, r2
 80022ec:	4699      	mov	r9, r3
 80022ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fb14 	bl	800191c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80022f8:	2a20      	cmp	r2, #32
 80022fa:	d003      	beq.n	8002304 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80022fc:	2002      	movs	r0, #2
}
 80022fe:	b003      	add	sp, #12
 8002300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002304:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002306:	9000      	str	r0, [sp, #0]
 8002308:	2319      	movs	r3, #25
 800230a:	2201      	movs	r2, #1
 800230c:	494a      	ldr	r1, [pc, #296]	@ (8002438 <HAL_I2C_Mem_Write+0x158>)
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff fc97 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8002314:	2800      	cmp	r0, #0
 8002316:	f040 8089 	bne.w	800242c <HAL_I2C_Mem_Write+0x14c>
    __HAL_LOCK(hi2c);
 800231a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	f000 8086 	beq.w	8002430 <HAL_I2C_Mem_Write+0x150>
 8002324:	2301      	movs	r3, #1
 8002326:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f012 0f01 	tst.w	r2, #1
 8002332:	d103      	bne.n	800233c <HAL_I2C_Mem_Write+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002344:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002346:	2321      	movs	r3, #33	@ 0x21
 8002348:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800234c:	2340      	movs	r3, #64	@ 0x40
 800234e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002352:	2300      	movs	r3, #0
 8002354:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002358:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800235a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800235e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002360:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002362:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002364:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_I2C_Mem_Write+0x15c>)
 8002366:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002368:	9501      	str	r5, [sp, #4]
 800236a:	9600      	str	r6, [sp, #0]
 800236c:	464b      	mov	r3, r9
 800236e:	4642      	mov	r2, r8
 8002370:	4639      	mov	r1, r7
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff fd54 	bl	8001e20 <I2C_RequestMemoryWrite>
 8002378:	2800      	cmp	r0, #0
 800237a:	d15b      	bne.n	8002434 <HAL_I2C_Mem_Write+0x154>
    while (hi2c->XferSize > 0U)
 800237c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d035      	beq.n	80023ee <HAL_I2C_Mem_Write+0x10e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	462a      	mov	r2, r5
 8002384:	4631      	mov	r1, r6
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff fd1b 	bl	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	bb20      	cbnz	r0, 80023d8 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002396:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002398:	1c53      	adds	r3, r2, #1
 800239a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800239c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800239e:	3901      	subs	r1, #1
 80023a0:	b289      	uxth	r1, r1
 80023a2:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80023a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	6958      	ldr	r0, [r3, #20]
 80023b2:	f010 0f04 	tst.w	r0, #4
 80023b6:	d0e1      	beq.n	800237c <HAL_I2C_Mem_Write+0x9c>
 80023b8:	2900      	cmp	r1, #0
 80023ba:	d0df      	beq.n	800237c <HAL_I2C_Mem_Write+0x9c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023bc:	7852      	ldrb	r2, [r2, #1]
 80023be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023c2:	3301      	adds	r3, #1
 80023c4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80023c6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80023cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80023d6:	e7d1      	b.n	800237c <HAL_I2C_Mem_Write+0x9c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 80023de:	2001      	movs	r0, #1
 80023e0:	e78d      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e7f7      	b.n	80023de <HAL_I2C_Mem_Write+0xfe>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	462a      	mov	r2, r5
 80023f0:	4631      	mov	r1, r6
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff fe2a 	bl	800204c <I2C_WaitOnBTFFlagUntilTimeout>
 80023f8:	b150      	cbz	r0, 8002410 <HAL_I2C_Mem_Write+0x130>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Mem_Write+0x124>
      return HAL_ERROR;
 8002400:	2001      	movs	r0, #1
 8002402:	e77c      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e7f7      	b.n	8002400 <HAL_I2C_Mem_Write+0x120>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6813      	ldr	r3, [r2, #0]
 8002414:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002418:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	2320      	movs	r3, #32
 800241c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002426:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800242a:	e768      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 800242c:	2002      	movs	r0, #2
 800242e:	e766      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8002430:	2002      	movs	r0, #2
 8002432:	e764      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
 8002436:	e762      	b.n	80022fe <HAL_I2C_Mem_Write+0x1e>
 8002438:	00100002 	.word	0x00100002
 800243c:	ffff0000 	.word	0xffff0000

08002440 <HAL_I2C_Mem_Read>:
{
 8002440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002444:	b087      	sub	sp, #28
 8002446:	4604      	mov	r4, r0
 8002448:	460f      	mov	r7, r1
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fa64 	bl	800191c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002458:	2a20      	cmp	r2, #32
 800245a:	d004      	beq.n	8002466 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800245c:	2702      	movs	r7, #2
}
 800245e:	4638      	mov	r0, r7
 8002460:	b007      	add	sp, #28
 8002462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002466:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	9000      	str	r0, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	4989      	ldr	r1, [pc, #548]	@ (8002694 <HAL_I2C_Mem_Read+0x254>)
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff fbe6 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8002476:	2800      	cmp	r0, #0
 8002478:	f040 814e 	bne.w	8002718 <HAL_I2C_Mem_Read+0x2d8>
    __HAL_LOCK(hi2c);
 800247c:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	f000 814b 	beq.w	800271c <HAL_I2C_Mem_Read+0x2dc>
 8002486:	2301      	movs	r3, #1
 8002488:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f012 0f01 	tst.w	r2, #1
 8002494:	d103      	bne.n	800249e <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024a6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024a8:	2322      	movs	r3, #34	@ 0x22
 80024aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024ae:	2340      	movs	r3, #64	@ 0x40
 80024b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80024b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80024ba:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80024c0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024c4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c6:	4b74      	ldr	r3, [pc, #464]	@ (8002698 <HAL_I2C_Mem_Read+0x258>)
 80024c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ca:	9501      	str	r5, [sp, #4]
 80024cc:	9600      	str	r6, [sp, #0]
 80024ce:	464b      	mov	r3, r9
 80024d0:	4642      	mov	r2, r8
 80024d2:	4639      	mov	r1, r7
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff fd0f 	bl	8001ef8 <I2C_RequestMemoryRead>
 80024da:	4607      	mov	r7, r0
 80024dc:	2800      	cmp	r0, #0
 80024de:	f040 811f 	bne.w	8002720 <HAL_I2C_Mem_Read+0x2e0>
    if (hi2c->XferSize == 0U)
 80024e2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80024e4:	b95b      	cbnz	r3, 80024fe <HAL_I2C_Mem_Read+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	9202      	str	r2, [sp, #8]
 80024f2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e075      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
    else if (hi2c->XferSize == 1U)
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d00a      	beq.n	8002518 <HAL_I2C_Mem_Read+0xd8>
    else if (hi2c->XferSize == 2U)
 8002502:	2b02      	cmp	r3, #2
 8002504:	d01a      	beq.n	800253c <HAL_I2C_Mem_Read+0xfc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	9305      	str	r3, [sp, #20]
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	9205      	str	r2, [sp, #20]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	9305      	str	r3, [sp, #20]
 8002514:	9b05      	ldr	r3, [sp, #20]
 8002516:	e068      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002520:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	9303      	str	r3, [sp, #12]
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	9203      	str	r2, [sp, #12]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	9203      	str	r2, [sp, #12]
 8002530:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e056      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253c:	6822      	ldr	r2, [r4, #0]
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002544:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800254e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002550:	2300      	movs	r3, #0
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	9204      	str	r2, [sp, #16]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	9304      	str	r3, [sp, #16]
 800255e:	9b04      	ldr	r3, [sp, #16]
 8002560:	e043      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	462a      	mov	r2, r5
 8002564:	4631      	mov	r1, r6
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff fd9f 	bl	80020aa <I2C_WaitOnRXNEFlagUntilTimeout>
 800256c:	2800      	cmp	r0, #0
 800256e:	f040 80d9 	bne.w	8002724 <HAL_I2C_Mem_Read+0x2e4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002578:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800257a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002580:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002586:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29b      	uxth	r3, r3
 800258e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002590:	e02b      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002592:	9500      	str	r5, [sp, #0]
 8002594:	4633      	mov	r3, r6
 8002596:	2200      	movs	r2, #0
 8002598:	4940      	ldr	r1, [pc, #256]	@ (800269c <HAL_I2C_Mem_Read+0x25c>)
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff fb51 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	f040 80c1 	bne.w	8002728 <HAL_I2C_Mem_Read+0x2e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ae:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025b6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80025b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80025ba:	1c53      	adds	r3, r2, #1
 80025bc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80025be:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80025c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80025d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025d6:	3301      	adds	r3, #1
 80025d8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80025da:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80025e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808a 	beq.w	8002706 <HAL_I2C_Mem_Read+0x2c6>
      if (hi2c->XferSize <= 3U)
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d854      	bhi.n	80026a0 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d0b3      	beq.n	8002562 <HAL_I2C_Mem_Read+0x122>
        else if (hi2c->XferSize == 2U)
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d0c9      	beq.n	8002592 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025fe:	9500      	str	r5, [sp, #0]
 8002600:	4633      	mov	r3, r6
 8002602:	2200      	movs	r2, #0
 8002604:	4925      	ldr	r1, [pc, #148]	@ (800269c <HAL_I2C_Mem_Read+0x25c>)
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff fb1b 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 800260c:	2800      	cmp	r0, #0
 800260e:	f040 808d 	bne.w	800272c <HAL_I2C_Mem_Read+0x2ec>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	6813      	ldr	r3, [r2, #0]
 8002616:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800261a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002622:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002624:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002626:	3301      	adds	r3, #1
 8002628:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800262a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002630:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29b      	uxth	r3, r3
 8002638:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263a:	9500      	str	r5, [sp, #0]
 800263c:	4633      	mov	r3, r6
 800263e:	2200      	movs	r2, #0
 8002640:	4916      	ldr	r1, [pc, #88]	@ (800269c <HAL_I2C_Mem_Read+0x25c>)
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fafd 	bl	8001c42 <I2C_WaitOnFlagUntilTimeout>
 8002648:	2800      	cmp	r0, #0
 800264a:	d171      	bne.n	8002730 <HAL_I2C_Mem_Read+0x2f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002654:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800265c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800265e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002660:	1c53      	adds	r3, r2, #1
 8002662:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002664:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800266a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29b      	uxth	r3, r3
 8002672:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800267a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002680:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002686:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002690:	e7ab      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
 8002692:	bf00      	nop
 8002694:	00100002 	.word	0x00100002
 8002698:	ffff0000 	.word	0xffff0000
 800269c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	462a      	mov	r2, r5
 80026a2:	4631      	mov	r1, r6
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fd00 	bl	80020aa <I2C_WaitOnRXNEFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d142      	bne.n	8002734 <HAL_I2C_Mem_Read+0x2f4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80026bc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80026be:	3a01      	subs	r2, #1
 80026c0:	b292      	uxth	r2, r2
 80026c2:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80026c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	6959      	ldr	r1, [r3, #20]
 80026d2:	f011 0f04 	tst.w	r1, #4
 80026d6:	d088      	beq.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
          if (hi2c->XferSize == 3U)
 80026d8:	2a03      	cmp	r2, #3
 80026da:	d00f      	beq.n	80026fc <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80026e6:	3301      	adds	r3, #1
 80026e8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80026fa:	e776      	b.n	80025ea <HAL_I2C_Mem_Read+0x1aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e7ea      	b.n	80026dc <HAL_I2C_Mem_Read+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	2320      	movs	r3, #32
 8002708:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	2300      	movs	r3, #0
 800270e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002712:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002716:	e6a2      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8002718:	2702      	movs	r7, #2
 800271a:	e6a0      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800271c:	2702      	movs	r7, #2
 800271e:	e69e      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8002720:	2701      	movs	r7, #1
 8002722:	e69c      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002724:	2701      	movs	r7, #1
 8002726:	e69a      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002728:	2701      	movs	r7, #1
 800272a:	e698      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 800272c:	2701      	movs	r7, #1
 800272e:	e696      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8002730:	2701      	movs	r7, #1
 8002732:	e694      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8002734:	2701      	movs	r7, #1
 8002736:	e692      	b.n	800245e <HAL_I2C_Mem_Read+0x1e>

08002738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2100      	movs	r1, #0
 800273c:	9100      	str	r1, [sp, #0]
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_MspInit+0x34>)
 8002740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44
 8002748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800274a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	9101      	str	r1, [sp, #4]
 8002754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002756:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	b002      	add	sp, #8
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	2800      	cmp	r0, #0
 8002772:	f000 81e0 	beq.w	8002b36 <HAL_RCC_OscConfig+0x3c6>
{
 8002776:	b570      	push	{r4, r5, r6, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	f013 0f01 	tst.w	r3, #1
 8002782:	d03b      	beq.n	80027fc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002784:	4b9f      	ldr	r3, [pc, #636]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b04      	cmp	r3, #4
 800278e:	d02c      	beq.n	80027ea <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002790:	4b9c      	ldr	r3, [pc, #624]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002798:	2b08      	cmp	r3, #8
 800279a:	d021      	beq.n	80027e0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	6863      	ldr	r3, [r4, #4]
 800279e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a2:	d04f      	beq.n	8002844 <HAL_RCC_OscConfig+0xd4>
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a8:	d052      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
 80027aa:	4b96      	ldr	r3, [pc, #600]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027bc:	6863      	ldr	r3, [r4, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d050      	beq.n	8002864 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff f8ab 	bl	800191c <HAL_GetTick>
 80027c6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80027d0:	d114      	bne.n	80027fc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d2:	f7ff f8a3 	bl	800191c <HAL_GetTick>
 80027d6:	1b40      	subs	r0, r0, r5
 80027d8:	2864      	cmp	r0, #100	@ 0x64
 80027da:	d9f5      	bls.n	80027c8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80027dc:	2003      	movs	r0, #3
 80027de:	e1b1      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e0:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80027e8:	d0d8      	beq.n	800279c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	4b86      	ldr	r3, [pc, #536]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80027f2:	d003      	beq.n	80027fc <HAL_RCC_OscConfig+0x8c>
 80027f4:	6863      	ldr	r3, [r4, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 819f 	beq.w	8002b3a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f013 0f02 	tst.w	r3, #2
 8002802:	d054      	beq.n	80028ae <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002804:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f013 0f0c 	tst.w	r3, #12
 800280c:	d03e      	beq.n	800288c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d033      	beq.n	8002882 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281a:	68e3      	ldr	r3, [r4, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d068      	beq.n	80028f2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b79      	ldr	r3, [pc, #484]	@ (8002a08 <HAL_RCC_OscConfig+0x298>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7ff f879 	bl	800191c <HAL_GetTick>
 800282a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	4b75      	ldr	r3, [pc, #468]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f013 0f02 	tst.w	r3, #2
 8002834:	d154      	bne.n	80028e0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff f871 	bl	800191c <HAL_GetTick>
 800283a:	1b40      	subs	r0, r0, r5
 800283c:	2802      	cmp	r0, #2
 800283e:	d9f5      	bls.n	800282c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002840:	2003      	movs	r0, #3
 8002842:	e17f      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002844:	4a6f      	ldr	r2, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e7b5      	b.n	80027bc <HAL_RCC_OscConfig+0x4c>
 8002850:	4b6c      	ldr	r3, [pc, #432]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e7ab      	b.n	80027bc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002864:	f7ff f85a 	bl	800191c <HAL_GetTick>
 8002868:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002872:	d0c3      	beq.n	80027fc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f852 	bl	800191c <HAL_GetTick>
 8002878:	1b40      	subs	r0, r0, r5
 800287a:	2864      	cmp	r0, #100	@ 0x64
 800287c:	d9f5      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800287e:	2003      	movs	r0, #3
 8002880:	e160      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b60      	ldr	r3, [pc, #384]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800288a:	d1c6      	bne.n	800281a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f013 0f02 	tst.w	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_OscConfig+0x12e>
 8002896:	68e3      	ldr	r3, [r4, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 8150 	bne.w	8002b3e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4a59      	ldr	r2, [pc, #356]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80028a6:	6921      	ldr	r1, [r4, #16]
 80028a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028ac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	f013 0f08 	tst.w	r3, #8
 80028b4:	d042      	beq.n	800293c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	6963      	ldr	r3, [r4, #20]
 80028b8:	b36b      	cbz	r3, 8002916 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_OscConfig+0x298>)
 80028bc:	2201      	movs	r2, #1
 80028be:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7ff f82b 	bl	800191c <HAL_GetTick>
 80028c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80028ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028cc:	f013 0f02 	tst.w	r3, #2
 80028d0:	d134      	bne.n	800293c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d2:	f7ff f823 	bl	800191c <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	2802      	cmp	r0, #2
 80028da:	d9f5      	bls.n	80028c8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80028dc:	2003      	movs	r0, #3
 80028de:	e131      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4a48      	ldr	r2, [pc, #288]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80028e8:	6921      	ldr	r1, [r4, #16]
 80028ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e7dd      	b.n	80028ae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b45      	ldr	r3, [pc, #276]	@ (8002a08 <HAL_RCC_OscConfig+0x298>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028f8:	f7ff f810 	bl	800191c <HAL_GetTick>
 80028fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f013 0f02 	tst.w	r3, #2
 8002906:	d0d2      	beq.n	80028ae <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002908:	f7ff f808 	bl	800191c <HAL_GetTick>
 800290c:	1b40      	subs	r0, r0, r5
 800290e:	2802      	cmp	r0, #2
 8002910:	d9f5      	bls.n	80028fe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
 8002914:	e116      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <HAL_RCC_OscConfig+0x298>)
 8002918:	2200      	movs	r2, #0
 800291a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fffd 	bl	800191c <HAL_GetTick>
 8002922:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002928:	f013 0f02 	tst.w	r3, #2
 800292c:	d006      	beq.n	800293c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe fff5 	bl	800191c <HAL_GetTick>
 8002932:	1b40      	subs	r0, r0, r5
 8002934:	2802      	cmp	r0, #2
 8002936:	d9f5      	bls.n	8002924 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002938:	2003      	movs	r0, #3
 800293a:	e103      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	f013 0f04 	tst.w	r3, #4
 8002942:	d077      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002944:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800294c:	d133      	bne.n	80029b6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 8002954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002956:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002966:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b28      	ldr	r3, [pc, #160]	@ (8002a0c <HAL_RCC_OscConfig+0x29c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002970:	d023      	beq.n	80029ba <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002972:	68a3      	ldr	r3, [r4, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d034      	beq.n	80029e2 <HAL_RCC_OscConfig+0x272>
 8002978:	2b05      	cmp	r3, #5
 800297a:	d038      	beq.n	80029ee <HAL_RCC_OscConfig+0x27e>
 800297c:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 800297e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	671a      	str	r2, [r3, #112]	@ 0x70
 8002986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298e:	68a3      	ldr	r3, [r4, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03d      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe ffc2 	bl	800191c <HAL_GetTick>
 8002998:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f013 0f02 	tst.w	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe ffba 	bl	800191c <HAL_GetTick>
 80029a8:	1b80      	subs	r0, r0, r6
 80029aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029ae:	4298      	cmp	r0, r3
 80029b0:	d9f3      	bls.n	800299a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e0c6      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2500      	movs	r5, #0
 80029b8:	e7d6      	b.n	8002968 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <HAL_RCC_OscConfig+0x29c>)
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029c4:	f7fe ffaa 	bl	800191c <HAL_GetTick>
 80029c8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_RCC_OscConfig+0x29c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80029d2:	d1ce      	bne.n	8002972 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d4:	f7fe ffa2 	bl	800191c <HAL_GetTick>
 80029d8:	1b80      	subs	r0, r0, r6
 80029da:	2802      	cmp	r0, #2
 80029dc:	d9f5      	bls.n	80029ca <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80029de:	2003      	movs	r0, #3
 80029e0:	e0b0      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80029e4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	e7cf      	b.n	800298e <HAL_RCC_OscConfig+0x21e>
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCC_OscConfig+0x294>)
 80029f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029f2:	f042 0204 	orr.w	r2, r2, #4
 80029f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80029f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a00:	e7c5      	b.n	800298e <HAL_RCC_OscConfig+0x21e>
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	42470000 	.word	0x42470000
 8002a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7fe ff84 	bl	800191c <HAL_GetTick>
 8002a14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f013 0f02 	tst.w	r3, #2
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe ff7c 	bl	800191c <HAL_GetTick>
 8002a24:	1b80      	subs	r0, r0, r6
 8002a26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a2a:	4298      	cmp	r0, r3
 8002a2c:	d9f3      	bls.n	8002a16 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	e088      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a32:	b9ed      	cbnz	r5, 8002a70 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	69a3      	ldr	r3, [r4, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8083 	beq.w	8002b42 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3c:	4a48      	ldr	r2, [pc, #288]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	f002 020c 	and.w	r2, r2, #12
 8002a44:	2a08      	cmp	r2, #8
 8002a46:	d051      	beq.n	8002aec <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d017      	beq.n	8002a7c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b45      	ldr	r3, [pc, #276]	@ (8002b64 <HAL_RCC_OscConfig+0x3f4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe ff63 	bl	800191c <HAL_GetTick>
 8002a56:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a58:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a60:	d042      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe ff5b 	bl	800191c <HAL_GetTick>
 8002a66:	1b00      	subs	r0, r0, r4
 8002a68:	2802      	cmp	r0, #2
 8002a6a:	d9f5      	bls.n	8002a58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e069      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4a3b      	ldr	r2, [pc, #236]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002a72:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7a:	e7db      	b.n	8002a34 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_RCC_OscConfig+0x3f4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002a82:	f7fe ff4b 	bl	800191c <HAL_GetTick>
 8002a86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a88:	4b35      	ldr	r3, [pc, #212]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a90:	d006      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe ff43 	bl	800191c <HAL_GetTick>
 8002a96:	1b40      	subs	r0, r0, r5
 8002a98:	2802      	cmp	r0, #2
 8002a9a:	d9f5      	bls.n	8002a88 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	e051      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa0:	69e3      	ldr	r3, [r4, #28]
 8002aa2:	6a22      	ldr	r2, [r4, #32]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002aa8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002aac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002aae:	0852      	lsrs	r2, r2, #1
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ab6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002ab8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002abc:	4a28      	ldr	r2, [pc, #160]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002abe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <HAL_RCC_OscConfig+0x3f4>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ac6:	f7fe ff29 	bl	800191c <HAL_GetTick>
 8002aca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe ff21 	bl	800191c <HAL_GetTick>
 8002ada:	1b00      	subs	r0, r0, r4
 8002adc:	2802      	cmp	r0, #2
 8002ade:	d9f5      	bls.n	8002acc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	e02f      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e02b      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d02b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x3f0>)
 8002af2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002af8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afa:	4291      	cmp	r1, r2
 8002afc:	d126      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b02:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	428a      	cmp	r2, r1
 8002b06:	d123      	bne.n	8002b50 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002b0e:	401a      	ands	r2, r3
 8002b10:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002b14:	d11e      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b16:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002b1a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b20:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b26:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002b2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002b30:	d114      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002b32:	2000      	movs	r0, #0
 8002b34:	e006      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
}
 8002b38:	4770      	bx	lr
        return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e002      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
}
 8002b44:	b002      	add	sp, #8
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002b48:	2001      	movs	r0, #1
 8002b4a:	e7fb      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	e7f9      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002b50:	2001      	movs	r0, #1
 8002b52:	e7f7      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002b54:	2001      	movs	r0, #1
 8002b56:	e7f5      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002b58:	2001      	movs	r0, #1
 8002b5a:	e7f3      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	e7f1      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d4>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	42470000 	.word	0x42470000

08002b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d041      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x92>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d141      	bne.n	8002bfe <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b88:	d012      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002b92:	481d      	ldr	r0, [pc, #116]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b94:	2300      	movs	r3, #0
 8002b96:	fba1 0100 	umull	r0, r1, r1, r0
 8002b9a:	f7fe f83d 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002baa:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bae:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb2:	6858      	ldr	r0, [r3, #4]
 8002bb4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002bb8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002bbc:	ebbc 0c00 	subs.w	ip, ip, r0
 8002bc0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002bc4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002bc8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002bcc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002bd0:	ebb1 010c 	subs.w	r1, r1, ip
 8002bd4:	eb63 030e 	sbc.w	r3, r3, lr
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bde:	00c9      	lsls	r1, r1, #3
 8002be0:	eb11 0c00 	adds.w	ip, r1, r0
 8002be4:	f143 0300 	adc.w	r3, r3, #0
 8002be8:	0299      	lsls	r1, r3, #10
 8002bea:	2300      	movs	r3, #0
 8002bec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002bf0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002bf4:	f7fe f810 	bl	8000c18 <__aeabi_uldivmod>
 8002bf8:	e7d1      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002bfa:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bfc:	e7d7      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfe:	4803      	ldr	r0, [pc, #12]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002c00:	e7d5      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x46>
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	017d7840 	.word	0x017d7840
 8002c0c:	00f42400 	.word	0x00f42400

08002c10 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c10:	2800      	cmp	r0, #0
 8002c12:	f000 809b 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x13c>
{
 8002c16:	b570      	push	{r4, r5, r6, lr}
 8002c18:	460d      	mov	r5, r1
 8002c1a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d5c <HAL_RCC_ClockConfig+0x14c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d208      	bcs.n	8002c3a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c28:	b2cb      	uxtb	r3, r1
 8002c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d5c <HAL_RCC_ClockConfig+0x14c>)
 8002c2c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	428b      	cmp	r3, r1
 8002c36:	f040 808b 	bne.w	8002d50 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	f013 0f02 	tst.w	r3, #2
 8002c40:	d017      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c42:	f013 0f04 	tst.w	r3, #4
 8002c46:	d004      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4a45      	ldr	r2, [pc, #276]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002c4a:	6893      	ldr	r3, [r2, #8]
 8002c4c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c50:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f013 0f08 	tst.w	r3, #8
 8002c58:	d004      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5a:	4a41      	ldr	r2, [pc, #260]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002c5c:	6893      	ldr	r3, [r2, #8]
 8002c5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c62:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4a3e      	ldr	r2, [pc, #248]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002c66:	6893      	ldr	r3, [r2, #8]
 8002c68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c6c:	68a1      	ldr	r1, [r4, #8]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f013 0f01 	tst.w	r3, #1
 8002c78:	d032      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d021      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c80:	1e9a      	subs	r2, r3, #2
 8002c82:	2a01      	cmp	r2, #1
 8002c84:	d925      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4a36      	ldr	r2, [pc, #216]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	f012 0f02 	tst.w	r2, #2
 8002c8e:	d061      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c90:	4933      	ldr	r1, [pc, #204]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002c92:	688a      	ldr	r2, [r1, #8]
 8002c94:	f022 0203 	bic.w	r2, r2, #3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fe3e 	bl	800191c <HAL_GetTick>
 8002ca0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	6862      	ldr	r2, [r4, #4]
 8002cac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7fe fe33 	bl	800191c <HAL_GetTick>
 8002cb6:	1b80      	subs	r0, r0, r6
 8002cb8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cbc:	4298      	cmp	r0, r3
 8002cbe:	d9f0      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e042      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc4:	4a26      	ldr	r2, [pc, #152]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002ccc:	d1e0      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002cce:	2001      	movs	r0, #1
 8002cd0:	e03b      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002cda:	d1d9      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e034      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <HAL_RCC_ClockConfig+0x14c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	42ab      	cmp	r3, r5
 8002cea:	d907      	bls.n	8002cfc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cec:	b2ea      	uxtb	r2, r5
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_ClockConfig+0x14c>)
 8002cf0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	d12d      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	f013 0f04 	tst.w	r3, #4
 8002d02:	d006      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4a16      	ldr	r2, [pc, #88]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002d06:	6893      	ldr	r3, [r2, #8]
 8002d08:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002d0c:	68e1      	ldr	r1, [r4, #12]
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	f013 0f08 	tst.w	r3, #8
 8002d18:	d007      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002d1c:	6893      	ldr	r3, [r2, #8]
 8002d1e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002d22:	6921      	ldr	r1, [r4, #16]
 8002d24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d28:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f7ff ff1d 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <HAL_RCC_ClockConfig+0x150>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d36:	4a0b      	ldr	r2, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x154>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	40d8      	lsrs	r0, r3
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x158>)
 8002d3e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x15c>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	f7fe fd9e 	bl	8001884 <HAL_InitTick>
  return HAL_OK;
 8002d48:	2000      	movs	r0, #0
}
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d4c:	2001      	movs	r0, #1
}
 8002d4e:	4770      	bx	lr
      return HAL_ERROR;
 8002d50:	2001      	movs	r0, #1
 8002d52:	e7fa      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002d54:	2001      	movs	r0, #1
 8002d56:	e7f8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e7f6      	b.n	8002d4a <HAL_RCC_ClockConfig+0x13a>
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08006fbc 	.word	0x08006fbc
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002d70:	4b01      	ldr	r3, [pc, #4]	@ (8002d78 <HAL_RCC_GetHCLKFreq+0x8>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000008 	.word	0x20000008

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d7e:	f7ff fff7 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002d8a:	4a03      	ldr	r2, [pc, #12]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d8e:	40d8      	lsrs	r0, r3
 8002d90:	bd08      	pop	{r3, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	08006fb4 	.word	0x08006fb4

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d9e:	f7ff ffe7 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002daa:	4a03      	ldr	r2, [pc, #12]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
}
 8002dae:	40d8      	lsrs	r0, r3
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08006fb4 	.word	0x08006fb4

08002dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc0:	6a03      	ldr	r3, [r0, #32]
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dca:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dcc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	680c      	ldr	r4, [r1, #0]
 8002dd2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dd4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd8:	688b      	ldr	r3, [r1, #8]
 8002dda:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8002e0c <TIM_OC1_SetConfig+0x50>)
 8002dde:	4290      	cmp	r0, r2
 8002de0:	d006      	beq.n	8002df0 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002de4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002de6:	684a      	ldr	r2, [r1, #4]
 8002de8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dea:	6203      	str	r3, [r0, #32]
}
 8002dec:	bc30      	pop	{r4, r5}
 8002dee:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002df0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002df4:	68ca      	ldr	r2, [r1, #12]
 8002df6:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df8:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dfc:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002e00:	694a      	ldr	r2, [r1, #20]
 8002e02:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e04:	698d      	ldr	r5, [r1, #24]
 8002e06:	4315      	orrs	r5, r2
 8002e08:	e7eb      	b.n	8002de2 <TIM_OC1_SetConfig+0x26>
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000

08002e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e10:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e12:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e14:	6a02      	ldr	r2, [r0, #32]
 8002e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e1a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e20:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e24:	680d      	ldr	r5, [r1, #0]
 8002e26:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2c:	688a      	ldr	r2, [r1, #8]
 8002e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e32:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <TIM_OC3_SetConfig+0x58>)
 8002e34:	4290      	cmp	r0, r2
 8002e36:	d006      	beq.n	8002e46 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e3a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e3c:	684a      	ldr	r2, [r1, #4]
 8002e3e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	6203      	str	r3, [r0, #32]
}
 8002e42:	bc30      	pop	{r4, r5}
 8002e44:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e4a:	68ca      	ldr	r2, [r1, #12]
 8002e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e54:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e58:	694a      	ldr	r2, [r1, #20]
 8002e5a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e5e:	698a      	ldr	r2, [r1, #24]
 8002e60:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002e64:	e7e8      	b.n	8002e38 <TIM_OC3_SetConfig+0x28>
 8002e66:	bf00      	nop
 8002e68:	40010000 	.word	0x40010000

08002e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e70:	6a02      	ldr	r2, [r0, #32]
 8002e72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e76:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e7c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e80:	680d      	ldr	r5, [r1, #0]
 8002e82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e8a:	688d      	ldr	r5, [r1, #8]
 8002e8c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e90:	4d07      	ldr	r5, [pc, #28]	@ (8002eb0 <TIM_OC4_SetConfig+0x44>)
 8002e92:	42a8      	cmp	r0, r5
 8002e94:	d006      	beq.n	8002ea4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e98:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e9a:	684a      	ldr	r2, [r1, #4]
 8002e9c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	6203      	str	r3, [r0, #32]
}
 8002ea0:	bc30      	pop	{r4, r5}
 8002ea2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ea8:	694d      	ldr	r5, [r1, #20]
 8002eaa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002eae:	e7f2      	b.n	8002e96 <TIM_OC4_SetConfig+0x2a>
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb8:	6a04      	ldr	r4, [r0, #32]
 8002eba:	f024 0401 	bic.w	r4, r4, #1
 8002ebe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eca:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002ece:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ed2:	6203      	str	r3, [r0, #32]
}
 8002ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eda:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ede:	6a04      	ldr	r4, [r0, #32]
 8002ee0:	f024 0410 	bic.w	r4, r4, #16
 8002ee4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee8:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eec:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002efa:	6203      	str	r3, [r0, #32]
}
 8002efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f02:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0e:	6083      	str	r3, [r0, #8]
}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_PWM_MspInit>:
}
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PeriodElapsedCallback>:
}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_IC_CaptureCallback>:
}
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_TriggerCallback>:
}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_IRQHandler>:
{
 8002f1e:	b570      	push	{r4, r5, r6, lr}
 8002f20:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f26:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f28:	f015 0f02 	tst.w	r5, #2
 8002f2c:	d010      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f2e:	f016 0f02 	tst.w	r6, #2
 8002f32:	d00d      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f34:	f06f 0202 	mvn.w	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3e:	6803      	ldr	r3, [r0, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f013 0f03 	tst.w	r3, #3
 8002f46:	d05e      	beq.n	8003006 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f48:	f7ff ffe6 	bl	8002f18 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f50:	f015 0f04 	tst.w	r5, #4
 8002f54:	d012      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f56:	f016 0f04 	tst.w	r6, #4
 8002f5a:	d00f      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	f06f 0204 	mvn.w	r2, #4
 8002f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f64:	2302      	movs	r3, #2
 8002f66:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002f70:	d04f      	beq.n	8003012 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff ffd0 	bl	8002f18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f7c:	f015 0f08 	tst.w	r5, #8
 8002f80:	d012      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f82:	f016 0f08 	tst.w	r6, #8
 8002f86:	d00f      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	f06f 0208 	mvn.w	r2, #8
 8002f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f90:	2304      	movs	r3, #4
 8002f92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f013 0f03 	tst.w	r3, #3
 8002f9c:	d040      	beq.n	8003020 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff ffba 	bl	8002f18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa8:	f015 0f10 	tst.w	r5, #16
 8002fac:	d012      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fae:	f016 0f10 	tst.w	r6, #16
 8002fb2:	d00f      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	f06f 0210 	mvn.w	r2, #16
 8002fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002fc8:	d031      	beq.n	800302e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f7ff ffa4 	bl	8002f18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fd4:	f015 0f01 	tst.w	r5, #1
 8002fd8:	d002      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fda:	f016 0f01 	tst.w	r6, #1
 8002fde:	d12d      	bne.n	800303c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fe0:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002fe4:	d002      	beq.n	8002fec <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe6:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002fea:	d12f      	bne.n	800304c <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fec:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002ff0:	d002      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ff2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002ff6:	d131      	bne.n	800305c <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ff8:	f015 0f20 	tst.w	r5, #32
 8002ffc:	d002      	beq.n	8003004 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ffe:	f016 0f20 	tst.w	r6, #32
 8003002:	d133      	bne.n	800306c <HAL_TIM_IRQHandler+0x14e>
}
 8003004:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	f7ff ff86 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	4620      	mov	r0, r4
 800300c:	f7ff ff85 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
 8003010:	e79c      	b.n	8002f4c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	4620      	mov	r0, r4
 8003014:	f7ff ff7f 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff ff7e 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
 800301e:	e7ab      	b.n	8002f78 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff ff78 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff ff77 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
 800302c:	e7ba      	b.n	8002fa4 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff ff71 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff ff70 	bl	8002f1a <HAL_TIM_PWM_PulseFinishedCallback>
 800303a:	e7c9      	b.n	8002fd0 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	f06f 0201 	mvn.w	r2, #1
 8003042:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003044:	4620      	mov	r0, r4
 8003046:	f7ff ff65 	bl	8002f14 <HAL_TIM_PeriodElapsedCallback>
 800304a:	e7c9      	b.n	8002fe0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003052:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003054:	4620      	mov	r0, r4
 8003056:	f000 fad1 	bl	80035fc <HAL_TIMEx_BreakCallback>
 800305a:	e7c7      	b.n	8002fec <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003062:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff ff59 	bl	8002f1c <HAL_TIM_TriggerCallback>
 800306a:	e7c5      	b.n	8002ff8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003074:	4620      	mov	r0, r4
 8003076:	f000 fac0 	bl	80035fa <HAL_TIMEx_CommutCallback>
}
 800307a:	e7c3      	b.n	8003004 <HAL_TIM_IRQHandler+0xe6>

0800307c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800307c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307e:	4a29      	ldr	r2, [pc, #164]	@ (8003124 <TIM_Base_SetConfig+0xa8>)
 8003080:	4290      	cmp	r0, r2
 8003082:	d00e      	beq.n	80030a2 <TIM_Base_SetConfig+0x26>
 8003084:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0x26>
 800308a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800308e:	4290      	cmp	r0, r2
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x26>
 8003092:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003096:	4290      	cmp	r0, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x26>
 800309a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800309e:	4290      	cmp	r0, r2
 80030a0:	d103      	bne.n	80030aa <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80030a6:	684a      	ldr	r2, [r1, #4]
 80030a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003124 <TIM_Base_SetConfig+0xa8>)
 80030ac:	4290      	cmp	r0, r2
 80030ae:	d01a      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030b0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80030b4:	d017      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030b6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80030ba:	4290      	cmp	r0, r2
 80030bc:	d013      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030c2:	4290      	cmp	r0, r2
 80030c4:	d00f      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030ca:	4290      	cmp	r0, r2
 80030cc:	d00b      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030ce:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030da:	4290      	cmp	r0, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x6a>
 80030de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030e2:	4290      	cmp	r0, r2
 80030e4:	d103      	bne.n	80030ee <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	68ca      	ldr	r2, [r1, #12]
 80030ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f2:	694a      	ldr	r2, [r1, #20]
 80030f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	688b      	ldr	r3, [r1, #8]
 80030fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80030fc:	680b      	ldr	r3, [r1, #0]
 80030fe:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003100:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <TIM_Base_SetConfig+0xa8>)
 8003102:	4298      	cmp	r0, r3
 8003104:	d00a      	beq.n	800311c <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8003106:	2301      	movs	r3, #1
 8003108:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800310a:	6903      	ldr	r3, [r0, #16]
 800310c:	f013 0f01 	tst.w	r3, #1
 8003110:	d003      	beq.n	800311a <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003112:	6903      	ldr	r3, [r0, #16]
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6103      	str	r3, [r0, #16]
}
 800311a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	690b      	ldr	r3, [r1, #16]
 800311e:	6303      	str	r3, [r0, #48]	@ 0x30
 8003120:	e7f1      	b.n	8003106 <TIM_Base_SetConfig+0x8a>
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000

08003128 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003128:	b340      	cbz	r0, 800317c <HAL_TIM_Base_Init+0x54>
{
 800312a:	b510      	push	{r4, lr}
 800312c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003132:	b1f3      	cbz	r3, 8003172 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	2302      	movs	r3, #2
 8003136:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313a:	4621      	mov	r1, r4
 800313c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003140:	f7ff ff9c 	bl	800307c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	2301      	movs	r3, #1
 8003146:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800314e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003152:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003156:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800315e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003162:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003166:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800316a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800316e:	2000      	movs	r0, #0
}
 8003170:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003172:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003176:	f000 fc65 	bl	8003a44 <HAL_TIM_Base_MspInit>
 800317a:	e7db      	b.n	8003134 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
}
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003180:	b340      	cbz	r0, 80031d4 <HAL_TIM_PWM_Init+0x54>
{
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003186:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800318a:	b1f3      	cbz	r3, 80031ca <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003192:	4621      	mov	r1, r4
 8003194:	f851 0b04 	ldr.w	r0, [r1], #4
 8003198:	f7ff ff70 	bl	800307c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800319c:	2301      	movs	r3, #1
 800319e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80031a6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80031aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80031ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80031be:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80031c6:	2000      	movs	r0, #0
}
 80031c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80031ca:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80031ce:	f7ff fea0 	bl	8002f12 <HAL_TIM_PWM_MspInit>
 80031d2:	e7db      	b.n	800318c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
}
 80031d6:	4770      	bx	lr

080031d8 <TIM_OC2_SetConfig>:
{
 80031d8:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80031da:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031dc:	6a02      	ldr	r2, [r0, #32]
 80031de:	f022 0210 	bic.w	r2, r2, #16
 80031e2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80031e4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80031e6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	680d      	ldr	r5, [r1, #0]
 80031ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80031f2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031f6:	688d      	ldr	r5, [r1, #8]
 80031f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003230 <TIM_OC2_SetConfig+0x58>)
 80031fe:	42a8      	cmp	r0, r5
 8003200:	d006      	beq.n	8003210 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003202:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003204:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003206:	684a      	ldr	r2, [r1, #4]
 8003208:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800320a:	6203      	str	r3, [r0, #32]
}
 800320c:	bc30      	pop	{r4, r5}
 800320e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003214:	68cd      	ldr	r5, [r1, #12]
 8003216:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800321a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800321e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003222:	694d      	ldr	r5, [r1, #20]
 8003224:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003228:	698d      	ldr	r5, [r1, #24]
 800322a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800322e:	e7e8      	b.n	8003202 <TIM_OC2_SetConfig+0x2a>
 8003230:	40010000 	.word	0x40010000

08003234 <HAL_TIM_PWM_ConfigChannel>:
{
 8003234:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003236:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d066      	beq.n	800330c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800323e:	4604      	mov	r4, r0
 8003240:	460d      	mov	r5, r1
 8003242:	2301      	movs	r3, #1
 8003244:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003248:	2a0c      	cmp	r2, #12
 800324a:	d85a      	bhi.n	8003302 <HAL_TIM_PWM_ConfigChannel+0xce>
 800324c:	e8df f002 	tbb	[pc, r2]
 8003250:	59595907 	.word	0x59595907
 8003254:	5959591b 	.word	0x5959591b
 8003258:	59595930 	.word	0x59595930
 800325c:	44          	.byte	0x44
 800325d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	f7ff fdac 	bl	8002dbc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	6993      	ldr	r3, [r2, #24]
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	6993      	ldr	r3, [r2, #24]
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	6993      	ldr	r3, [r2, #24]
 800327c:	6929      	ldr	r1, [r5, #16]
 800327e:	430b      	orrs	r3, r1
 8003280:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2000      	movs	r0, #0
      break;
 8003284:	e03e      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003286:	6800      	ldr	r0, [r0, #0]
 8003288:	f7ff ffa6 	bl	80031d8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	6993      	ldr	r3, [r2, #24]
 8003290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003294:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	6993      	ldr	r3, [r2, #24]
 800329a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800329e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	6993      	ldr	r3, [r2, #24]
 80032a4:	6929      	ldr	r1, [r5, #16]
 80032a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032aa:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2000      	movs	r0, #0
      break;
 80032ae:	e029      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032b0:	6800      	ldr	r0, [r0, #0]
 80032b2:	f7ff fdad 	bl	8002e10 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	69d3      	ldr	r3, [r2, #28]
 80032ba:	f043 0308 	orr.w	r3, r3, #8
 80032be:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	69d3      	ldr	r3, [r2, #28]
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	69d3      	ldr	r3, [r2, #28]
 80032ce:	6929      	ldr	r1, [r5, #16]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2000      	movs	r0, #0
      break;
 80032d6:	e015      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d8:	6800      	ldr	r0, [r0, #0]
 80032da:	f7ff fdc7 	bl	8002e6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	69d3      	ldr	r3, [r2, #28]
 80032e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e8:	6822      	ldr	r2, [r4, #0]
 80032ea:	69d3      	ldr	r3, [r2, #28]
 80032ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	69d3      	ldr	r3, [r2, #28]
 80032f6:	6929      	ldr	r1, [r5, #16]
 80032f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032fc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2000      	movs	r0, #0
      break;
 8003300:	e000      	b.n	8003304 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003302:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003304:	2300      	movs	r3, #0
 8003306:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800330a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800330c:	2002      	movs	r0, #2
 800330e:	e7fc      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0xd6>

08003310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003310:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003312:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003318:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800331c:	430a      	orrs	r2, r1
 800331e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003322:	6082      	str	r2, [r0, #8]
}
 8003324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800332a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d078      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003332:	b510      	push	{r4, lr}
 8003334:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003336:	2301      	movs	r3, #1
 8003338:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003342:	6802      	ldr	r2, [r0, #0]
 8003344:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800334a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800334e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003350:	680b      	ldr	r3, [r1, #0]
 8003352:	2b60      	cmp	r3, #96	@ 0x60
 8003354:	d04c      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0xc6>
 8003356:	d823      	bhi.n	80033a0 <HAL_TIM_ConfigClockSource+0x76>
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d054      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xdc>
 800335c:	d811      	bhi.n	8003382 <HAL_TIM_ConfigClockSource+0x58>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d003      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x40>
 8003362:	d80a      	bhi.n	800337a <HAL_TIM_ConfigClockSource+0x50>
 8003364:	b10b      	cbz	r3, 800336a <HAL_TIM_ConfigClockSource+0x40>
 8003366:	2b10      	cmp	r3, #16
 8003368:	d105      	bne.n	8003376 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336a:	4619      	mov	r1, r3
 800336c:	6820      	ldr	r0, [r4, #0]
 800336e:	f7ff fdc8 	bl	8002f02 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2000      	movs	r0, #0
      break;
 8003374:	e028      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003376:	2001      	movs	r0, #1
 8003378:	e026      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800337a:	2b30      	cmp	r3, #48	@ 0x30
 800337c:	d0f5      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800337e:	2001      	movs	r0, #1
 8003380:	e022      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003382:	2b50      	cmp	r3, #80	@ 0x50
 8003384:	d10a      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	68ca      	ldr	r2, [r1, #12]
 8003388:	6849      	ldr	r1, [r1, #4]
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	f7ff fd92 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	2150      	movs	r1, #80	@ 0x50
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	f7ff fdb5 	bl	8002f02 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003398:	2000      	movs	r0, #0
      break;
 800339a:	e015      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e013      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a4:	d03a      	beq.n	800341c <HAL_TIM_ConfigClockSource+0xf2>
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033aa:	d014      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xac>
 80033ac:	2b70      	cmp	r3, #112	@ 0x70
 80033ae:	d137      	bne.n	8003420 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80033b0:	68cb      	ldr	r3, [r1, #12]
 80033b2:	684a      	ldr	r2, [r1, #4]
 80033b4:	6889      	ldr	r1, [r1, #8]
 80033b6:	6800      	ldr	r0, [r0, #0]
 80033b8:	f7ff ffaa 	bl	8003310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80033c4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80033ce:	2300      	movs	r3, #0
 80033d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80033d4:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	68cb      	ldr	r3, [r1, #12]
 80033d8:	684a      	ldr	r2, [r1, #4]
 80033da:	6889      	ldr	r1, [r1, #8]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f7ff ff97 	bl	8003310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ea:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2000      	movs	r0, #0
      break;
 80033ee:	e7eb      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f0:	68ca      	ldr	r2, [r1, #12]
 80033f2:	6849      	ldr	r1, [r1, #4]
 80033f4:	6800      	ldr	r0, [r0, #0]
 80033f6:	f7ff fd70 	bl	8002eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033fa:	2160      	movs	r1, #96	@ 0x60
 80033fc:	6820      	ldr	r0, [r4, #0]
 80033fe:	f7ff fd80 	bl	8002f02 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2000      	movs	r0, #0
      break;
 8003404:	e7e0      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	68ca      	ldr	r2, [r1, #12]
 8003408:	6849      	ldr	r1, [r1, #4]
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	f7ff fd52 	bl	8002eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003410:	2140      	movs	r1, #64	@ 0x40
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f7ff fd75 	bl	8002f02 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003418:	2000      	movs	r0, #0
      break;
 800341a:	e7d5      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800341c:	2000      	movs	r0, #0
 800341e:	e7d3      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003420:	2001      	movs	r0, #1
 8003422:	e7d1      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003424:	2002      	movs	r0, #2
}
 8003426:	4770      	bx	lr

08003428 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003428:	f001 011f 	and.w	r1, r1, #31
 800342c:	f04f 0c01 	mov.w	ip, #1
 8003430:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003434:	6a03      	ldr	r3, [r0, #32]
 8003436:	ea23 030c 	bic.w	r3, r3, ip
 800343a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800343c:	6a03      	ldr	r3, [r0, #32]
 800343e:	408a      	lsls	r2, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	6203      	str	r3, [r0, #32]
}
 8003444:	4770      	bx	lr
	...

08003448 <HAL_TIM_PWM_Start>:
{
 8003448:	b510      	push	{r4, lr}
 800344a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800344c:	4608      	mov	r0, r1
 800344e:	bb89      	cbnz	r1, 80034b4 <HAL_TIM_PWM_Start+0x6c>
 8003450:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003454:	3b01      	subs	r3, #1
 8003456:	bf18      	it	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d160      	bne.n	8003520 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	2800      	cmp	r0, #0
 8003460:	d13e      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x98>
 8003462:	2302      	movs	r3, #2
 8003464:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003468:	2201      	movs	r2, #1
 800346a:	4601      	mov	r1, r0
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	f7ff ffdb 	bl	8003428 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	4a2c      	ldr	r2, [pc, #176]	@ (8003528 <HAL_TIM_PWM_Start+0xe0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d042      	beq.n	8003500 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <HAL_TIM_PWM_Start+0xe0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d043      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003486:	d040      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
 8003488:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800348c:	4293      	cmp	r3, r2
 800348e:	d03c      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
 8003490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003494:	4293      	cmp	r3, r2
 8003496:	d038      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
 8003498:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800349c:	4293      	cmp	r3, r2
 800349e:	d034      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
 80034a0:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d030      	beq.n	800350a <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80034b0:	2000      	movs	r0, #0
 80034b2:	e034      	b.n	800351e <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b4:	2904      	cmp	r1, #4
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_PWM_Start+0x80>
 80034b8:	2908      	cmp	r1, #8
 80034ba:	d00b      	beq.n	80034d4 <HAL_TIM_PWM_Start+0x8c>
 80034bc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80034c0:	3b01      	subs	r3, #1
 80034c2:	bf18      	it	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	e7c8      	b.n	800345a <HAL_TIM_PWM_Start+0x12>
 80034c8:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80034cc:	3b01      	subs	r3, #1
 80034ce:	bf18      	it	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	e7c2      	b.n	800345a <HAL_TIM_PWM_Start+0x12>
 80034d4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80034d8:	3b01      	subs	r3, #1
 80034da:	bf18      	it	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	e7bc      	b.n	800345a <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e0:	2804      	cmp	r0, #4
 80034e2:	d005      	beq.n	80034f0 <HAL_TIM_PWM_Start+0xa8>
 80034e4:	2808      	cmp	r0, #8
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_PWM_Start+0xb0>
 80034e8:	2302      	movs	r3, #2
 80034ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80034ee:	e7bb      	b.n	8003468 <HAL_TIM_PWM_Start+0x20>
 80034f0:	2302      	movs	r3, #2
 80034f2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80034f6:	e7b7      	b.n	8003468 <HAL_TIM_PWM_Start+0x20>
 80034f8:	2302      	movs	r3, #2
 80034fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80034fe:	e7b3      	b.n	8003468 <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8003500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44
 8003508:	e7b7      	b.n	800347a <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003510:	2a06      	cmp	r2, #6
 8003512:	d007      	beq.n	8003524 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800351c:	2000      	movs	r0, #0
}
 800351e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e7fc      	b.n	800351e <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8003524:	2000      	movs	r0, #0
 8003526:	e7fa      	b.n	800351e <HAL_TIM_PWM_Start+0xd6>
 8003528:	40010000 	.word	0x40010000

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003530:	2a01      	cmp	r2, #1
 8003532:	d035      	beq.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8003534:	b410      	push	{r4}
 8003536:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003538:	2201      	movs	r2, #1
 800353a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353e:	2202      	movs	r2, #2
 8003540:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003544:	6802      	ldr	r2, [r0, #0]
 8003546:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800354a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354e:	6808      	ldr	r0, [r1, #0]
 8003550:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003554:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4812      	ldr	r0, [pc, #72]	@ (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800355a:	4282      	cmp	r2, r0
 800355c:	d012      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800355e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003562:	d00f      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003564:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003568:	4282      	cmp	r2, r0
 800356a:	d00b      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800356c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003570:	4282      	cmp	r2, r0
 8003572:	d007      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003574:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003578:	4282      	cmp	r2, r0
 800357a:	d003      	beq.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800357c:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003580:	4282      	cmp	r2, r0
 8003582:	d104      	bne.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003584:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003588:	6849      	ldr	r1, [r1, #4]
 800358a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800358c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003594:	2000      	movs	r0, #0
 8003596:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800359a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800359e:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035a0:	2002      	movs	r0, #2
}
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000

080035a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035a8:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d021      	beq.n	80035f6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80035b2:	2301      	movs	r3, #1
 80035b4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035b8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035be:	6888      	ldr	r0, [r1, #8]
 80035c0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035c6:	6848      	ldr	r0, [r1, #4]
 80035c8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ce:	6808      	ldr	r0, [r1, #0]
 80035d0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035d6:	6908      	ldr	r0, [r1, #16]
 80035d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035de:	6948      	ldr	r0, [r1, #20]
 80035e0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035e6:	69c9      	ldr	r1, [r1, #28]
 80035e8:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ea:	6811      	ldr	r1, [r2, #0]
 80035ec:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80035f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80035f6:	2002      	movs	r0, #2
}
 80035f8:	4770      	bx	lr

080035fa <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fc:	4770      	bx	lr

080035fe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f102 030c 	add.w	r3, r2, #12
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	320c      	adds	r2, #12
 800360e:	e842 3100 	strex	r1, r3, [r2]
 8003612:	2900      	cmp	r1, #0
 8003614:	d1f3      	bne.n	80035fe <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	f102 0314 	add.w	r3, r2, #20
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	3214      	adds	r2, #20
 8003626:	e842 3100 	strex	r1, r3, [r2]
 800362a:	2900      	cmp	r1, #0
 800362c:	d1f3      	bne.n	8003616 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003630:	2b01      	cmp	r3, #1
 8003632:	d005      	beq.n	8003640 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	2320      	movs	r3, #32
 8003636:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363a:	2300      	movs	r3, #0
 800363c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800363e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	f102 030c 	add.w	r3, r2, #12
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	320c      	adds	r2, #12
 8003650:	e842 3100 	strex	r1, r3, [r2]
 8003654:	2900      	cmp	r1, #0
 8003656:	d1f3      	bne.n	8003640 <UART_EndRxTransfer+0x42>
 8003658:	e7ec      	b.n	8003634 <UART_EndRxTransfer+0x36>
	...

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	6802      	ldr	r2, [r0, #0]
 8003662:	6913      	ldr	r3, [r2, #16]
 8003664:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003668:	68c1      	ldr	r1, [r0, #12]
 800366a:	430b      	orrs	r3, r1
 800366c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800366e:	6883      	ldr	r3, [r0, #8]
 8003670:	6902      	ldr	r2, [r0, #16]
 8003672:	431a      	orrs	r2, r3
 8003674:	6943      	ldr	r3, [r0, #20]
 8003676:	431a      	orrs	r2, r3
 8003678:	69c3      	ldr	r3, [r0, #28]
 800367a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800367c:	6801      	ldr	r1, [r0, #0]
 800367e:	68cb      	ldr	r3, [r1, #12]
 8003680:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003684:	f023 030c 	bic.w	r3, r3, #12
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	6953      	ldr	r3, [r2, #20]
 8003690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003694:	6981      	ldr	r1, [r0, #24]
 8003696:	430b      	orrs	r3, r1
 8003698:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <UART_SetConfig+0x108>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d006      	beq.n	80036b0 <UART_SetConfig+0x54>
 80036a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d002      	beq.n	80036b0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036aa:	f7ff fb67 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80036ae:	e001      	b.n	80036b4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b0:	f7ff fb74 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b4:	69e3      	ldr	r3, [r4, #28]
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ba:	d029      	beq.n	8003710 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036bc:	2100      	movs	r1, #0
 80036be:	1803      	adds	r3, r0, r0
 80036c0:	4149      	adcs	r1, r1
 80036c2:	181b      	adds	r3, r3, r0
 80036c4:	f141 0100 	adc.w	r1, r1, #0
 80036c8:	00c9      	lsls	r1, r1, #3
 80036ca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1818      	adds	r0, r3, r0
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80036d8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80036dc:	f141 0100 	adc.w	r1, r1, #0
 80036e0:	f7fd fa9a 	bl	8000c18 <__aeabi_uldivmod>
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <UART_SetConfig+0x10c>)
 80036e6:	fba2 3100 	umull	r3, r1, r2, r0
 80036ea:	0949      	lsrs	r1, r1, #5
 80036ec:	2364      	movs	r3, #100	@ 0x64
 80036ee:	fb03 0311 	mls	r3, r3, r1, r0
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3332      	adds	r3, #50	@ 0x32
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003700:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	6821      	ldr	r1, [r4, #0]
 800370a:	4413      	add	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }
}
 800370e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003710:	2300      	movs	r3, #0
 8003712:	1802      	adds	r2, r0, r0
 8003714:	eb43 0103 	adc.w	r1, r3, r3
 8003718:	1812      	adds	r2, r2, r0
 800371a:	f141 0100 	adc.w	r1, r1, #0
 800371e:	00c9      	lsls	r1, r1, #3
 8003720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	1810      	adds	r0, r2, r0
 8003728:	f141 0100 	adc.w	r1, r1, #0
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	1892      	adds	r2, r2, r2
 8003730:	415b      	adcs	r3, r3
 8003732:	f7fd fa71 	bl	8000c18 <__aeabi_uldivmod>
 8003736:	4a0c      	ldr	r2, [pc, #48]	@ (8003768 <UART_SetConfig+0x10c>)
 8003738:	fba2 3100 	umull	r3, r1, r2, r0
 800373c:	0949      	lsrs	r1, r1, #5
 800373e:	2364      	movs	r3, #100	@ 0x64
 8003740:	fb03 0311 	mls	r3, r3, r1, r0
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	3332      	adds	r3, #50	@ 0x32
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	005a      	lsls	r2, r3, #1
 8003750:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003754:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	6821      	ldr	r1, [r4, #0]
 800375e:	4413      	add	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
 8003762:	e7d4      	b.n	800370e <UART_SetConfig+0xb2>
 8003764:	40011000 	.word	0x40011000
 8003768:	51eb851f 	.word	0x51eb851f

0800376c <UART_WaitOnFlagUntilTimeout>:
{
 800376c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003770:	b083      	sub	sp, #12
 8003772:	4605      	mov	r5, r0
 8003774:	460e      	mov	r6, r1
 8003776:	4617      	mov	r7, r2
 8003778:	4699      	mov	r9, r3
 800377a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	682b      	ldr	r3, [r5, #0]
 8003780:	681c      	ldr	r4, [r3, #0]
 8003782:	ea36 0404 	bics.w	r4, r6, r4
 8003786:	bf0c      	ite	eq
 8003788:	2401      	moveq	r4, #1
 800378a:	2400      	movne	r4, #0
 800378c:	42bc      	cmp	r4, r7
 800378e:	d128      	bne.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003790:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003794:	d0f3      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe f8c1 	bl	800191c <HAL_GetTick>
 800379a:	eba0 0009 	sub.w	r0, r0, r9
 800379e:	4540      	cmp	r0, r8
 80037a0:	d823      	bhi.n	80037ea <UART_WaitOnFlagUntilTimeout+0x7e>
 80037a2:	f1b8 0f00 	cmp.w	r8, #0
 80037a6:	d022      	beq.n	80037ee <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	f012 0f04 	tst.w	r2, #4
 80037b0:	d0e5      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
 80037b2:	2e80      	cmp	r6, #128	@ 0x80
 80037b4:	d0e3      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
 80037b6:	2e40      	cmp	r6, #64	@ 0x40
 80037b8:	d0e1      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f012 0f08 	tst.w	r2, #8
 80037c0:	d0dd      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037c2:	2400      	movs	r4, #0
 80037c4:	9401      	str	r4, [sp, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	9201      	str	r2, [sp, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff ff14 	bl	80035fe <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d6:	2308      	movs	r3, #8
 80037d8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80037da:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80037de:	2001      	movs	r0, #1
 80037e0:	e000      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80037e2:	2000      	movs	r0, #0
}
 80037e4:	b003      	add	sp, #12
 80037e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80037ea:	2003      	movs	r0, #3
 80037ec:	e7fa      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x78>
 80037ee:	2003      	movs	r0, #3
 80037f0:	e7f8      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x78>

080037f2 <HAL_UART_Init>:
  if (huart == NULL)
 80037f2:	b360      	cbz	r0, 800384e <HAL_UART_Init+0x5c>
{
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80037f8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80037fc:	b313      	cbz	r3, 8003844 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80037fe:	2324      	movs	r3, #36	@ 0x24
 8003800:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	68d3      	ldr	r3, [r2, #12]
 8003808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800380c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff ff24 	bl	800365c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6913      	ldr	r3, [r2, #16]
 8003818:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800381c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	6953      	ldr	r3, [r2, #20]
 8003822:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003826:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	68d3      	ldr	r3, [r2, #12]
 800382c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003830:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	2000      	movs	r0, #0
 8003834:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003836:	2320      	movs	r3, #32
 8003838:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003840:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003842:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003844:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003848:	f000 f9f2 	bl	8003c30 <HAL_UART_MspInit>
 800384c:	e7d7      	b.n	80037fe <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800384e:	2001      	movs	r0, #1
}
 8003850:	4770      	bx	lr

08003852 <HAL_UART_Transmit>:
{
 8003852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800385a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800385e:	2b20      	cmp	r3, #32
 8003860:	d156      	bne.n	8003910 <HAL_UART_Transmit+0xbe>
 8003862:	4604      	mov	r4, r0
 8003864:	460d      	mov	r5, r1
 8003866:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003868:	2900      	cmp	r1, #0
 800386a:	d055      	beq.n	8003918 <HAL_UART_Transmit+0xc6>
 800386c:	b90a      	cbnz	r2, 8003872 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800386e:	2001      	movs	r0, #1
 8003870:	e04f      	b.n	8003912 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003876:	2321      	movs	r3, #33	@ 0x21
 8003878:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800387c:	f7fe f84e 	bl	800191c <HAL_GetTick>
 8003880:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003882:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003886:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388a:	68a3      	ldr	r3, [r4, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003890:	d002      	beq.n	8003898 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8003892:	f04f 0800 	mov.w	r8, #0
 8003896:	e014      	b.n	80038c2 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	b32b      	cbz	r3, 80038e8 <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 800389c:	f04f 0800 	mov.w	r8, #0
 80038a0:	e00f      	b.n	80038c2 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 80038a2:	2320      	movs	r3, #32
 80038a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80038a8:	2003      	movs	r0, #3
 80038aa:	e032      	b.n	8003912 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ac:	f838 3b02 	ldrh.w	r3, [r8], #2
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80038b8:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80038ba:	b292      	uxth	r2, r2
 80038bc:	3a01      	subs	r2, #1
 80038be:	b292      	uxth	r2, r2
 80038c0:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038c2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b193      	cbz	r3, 80038ee <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c8:	9600      	str	r6, [sp, #0]
 80038ca:	463b      	mov	r3, r7
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7ff ff4b 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d1e3      	bne.n	80038a2 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 80038da:	2d00      	cmp	r5, #0
 80038dc:	d0e6      	beq.n	80038ac <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038de:	f815 2b01 	ldrb.w	r2, [r5], #1
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038e6:	e7e7      	b.n	80038b8 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 80038e8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80038ea:	2500      	movs	r5, #0
 80038ec:	e7e9      	b.n	80038c2 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	9600      	str	r6, [sp, #0]
 80038f0:	463b      	mov	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	2140      	movs	r1, #64	@ 0x40
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff ff38 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80038fc:	b918      	cbnz	r0, 8003906 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80038fe:	2320      	movs	r3, #32
 8003900:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003904:	e005      	b.n	8003912 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8003906:	2320      	movs	r3, #32
 8003908:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800390c:	2003      	movs	r0, #3
 800390e:	e000      	b.n	8003912 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8003910:	2002      	movs	r0, #2
}
 8003912:	b002      	add	sp, #8
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003918:	2001      	movs	r0, #1
 800391a:	e7fa      	b.n	8003912 <HAL_UART_Transmit+0xc0>

0800391c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800391c:	e7fe      	b.n	800391c <NMI_Handler>

0800391e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391e:	e7fe      	b.n	800391e <HardFault_Handler>

08003920 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler>

08003922 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003922:	e7fe      	b.n	8003922 <BusFault_Handler>

08003924 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003924:	e7fe      	b.n	8003924 <UsageFault_Handler>

08003926 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003926:	4770      	bx	lr

08003928 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003928:	4770      	bx	lr

0800392a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800392a:	4770      	bx	lr

0800392c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800392c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800392e:	f7fd ffe9 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003932:	bd08      	pop	{r3, pc}

08003934 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003936:	4802      	ldr	r0, [pc, #8]	@ (8003940 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8003938:	f7ff faf1 	bl	8002f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800393c:	bd08      	pop	{r3, pc}
 800393e:	bf00      	nop
 8003940:	20000270 	.word	0x20000270

08003944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003944:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003946:	4802      	ldr	r0, [pc, #8]	@ (8003950 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003948:	f7ff fae9 	bl	8002f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800394c:	bd08      	pop	{r3, pc}
 800394e:	bf00      	nop
 8003950:	20000270 	.word	0x20000270

08003954 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003956:	4802      	ldr	r0, [pc, #8]	@ (8003960 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8003958:	f7ff fae1 	bl	8002f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800395c:	bd08      	pop	{r3, pc}
 800395e:	bf00      	nop
 8003960:	20000270 	.word	0x20000270

08003964 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003964:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003966:	4802      	ldr	r0, [pc, #8]	@ (8003970 <TIM1_CC_IRQHandler+0xc>)
 8003968:	f7ff fad9 	bl	8002f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800396c:	bd08      	pop	{r3, pc}
 800396e:	bf00      	nop
 8003970:	20000270 	.word	0x20000270

08003974 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003974:	2001      	movs	r0, #1
 8003976:	4770      	bx	lr

08003978 <_kill>:

int _kill(int pid, int sig)
{
 8003978:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800397a:	f000 ff9d 	bl	80048b8 <__errno>
 800397e:	2316      	movs	r3, #22
 8003980:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003986:	bd08      	pop	{r3, pc}

08003988 <_exit>:

void _exit (int status)
{
 8003988:	b508      	push	{r3, lr}
  _kill(status, -1);
 800398a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800398e:	f7ff fff3 	bl	8003978 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003992:	e7fe      	b.n	8003992 <_exit+0xa>

08003994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	460c      	mov	r4, r1
 8003998:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	2500      	movs	r5, #0
 800399c:	e006      	b.n	80039ac <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800399e:	f3af 8000 	nop.w
 80039a2:	4621      	mov	r1, r4
 80039a4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80039aa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	42b5      	cmp	r5, r6
 80039ae:	dbf6      	blt.n	800399e <_read+0xa>
  }

  return len;
}
 80039b0:	4630      	mov	r0, r6
 80039b2:	bd70      	pop	{r4, r5, r6, pc}

080039b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	460c      	mov	r4, r1
 80039b8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	2500      	movs	r5, #0
 80039bc:	e004      	b.n	80039c8 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80039be:	f814 0b01 	ldrb.w	r0, [r4], #1
 80039c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c6:	3501      	adds	r5, #1
 80039c8:	42b5      	cmp	r5, r6
 80039ca:	dbf8      	blt.n	80039be <_write+0xa>
  }
  return len;
}
 80039cc:	4630      	mov	r0, r6
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039d4:	4770      	bx	lr

080039d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80039d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039da:	604b      	str	r3, [r1, #4]
  return 0;
}
 80039dc:	2000      	movs	r0, #0
 80039de:	4770      	bx	lr

080039e0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80039e0:	2001      	movs	r0, #1
 80039e2:	4770      	bx	lr

080039e4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80039e4:	2000      	movs	r0, #0
 80039e6:	4770      	bx	lr

080039e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003a20 <_sbrk+0x38>)
 80039ee:	490d      	ldr	r1, [pc, #52]	@ (8003a24 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f0:	480d      	ldr	r0, [pc, #52]	@ (8003a28 <_sbrk+0x40>)
 80039f2:	6800      	ldr	r0, [r0, #0]
 80039f4:	b140      	cbz	r0, 8003a08 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039f6:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <_sbrk+0x40>)
 80039f8:	6800      	ldr	r0, [r0, #0]
 80039fa:	4403      	add	r3, r0
 80039fc:	1a52      	subs	r2, r2, r1
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d806      	bhi.n	8003a10 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <_sbrk+0x40>)
 8003a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003a06:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a08:	4807      	ldr	r0, [pc, #28]	@ (8003a28 <_sbrk+0x40>)
 8003a0a:	4c08      	ldr	r4, [pc, #32]	@ (8003a2c <_sbrk+0x44>)
 8003a0c:	6004      	str	r4, [r0, #0]
 8003a0e:	e7f2      	b.n	80039f6 <_sbrk+0xe>
    errno = ENOMEM;
 8003a10:	f000 ff52 	bl	80048b8 <__errno>
 8003a14:	230c      	movs	r3, #12
 8003a16:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a1c:	e7f3      	b.n	8003a06 <_sbrk+0x1e>
 8003a1e:	bf00      	nop
 8003a20:	20020000 	.word	0x20020000
 8003a24:	00000400 	.word	0x00000400
 8003a28:	2000026c 	.word	0x2000026c
 8003a2c:	20000450 	.word	0x20000450

08003a30 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a30:	4a03      	ldr	r2, [pc, #12]	@ (8003a40 <SystemInit+0x10>)
 8003a32:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003a36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003a44:	6802      	ldr	r2, [r0, #0]
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_TIM_Base_MspInit+0x6c>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d000      	beq.n	8003a4e <HAL_TIM_Base_MspInit+0xa>
 8003a4c:	4770      	bx	lr
{
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a52:	2400      	movs	r4, #0
 8003a54:	9401      	str	r4, [sp, #4]
 8003a56:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4621      	mov	r1, r4
 8003a70:	2018      	movs	r0, #24
 8003a72:	f7fd ffc1 	bl	80019f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003a76:	2018      	movs	r0, #24
 8003a78:	f7fd ffce 	bl	8001a18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4621      	mov	r1, r4
 8003a80:	2019      	movs	r0, #25
 8003a82:	f7fd ffb9 	bl	80019f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a86:	2019      	movs	r0, #25
 8003a88:	f7fd ffc6 	bl	8001a18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	4621      	mov	r1, r4
 8003a90:	201a      	movs	r0, #26
 8003a92:	f7fd ffb1 	bl	80019f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003a96:	201a      	movs	r0, #26
 8003a98:	f7fd ffbe 	bl	8001a18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	201b      	movs	r0, #27
 8003aa2:	f7fd ffa9 	bl	80019f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003aa6:	201b      	movs	r0, #27
 8003aa8:	f7fd ffb6 	bl	8001a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003aac:	b002      	add	sp, #8
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	40010000 	.word	0x40010000

08003ab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ab4:	b500      	push	{lr}
 8003ab6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8003ac4:	6802      	ldr	r2, [r0, #0]
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <HAL_TIM_MspPostInit+0x50>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d002      	beq.n	8003ad2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003acc:	b007      	add	sp, #28
 8003ace:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <HAL_TIM_MspPostInit+0x54>)
 8003ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003aea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003af4:	2301      	movs	r3, #1
 8003af6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	a901      	add	r1, sp, #4
 8003afa:	4804      	ldr	r0, [pc, #16]	@ (8003b0c <HAL_TIM_MspPostInit+0x58>)
 8003afc:	f7fd ffa4 	bl	8001a48 <HAL_GPIO_Init>
}
 8003b00:	e7e4      	b.n	8003acc <HAL_TIM_MspPostInit+0x18>
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020000 	.word	0x40020000

08003b10 <MX_TIM1_Init>:
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b14:	2400      	movs	r4, #0
 8003b16:	9412      	str	r4, [sp, #72]	@ 0x48
 8003b18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003b1a:	9414      	str	r4, [sp, #80]	@ 0x50
 8003b1c:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b1e:	9410      	str	r4, [sp, #64]	@ 0x40
 8003b20:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b22:	9409      	str	r4, [sp, #36]	@ 0x24
 8003b24:	940a      	str	r4, [sp, #40]	@ 0x28
 8003b26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b28:	940c      	str	r4, [sp, #48]	@ 0x30
 8003b2a:	940d      	str	r4, [sp, #52]	@ 0x34
 8003b2c:	940e      	str	r4, [sp, #56]	@ 0x38
 8003b2e:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b30:	2220      	movs	r2, #32
 8003b32:	4621      	mov	r1, r4
 8003b34:	a801      	add	r0, sp, #4
 8003b36:	f000 fe5d 	bl	80047f4 <memset>
  htim1.Instance = TIM1;
 8003b3a:	482e      	ldr	r0, [pc, #184]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf8 <MX_TIM1_Init+0xe8>)
 8003b3e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 999;
 8003b40:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003b44:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1999;
 8003b48:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8003b4c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b50:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b54:	f7ff fae8 	bl	8003128 <HAL_TIM_Base_Init>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d138      	bne.n	8003bce <MX_TIM1_Init+0xbe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b60:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b62:	a912      	add	r1, sp, #72	@ 0x48
 8003b64:	4823      	ldr	r0, [pc, #140]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003b66:	f7ff fbe0 	bl	800332a <HAL_TIM_ConfigClockSource>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d132      	bne.n	8003bd4 <MX_TIM1_Init+0xc4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b6e:	4821      	ldr	r0, [pc, #132]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003b70:	f7ff fb06 	bl	8003180 <HAL_TIM_PWM_Init>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d130      	bne.n	8003bda <MX_TIM1_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b7c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b7e:	a910      	add	r1, sp, #64	@ 0x40
 8003b80:	481c      	ldr	r0, [pc, #112]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003b82:	f7ff fcd3 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 8003b86:	bb58      	cbnz	r0, 8003be0 <MX_TIM1_Init+0xd0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b88:	2360      	movs	r3, #96	@ 0x60
 8003b8a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 225;
 8003b8c:	23e1      	movs	r3, #225	@ 0xe1
 8003b8e:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b90:	2200      	movs	r2, #0
 8003b92:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b94:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b96:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b98:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b9a:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b9c:	a909      	add	r1, sp, #36	@ 0x24
 8003b9e:	4815      	ldr	r0, [pc, #84]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003ba0:	f7ff fb48 	bl	8003234 <HAL_TIM_PWM_ConfigChannel>
 8003ba4:	b9f8      	cbnz	r0, 8003be6 <MX_TIM1_Init+0xd6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003baa:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bac:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bae:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bb0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bb6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bb8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bba:	a901      	add	r1, sp, #4
 8003bbc:	480d      	ldr	r0, [pc, #52]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003bbe:	f7ff fcf3 	bl	80035a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bc2:	b998      	cbnz	r0, 8003bec <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 8003bc4:	480b      	ldr	r0, [pc, #44]	@ (8003bf4 <MX_TIM1_Init+0xe4>)
 8003bc6:	f7ff ff75 	bl	8003ab4 <HAL_TIM_MspPostInit>
}
 8003bca:	b016      	add	sp, #88	@ 0x58
 8003bcc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003bce:	f7fd fc97 	bl	8001500 <Error_Handler>
 8003bd2:	e7c3      	b.n	8003b5c <MX_TIM1_Init+0x4c>
    Error_Handler();
 8003bd4:	f7fd fc94 	bl	8001500 <Error_Handler>
 8003bd8:	e7c9      	b.n	8003b6e <MX_TIM1_Init+0x5e>
    Error_Handler();
 8003bda:	f7fd fc91 	bl	8001500 <Error_Handler>
 8003bde:	e7cb      	b.n	8003b78 <MX_TIM1_Init+0x68>
    Error_Handler();
 8003be0:	f7fd fc8e 	bl	8001500 <Error_Handler>
 8003be4:	e7d0      	b.n	8003b88 <MX_TIM1_Init+0x78>
    Error_Handler();
 8003be6:	f7fd fc8b 	bl	8001500 <Error_Handler>
 8003bea:	e7dc      	b.n	8003ba6 <MX_TIM1_Init+0x96>
    Error_Handler();
 8003bec:	f7fd fc88 	bl	8001500 <Error_Handler>
 8003bf0:	e7e8      	b.n	8003bc4 <MX_TIM1_Init+0xb4>
 8003bf2:	bf00      	nop
 8003bf4:	20000270 	.word	0x20000270
 8003bf8:	40010000 	.word	0x40010000

08003bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003bfc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bfe:	480a      	ldr	r0, [pc, #40]	@ (8003c28 <MX_USART1_UART_Init+0x2c>)
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <MX_USART1_UART_Init+0x30>)
 8003c02:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003c04:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003c08:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c0e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c10:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c12:	220c      	movs	r2, #12
 8003c14:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c16:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c18:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c1a:	f7ff fdea 	bl	80037f2 <HAL_UART_Init>
 8003c1e:	b900      	cbnz	r0, 8003c22 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c20:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003c22:	f7fd fc6d 	bl	8001500 <Error_Handler>
}
 8003c26:	e7fb      	b.n	8003c20 <MX_USART1_UART_Init+0x24>
 8003c28:	200002b8 	.word	0x200002b8
 8003c2c:	40011000 	.word	0x40011000

08003c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c30:	b500      	push	{lr}
 8003c32:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	2300      	movs	r3, #0
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	9304      	str	r3, [sp, #16]
 8003c3a:	9305      	str	r3, [sp, #20]
 8003c3c:	9306      	str	r3, [sp, #24]
 8003c3e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003c40:	6802      	ldr	r2, [r0, #0]
 8003c42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c46:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c4e:	b009      	add	sp, #36	@ 0x24
 8003c50:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c54:	2100      	movs	r1, #0
 8003c56:	9101      	str	r1, [sp, #4]
 8003c58:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8003c5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c5e:	f042 0210 	orr.w	r2, r2, #16
 8003c62:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c66:	f002 0210 	and.w	r2, r2, #16
 8003c6a:	9201      	str	r2, [sp, #4]
 8003c6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	9102      	str	r1, [sp, #8]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	9302      	str	r3, [sp, #8]
 8003c80:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003c86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c90:	2307      	movs	r3, #7
 8003c92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	a903      	add	r1, sp, #12
 8003c96:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <HAL_UART_MspInit+0x70>)
 8003c98:	f7fd fed6 	bl	8001a48 <HAL_GPIO_Init>
}
 8003c9c:	e7d7      	b.n	8003c4e <HAL_UART_MspInit+0x1e>
 8003c9e:	bf00      	nop
 8003ca0:	40020000 	.word	0x40020000

08003ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ca8:	f7ff fec2 	bl	8003a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cac:	480c      	ldr	r0, [pc, #48]	@ (8003ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cae:	490d      	ldr	r1, [pc, #52]	@ (8003ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb4:	e002      	b.n	8003cbc <LoopCopyDataInit>

08003cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cba:	3304      	adds	r3, #4

08003cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc0:	d3f9      	bcc.n	8003cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cc8:	e001      	b.n	8003cce <LoopFillZerobss>

08003cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ccc:	3204      	adds	r2, #4

08003cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd0:	d3fb      	bcc.n	8003cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cd2:	f000 fdf7 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cd6:	f7fd fc65 	bl	80015a4 <main>
  bx  lr    
 8003cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ce4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003ce8:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8003cec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003cf0:	2000044c 	.word	0x2000044c

08003cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cf4:	e7fe      	b.n	8003cf4 <ADC_IRQHandler>

08003cf6 <__cvt>:
 8003cf6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfa:	ec57 6b10 	vmov	r6, r7, d0
 8003cfe:	2f00      	cmp	r7, #0
 8003d00:	460c      	mov	r4, r1
 8003d02:	4619      	mov	r1, r3
 8003d04:	463b      	mov	r3, r7
 8003d06:	bfbb      	ittet	lt
 8003d08:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003d0c:	461f      	movlt	r7, r3
 8003d0e:	2300      	movge	r3, #0
 8003d10:	232d      	movlt	r3, #45	@ 0x2d
 8003d12:	700b      	strb	r3, [r1, #0]
 8003d14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d16:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003d1a:	4691      	mov	r9, r2
 8003d1c:	f023 0820 	bic.w	r8, r3, #32
 8003d20:	bfbc      	itt	lt
 8003d22:	4632      	movlt	r2, r6
 8003d24:	4616      	movlt	r6, r2
 8003d26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d2a:	d005      	beq.n	8003d38 <__cvt+0x42>
 8003d2c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d30:	d100      	bne.n	8003d34 <__cvt+0x3e>
 8003d32:	3401      	adds	r4, #1
 8003d34:	2102      	movs	r1, #2
 8003d36:	e000      	b.n	8003d3a <__cvt+0x44>
 8003d38:	2103      	movs	r1, #3
 8003d3a:	ab03      	add	r3, sp, #12
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	ab02      	add	r3, sp, #8
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	ec47 6b10 	vmov	d0, r6, r7
 8003d46:	4653      	mov	r3, sl
 8003d48:	4622      	mov	r2, r4
 8003d4a:	f000 fe6d 	bl	8004a28 <_dtoa_r>
 8003d4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d52:	4605      	mov	r5, r0
 8003d54:	d119      	bne.n	8003d8a <__cvt+0x94>
 8003d56:	f019 0f01 	tst.w	r9, #1
 8003d5a:	d00e      	beq.n	8003d7a <__cvt+0x84>
 8003d5c:	eb00 0904 	add.w	r9, r0, r4
 8003d60:	2200      	movs	r2, #0
 8003d62:	2300      	movs	r3, #0
 8003d64:	4630      	mov	r0, r6
 8003d66:	4639      	mov	r1, r7
 8003d68:	f7fc fe96 	bl	8000a98 <__aeabi_dcmpeq>
 8003d6c:	b108      	cbz	r0, 8003d72 <__cvt+0x7c>
 8003d6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d72:	2230      	movs	r2, #48	@ 0x30
 8003d74:	9b03      	ldr	r3, [sp, #12]
 8003d76:	454b      	cmp	r3, r9
 8003d78:	d31e      	bcc.n	8003db8 <__cvt+0xc2>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d7e:	1b5b      	subs	r3, r3, r5
 8003d80:	4628      	mov	r0, r5
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	b004      	add	sp, #16
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d8e:	eb00 0904 	add.w	r9, r0, r4
 8003d92:	d1e5      	bne.n	8003d60 <__cvt+0x6a>
 8003d94:	7803      	ldrb	r3, [r0, #0]
 8003d96:	2b30      	cmp	r3, #48	@ 0x30
 8003d98:	d10a      	bne.n	8003db0 <__cvt+0xba>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4630      	mov	r0, r6
 8003da0:	4639      	mov	r1, r7
 8003da2:	f7fc fe79 	bl	8000a98 <__aeabi_dcmpeq>
 8003da6:	b918      	cbnz	r0, 8003db0 <__cvt+0xba>
 8003da8:	f1c4 0401 	rsb	r4, r4, #1
 8003dac:	f8ca 4000 	str.w	r4, [sl]
 8003db0:	f8da 3000 	ldr.w	r3, [sl]
 8003db4:	4499      	add	r9, r3
 8003db6:	e7d3      	b.n	8003d60 <__cvt+0x6a>
 8003db8:	1c59      	adds	r1, r3, #1
 8003dba:	9103      	str	r1, [sp, #12]
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e7d9      	b.n	8003d74 <__cvt+0x7e>

08003dc0 <__exponent>:
 8003dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dc2:	2900      	cmp	r1, #0
 8003dc4:	bfba      	itte	lt
 8003dc6:	4249      	neglt	r1, r1
 8003dc8:	232d      	movlt	r3, #45	@ 0x2d
 8003dca:	232b      	movge	r3, #43	@ 0x2b
 8003dcc:	2909      	cmp	r1, #9
 8003dce:	7002      	strb	r2, [r0, #0]
 8003dd0:	7043      	strb	r3, [r0, #1]
 8003dd2:	dd29      	ble.n	8003e28 <__exponent+0x68>
 8003dd4:	f10d 0407 	add.w	r4, sp, #7
 8003dd8:	4625      	mov	r5, r4
 8003dda:	270a      	movs	r7, #10
 8003ddc:	4622      	mov	r2, r4
 8003dde:	fbb1 f6f7 	udiv	r6, r1, r7
 8003de2:	fb07 1316 	mls	r3, r7, r6, r1
 8003de6:	3330      	adds	r3, #48	@ 0x30
 8003de8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003dec:	460b      	mov	r3, r1
 8003dee:	2b63      	cmp	r3, #99	@ 0x63
 8003df0:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8003df4:	4631      	mov	r1, r6
 8003df6:	dcf1      	bgt.n	8003ddc <__exponent+0x1c>
 8003df8:	3130      	adds	r1, #48	@ 0x30
 8003dfa:	1e93      	subs	r3, r2, #2
 8003dfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e00:	1c41      	adds	r1, r0, #1
 8003e02:	461c      	mov	r4, r3
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	d30a      	bcc.n	8003e1e <__exponent+0x5e>
 8003e08:	f10d 0309 	add.w	r3, sp, #9
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	42a5      	cmp	r5, r4
 8003e10:	bf38      	it	cc
 8003e12:	2300      	movcc	r3, #0
 8003e14:	1c82      	adds	r2, r0, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	1a18      	subs	r0, r3, r0
 8003e1a:	b003      	add	sp, #12
 8003e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e26:	e7ed      	b.n	8003e04 <__exponent+0x44>
 8003e28:	2330      	movs	r3, #48	@ 0x30
 8003e2a:	3130      	adds	r1, #48	@ 0x30
 8003e2c:	7083      	strb	r3, [r0, #2]
 8003e2e:	70c1      	strb	r1, [r0, #3]
 8003e30:	1d03      	adds	r3, r0, #4
 8003e32:	e7f1      	b.n	8003e18 <__exponent+0x58>

08003e34 <_printf_float>:
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	b08d      	sub	sp, #52	@ 0x34
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003e40:	4616      	mov	r6, r2
 8003e42:	461f      	mov	r7, r3
 8003e44:	4605      	mov	r5, r0
 8003e46:	f000 fced 	bl	8004824 <_localeconv_r>
 8003e4a:	6803      	ldr	r3, [r0, #0]
 8003e4c:	9306      	str	r3, [sp, #24]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc f9f6 	bl	8000240 <strlen>
 8003e54:	2300      	movs	r3, #0
 8003e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e58:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e60:	f8d4 b000 	ldr.w	fp, [r4]
 8003e64:	9007      	str	r0, [sp, #28]
 8003e66:	3307      	adds	r3, #7
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	ecb3 7b02 	vldmia	r3!, {d7}
 8003e70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e74:	f8c8 3000 	str.w	r3, [r8]
 8003e78:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8003e7c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003e80:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8003e84:	4b9c      	ldr	r3, [pc, #624]	@ (80040f8 <_printf_float+0x2c4>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	f7fc fe35 	bl	8000afc <__aeabi_dcmpun>
 8003e92:	bb70      	cbnz	r0, 8003ef2 <_printf_float+0xbe>
 8003e94:	4b98      	ldr	r3, [pc, #608]	@ (80040f8 <_printf_float+0x2c4>)
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	f7fc fe0f 	bl	8000ac0 <__aeabi_dcmple>
 8003ea2:	bb30      	cbnz	r0, 8003ef2 <_printf_float+0xbe>
 8003ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f7fc fdfe 	bl	8000aac <__aeabi_dcmplt>
 8003eb0:	b110      	cbz	r0, 8003eb8 <_printf_float+0x84>
 8003eb2:	232d      	movs	r3, #45	@ 0x2d
 8003eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb8:	4a90      	ldr	r2, [pc, #576]	@ (80040fc <_printf_float+0x2c8>)
 8003eba:	4b91      	ldr	r3, [pc, #580]	@ (8004100 <_printf_float+0x2cc>)
 8003ebc:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ec0:	bf8c      	ite	hi
 8003ec2:	4690      	movhi	r8, r2
 8003ec4:	4698      	movls	r8, r3
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	6123      	str	r3, [r4, #16]
 8003eca:	f02b 0304 	bic.w	r3, fp, #4
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	f04f 0900 	mov.w	r9, #0
 8003ed4:	9700      	str	r7, [sp, #0]
 8003ed6:	4633      	mov	r3, r6
 8003ed8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003eda:	4621      	mov	r1, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f9d1 	bl	8004284 <_printf_common>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	f040 808c 	bne.w	8004000 <_printf_float+0x1cc>
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eec:	b00d      	add	sp, #52	@ 0x34
 8003eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f7fc fdff 	bl	8000afc <__aeabi_dcmpun>
 8003efe:	b140      	cbz	r0, 8003f12 <_printf_float+0xde>
 8003f00:	9b05      	ldr	r3, [sp, #20]
 8003f02:	4a80      	ldr	r2, [pc, #512]	@ (8004104 <_printf_float+0x2d0>)
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bfbc      	itt	lt
 8003f08:	232d      	movlt	r3, #45	@ 0x2d
 8003f0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f0e:	4b7e      	ldr	r3, [pc, #504]	@ (8004108 <_printf_float+0x2d4>)
 8003f10:	e7d4      	b.n	8003ebc <_printf_float+0x88>
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 8003f1a:	d13b      	bne.n	8003f94 <_printf_float+0x160>
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003f24:	2300      	movs	r3, #0
 8003f26:	6022      	str	r2, [r4, #0]
 8003f28:	9303      	str	r3, [sp, #12]
 8003f2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8003f2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003f30:	ab09      	add	r3, sp, #36	@ 0x24
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6861      	ldr	r1, [r4, #4]
 8003f36:	ed9d 0b04 	vldr	d0, [sp, #16]
 8003f3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7ff fed9 	bl	8003cf6 <__cvt>
 8003f44:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003f48:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	d129      	bne.n	8003fa2 <_printf_float+0x16e>
 8003f4e:	1cc8      	adds	r0, r1, #3
 8003f50:	db02      	blt.n	8003f58 <_printf_float+0x124>
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	428b      	cmp	r3, r1
 8003f56:	da41      	bge.n	8003fdc <_printf_float+0x1a8>
 8003f58:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f5c:	fa5f fa8a 	uxtb.w	sl, sl
 8003f60:	3901      	subs	r1, #1
 8003f62:	4652      	mov	r2, sl
 8003f64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f68:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f6a:	f7ff ff29 	bl	8003dc0 <__exponent>
 8003f6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f70:	1813      	adds	r3, r2, r0
 8003f72:	2a01      	cmp	r2, #1
 8003f74:	4681      	mov	r9, r0
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	dc02      	bgt.n	8003f80 <_printf_float+0x14c>
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	07d2      	lsls	r2, r2, #31
 8003f7e:	d501      	bpl.n	8003f84 <_printf_float+0x150>
 8003f80:	3301      	adds	r3, #1
 8003f82:	6123      	str	r3, [r4, #16]
 8003f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0a3      	beq.n	8003ed4 <_printf_float+0xa0>
 8003f8c:	232d      	movs	r3, #45	@ 0x2d
 8003f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f92:	e79f      	b.n	8003ed4 <_printf_float+0xa0>
 8003f94:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8003f98:	d1c2      	bne.n	8003f20 <_printf_float+0xec>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1c0      	bne.n	8003f20 <_printf_float+0xec>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e7bd      	b.n	8003f1e <_printf_float+0xea>
 8003fa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fa6:	d9db      	bls.n	8003f60 <_printf_float+0x12c>
 8003fa8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003fac:	d118      	bne.n	8003fe0 <_printf_float+0x1ac>
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	dd0b      	ble.n	8003fcc <_printf_float+0x198>
 8003fb4:	6121      	str	r1, [r4, #16]
 8003fb6:	b913      	cbnz	r3, 8003fbe <_printf_float+0x18a>
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	07d0      	lsls	r0, r2, #31
 8003fbc:	d502      	bpl.n	8003fc4 <_printf_float+0x190>
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	440b      	add	r3, r1
 8003fc2:	6123      	str	r3, [r4, #16]
 8003fc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003fc6:	f04f 0900 	mov.w	r9, #0
 8003fca:	e7db      	b.n	8003f84 <_printf_float+0x150>
 8003fcc:	b913      	cbnz	r3, 8003fd4 <_printf_float+0x1a0>
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	07d2      	lsls	r2, r2, #31
 8003fd2:	d501      	bpl.n	8003fd8 <_printf_float+0x1a4>
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	e7f4      	b.n	8003fc2 <_printf_float+0x18e>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e7f2      	b.n	8003fc2 <_printf_float+0x18e>
 8003fdc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	dc05      	bgt.n	8003ff2 <_printf_float+0x1be>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6121      	str	r1, [r4, #16]
 8003fea:	07d8      	lsls	r0, r3, #31
 8003fec:	d5ea      	bpl.n	8003fc4 <_printf_float+0x190>
 8003fee:	1c4b      	adds	r3, r1, #1
 8003ff0:	e7e7      	b.n	8003fc2 <_printf_float+0x18e>
 8003ff2:	2900      	cmp	r1, #0
 8003ff4:	bfd4      	ite	le
 8003ff6:	f1c1 0202 	rsble	r2, r1, #2
 8003ffa:	2201      	movgt	r2, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	e7e0      	b.n	8003fc2 <_printf_float+0x18e>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	055a      	lsls	r2, r3, #21
 8004004:	d407      	bmi.n	8004016 <_printf_float+0x1e2>
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	4642      	mov	r2, r8
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	d12b      	bne.n	800406c <_printf_float+0x238>
 8004014:	e768      	b.n	8003ee8 <_printf_float+0xb4>
 8004016:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800401a:	f240 80dd 	bls.w	80041d8 <_printf_float+0x3a4>
 800401e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	f7fc fd37 	bl	8000a98 <__aeabi_dcmpeq>
 800402a:	2800      	cmp	r0, #0
 800402c:	d033      	beq.n	8004096 <_printf_float+0x262>
 800402e:	4a37      	ldr	r2, [pc, #220]	@ (800410c <_printf_float+0x2d8>)
 8004030:	2301      	movs	r3, #1
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	f43f af55 	beq.w	8003ee8 <_printf_float+0xb4>
 800403e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004042:	4543      	cmp	r3, r8
 8004044:	db02      	blt.n	800404c <_printf_float+0x218>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	07d8      	lsls	r0, r3, #31
 800404a:	d50f      	bpl.n	800406c <_printf_float+0x238>
 800404c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	f43f af46 	beq.w	8003ee8 <_printf_float+0xb4>
 800405c:	f04f 0900 	mov.w	r9, #0
 8004060:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004064:	f104 0a1a 	add.w	sl, r4, #26
 8004068:	45c8      	cmp	r8, r9
 800406a:	dc09      	bgt.n	8004080 <_printf_float+0x24c>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	079b      	lsls	r3, r3, #30
 8004070:	f100 8103 	bmi.w	800427a <_printf_float+0x446>
 8004074:	68e0      	ldr	r0, [r4, #12]
 8004076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004078:	4298      	cmp	r0, r3
 800407a:	bfb8      	it	lt
 800407c:	4618      	movlt	r0, r3
 800407e:	e735      	b.n	8003eec <_printf_float+0xb8>
 8004080:	2301      	movs	r3, #1
 8004082:	4652      	mov	r2, sl
 8004084:	4631      	mov	r1, r6
 8004086:	4628      	mov	r0, r5
 8004088:	47b8      	blx	r7
 800408a:	3001      	adds	r0, #1
 800408c:	f43f af2c 	beq.w	8003ee8 <_printf_float+0xb4>
 8004090:	f109 0901 	add.w	r9, r9, #1
 8004094:	e7e8      	b.n	8004068 <_printf_float+0x234>
 8004096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	dc39      	bgt.n	8004110 <_printf_float+0x2dc>
 800409c:	4a1b      	ldr	r2, [pc, #108]	@ (800410c <_printf_float+0x2d8>)
 800409e:	2301      	movs	r3, #1
 80040a0:	4631      	mov	r1, r6
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b8      	blx	r7
 80040a6:	3001      	adds	r0, #1
 80040a8:	f43f af1e 	beq.w	8003ee8 <_printf_float+0xb4>
 80040ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80040b0:	ea59 0303 	orrs.w	r3, r9, r3
 80040b4:	d102      	bne.n	80040bc <_printf_float+0x288>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	07d9      	lsls	r1, r3, #31
 80040ba:	d5d7      	bpl.n	800406c <_printf_float+0x238>
 80040bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040c0:	4631      	mov	r1, r6
 80040c2:	4628      	mov	r0, r5
 80040c4:	47b8      	blx	r7
 80040c6:	3001      	adds	r0, #1
 80040c8:	f43f af0e 	beq.w	8003ee8 <_printf_float+0xb4>
 80040cc:	f04f 0a00 	mov.w	sl, #0
 80040d0:	f104 0b1a 	add.w	fp, r4, #26
 80040d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d6:	425b      	negs	r3, r3
 80040d8:	4553      	cmp	r3, sl
 80040da:	dc01      	bgt.n	80040e0 <_printf_float+0x2ac>
 80040dc:	464b      	mov	r3, r9
 80040de:	e793      	b.n	8004008 <_printf_float+0x1d4>
 80040e0:	2301      	movs	r3, #1
 80040e2:	465a      	mov	r2, fp
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	47b8      	blx	r7
 80040ea:	3001      	adds	r0, #1
 80040ec:	f43f aefc 	beq.w	8003ee8 <_printf_float+0xb4>
 80040f0:	f10a 0a01 	add.w	sl, sl, #1
 80040f4:	e7ee      	b.n	80040d4 <_printf_float+0x2a0>
 80040f6:	bf00      	nop
 80040f8:	7fefffff 	.word	0x7fefffff
 80040fc:	08006fd0 	.word	0x08006fd0
 8004100:	08006fcc 	.word	0x08006fcc
 8004104:	08006fd8 	.word	0x08006fd8
 8004108:	08006fd4 	.word	0x08006fd4
 800410c:	08006fdc 	.word	0x08006fdc
 8004110:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004112:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004116:	4553      	cmp	r3, sl
 8004118:	bfa8      	it	ge
 800411a:	4653      	movge	r3, sl
 800411c:	2b00      	cmp	r3, #0
 800411e:	4699      	mov	r9, r3
 8004120:	dc36      	bgt.n	8004190 <_printf_float+0x35c>
 8004122:	f04f 0b00 	mov.w	fp, #0
 8004126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800412a:	f104 021a 	add.w	r2, r4, #26
 800412e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004130:	9304      	str	r3, [sp, #16]
 8004132:	eba3 0309 	sub.w	r3, r3, r9
 8004136:	455b      	cmp	r3, fp
 8004138:	dc31      	bgt.n	800419e <_printf_float+0x36a>
 800413a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413c:	459a      	cmp	sl, r3
 800413e:	dc3a      	bgt.n	80041b6 <_printf_float+0x382>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	07da      	lsls	r2, r3, #31
 8004144:	d437      	bmi.n	80041b6 <_printf_float+0x382>
 8004146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004148:	ebaa 0903 	sub.w	r9, sl, r3
 800414c:	9b04      	ldr	r3, [sp, #16]
 800414e:	ebaa 0303 	sub.w	r3, sl, r3
 8004152:	4599      	cmp	r9, r3
 8004154:	bfa8      	it	ge
 8004156:	4699      	movge	r9, r3
 8004158:	f1b9 0f00 	cmp.w	r9, #0
 800415c:	dc33      	bgt.n	80041c6 <_printf_float+0x392>
 800415e:	f04f 0800 	mov.w	r8, #0
 8004162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004166:	f104 0b1a 	add.w	fp, r4, #26
 800416a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800416c:	ebaa 0303 	sub.w	r3, sl, r3
 8004170:	eba3 0309 	sub.w	r3, r3, r9
 8004174:	4543      	cmp	r3, r8
 8004176:	f77f af79 	ble.w	800406c <_printf_float+0x238>
 800417a:	2301      	movs	r3, #1
 800417c:	465a      	mov	r2, fp
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	f43f aeaf 	beq.w	8003ee8 <_printf_float+0xb4>
 800418a:	f108 0801 	add.w	r8, r8, #1
 800418e:	e7ec      	b.n	800416a <_printf_float+0x336>
 8004190:	4642      	mov	r2, r8
 8004192:	4631      	mov	r1, r6
 8004194:	4628      	mov	r0, r5
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	d1c2      	bne.n	8004122 <_printf_float+0x2ee>
 800419c:	e6a4      	b.n	8003ee8 <_printf_float+0xb4>
 800419e:	2301      	movs	r3, #1
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	9204      	str	r2, [sp, #16]
 80041a6:	47b8      	blx	r7
 80041a8:	3001      	adds	r0, #1
 80041aa:	f43f ae9d 	beq.w	8003ee8 <_printf_float+0xb4>
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	f10b 0b01 	add.w	fp, fp, #1
 80041b4:	e7bb      	b.n	800412e <_printf_float+0x2fa>
 80041b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041ba:	4631      	mov	r1, r6
 80041bc:	4628      	mov	r0, r5
 80041be:	47b8      	blx	r7
 80041c0:	3001      	adds	r0, #1
 80041c2:	d1c0      	bne.n	8004146 <_printf_float+0x312>
 80041c4:	e690      	b.n	8003ee8 <_printf_float+0xb4>
 80041c6:	9a04      	ldr	r2, [sp, #16]
 80041c8:	464b      	mov	r3, r9
 80041ca:	4442      	add	r2, r8
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	d1c3      	bne.n	800415e <_printf_float+0x32a>
 80041d6:	e687      	b.n	8003ee8 <_printf_float+0xb4>
 80041d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041dc:	f1ba 0f01 	cmp.w	sl, #1
 80041e0:	dc01      	bgt.n	80041e6 <_printf_float+0x3b2>
 80041e2:	07db      	lsls	r3, r3, #31
 80041e4:	d536      	bpl.n	8004254 <_printf_float+0x420>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4642      	mov	r2, r8
 80041ea:	4631      	mov	r1, r6
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b8      	blx	r7
 80041f0:	3001      	adds	r0, #1
 80041f2:	f43f ae79 	beq.w	8003ee8 <_printf_float+0xb4>
 80041f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041fa:	4631      	mov	r1, r6
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	f43f ae71 	beq.w	8003ee8 <_printf_float+0xb4>
 8004206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800420a:	2200      	movs	r2, #0
 800420c:	2300      	movs	r3, #0
 800420e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004212:	f7fc fc41 	bl	8000a98 <__aeabi_dcmpeq>
 8004216:	b9c0      	cbnz	r0, 800424a <_printf_float+0x416>
 8004218:	4653      	mov	r3, sl
 800421a:	f108 0201 	add.w	r2, r8, #1
 800421e:	4631      	mov	r1, r6
 8004220:	4628      	mov	r0, r5
 8004222:	47b8      	blx	r7
 8004224:	3001      	adds	r0, #1
 8004226:	d10c      	bne.n	8004242 <_printf_float+0x40e>
 8004228:	e65e      	b.n	8003ee8 <_printf_float+0xb4>
 800422a:	2301      	movs	r3, #1
 800422c:	465a      	mov	r2, fp
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	f43f ae57 	beq.w	8003ee8 <_printf_float+0xb4>
 800423a:	f108 0801 	add.w	r8, r8, #1
 800423e:	45d0      	cmp	r8, sl
 8004240:	dbf3      	blt.n	800422a <_printf_float+0x3f6>
 8004242:	464b      	mov	r3, r9
 8004244:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004248:	e6df      	b.n	800400a <_printf_float+0x1d6>
 800424a:	f04f 0800 	mov.w	r8, #0
 800424e:	f104 0b1a 	add.w	fp, r4, #26
 8004252:	e7f4      	b.n	800423e <_printf_float+0x40a>
 8004254:	2301      	movs	r3, #1
 8004256:	4642      	mov	r2, r8
 8004258:	e7e1      	b.n	800421e <_printf_float+0x3ea>
 800425a:	2301      	movs	r3, #1
 800425c:	464a      	mov	r2, r9
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	f43f ae3f 	beq.w	8003ee8 <_printf_float+0xb4>
 800426a:	f108 0801 	add.w	r8, r8, #1
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004272:	1a5b      	subs	r3, r3, r1
 8004274:	4543      	cmp	r3, r8
 8004276:	dcf0      	bgt.n	800425a <_printf_float+0x426>
 8004278:	e6fc      	b.n	8004074 <_printf_float+0x240>
 800427a:	f04f 0800 	mov.w	r8, #0
 800427e:	f104 0919 	add.w	r9, r4, #25
 8004282:	e7f4      	b.n	800426e <_printf_float+0x43a>

08004284 <_printf_common>:
 8004284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	4616      	mov	r6, r2
 800428a:	4698      	mov	r8, r3
 800428c:	688a      	ldr	r2, [r1, #8]
 800428e:	690b      	ldr	r3, [r1, #16]
 8004290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004294:	4293      	cmp	r3, r2
 8004296:	bfb8      	it	lt
 8004298:	4613      	movlt	r3, r2
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042a0:	4607      	mov	r7, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	b10a      	cbz	r2, 80042aa <_printf_common+0x26>
 80042a6:	3301      	adds	r3, #1
 80042a8:	6033      	str	r3, [r6, #0]
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	0699      	lsls	r1, r3, #26
 80042ae:	bf42      	ittt	mi
 80042b0:	6833      	ldrmi	r3, [r6, #0]
 80042b2:	3302      	addmi	r3, #2
 80042b4:	6033      	strmi	r3, [r6, #0]
 80042b6:	6825      	ldr	r5, [r4, #0]
 80042b8:	f015 0506 	ands.w	r5, r5, #6
 80042bc:	d106      	bne.n	80042cc <_printf_common+0x48>
 80042be:	f104 0a19 	add.w	sl, r4, #25
 80042c2:	68e3      	ldr	r3, [r4, #12]
 80042c4:	6832      	ldr	r2, [r6, #0]
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	42ab      	cmp	r3, r5
 80042ca:	dc26      	bgt.n	800431a <_printf_common+0x96>
 80042cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	3b00      	subs	r3, #0
 80042d4:	bf18      	it	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	0692      	lsls	r2, r2, #26
 80042da:	d42b      	bmi.n	8004334 <_printf_common+0xb0>
 80042dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042e0:	4641      	mov	r1, r8
 80042e2:	4638      	mov	r0, r7
 80042e4:	47c8      	blx	r9
 80042e6:	3001      	adds	r0, #1
 80042e8:	d01e      	beq.n	8004328 <_printf_common+0xa4>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	6922      	ldr	r2, [r4, #16]
 80042ee:	f003 0306 	and.w	r3, r3, #6
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	bf02      	ittt	eq
 80042f6:	68e5      	ldreq	r5, [r4, #12]
 80042f8:	6833      	ldreq	r3, [r6, #0]
 80042fa:	1aed      	subeq	r5, r5, r3
 80042fc:	68a3      	ldr	r3, [r4, #8]
 80042fe:	bf0c      	ite	eq
 8004300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004304:	2500      	movne	r5, #0
 8004306:	4293      	cmp	r3, r2
 8004308:	bfc4      	itt	gt
 800430a:	1a9b      	subgt	r3, r3, r2
 800430c:	18ed      	addgt	r5, r5, r3
 800430e:	2600      	movs	r6, #0
 8004310:	341a      	adds	r4, #26
 8004312:	42b5      	cmp	r5, r6
 8004314:	d11a      	bne.n	800434c <_printf_common+0xc8>
 8004316:	2000      	movs	r0, #0
 8004318:	e008      	b.n	800432c <_printf_common+0xa8>
 800431a:	2301      	movs	r3, #1
 800431c:	4652      	mov	r2, sl
 800431e:	4641      	mov	r1, r8
 8004320:	4638      	mov	r0, r7
 8004322:	47c8      	blx	r9
 8004324:	3001      	adds	r0, #1
 8004326:	d103      	bne.n	8004330 <_printf_common+0xac>
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800432c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004330:	3501      	adds	r5, #1
 8004332:	e7c6      	b.n	80042c2 <_printf_common+0x3e>
 8004334:	18e1      	adds	r1, r4, r3
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	2030      	movs	r0, #48	@ 0x30
 800433a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800433e:	4422      	add	r2, r4
 8004340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004348:	3302      	adds	r3, #2
 800434a:	e7c7      	b.n	80042dc <_printf_common+0x58>
 800434c:	2301      	movs	r3, #1
 800434e:	4622      	mov	r2, r4
 8004350:	4641      	mov	r1, r8
 8004352:	4638      	mov	r0, r7
 8004354:	47c8      	blx	r9
 8004356:	3001      	adds	r0, #1
 8004358:	d0e6      	beq.n	8004328 <_printf_common+0xa4>
 800435a:	3601      	adds	r6, #1
 800435c:	e7d9      	b.n	8004312 <_printf_common+0x8e>
	...

08004360 <_printf_i>:
 8004360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	7e0f      	ldrb	r7, [r1, #24]
 8004366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004368:	2f78      	cmp	r7, #120	@ 0x78
 800436a:	4691      	mov	r9, r2
 800436c:	4680      	mov	r8, r0
 800436e:	460c      	mov	r4, r1
 8004370:	469a      	mov	sl, r3
 8004372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004376:	d807      	bhi.n	8004388 <_printf_i+0x28>
 8004378:	2f62      	cmp	r7, #98	@ 0x62
 800437a:	d80a      	bhi.n	8004392 <_printf_i+0x32>
 800437c:	2f00      	cmp	r7, #0
 800437e:	f000 80d2 	beq.w	8004526 <_printf_i+0x1c6>
 8004382:	2f58      	cmp	r7, #88	@ 0x58
 8004384:	f000 80b7 	beq.w	80044f6 <_printf_i+0x196>
 8004388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800438c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004390:	e03a      	b.n	8004408 <_printf_i+0xa8>
 8004392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004396:	2b15      	cmp	r3, #21
 8004398:	d8f6      	bhi.n	8004388 <_printf_i+0x28>
 800439a:	a101      	add	r1, pc, #4	@ (adr r1, 80043a0 <_printf_i+0x40>)
 800439c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043a0:	080043f9 	.word	0x080043f9
 80043a4:	0800440d 	.word	0x0800440d
 80043a8:	08004389 	.word	0x08004389
 80043ac:	08004389 	.word	0x08004389
 80043b0:	08004389 	.word	0x08004389
 80043b4:	08004389 	.word	0x08004389
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	08004389 	.word	0x08004389
 80043c0:	08004389 	.word	0x08004389
 80043c4:	08004389 	.word	0x08004389
 80043c8:	08004389 	.word	0x08004389
 80043cc:	0800450d 	.word	0x0800450d
 80043d0:	08004437 	.word	0x08004437
 80043d4:	080044c3 	.word	0x080044c3
 80043d8:	08004389 	.word	0x08004389
 80043dc:	08004389 	.word	0x08004389
 80043e0:	0800452f 	.word	0x0800452f
 80043e4:	08004389 	.word	0x08004389
 80043e8:	08004437 	.word	0x08004437
 80043ec:	08004389 	.word	0x08004389
 80043f0:	08004389 	.word	0x08004389
 80043f4:	080044cb 	.word	0x080044cb
 80043f8:	6833      	ldr	r3, [r6, #0]
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6032      	str	r2, [r6, #0]
 8004400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004408:	2301      	movs	r3, #1
 800440a:	e09d      	b.n	8004548 <_printf_i+0x1e8>
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	1d19      	adds	r1, r3, #4
 8004412:	6031      	str	r1, [r6, #0]
 8004414:	0606      	lsls	r6, r0, #24
 8004416:	d501      	bpl.n	800441c <_printf_i+0xbc>
 8004418:	681d      	ldr	r5, [r3, #0]
 800441a:	e003      	b.n	8004424 <_printf_i+0xc4>
 800441c:	0645      	lsls	r5, r0, #25
 800441e:	d5fb      	bpl.n	8004418 <_printf_i+0xb8>
 8004420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004424:	2d00      	cmp	r5, #0
 8004426:	da03      	bge.n	8004430 <_printf_i+0xd0>
 8004428:	232d      	movs	r3, #45	@ 0x2d
 800442a:	426d      	negs	r5, r5
 800442c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004430:	4859      	ldr	r0, [pc, #356]	@ (8004598 <_printf_i+0x238>)
 8004432:	230a      	movs	r3, #10
 8004434:	e010      	b.n	8004458 <_printf_i+0xf8>
 8004436:	6821      	ldr	r1, [r4, #0]
 8004438:	6833      	ldr	r3, [r6, #0]
 800443a:	0608      	lsls	r0, r1, #24
 800443c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004440:	d402      	bmi.n	8004448 <_printf_i+0xe8>
 8004442:	0649      	lsls	r1, r1, #25
 8004444:	bf48      	it	mi
 8004446:	b2ad      	uxthmi	r5, r5
 8004448:	2f6f      	cmp	r7, #111	@ 0x6f
 800444a:	4853      	ldr	r0, [pc, #332]	@ (8004598 <_printf_i+0x238>)
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	d159      	bne.n	8004504 <_printf_i+0x1a4>
 8004450:	2308      	movs	r3, #8
 8004452:	2100      	movs	r1, #0
 8004454:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004458:	6866      	ldr	r6, [r4, #4]
 800445a:	60a6      	str	r6, [r4, #8]
 800445c:	2e00      	cmp	r6, #0
 800445e:	db05      	blt.n	800446c <_printf_i+0x10c>
 8004460:	6821      	ldr	r1, [r4, #0]
 8004462:	432e      	orrs	r6, r5
 8004464:	f021 0104 	bic.w	r1, r1, #4
 8004468:	6021      	str	r1, [r4, #0]
 800446a:	d04d      	beq.n	8004508 <_printf_i+0x1a8>
 800446c:	4616      	mov	r6, r2
 800446e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004472:	fb03 5711 	mls	r7, r3, r1, r5
 8004476:	5dc7      	ldrb	r7, [r0, r7]
 8004478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800447c:	462f      	mov	r7, r5
 800447e:	42bb      	cmp	r3, r7
 8004480:	460d      	mov	r5, r1
 8004482:	d9f4      	bls.n	800446e <_printf_i+0x10e>
 8004484:	2b08      	cmp	r3, #8
 8004486:	d10b      	bne.n	80044a0 <_printf_i+0x140>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	07df      	lsls	r7, r3, #31
 800448c:	d508      	bpl.n	80044a0 <_printf_i+0x140>
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	6861      	ldr	r1, [r4, #4]
 8004492:	4299      	cmp	r1, r3
 8004494:	bfde      	ittt	le
 8004496:	2330      	movle	r3, #48	@ 0x30
 8004498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800449c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044a0:	1b92      	subs	r2, r2, r6
 80044a2:	6122      	str	r2, [r4, #16]
 80044a4:	f8cd a000 	str.w	sl, [sp]
 80044a8:	464b      	mov	r3, r9
 80044aa:	aa03      	add	r2, sp, #12
 80044ac:	4621      	mov	r1, r4
 80044ae:	4640      	mov	r0, r8
 80044b0:	f7ff fee8 	bl	8004284 <_printf_common>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d14c      	bne.n	8004552 <_printf_i+0x1f2>
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044bc:	b004      	add	sp, #16
 80044be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f043 0320 	orr.w	r3, r3, #32
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	4834      	ldr	r0, [pc, #208]	@ (800459c <_printf_i+0x23c>)
 80044cc:	2778      	movs	r7, #120	@ 0x78
 80044ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	6831      	ldr	r1, [r6, #0]
 80044d6:	061f      	lsls	r7, r3, #24
 80044d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80044dc:	d402      	bmi.n	80044e4 <_printf_i+0x184>
 80044de:	065f      	lsls	r7, r3, #25
 80044e0:	bf48      	it	mi
 80044e2:	b2ad      	uxthmi	r5, r5
 80044e4:	6031      	str	r1, [r6, #0]
 80044e6:	07d9      	lsls	r1, r3, #31
 80044e8:	bf44      	itt	mi
 80044ea:	f043 0320 	orrmi.w	r3, r3, #32
 80044ee:	6023      	strmi	r3, [r4, #0]
 80044f0:	b11d      	cbz	r5, 80044fa <_printf_i+0x19a>
 80044f2:	2310      	movs	r3, #16
 80044f4:	e7ad      	b.n	8004452 <_printf_i+0xf2>
 80044f6:	4828      	ldr	r0, [pc, #160]	@ (8004598 <_printf_i+0x238>)
 80044f8:	e7e9      	b.n	80044ce <_printf_i+0x16e>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	f023 0320 	bic.w	r3, r3, #32
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	e7f6      	b.n	80044f2 <_printf_i+0x192>
 8004504:	230a      	movs	r3, #10
 8004506:	e7a4      	b.n	8004452 <_printf_i+0xf2>
 8004508:	4616      	mov	r6, r2
 800450a:	e7bb      	b.n	8004484 <_printf_i+0x124>
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	6825      	ldr	r5, [r4, #0]
 8004510:	6961      	ldr	r1, [r4, #20]
 8004512:	1d18      	adds	r0, r3, #4
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	062e      	lsls	r6, r5, #24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	d501      	bpl.n	8004520 <_printf_i+0x1c0>
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	e002      	b.n	8004526 <_printf_i+0x1c6>
 8004520:	0668      	lsls	r0, r5, #25
 8004522:	d5fb      	bpl.n	800451c <_printf_i+0x1bc>
 8004524:	8019      	strh	r1, [r3, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	4616      	mov	r6, r2
 800452c:	e7ba      	b.n	80044a4 <_printf_i+0x144>
 800452e:	6833      	ldr	r3, [r6, #0]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	6032      	str	r2, [r6, #0]
 8004534:	681e      	ldr	r6, [r3, #0]
 8004536:	6862      	ldr	r2, [r4, #4]
 8004538:	2100      	movs	r1, #0
 800453a:	4630      	mov	r0, r6
 800453c:	f7fb fe30 	bl	80001a0 <memchr>
 8004540:	b108      	cbz	r0, 8004546 <_printf_i+0x1e6>
 8004542:	1b80      	subs	r0, r0, r6
 8004544:	6060      	str	r0, [r4, #4]
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	2300      	movs	r3, #0
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004550:	e7a8      	b.n	80044a4 <_printf_i+0x144>
 8004552:	6923      	ldr	r3, [r4, #16]
 8004554:	4632      	mov	r2, r6
 8004556:	4649      	mov	r1, r9
 8004558:	4640      	mov	r0, r8
 800455a:	47d0      	blx	sl
 800455c:	3001      	adds	r0, #1
 800455e:	d0ab      	beq.n	80044b8 <_printf_i+0x158>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	079b      	lsls	r3, r3, #30
 8004564:	d413      	bmi.n	800458e <_printf_i+0x22e>
 8004566:	68e0      	ldr	r0, [r4, #12]
 8004568:	9b03      	ldr	r3, [sp, #12]
 800456a:	4298      	cmp	r0, r3
 800456c:	bfb8      	it	lt
 800456e:	4618      	movlt	r0, r3
 8004570:	e7a4      	b.n	80044bc <_printf_i+0x15c>
 8004572:	2301      	movs	r3, #1
 8004574:	4632      	mov	r2, r6
 8004576:	4649      	mov	r1, r9
 8004578:	4640      	mov	r0, r8
 800457a:	47d0      	blx	sl
 800457c:	3001      	adds	r0, #1
 800457e:	d09b      	beq.n	80044b8 <_printf_i+0x158>
 8004580:	3501      	adds	r5, #1
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	9903      	ldr	r1, [sp, #12]
 8004586:	1a5b      	subs	r3, r3, r1
 8004588:	42ab      	cmp	r3, r5
 800458a:	dcf2      	bgt.n	8004572 <_printf_i+0x212>
 800458c:	e7eb      	b.n	8004566 <_printf_i+0x206>
 800458e:	2500      	movs	r5, #0
 8004590:	f104 0619 	add.w	r6, r4, #25
 8004594:	e7f5      	b.n	8004582 <_printf_i+0x222>
 8004596:	bf00      	nop
 8004598:	08006fde 	.word	0x08006fde
 800459c:	08006fef 	.word	0x08006fef

080045a0 <std>:
 80045a0:	2300      	movs	r3, #0
 80045a2:	b510      	push	{r4, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	e9c0 3300 	strd	r3, r3, [r0]
 80045aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045ae:	6083      	str	r3, [r0, #8]
 80045b0:	8181      	strh	r1, [r0, #12]
 80045b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80045b4:	81c2      	strh	r2, [r0, #14]
 80045b6:	6183      	str	r3, [r0, #24]
 80045b8:	4619      	mov	r1, r3
 80045ba:	2208      	movs	r2, #8
 80045bc:	305c      	adds	r0, #92	@ 0x5c
 80045be:	f000 f919 	bl	80047f4 <memset>
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <std+0x58>)
 80045c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80045c6:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <std+0x5c>)
 80045c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <std+0x60>)
 80045cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <std+0x64>)
 80045d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <std+0x68>)
 80045d4:	6224      	str	r4, [r4, #32]
 80045d6:	429c      	cmp	r4, r3
 80045d8:	d006      	beq.n	80045e8 <std+0x48>
 80045da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045de:	4294      	cmp	r4, r2
 80045e0:	d002      	beq.n	80045e8 <std+0x48>
 80045e2:	33d0      	adds	r3, #208	@ 0xd0
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d105      	bne.n	80045f4 <std+0x54>
 80045e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f000 b98c 	b.w	800490c <__retarget_lock_init_recursive>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	0800476d 	.word	0x0800476d
 80045fc:	0800478f 	.word	0x0800478f
 8004600:	080047c7 	.word	0x080047c7
 8004604:	080047ed 	.word	0x080047ed
 8004608:	20000300 	.word	0x20000300

0800460c <stdio_exit_handler>:
 800460c:	4a02      	ldr	r2, [pc, #8]	@ (8004618 <stdio_exit_handler+0xc>)
 800460e:	4903      	ldr	r1, [pc, #12]	@ (800461c <stdio_exit_handler+0x10>)
 8004610:	4803      	ldr	r0, [pc, #12]	@ (8004620 <stdio_exit_handler+0x14>)
 8004612:	f000 b86b 	b.w	80046ec <_fwalk_sglue>
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	080062c5 	.word	0x080062c5
 8004620:	2000001c 	.word	0x2000001c

08004624 <cleanup_stdio>:
 8004624:	6841      	ldr	r1, [r0, #4]
 8004626:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <cleanup_stdio+0x34>)
 8004628:	4299      	cmp	r1, r3
 800462a:	b510      	push	{r4, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	d001      	beq.n	8004634 <cleanup_stdio+0x10>
 8004630:	f001 fe48 	bl	80062c4 <_fflush_r>
 8004634:	68a1      	ldr	r1, [r4, #8]
 8004636:	4b09      	ldr	r3, [pc, #36]	@ (800465c <cleanup_stdio+0x38>)
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <cleanup_stdio+0x1e>
 800463c:	4620      	mov	r0, r4
 800463e:	f001 fe41 	bl	80062c4 <_fflush_r>
 8004642:	68e1      	ldr	r1, [r4, #12]
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <cleanup_stdio+0x3c>)
 8004646:	4299      	cmp	r1, r3
 8004648:	d004      	beq.n	8004654 <cleanup_stdio+0x30>
 800464a:	4620      	mov	r0, r4
 800464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004650:	f001 be38 	b.w	80062c4 <_fflush_r>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	bf00      	nop
 8004658:	20000300 	.word	0x20000300
 800465c:	20000368 	.word	0x20000368
 8004660:	200003d0 	.word	0x200003d0

08004664 <global_stdio_init.part.0>:
 8004664:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <global_stdio_init.part.0+0x34>)
 8004666:	4a0d      	ldr	r2, [pc, #52]	@ (800469c <global_stdio_init.part.0+0x38>)
 8004668:	480d      	ldr	r0, [pc, #52]	@ (80046a0 <global_stdio_init.part.0+0x3c>)
 800466a:	b510      	push	{r4, lr}
 800466c:	2104      	movs	r1, #4
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	2200      	movs	r2, #0
 8004672:	f7ff ff95 	bl	80045a0 <std>
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <global_stdio_init.part.0+0x3c>)
 8004678:	2201      	movs	r2, #1
 800467a:	461c      	mov	r4, r3
 800467c:	2109      	movs	r1, #9
 800467e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8004682:	f7ff ff8d 	bl	80045a0 <std>
 8004686:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800468a:	2202      	movs	r2, #2
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	2112      	movs	r1, #18
 8004692:	f7ff bf85 	b.w	80045a0 <std>
 8004696:	bf00      	nop
 8004698:	20000438 	.word	0x20000438
 800469c:	0800460d 	.word	0x0800460d
 80046a0:	20000300 	.word	0x20000300

080046a4 <__sfp_lock_acquire>:
 80046a4:	4801      	ldr	r0, [pc, #4]	@ (80046ac <__sfp_lock_acquire+0x8>)
 80046a6:	f000 b932 	b.w	800490e <__retarget_lock_acquire_recursive>
 80046aa:	bf00      	nop
 80046ac:	20000441 	.word	0x20000441

080046b0 <__sfp_lock_release>:
 80046b0:	4801      	ldr	r0, [pc, #4]	@ (80046b8 <__sfp_lock_release+0x8>)
 80046b2:	f000 b92d 	b.w	8004910 <__retarget_lock_release_recursive>
 80046b6:	bf00      	nop
 80046b8:	20000441 	.word	0x20000441

080046bc <__sinit>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	f7ff fff0 	bl	80046a4 <__sfp_lock_acquire>
 80046c4:	6a23      	ldr	r3, [r4, #32]
 80046c6:	b11b      	cbz	r3, 80046d0 <__sinit+0x14>
 80046c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046cc:	f7ff bff0 	b.w	80046b0 <__sfp_lock_release>
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <__sinit+0x28>)
 80046d2:	6223      	str	r3, [r4, #32]
 80046d4:	4b04      	ldr	r3, [pc, #16]	@ (80046e8 <__sinit+0x2c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f5      	bne.n	80046c8 <__sinit+0xc>
 80046dc:	f7ff ffc2 	bl	8004664 <global_stdio_init.part.0>
 80046e0:	e7f2      	b.n	80046c8 <__sinit+0xc>
 80046e2:	bf00      	nop
 80046e4:	08004625 	.word	0x08004625
 80046e8:	20000438 	.word	0x20000438

080046ec <_fwalk_sglue>:
 80046ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f0:	4607      	mov	r7, r0
 80046f2:	4688      	mov	r8, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	2600      	movs	r6, #0
 80046f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004700:	d505      	bpl.n	800470e <_fwalk_sglue+0x22>
 8004702:	6824      	ldr	r4, [r4, #0]
 8004704:	2c00      	cmp	r4, #0
 8004706:	d1f7      	bne.n	80046f8 <_fwalk_sglue+0xc>
 8004708:	4630      	mov	r0, r6
 800470a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d907      	bls.n	8004724 <_fwalk_sglue+0x38>
 8004714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004718:	3301      	adds	r3, #1
 800471a:	d003      	beq.n	8004724 <_fwalk_sglue+0x38>
 800471c:	4629      	mov	r1, r5
 800471e:	4638      	mov	r0, r7
 8004720:	47c0      	blx	r8
 8004722:	4306      	orrs	r6, r0
 8004724:	3568      	adds	r5, #104	@ 0x68
 8004726:	e7e9      	b.n	80046fc <_fwalk_sglue+0x10>

08004728 <siprintf>:
 8004728:	b40e      	push	{r1, r2, r3}
 800472a:	b510      	push	{r4, lr}
 800472c:	b09d      	sub	sp, #116	@ 0x74
 800472e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004730:	9002      	str	r0, [sp, #8]
 8004732:	9006      	str	r0, [sp, #24]
 8004734:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004738:	480a      	ldr	r0, [pc, #40]	@ (8004764 <siprintf+0x3c>)
 800473a:	9107      	str	r1, [sp, #28]
 800473c:	9104      	str	r1, [sp, #16]
 800473e:	490a      	ldr	r1, [pc, #40]	@ (8004768 <siprintf+0x40>)
 8004740:	f853 2b04 	ldr.w	r2, [r3], #4
 8004744:	9105      	str	r1, [sp, #20]
 8004746:	2400      	movs	r4, #0
 8004748:	a902      	add	r1, sp, #8
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004750:	f001 fc3a 	bl	8005fc8 <_svfiprintf_r>
 8004754:	9b02      	ldr	r3, [sp, #8]
 8004756:	701c      	strb	r4, [r3, #0]
 8004758:	b01d      	add	sp, #116	@ 0x74
 800475a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475e:	b003      	add	sp, #12
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000018 	.word	0x20000018
 8004768:	ffff0208 	.word	0xffff0208

0800476c <__sread>:
 800476c:	b510      	push	{r4, lr}
 800476e:	460c      	mov	r4, r1
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	f000 f87c 	bl	8004870 <_read_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	bfab      	itete	ge
 800477c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800477e:	89a3      	ldrhlt	r3, [r4, #12]
 8004780:	181b      	addge	r3, r3, r0
 8004782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004786:	bfac      	ite	ge
 8004788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800478a:	81a3      	strhlt	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__swrite>:
 800478e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	461f      	mov	r7, r3
 8004794:	898b      	ldrh	r3, [r1, #12]
 8004796:	05db      	lsls	r3, r3, #23
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
 800479c:	4616      	mov	r6, r2
 800479e:	d505      	bpl.n	80047ac <__swrite+0x1e>
 80047a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a4:	2302      	movs	r3, #2
 80047a6:	2200      	movs	r2, #0
 80047a8:	f000 f850 	bl	800484c <_lseek_r>
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	4632      	mov	r2, r6
 80047ba:	463b      	mov	r3, r7
 80047bc:	4628      	mov	r0, r5
 80047be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	f000 b867 	b.w	8004894 <_write_r>

080047c6 <__sseek>:
 80047c6:	b510      	push	{r4, lr}
 80047c8:	460c      	mov	r4, r1
 80047ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ce:	f000 f83d 	bl	800484c <_lseek_r>
 80047d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d6:	1c42      	adds	r2, r0, #1
 80047d8:	bf0b      	itete	eq
 80047da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047e2:	81a3      	strheq	r3, [r4, #12]
 80047e4:	81a3      	strhne	r3, [r4, #12]
 80047e6:	bf18      	it	ne
 80047e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047ea:	bd10      	pop	{r4, pc}

080047ec <__sclose>:
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	f000 b81c 	b.w	800482c <_close_r>

080047f4 <memset>:
 80047f4:	4402      	add	r2, r0
 80047f6:	4603      	mov	r3, r0
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d100      	bne.n	80047fe <memset+0xa>
 80047fc:	4770      	bx	lr
 80047fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004802:	e7f9      	b.n	80047f8 <memset+0x4>

08004804 <strcat>:
 8004804:	b510      	push	{r4, lr}
 8004806:	4602      	mov	r2, r0
 8004808:	7814      	ldrb	r4, [r2, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	3201      	adds	r2, #1
 800480e:	2c00      	cmp	r4, #0
 8004810:	d1fa      	bne.n	8004808 <strcat+0x4>
 8004812:	3b01      	subs	r3, #1
 8004814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004818:	f803 2f01 	strb.w	r2, [r3, #1]!
 800481c:	2a00      	cmp	r2, #0
 800481e:	d1f9      	bne.n	8004814 <strcat+0x10>
 8004820:	bd10      	pop	{r4, pc}
	...

08004824 <_localeconv_r>:
 8004824:	4800      	ldr	r0, [pc, #0]	@ (8004828 <_localeconv_r+0x4>)
 8004826:	4770      	bx	lr
 8004828:	20000158 	.word	0x20000158

0800482c <_close_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d06      	ldr	r5, [pc, #24]	@ (8004848 <_close_r+0x1c>)
 8004830:	2300      	movs	r3, #0
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	f7ff f8ca 	bl	80039d0 <_close>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_close_r+0x1a>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_close_r+0x1a>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	2000043c 	.word	0x2000043c

0800484c <_lseek_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d07      	ldr	r5, [pc, #28]	@ (800486c <_lseek_r+0x20>)
 8004850:	4604      	mov	r4, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	602a      	str	r2, [r5, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f7ff f8c2 	bl	80039e4 <_lseek>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_lseek_r+0x1e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_lseek_r+0x1e>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	2000043c 	.word	0x2000043c

08004870 <_read_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4d07      	ldr	r5, [pc, #28]	@ (8004890 <_read_r+0x20>)
 8004874:	4604      	mov	r4, r0
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	2200      	movs	r2, #0
 800487c:	602a      	str	r2, [r5, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f7ff f888 	bl	8003994 <_read>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_read_r+0x1e>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_read_r+0x1e>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	2000043c 	.word	0x2000043c

08004894 <_write_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d07      	ldr	r5, [pc, #28]	@ (80048b4 <_write_r+0x20>)
 8004898:	4604      	mov	r4, r0
 800489a:	4608      	mov	r0, r1
 800489c:	4611      	mov	r1, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7ff f886 	bl	80039b4 <_write>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_write_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_write_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	2000043c 	.word	0x2000043c

080048b8 <__errno>:
 80048b8:	4b01      	ldr	r3, [pc, #4]	@ (80048c0 <__errno+0x8>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000018 	.word	0x20000018

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <__libc_init_array+0x38>)
 80048c8:	4d0d      	ldr	r5, [pc, #52]	@ (8004900 <__libc_init_array+0x3c>)
 80048ca:	1b5b      	subs	r3, r3, r5
 80048cc:	109c      	asrs	r4, r3, #2
 80048ce:	2600      	movs	r6, #0
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	f002 f9ec 	bl	8006cb0 <_init>
 80048d8:	4d0a      	ldr	r5, [pc, #40]	@ (8004904 <__libc_init_array+0x40>)
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <__libc_init_array+0x44>)
 80048dc:	1b5b      	subs	r3, r3, r5
 80048de:	109c      	asrs	r4, r3, #2
 80048e0:	2600      	movs	r6, #0
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	0800731c 	.word	0x0800731c
 8004900:	0800731c 	.word	0x0800731c
 8004904:	0800731c 	.word	0x0800731c
 8004908:	08007320 	.word	0x08007320

0800490c <__retarget_lock_init_recursive>:
 800490c:	4770      	bx	lr

0800490e <__retarget_lock_acquire_recursive>:
 800490e:	4770      	bx	lr

08004910 <__retarget_lock_release_recursive>:
 8004910:	4770      	bx	lr

08004912 <quorem>:
 8004912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	6903      	ldr	r3, [r0, #16]
 8004918:	690c      	ldr	r4, [r1, #16]
 800491a:	42a3      	cmp	r3, r4
 800491c:	4607      	mov	r7, r0
 800491e:	db7e      	blt.n	8004a1e <quorem+0x10c>
 8004920:	3c01      	subs	r4, #1
 8004922:	f101 0814 	add.w	r8, r1, #20
 8004926:	00a3      	lsls	r3, r4, #2
 8004928:	f100 0514 	add.w	r5, r0, #20
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800493c:	3301      	adds	r3, #1
 800493e:	429a      	cmp	r2, r3
 8004940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004944:	fbb2 f6f3 	udiv	r6, r2, r3
 8004948:	d32e      	bcc.n	80049a8 <quorem+0x96>
 800494a:	f04f 0a00 	mov.w	sl, #0
 800494e:	46c4      	mov	ip, r8
 8004950:	46ae      	mov	lr, r5
 8004952:	46d3      	mov	fp, sl
 8004954:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004958:	b298      	uxth	r0, r3
 800495a:	fb06 a000 	mla	r0, r6, r0, sl
 800495e:	0c02      	lsrs	r2, r0, #16
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	fb06 2303 	mla	r3, r6, r3, r2
 8004966:	f8de 2000 	ldr.w	r2, [lr]
 800496a:	b280      	uxth	r0, r0
 800496c:	b292      	uxth	r2, r2
 800496e:	1a12      	subs	r2, r2, r0
 8004970:	445a      	add	r2, fp
 8004972:	f8de 0000 	ldr.w	r0, [lr]
 8004976:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800497a:	b29b      	uxth	r3, r3
 800497c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004980:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004984:	b292      	uxth	r2, r2
 8004986:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800498a:	45e1      	cmp	r9, ip
 800498c:	f84e 2b04 	str.w	r2, [lr], #4
 8004990:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004994:	d2de      	bcs.n	8004954 <quorem+0x42>
 8004996:	9b00      	ldr	r3, [sp, #0]
 8004998:	58eb      	ldr	r3, [r5, r3]
 800499a:	b92b      	cbnz	r3, 80049a8 <quorem+0x96>
 800499c:	9b01      	ldr	r3, [sp, #4]
 800499e:	3b04      	subs	r3, #4
 80049a0:	429d      	cmp	r5, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	d32f      	bcc.n	8004a06 <quorem+0xf4>
 80049a6:	613c      	str	r4, [r7, #16]
 80049a8:	4638      	mov	r0, r7
 80049aa:	f001 f9a1 	bl	8005cf0 <__mcmp>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	db25      	blt.n	80049fe <quorem+0xec>
 80049b2:	4629      	mov	r1, r5
 80049b4:	2000      	movs	r0, #0
 80049b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80049ba:	f8d1 c000 	ldr.w	ip, [r1]
 80049be:	fa1f fe82 	uxth.w	lr, r2
 80049c2:	fa1f f38c 	uxth.w	r3, ip
 80049c6:	eba3 030e 	sub.w	r3, r3, lr
 80049ca:	4403      	add	r3, r0
 80049cc:	0c12      	lsrs	r2, r2, #16
 80049ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80049d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049dc:	45c1      	cmp	r9, r8
 80049de:	f841 3b04 	str.w	r3, [r1], #4
 80049e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80049e6:	d2e6      	bcs.n	80049b6 <quorem+0xa4>
 80049e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049f0:	b922      	cbnz	r2, 80049fc <quorem+0xea>
 80049f2:	3b04      	subs	r3, #4
 80049f4:	429d      	cmp	r5, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	d30b      	bcc.n	8004a12 <quorem+0x100>
 80049fa:	613c      	str	r4, [r7, #16]
 80049fc:	3601      	adds	r6, #1
 80049fe:	4630      	mov	r0, r6
 8004a00:	b003      	add	sp, #12
 8004a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	d1cb      	bne.n	80049a6 <quorem+0x94>
 8004a0e:	3c01      	subs	r4, #1
 8004a10:	e7c6      	b.n	80049a0 <quorem+0x8e>
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d1ef      	bne.n	80049fa <quorem+0xe8>
 8004a1a:	3c01      	subs	r4, #1
 8004a1c:	e7ea      	b.n	80049f4 <quorem+0xe2>
 8004a1e:	2000      	movs	r0, #0
 8004a20:	e7ee      	b.n	8004a00 <quorem+0xee>
 8004a22:	0000      	movs	r0, r0
 8004a24:	0000      	movs	r0, r0
	...

08004a28 <_dtoa_r>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b099      	sub	sp, #100	@ 0x64
 8004a2e:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8004a32:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a34:	69c2      	ldr	r2, [r0, #28]
 8004a36:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8004a38:	910a      	str	r1, [sp, #40]	@ 0x28
 8004a3a:	ec57 6b10 	vmov	r6, r7, d0
 8004a3e:	4681      	mov	r9, r0
 8004a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a42:	b982      	cbnz	r2, 8004a66 <_dtoa_r+0x3e>
 8004a44:	2010      	movs	r0, #16
 8004a46:	f000 fe21 	bl	800568c <malloc>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004a50:	b920      	cbnz	r0, 8004a5c <_dtoa_r+0x34>
 8004a52:	4bb1      	ldr	r3, [pc, #708]	@ (8004d18 <_dtoa_r+0x2f0>)
 8004a54:	21ef      	movs	r1, #239	@ 0xef
 8004a56:	48b1      	ldr	r0, [pc, #708]	@ (8004d1c <_dtoa_r+0x2f4>)
 8004a58:	f001 fc94 	bl	8006384 <__assert_func>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8004a62:	6003      	str	r3, [r0, #0]
 8004a64:	60c3      	str	r3, [r0, #12]
 8004a66:	6811      	ldr	r1, [r2, #0]
 8004a68:	b159      	cbz	r1, 8004a82 <_dtoa_r+0x5a>
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	604a      	str	r2, [r1, #4]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4093      	lsls	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]
 8004a74:	4648      	mov	r0, r9
 8004a76:	f000 fefd 	bl	8005874 <_Bfree>
 8004a7a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	f1b7 0800 	subs.w	r8, r7, #0
 8004a86:	bfb5      	itete	lt
 8004a88:	2301      	movlt	r3, #1
 8004a8a:	2300      	movge	r3, #0
 8004a8c:	6023      	strlt	r3, [r4, #0]
 8004a8e:	6023      	strge	r3, [r4, #0]
 8004a90:	4ba3      	ldr	r3, [pc, #652]	@ (8004d20 <_dtoa_r+0x2f8>)
 8004a92:	bfbc      	itt	lt
 8004a94:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 8004a98:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 8004a9c:	ea33 0308 	bics.w	r3, r3, r8
 8004aa0:	d11a      	bne.n	8004ad8 <_dtoa_r+0xb0>
 8004aa2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004aa4:	f3c8 0813 	ubfx	r8, r8, #0, #20
 8004aa8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004aac:	ea58 0806 	orrs.w	r8, r8, r6
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	f000 8574 	beq.w	800559e <_dtoa_r+0xb76>
 8004ab6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ab8:	b953      	cbnz	r3, 8004ad0 <_dtoa_r+0xa8>
 8004aba:	4b9a      	ldr	r3, [pc, #616]	@ (8004d24 <_dtoa_r+0x2fc>)
 8004abc:	e021      	b.n	8004b02 <_dtoa_r+0xda>
 8004abe:	4b9a      	ldr	r3, [pc, #616]	@ (8004d28 <_dtoa_r+0x300>)
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	9800      	ldr	r0, [sp, #0]
 8004aca:	b019      	add	sp, #100	@ 0x64
 8004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad0:	4b94      	ldr	r3, [pc, #592]	@ (8004d24 <_dtoa_r+0x2fc>)
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	e7f5      	b.n	8004ac4 <_dtoa_r+0x9c>
 8004ad8:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 8004adc:	2200      	movs	r2, #0
 8004ade:	ec51 0b17 	vmov	r0, r1, d7
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004ae8:	f7fb ffd6 	bl	8000a98 <__aeabi_dcmpeq>
 8004aec:	4682      	mov	sl, r0
 8004aee:	b150      	cbz	r0, 8004b06 <_dtoa_r+0xde>
 8004af0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004af2:	2301      	movs	r3, #1
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004af8:	b113      	cbz	r3, 8004b00 <_dtoa_r+0xd8>
 8004afa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004afc:	4b8b      	ldr	r3, [pc, #556]	@ (8004d2c <_dtoa_r+0x304>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b8b      	ldr	r3, [pc, #556]	@ (8004d30 <_dtoa_r+0x308>)
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	e7e0      	b.n	8004ac8 <_dtoa_r+0xa0>
 8004b06:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004b0a:	aa16      	add	r2, sp, #88	@ 0x58
 8004b0c:	a917      	add	r1, sp, #92	@ 0x5c
 8004b0e:	4648      	mov	r0, r9
 8004b10:	f001 f9a2 	bl	8005e58 <__d2b>
 8004b14:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8004b18:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	f000 8082 	beq.w	8004c24 <_dtoa_r+0x1fc>
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 8004b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b2e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b32:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b36:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d34 <_dtoa_r+0x30c>)
 8004b40:	f7fb fb8a 	bl	8000258 <__aeabi_dsub>
 8004b44:	a36e      	add	r3, pc, #440	@ (adr r3, 8004d00 <_dtoa_r+0x2d8>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f7fb fd3d 	bl	80005c8 <__aeabi_dmul>
 8004b4e:	a36e      	add	r3, pc, #440	@ (adr r3, 8004d08 <_dtoa_r+0x2e0>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fb82 	bl	800025c <__adddf3>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	f7fb fcc9 	bl	80004f4 <__aeabi_i2d>
 8004b62:	a36b      	add	r3, pc, #428	@ (adr r3, 8004d10 <_dtoa_r+0x2e8>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f7fb fd2e 	bl	80005c8 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb fb72 	bl	800025c <__adddf3>
 8004b78:	4606      	mov	r6, r0
 8004b7a:	460f      	mov	r7, r1
 8004b7c:	f7fb ffd4 	bl	8000b28 <__aeabi_d2iz>
 8004b80:	2200      	movs	r2, #0
 8004b82:	4680      	mov	r8, r0
 8004b84:	2300      	movs	r3, #0
 8004b86:	4630      	mov	r0, r6
 8004b88:	4639      	mov	r1, r7
 8004b8a:	f7fb ff8f 	bl	8000aac <__aeabi_dcmplt>
 8004b8e:	b148      	cbz	r0, 8004ba4 <_dtoa_r+0x17c>
 8004b90:	4640      	mov	r0, r8
 8004b92:	f7fb fcaf 	bl	80004f4 <__aeabi_i2d>
 8004b96:	4632      	mov	r2, r6
 8004b98:	463b      	mov	r3, r7
 8004b9a:	f7fb ff7d 	bl	8000a98 <__aeabi_dcmpeq>
 8004b9e:	b908      	cbnz	r0, 8004ba4 <_dtoa_r+0x17c>
 8004ba0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004ba4:	f1b8 0f16 	cmp.w	r8, #22
 8004ba8:	d859      	bhi.n	8004c5e <_dtoa_r+0x236>
 8004baa:	4b63      	ldr	r3, [pc, #396]	@ (8004d38 <_dtoa_r+0x310>)
 8004bac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb8:	f7fb ff78 	bl	8000aac <__aeabi_dcmplt>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d050      	beq.n	8004c62 <_dtoa_r+0x23a>
 8004bc0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8004bc8:	1b2d      	subs	r5, r5, r4
 8004bca:	1e6b      	subs	r3, r5, #1
 8004bcc:	9308      	str	r3, [sp, #32]
 8004bce:	bf43      	ittte	mi
 8004bd0:	2300      	movmi	r3, #0
 8004bd2:	f1c5 0701 	rsbmi	r7, r5, #1
 8004bd6:	9308      	strmi	r3, [sp, #32]
 8004bd8:	2700      	movpl	r7, #0
 8004bda:	f1b8 0f00 	cmp.w	r8, #0
 8004bde:	db42      	blt.n	8004c66 <_dtoa_r+0x23e>
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8004be6:	4443      	add	r3, r8
 8004be8:	9308      	str	r3, [sp, #32]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	d86c      	bhi.n	8004cce <_dtoa_r+0x2a6>
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	bfc4      	itt	gt
 8004bf8:	3b04      	subgt	r3, #4
 8004bfa:	930a      	strgt	r3, [sp, #40]	@ 0x28
 8004bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bfe:	f1a3 0302 	sub.w	r3, r3, #2
 8004c02:	bfcc      	ite	gt
 8004c04:	2400      	movgt	r4, #0
 8004c06:	2401      	movle	r4, #1
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d86c      	bhi.n	8004ce6 <_dtoa_r+0x2be>
 8004c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c14 <_dtoa_r+0x1ec>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004cc7 	.word	0x08004cc7
 8004c18:	08004ccb 	.word	0x08004ccb
 8004c1c:	08004c8d 	.word	0x08004c8d
 8004c20:	08004c77 	.word	0x08004c77
 8004c24:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004c26:	442c      	add	r4, r5
 8004c28:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	bfc1      	itttt	gt
 8004c30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c34:	fa08 f803 	lslgt.w	r8, r8, r3
 8004c38:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 8004c3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004c40:	bfd6      	itet	le
 8004c42:	f1c3 0320 	rsble	r3, r3, #32
 8004c46:	ea48 0003 	orrgt.w	r0, r8, r3
 8004c4a:	fa06 f003 	lslle.w	r0, r6, r3
 8004c4e:	f7fb fc41 	bl	80004d4 <__aeabi_ui2d>
 8004c52:	2201      	movs	r2, #1
 8004c54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c58:	3c01      	subs	r4, #1
 8004c5a:	9214      	str	r2, [sp, #80]	@ 0x50
 8004c5c:	e76d      	b.n	8004b3a <_dtoa_r+0x112>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e7b1      	b.n	8004bc6 <_dtoa_r+0x19e>
 8004c62:	9012      	str	r0, [sp, #72]	@ 0x48
 8004c64:	e7b0      	b.n	8004bc8 <_dtoa_r+0x1a0>
 8004c66:	f1c8 0300 	rsb	r3, r8, #0
 8004c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	eba7 0708 	sub.w	r7, r7, r8
 8004c72:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c74:	e7bb      	b.n	8004bee <_dtoa_r+0x1c6>
 8004c76:	2301      	movs	r3, #1
 8004c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c7c:	4443      	add	r3, r8
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	bfb8      	it	lt
 8004c88:	2301      	movlt	r3, #1
 8004c8a:	e006      	b.n	8004c9a <_dtoa_r+0x272>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd2a      	ble.n	8004cec <_dtoa_r+0x2c4>
 8004c96:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c9a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	f102 0514 	add.w	r5, r2, #20
 8004ca6:	429d      	cmp	r5, r3
 8004ca8:	f101 0601 	add.w	r6, r1, #1
 8004cac:	d923      	bls.n	8004cf6 <_dtoa_r+0x2ce>
 8004cae:	6041      	str	r1, [r0, #4]
 8004cb0:	4648      	mov	r0, r9
 8004cb2:	f000 fda1 	bl	80057f8 <_Balloc>
 8004cb6:	9000      	str	r0, [sp, #0]
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d141      	bne.n	8004d40 <_dtoa_r+0x318>
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d3c <_dtoa_r+0x314>)
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cc4:	e6c7      	b.n	8004a56 <_dtoa_r+0x2e>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e7e1      	b.n	8004c8e <_dtoa_r+0x266>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e7d4      	b.n	8004c78 <_dtoa_r+0x250>
 8004cce:	2401      	movs	r4, #1
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cda:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2312      	movs	r3, #18
 8004ce2:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ce4:	e7d9      	b.n	8004c9a <_dtoa_r+0x272>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cea:	e7f4      	b.n	8004cd6 <_dtoa_r+0x2ae>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	e7f5      	b.n	8004ce2 <_dtoa_r+0x2ba>
 8004cf6:	0052      	lsls	r2, r2, #1
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	e7d2      	b.n	8004ca2 <_dtoa_r+0x27a>
 8004cfc:	f3af 8000 	nop.w
 8004d00:	636f4361 	.word	0x636f4361
 8004d04:	3fd287a7 	.word	0x3fd287a7
 8004d08:	8b60c8b3 	.word	0x8b60c8b3
 8004d0c:	3fc68a28 	.word	0x3fc68a28
 8004d10:	509f79fb 	.word	0x509f79fb
 8004d14:	3fd34413 	.word	0x3fd34413
 8004d18:	0800700d 	.word	0x0800700d
 8004d1c:	08007024 	.word	0x08007024
 8004d20:	7ff00000 	.word	0x7ff00000
 8004d24:	08007009 	.word	0x08007009
 8004d28:	08007000 	.word	0x08007000
 8004d2c:	08006fdd 	.word	0x08006fdd
 8004d30:	08006fdc 	.word	0x08006fdc
 8004d34:	3ff80000 	.word	0x3ff80000
 8004d38:	08007148 	.word	0x08007148
 8004d3c:	08007066 	.word	0x08007066
 8004d40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d44:	9a00      	ldr	r2, [sp, #0]
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	9b04      	ldr	r3, [sp, #16]
 8004d4a:	2b0e      	cmp	r3, #14
 8004d4c:	f200 80a1 	bhi.w	8004e92 <_dtoa_r+0x46a>
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	f000 809e 	beq.w	8004e92 <_dtoa_r+0x46a>
 8004d56:	f1b8 0f00 	cmp.w	r8, #0
 8004d5a:	dd36      	ble.n	8004dca <_dtoa_r+0x3a2>
 8004d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8004fd8 <_dtoa_r+0x5b0>)
 8004d5e:	f008 020f 	and.w	r2, r8, #15
 8004d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d66:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004d6a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004d6e:	ea4f 1528 	mov.w	r5, r8, asr #4
 8004d72:	d016      	beq.n	8004da2 <_dtoa_r+0x37a>
 8004d74:	4b99      	ldr	r3, [pc, #612]	@ (8004fdc <_dtoa_r+0x5b4>)
 8004d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d7e:	f7fb fd4d 	bl	800081c <__aeabi_ddiv>
 8004d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d86:	f005 050f 	and.w	r5, r5, #15
 8004d8a:	2403      	movs	r4, #3
 8004d8c:	4e93      	ldr	r6, [pc, #588]	@ (8004fdc <_dtoa_r+0x5b4>)
 8004d8e:	b975      	cbnz	r5, 8004dae <_dtoa_r+0x386>
 8004d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d94:	4652      	mov	r2, sl
 8004d96:	465b      	mov	r3, fp
 8004d98:	f7fb fd40 	bl	800081c <__aeabi_ddiv>
 8004d9c:	4682      	mov	sl, r0
 8004d9e:	468b      	mov	fp, r1
 8004da0:	e02d      	b.n	8004dfe <_dtoa_r+0x3d6>
 8004da2:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004da6:	2402      	movs	r4, #2
 8004da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004dac:	e7ee      	b.n	8004d8c <_dtoa_r+0x364>
 8004dae:	07e9      	lsls	r1, r5, #31
 8004db0:	d508      	bpl.n	8004dc4 <_dtoa_r+0x39c>
 8004db2:	4650      	mov	r0, sl
 8004db4:	4659      	mov	r1, fp
 8004db6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004dba:	f7fb fc05 	bl	80005c8 <__aeabi_dmul>
 8004dbe:	3401      	adds	r4, #1
 8004dc0:	4682      	mov	sl, r0
 8004dc2:	468b      	mov	fp, r1
 8004dc4:	106d      	asrs	r5, r5, #1
 8004dc6:	3608      	adds	r6, #8
 8004dc8:	e7e1      	b.n	8004d8e <_dtoa_r+0x366>
 8004dca:	f000 80ad 	beq.w	8004f28 <_dtoa_r+0x500>
 8004dce:	f1c8 0500 	rsb	r5, r8, #0
 8004dd2:	4b81      	ldr	r3, [pc, #516]	@ (8004fd8 <_dtoa_r+0x5b0>)
 8004dd4:	4e81      	ldr	r6, [pc, #516]	@ (8004fdc <_dtoa_r+0x5b4>)
 8004dd6:	f005 020f 	and.w	r2, r5, #15
 8004dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de6:	f7fb fbef 	bl	80005c8 <__aeabi_dmul>
 8004dea:	112d      	asrs	r5, r5, #4
 8004dec:	4682      	mov	sl, r0
 8004dee:	468b      	mov	fp, r1
 8004df0:	2300      	movs	r3, #0
 8004df2:	2402      	movs	r4, #2
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	f040 808c 	bne.w	8004f12 <_dtoa_r+0x4ea>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ce      	bne.n	8004d9c <_dtoa_r+0x374>
 8004dfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8095 	beq.w	8004f30 <_dtoa_r+0x508>
 8004e06:	4b76      	ldr	r3, [pc, #472]	@ (8004fe0 <_dtoa_r+0x5b8>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	f7fb fe4d 	bl	8000aac <__aeabi_dcmplt>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f000 808c 	beq.w	8004f30 <_dtoa_r+0x508>
 8004e18:	9b04      	ldr	r3, [sp, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8088 	beq.w	8004f30 <_dtoa_r+0x508>
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dd35      	ble.n	8004e92 <_dtoa_r+0x46a>
 8004e26:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	4659      	mov	r1, fp
 8004e30:	4b6c      	ldr	r3, [pc, #432]	@ (8004fe4 <_dtoa_r+0x5bc>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f7fb fbc8 	bl	80005c8 <__aeabi_dmul>
 8004e38:	9e05      	ldr	r6, [sp, #20]
 8004e3a:	4682      	mov	sl, r0
 8004e3c:	468b      	mov	fp, r1
 8004e3e:	3401      	adds	r4, #1
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7fb fb57 	bl	80004f4 <__aeabi_i2d>
 8004e46:	4652      	mov	r2, sl
 8004e48:	465b      	mov	r3, fp
 8004e4a:	f7fb fbbd 	bl	80005c8 <__aeabi_dmul>
 8004e4e:	4b66      	ldr	r3, [pc, #408]	@ (8004fe8 <_dtoa_r+0x5c0>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	f7fb fa03 	bl	800025c <__adddf3>
 8004e56:	4604      	mov	r4, r0
 8004e58:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 8004e5c:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8004e60:	2e00      	cmp	r6, #0
 8004e62:	d169      	bne.n	8004f38 <_dtoa_r+0x510>
 8004e64:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <_dtoa_r+0x5c4>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	4650      	mov	r0, sl
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	f7fb f9f4 	bl	8000258 <__aeabi_dsub>
 8004e70:	4622      	mov	r2, r4
 8004e72:	462b      	mov	r3, r5
 8004e74:	4682      	mov	sl, r0
 8004e76:	468b      	mov	fp, r1
 8004e78:	f7fb fe36 	bl	8000ae8 <__aeabi_dcmpgt>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f040 8294 	bne.w	80053aa <_dtoa_r+0x982>
 8004e82:	4622      	mov	r2, r4
 8004e84:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8004e88:	4650      	mov	r0, sl
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	f7fb fe0e 	bl	8000aac <__aeabi_dcmplt>
 8004e90:	bb20      	cbnz	r0, 8004edc <_dtoa_r+0x4b4>
 8004e92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f2c0 8160 	blt.w	800515a <_dtoa_r+0x732>
 8004e9a:	f1b8 0f0e 	cmp.w	r8, #14
 8004e9e:	f300 815c 	bgt.w	800515a <_dtoa_r+0x732>
 8004ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd8 <_dtoa_r+0x5b0>)
 8004ea4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004ea8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004eac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f280 80ee 	bge.w	8005090 <_dtoa_r+0x668>
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f300 80ea 	bgt.w	8005090 <_dtoa_r+0x668>
 8004ebc:	d10e      	bne.n	8004edc <_dtoa_r+0x4b4>
 8004ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8004fec <_dtoa_r+0x5c4>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	f7fb fb7f 	bl	80005c8 <__aeabi_dmul>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed2:	f7fb fdf5 	bl	8000ac0 <__aeabi_dcmple>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	f000 826a 	beq.w	80053b0 <_dtoa_r+0x988>
 8004edc:	2500      	movs	r5, #0
 8004ede:	462c      	mov	r4, r5
 8004ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ee2:	9e00      	ldr	r6, [sp, #0]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	4627      	mov	r7, r4
 8004eea:	2400      	movs	r4, #0
 8004eec:	4629      	mov	r1, r5
 8004eee:	4648      	mov	r0, r9
 8004ef0:	f000 fcc0 	bl	8005874 <_Bfree>
 8004ef4:	2f00      	cmp	r7, #0
 8004ef6:	f000 80c1 	beq.w	800507c <_dtoa_r+0x654>
 8004efa:	b12c      	cbz	r4, 8004f08 <_dtoa_r+0x4e0>
 8004efc:	42bc      	cmp	r4, r7
 8004efe:	d003      	beq.n	8004f08 <_dtoa_r+0x4e0>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4648      	mov	r0, r9
 8004f04:	f000 fcb6 	bl	8005874 <_Bfree>
 8004f08:	4639      	mov	r1, r7
 8004f0a:	4648      	mov	r0, r9
 8004f0c:	f000 fcb2 	bl	8005874 <_Bfree>
 8004f10:	e0b4      	b.n	800507c <_dtoa_r+0x654>
 8004f12:	07ea      	lsls	r2, r5, #31
 8004f14:	d505      	bpl.n	8004f22 <_dtoa_r+0x4fa>
 8004f16:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f1a:	f7fb fb55 	bl	80005c8 <__aeabi_dmul>
 8004f1e:	3401      	adds	r4, #1
 8004f20:	2301      	movs	r3, #1
 8004f22:	106d      	asrs	r5, r5, #1
 8004f24:	3608      	adds	r6, #8
 8004f26:	e765      	b.n	8004df4 <_dtoa_r+0x3cc>
 8004f28:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8004f2c:	2402      	movs	r4, #2
 8004f2e:	e766      	b.n	8004dfe <_dtoa_r+0x3d6>
 8004f30:	9e04      	ldr	r6, [sp, #16]
 8004f32:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f36:	e783      	b.n	8004e40 <_dtoa_r+0x418>
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <_dtoa_r+0x5b0>)
 8004f3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f3e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d055      	beq.n	8004ff4 <_dtoa_r+0x5cc>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	4928      	ldr	r1, [pc, #160]	@ (8004ff0 <_dtoa_r+0x5c8>)
 8004f50:	f7fb fc64 	bl	800081c <__aeabi_ddiv>
 8004f54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f58:	f7fb f97e 	bl	8000258 <__aeabi_dsub>
 8004f5c:	9b00      	ldr	r3, [sp, #0]
 8004f5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f62:	199d      	adds	r5, r3, r6
 8004f64:	461e      	mov	r6, r3
 8004f66:	4659      	mov	r1, fp
 8004f68:	4650      	mov	r0, sl
 8004f6a:	f7fb fddd 	bl	8000b28 <__aeabi_d2iz>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	f7fb fac0 	bl	80004f4 <__aeabi_i2d>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4650      	mov	r0, sl
 8004f7a:	4659      	mov	r1, fp
 8004f7c:	f7fb f96c 	bl	8000258 <__aeabi_dsub>
 8004f80:	3430      	adds	r4, #48	@ 0x30
 8004f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f86:	f806 4b01 	strb.w	r4, [r6], #1
 8004f8a:	4682      	mov	sl, r0
 8004f8c:	468b      	mov	fp, r1
 8004f8e:	f7fb fd8d 	bl	8000aac <__aeabi_dcmplt>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d172      	bne.n	800507c <_dtoa_r+0x654>
 8004f96:	4652      	mov	r2, sl
 8004f98:	465b      	mov	r3, fp
 8004f9a:	4911      	ldr	r1, [pc, #68]	@ (8004fe0 <_dtoa_r+0x5b8>)
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fb f95b 	bl	8000258 <__aeabi_dsub>
 8004fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004fa6:	f7fb fd81 	bl	8000aac <__aeabi_dcmplt>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f040 80b6 	bne.w	800511c <_dtoa_r+0x6f4>
 8004fb0:	42ae      	cmp	r6, r5
 8004fb2:	f43f af6e 	beq.w	8004e92 <_dtoa_r+0x46a>
 8004fb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004fba:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <_dtoa_r+0x5bc>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f7fb fb03 	bl	80005c8 <__aeabi_dmul>
 8004fc2:	4b08      	ldr	r3, [pc, #32]	@ (8004fe4 <_dtoa_r+0x5bc>)
 8004fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4659      	mov	r1, fp
 8004fce:	f7fb fafb 	bl	80005c8 <__aeabi_dmul>
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	468b      	mov	fp, r1
 8004fd6:	e7c6      	b.n	8004f66 <_dtoa_r+0x53e>
 8004fd8:	08007148 	.word	0x08007148
 8004fdc:	08007120 	.word	0x08007120
 8004fe0:	3ff00000 	.word	0x3ff00000
 8004fe4:	40240000 	.word	0x40240000
 8004fe8:	401c0000 	.word	0x401c0000
 8004fec:	40140000 	.word	0x40140000
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ff8:	f7fb fae6 	bl	80005c8 <__aeabi_dmul>
 8004ffc:	9b00      	ldr	r3, [sp, #0]
 8004ffe:	9d00      	ldr	r5, [sp, #0]
 8005000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005004:	4433      	add	r3, r6
 8005006:	9315      	str	r3, [sp, #84]	@ 0x54
 8005008:	4659      	mov	r1, fp
 800500a:	4650      	mov	r0, sl
 800500c:	f7fb fd8c 	bl	8000b28 <__aeabi_d2iz>
 8005010:	4604      	mov	r4, r0
 8005012:	f7fb fa6f 	bl	80004f4 <__aeabi_i2d>
 8005016:	3430      	adds	r4, #48	@ 0x30
 8005018:	460b      	mov	r3, r1
 800501a:	4602      	mov	r2, r0
 800501c:	4659      	mov	r1, fp
 800501e:	4650      	mov	r0, sl
 8005020:	f7fb f91a 	bl	8000258 <__aeabi_dsub>
 8005024:	f805 4b01 	strb.w	r4, [r5], #1
 8005028:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800502a:	429d      	cmp	r5, r3
 800502c:	4682      	mov	sl, r0
 800502e:	468b      	mov	fp, r1
 8005030:	d127      	bne.n	8005082 <_dtoa_r+0x65a>
 8005032:	9b00      	ldr	r3, [sp, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800503a:	441e      	add	r6, r3
 800503c:	4bb3      	ldr	r3, [pc, #716]	@ (800530c <_dtoa_r+0x8e4>)
 800503e:	f7fb f90d 	bl	800025c <__adddf3>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4650      	mov	r0, sl
 8005048:	4659      	mov	r1, fp
 800504a:	f7fb fd4d 	bl	8000ae8 <__aeabi_dcmpgt>
 800504e:	2800      	cmp	r0, #0
 8005050:	d164      	bne.n	800511c <_dtoa_r+0x6f4>
 8005052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005056:	49ad      	ldr	r1, [pc, #692]	@ (800530c <_dtoa_r+0x8e4>)
 8005058:	2000      	movs	r0, #0
 800505a:	f7fb f8fd 	bl	8000258 <__aeabi_dsub>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4650      	mov	r0, sl
 8005064:	4659      	mov	r1, fp
 8005066:	f7fb fd21 	bl	8000aac <__aeabi_dcmplt>
 800506a:	2800      	cmp	r0, #0
 800506c:	f43f af11 	beq.w	8004e92 <_dtoa_r+0x46a>
 8005070:	4633      	mov	r3, r6
 8005072:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005076:	2a30      	cmp	r2, #48	@ 0x30
 8005078:	d0fa      	beq.n	8005070 <_dtoa_r+0x648>
 800507a:	461e      	mov	r6, r3
 800507c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005080:	e03a      	b.n	80050f8 <_dtoa_r+0x6d0>
 8005082:	4ba3      	ldr	r3, [pc, #652]	@ (8005310 <_dtoa_r+0x8e8>)
 8005084:	2200      	movs	r2, #0
 8005086:	f7fb fa9f 	bl	80005c8 <__aeabi_dmul>
 800508a:	4682      	mov	sl, r0
 800508c:	468b      	mov	fp, r1
 800508e:	e7bb      	b.n	8005008 <_dtoa_r+0x5e0>
 8005090:	9e00      	ldr	r6, [sp, #0]
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509a:	f7fb fbbf 	bl	800081c <__aeabi_ddiv>
 800509e:	f7fb fd43 	bl	8000b28 <__aeabi_d2iz>
 80050a2:	4607      	mov	r7, r0
 80050a4:	f7fb fa26 	bl	80004f4 <__aeabi_i2d>
 80050a8:	4652      	mov	r2, sl
 80050aa:	465b      	mov	r3, fp
 80050ac:	f7fb fa8c 	bl	80005c8 <__aeabi_dmul>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b8:	f7fb f8ce 	bl	8000258 <__aeabi_dsub>
 80050bc:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 80050c0:	9c00      	ldr	r4, [sp, #0]
 80050c2:	f806 cb01 	strb.w	ip, [r6], #1
 80050c6:	eba6 0c04 	sub.w	ip, r6, r4
 80050ca:	9c04      	ldr	r4, [sp, #16]
 80050cc:	4564      	cmp	r4, ip
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	d133      	bne.n	800513c <_dtoa_r+0x714>
 80050d4:	f7fb f8c2 	bl	800025c <__adddf3>
 80050d8:	4652      	mov	r2, sl
 80050da:	465b      	mov	r3, fp
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	f7fb fd02 	bl	8000ae8 <__aeabi_dcmpgt>
 80050e4:	b9c0      	cbnz	r0, 8005118 <_dtoa_r+0x6f0>
 80050e6:	4652      	mov	r2, sl
 80050e8:	465b      	mov	r3, fp
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb fcd3 	bl	8000a98 <__aeabi_dcmpeq>
 80050f2:	b108      	cbz	r0, 80050f8 <_dtoa_r+0x6d0>
 80050f4:	07fb      	lsls	r3, r7, #31
 80050f6:	d40f      	bmi.n	8005118 <_dtoa_r+0x6f0>
 80050f8:	9901      	ldr	r1, [sp, #4]
 80050fa:	4648      	mov	r0, r9
 80050fc:	f000 fbba 	bl	8005874 <_Bfree>
 8005100:	2300      	movs	r3, #0
 8005102:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005104:	7033      	strb	r3, [r6, #0]
 8005106:	f108 0301 	add.w	r3, r8, #1
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800510e:	2b00      	cmp	r3, #0
 8005110:	f43f acda 	beq.w	8004ac8 <_dtoa_r+0xa0>
 8005114:	601e      	str	r6, [r3, #0]
 8005116:	e4d7      	b.n	8004ac8 <_dtoa_r+0xa0>
 8005118:	f8cd 8008 	str.w	r8, [sp, #8]
 800511c:	4633      	mov	r3, r6
 800511e:	461e      	mov	r6, r3
 8005120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005124:	2a39      	cmp	r2, #57	@ 0x39
 8005126:	d106      	bne.n	8005136 <_dtoa_r+0x70e>
 8005128:	9a00      	ldr	r2, [sp, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d1f7      	bne.n	800511e <_dtoa_r+0x6f6>
 800512e:	9a02      	ldr	r2, [sp, #8]
 8005130:	3201      	adds	r2, #1
 8005132:	9202      	str	r2, [sp, #8]
 8005134:	2230      	movs	r2, #48	@ 0x30
 8005136:	3201      	adds	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e79f      	b.n	800507c <_dtoa_r+0x654>
 800513c:	4b74      	ldr	r3, [pc, #464]	@ (8005310 <_dtoa_r+0x8e8>)
 800513e:	2200      	movs	r2, #0
 8005140:	f7fb fa42 	bl	80005c8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fca2 	bl	8000a98 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d09c      	beq.n	8005092 <_dtoa_r+0x66a>
 8005158:	e7ce      	b.n	80050f8 <_dtoa_r+0x6d0>
 800515a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 80e3 	beq.w	8005328 <_dtoa_r+0x900>
 8005162:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005164:	2a01      	cmp	r2, #1
 8005166:	f300 80c2 	bgt.w	80052ee <_dtoa_r+0x8c6>
 800516a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 80ba 	beq.w	80052e6 <_dtoa_r+0x8be>
 8005172:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005176:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005178:	463e      	mov	r6, r7
 800517a:	9a08      	ldr	r2, [sp, #32]
 800517c:	2101      	movs	r1, #1
 800517e:	441a      	add	r2, r3
 8005180:	4648      	mov	r0, r9
 8005182:	441f      	add	r7, r3
 8005184:	9208      	str	r2, [sp, #32]
 8005186:	f000 fc29 	bl	80059dc <__i2b>
 800518a:	4604      	mov	r4, r0
 800518c:	b156      	cbz	r6, 80051a4 <_dtoa_r+0x77c>
 800518e:	9b08      	ldr	r3, [sp, #32]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd07      	ble.n	80051a4 <_dtoa_r+0x77c>
 8005194:	42b3      	cmp	r3, r6
 8005196:	9a08      	ldr	r2, [sp, #32]
 8005198:	bfa8      	it	ge
 800519a:	4633      	movge	r3, r6
 800519c:	1aff      	subs	r7, r7, r3
 800519e:	1af6      	subs	r6, r6, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	9308      	str	r3, [sp, #32]
 80051a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a6:	b30b      	cbz	r3, 80051ec <_dtoa_r+0x7c4>
 80051a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80c3 	beq.w	8005336 <_dtoa_r+0x90e>
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	f000 80bd 	beq.w	8005330 <_dtoa_r+0x908>
 80051b6:	4621      	mov	r1, r4
 80051b8:	462a      	mov	r2, r5
 80051ba:	4648      	mov	r0, r9
 80051bc:	f000 fcce 	bl	8005b5c <__pow5mult>
 80051c0:	9a01      	ldr	r2, [sp, #4]
 80051c2:	4601      	mov	r1, r0
 80051c4:	4604      	mov	r4, r0
 80051c6:	4648      	mov	r0, r9
 80051c8:	f000 fc1e 	bl	8005a08 <__multiply>
 80051cc:	9901      	ldr	r1, [sp, #4]
 80051ce:	4682      	mov	sl, r0
 80051d0:	4648      	mov	r0, r9
 80051d2:	f000 fb4f 	bl	8005874 <_Bfree>
 80051d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d8:	1b5b      	subs	r3, r3, r5
 80051da:	9309      	str	r3, [sp, #36]	@ 0x24
 80051dc:	f000 80ae 	beq.w	800533c <_dtoa_r+0x914>
 80051e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051e2:	4651      	mov	r1, sl
 80051e4:	4648      	mov	r0, r9
 80051e6:	f000 fcb9 	bl	8005b5c <__pow5mult>
 80051ea:	9001      	str	r0, [sp, #4]
 80051ec:	2101      	movs	r1, #1
 80051ee:	4648      	mov	r0, r9
 80051f0:	f000 fbf4 	bl	80059dc <__i2b>
 80051f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051f6:	4605      	mov	r5, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 81d7 	beq.w	80055ac <_dtoa_r+0xb84>
 80051fe:	461a      	mov	r2, r3
 8005200:	4601      	mov	r1, r0
 8005202:	4648      	mov	r0, r9
 8005204:	f000 fcaa 	bl	8005b5c <__pow5mult>
 8005208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800520a:	2b01      	cmp	r3, #1
 800520c:	4605      	mov	r5, r0
 800520e:	f300 809d 	bgt.w	800534c <_dtoa_r+0x924>
 8005212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 8094 	bne.w	8005342 <_dtoa_r+0x91a>
 800521a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800521c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 808e 	bne.w	8005342 <_dtoa_r+0x91a>
 8005226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	051b      	lsls	r3, r3, #20
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8089 	beq.w	8005348 <_dtoa_r+0x920>
 8005236:	9b08      	ldr	r3, [sp, #32]
 8005238:	3301      	adds	r3, #1
 800523a:	3701      	adds	r7, #1
 800523c:	9308      	str	r3, [sp, #32]
 800523e:	f04f 0a01 	mov.w	sl, #1
 8005242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81b7 	beq.w	80055b8 <_dtoa_r+0xb90>
 800524a:	692b      	ldr	r3, [r5, #16]
 800524c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005250:	6918      	ldr	r0, [r3, #16]
 8005252:	f000 fb77 	bl	8005944 <__hi0bits>
 8005256:	f1c0 0020 	rsb	r0, r0, #32
 800525a:	9b08      	ldr	r3, [sp, #32]
 800525c:	4418      	add	r0, r3
 800525e:	f010 001f 	ands.w	r0, r0, #31
 8005262:	d07e      	beq.n	8005362 <_dtoa_r+0x93a>
 8005264:	f1c0 0320 	rsb	r3, r0, #32
 8005268:	2b04      	cmp	r3, #4
 800526a:	dd72      	ble.n	8005352 <_dtoa_r+0x92a>
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	f1c0 001c 	rsb	r0, r0, #28
 8005272:	4403      	add	r3, r0
 8005274:	4407      	add	r7, r0
 8005276:	4406      	add	r6, r0
 8005278:	9308      	str	r3, [sp, #32]
 800527a:	2f00      	cmp	r7, #0
 800527c:	dd05      	ble.n	800528a <_dtoa_r+0x862>
 800527e:	9901      	ldr	r1, [sp, #4]
 8005280:	463a      	mov	r2, r7
 8005282:	4648      	mov	r0, r9
 8005284:	f000 fcc6 	bl	8005c14 <__lshift>
 8005288:	9001      	str	r0, [sp, #4]
 800528a:	9b08      	ldr	r3, [sp, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd05      	ble.n	800529c <_dtoa_r+0x874>
 8005290:	4629      	mov	r1, r5
 8005292:	461a      	mov	r2, r3
 8005294:	4648      	mov	r0, r9
 8005296:	f000 fcbd 	bl	8005c14 <__lshift>
 800529a:	4605      	mov	r5, r0
 800529c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d061      	beq.n	8005366 <_dtoa_r+0x93e>
 80052a2:	9801      	ldr	r0, [sp, #4]
 80052a4:	4629      	mov	r1, r5
 80052a6:	f000 fd23 	bl	8005cf0 <__mcmp>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	da5b      	bge.n	8005366 <_dtoa_r+0x93e>
 80052ae:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	9901      	ldr	r1, [sp, #4]
 80052b6:	2300      	movs	r3, #0
 80052b8:	220a      	movs	r2, #10
 80052ba:	4648      	mov	r0, r9
 80052bc:	f000 fafc 	bl	80058b8 <__multadd>
 80052c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8179 	beq.w	80055bc <_dtoa_r+0xb94>
 80052ca:	2300      	movs	r3, #0
 80052cc:	4621      	mov	r1, r4
 80052ce:	220a      	movs	r2, #10
 80052d0:	4648      	mov	r0, r9
 80052d2:	f000 faf1 	bl	80058b8 <__multadd>
 80052d6:	9b05      	ldr	r3, [sp, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	dc72      	bgt.n	80053c4 <_dtoa_r+0x99c>
 80052de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	dc49      	bgt.n	8005378 <_dtoa_r+0x950>
 80052e4:	e06e      	b.n	80053c4 <_dtoa_r+0x99c>
 80052e6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80052e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80052ec:	e743      	b.n	8005176 <_dtoa_r+0x74e>
 80052ee:	9b04      	ldr	r3, [sp, #16]
 80052f0:	1e5d      	subs	r5, r3, #1
 80052f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	db0d      	blt.n	8005314 <_dtoa_r+0x8ec>
 80052f8:	1b5d      	subs	r5, r3, r5
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f6bf af3b 	bge.w	8005178 <_dtoa_r+0x750>
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	1afe      	subs	r6, r7, r3
 8005306:	2300      	movs	r3, #0
 8005308:	e737      	b.n	800517a <_dtoa_r+0x752>
 800530a:	bf00      	nop
 800530c:	3fe00000 	.word	0x3fe00000
 8005310:	40240000 	.word	0x40240000
 8005314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005316:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005318:	9509      	str	r5, [sp, #36]	@ 0x24
 800531a:	1aeb      	subs	r3, r5, r3
 800531c:	441a      	add	r2, r3
 800531e:	920d      	str	r2, [sp, #52]	@ 0x34
 8005320:	9b04      	ldr	r3, [sp, #16]
 8005322:	463e      	mov	r6, r7
 8005324:	2500      	movs	r5, #0
 8005326:	e728      	b.n	800517a <_dtoa_r+0x752>
 8005328:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800532a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800532c:	463e      	mov	r6, r7
 800532e:	e72d      	b.n	800518c <_dtoa_r+0x764>
 8005330:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005334:	e754      	b.n	80051e0 <_dtoa_r+0x7b8>
 8005336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005338:	9901      	ldr	r1, [sp, #4]
 800533a:	e753      	b.n	80051e4 <_dtoa_r+0x7bc>
 800533c:	f8cd a004 	str.w	sl, [sp, #4]
 8005340:	e754      	b.n	80051ec <_dtoa_r+0x7c4>
 8005342:	f04f 0a00 	mov.w	sl, #0
 8005346:	e77c      	b.n	8005242 <_dtoa_r+0x81a>
 8005348:	469a      	mov	sl, r3
 800534a:	e77a      	b.n	8005242 <_dtoa_r+0x81a>
 800534c:	f04f 0a00 	mov.w	sl, #0
 8005350:	e77b      	b.n	800524a <_dtoa_r+0x822>
 8005352:	d092      	beq.n	800527a <_dtoa_r+0x852>
 8005354:	9a08      	ldr	r2, [sp, #32]
 8005356:	331c      	adds	r3, #28
 8005358:	441a      	add	r2, r3
 800535a:	441f      	add	r7, r3
 800535c:	441e      	add	r6, r3
 800535e:	9208      	str	r2, [sp, #32]
 8005360:	e78b      	b.n	800527a <_dtoa_r+0x852>
 8005362:	4603      	mov	r3, r0
 8005364:	e7f6      	b.n	8005354 <_dtoa_r+0x92c>
 8005366:	9b04      	ldr	r3, [sp, #16]
 8005368:	f8cd 8008 	str.w	r8, [sp, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc23      	bgt.n	80053b8 <_dtoa_r+0x990>
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005374:	2b02      	cmp	r3, #2
 8005376:	dd21      	ble.n	80053bc <_dtoa_r+0x994>
 8005378:	9b05      	ldr	r3, [sp, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f47f adb0 	bne.w	8004ee0 <_dtoa_r+0x4b8>
 8005380:	4629      	mov	r1, r5
 8005382:	2205      	movs	r2, #5
 8005384:	4648      	mov	r0, r9
 8005386:	f000 fa97 	bl	80058b8 <__multadd>
 800538a:	4601      	mov	r1, r0
 800538c:	4605      	mov	r5, r0
 800538e:	9801      	ldr	r0, [sp, #4]
 8005390:	f000 fcae 	bl	8005cf0 <__mcmp>
 8005394:	2800      	cmp	r0, #0
 8005396:	f77f ada3 	ble.w	8004ee0 <_dtoa_r+0x4b8>
 800539a:	9e00      	ldr	r6, [sp, #0]
 800539c:	2331      	movs	r3, #49	@ 0x31
 800539e:	f806 3b01 	strb.w	r3, [r6], #1
 80053a2:	9b02      	ldr	r3, [sp, #8]
 80053a4:	3301      	adds	r3, #1
 80053a6:	9302      	str	r3, [sp, #8]
 80053a8:	e59e      	b.n	8004ee8 <_dtoa_r+0x4c0>
 80053aa:	4635      	mov	r5, r6
 80053ac:	462c      	mov	r4, r5
 80053ae:	e7f4      	b.n	800539a <_dtoa_r+0x972>
 80053b0:	9d04      	ldr	r5, [sp, #16]
 80053b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80053b6:	e7f9      	b.n	80053ac <_dtoa_r+0x984>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8100 	beq.w	80055c4 <_dtoa_r+0xb9c>
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	dd05      	ble.n	80053d4 <_dtoa_r+0x9ac>
 80053c8:	4621      	mov	r1, r4
 80053ca:	4632      	mov	r2, r6
 80053cc:	4648      	mov	r0, r9
 80053ce:	f000 fc21 	bl	8005c14 <__lshift>
 80053d2:	4604      	mov	r4, r0
 80053d4:	f1ba 0f00 	cmp.w	sl, #0
 80053d8:	d05a      	beq.n	8005490 <_dtoa_r+0xa68>
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	4648      	mov	r0, r9
 80053de:	f000 fa0b 	bl	80057f8 <_Balloc>
 80053e2:	4606      	mov	r6, r0
 80053e4:	b928      	cbnz	r0, 80053f2 <_dtoa_r+0x9ca>
 80053e6:	4b82      	ldr	r3, [pc, #520]	@ (80055f0 <_dtoa_r+0xbc8>)
 80053e8:	4602      	mov	r2, r0
 80053ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80053ee:	f7ff bb32 	b.w	8004a56 <_dtoa_r+0x2e>
 80053f2:	6922      	ldr	r2, [r4, #16]
 80053f4:	3202      	adds	r2, #2
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	f104 010c 	add.w	r1, r4, #12
 80053fc:	300c      	adds	r0, #12
 80053fe:	f000 ffb3 	bl	8006368 <memcpy>
 8005402:	2201      	movs	r2, #1
 8005404:	4631      	mov	r1, r6
 8005406:	4648      	mov	r0, r9
 8005408:	f000 fc04 	bl	8005c14 <__lshift>
 800540c:	4607      	mov	r7, r0
 800540e:	9b00      	ldr	r3, [sp, #0]
 8005410:	9a00      	ldr	r2, [sp, #0]
 8005412:	f103 0b01 	add.w	fp, r3, #1
 8005416:	9b05      	ldr	r3, [sp, #20]
 8005418:	4413      	add	r3, r2
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	9308      	str	r3, [sp, #32]
 8005424:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8005428:	4629      	mov	r1, r5
 800542a:	9801      	ldr	r0, [sp, #4]
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	f7ff fa70 	bl	8004912 <quorem>
 8005432:	4621      	mov	r1, r4
 8005434:	9005      	str	r0, [sp, #20]
 8005436:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800543a:	9801      	ldr	r0, [sp, #4]
 800543c:	f000 fc58 	bl	8005cf0 <__mcmp>
 8005440:	463a      	mov	r2, r7
 8005442:	4680      	mov	r8, r0
 8005444:	4629      	mov	r1, r5
 8005446:	4648      	mov	r0, r9
 8005448:	f000 fc6e 	bl	8005d28 <__mdiff>
 800544c:	68c2      	ldr	r2, [r0, #12]
 800544e:	4606      	mov	r6, r0
 8005450:	bb02      	cbnz	r2, 8005494 <_dtoa_r+0xa6c>
 8005452:	4601      	mov	r1, r0
 8005454:	9801      	ldr	r0, [sp, #4]
 8005456:	f000 fc4b 	bl	8005cf0 <__mcmp>
 800545a:	4602      	mov	r2, r0
 800545c:	4631      	mov	r1, r6
 800545e:	4648      	mov	r0, r9
 8005460:	9209      	str	r2, [sp, #36]	@ 0x24
 8005462:	f000 fa07 	bl	8005874 <_Bfree>
 8005466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800546a:	ea42 0103 	orr.w	r1, r2, r3
 800546e:	9b08      	ldr	r3, [sp, #32]
 8005470:	4319      	orrs	r1, r3
 8005472:	465e      	mov	r6, fp
 8005474:	d110      	bne.n	8005498 <_dtoa_r+0xa70>
 8005476:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800547a:	d02b      	beq.n	80054d4 <_dtoa_r+0xaac>
 800547c:	f1b8 0f00 	cmp.w	r8, #0
 8005480:	dd02      	ble.n	8005488 <_dtoa_r+0xa60>
 8005482:	9b05      	ldr	r3, [sp, #20]
 8005484:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005488:	9b04      	ldr	r3, [sp, #16]
 800548a:	f883 a000 	strb.w	sl, [r3]
 800548e:	e52d      	b.n	8004eec <_dtoa_r+0x4c4>
 8005490:	4627      	mov	r7, r4
 8005492:	e7bc      	b.n	800540e <_dtoa_r+0x9e6>
 8005494:	2201      	movs	r2, #1
 8005496:	e7e1      	b.n	800545c <_dtoa_r+0xa34>
 8005498:	f1b8 0f00 	cmp.w	r8, #0
 800549c:	db06      	blt.n	80054ac <_dtoa_r+0xa84>
 800549e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054a0:	ea48 0803 	orr.w	r8, r8, r3
 80054a4:	9b08      	ldr	r3, [sp, #32]
 80054a6:	ea58 0803 	orrs.w	r8, r8, r3
 80054aa:	d120      	bne.n	80054ee <_dtoa_r+0xac6>
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	ddeb      	ble.n	8005488 <_dtoa_r+0xa60>
 80054b0:	9901      	ldr	r1, [sp, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	4648      	mov	r0, r9
 80054b6:	f000 fbad 	bl	8005c14 <__lshift>
 80054ba:	4629      	mov	r1, r5
 80054bc:	9001      	str	r0, [sp, #4]
 80054be:	f000 fc17 	bl	8005cf0 <__mcmp>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	dc03      	bgt.n	80054ce <_dtoa_r+0xaa6>
 80054c6:	d1df      	bne.n	8005488 <_dtoa_r+0xa60>
 80054c8:	f01a 0f01 	tst.w	sl, #1
 80054cc:	d0dc      	beq.n	8005488 <_dtoa_r+0xa60>
 80054ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80054d2:	d1d6      	bne.n	8005482 <_dtoa_r+0xa5a>
 80054d4:	9a04      	ldr	r2, [sp, #16]
 80054d6:	2339      	movs	r3, #57	@ 0x39
 80054d8:	7013      	strb	r3, [r2, #0]
 80054da:	4633      	mov	r3, r6
 80054dc:	461e      	mov	r6, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80054e4:	2a39      	cmp	r2, #57	@ 0x39
 80054e6:	d052      	beq.n	800558e <_dtoa_r+0xb66>
 80054e8:	3201      	adds	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e4fe      	b.n	8004eec <_dtoa_r+0x4c4>
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	dd07      	ble.n	8005502 <_dtoa_r+0xada>
 80054f2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80054f6:	d0ed      	beq.n	80054d4 <_dtoa_r+0xaac>
 80054f8:	9a04      	ldr	r2, [sp, #16]
 80054fa:	f10a 0301 	add.w	r3, sl, #1
 80054fe:	7013      	strb	r3, [r2, #0]
 8005500:	e4f4      	b.n	8004eec <_dtoa_r+0x4c4>
 8005502:	9b06      	ldr	r3, [sp, #24]
 8005504:	f80b ac01 	strb.w	sl, [fp, #-1]
 8005508:	455b      	cmp	r3, fp
 800550a:	d02a      	beq.n	8005562 <_dtoa_r+0xb3a>
 800550c:	9901      	ldr	r1, [sp, #4]
 800550e:	2300      	movs	r3, #0
 8005510:	220a      	movs	r2, #10
 8005512:	4648      	mov	r0, r9
 8005514:	f000 f9d0 	bl	80058b8 <__multadd>
 8005518:	42bc      	cmp	r4, r7
 800551a:	9001      	str	r0, [sp, #4]
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	f04f 020a 	mov.w	r2, #10
 8005524:	4621      	mov	r1, r4
 8005526:	4648      	mov	r0, r9
 8005528:	d106      	bne.n	8005538 <_dtoa_r+0xb10>
 800552a:	f000 f9c5 	bl	80058b8 <__multadd>
 800552e:	4604      	mov	r4, r0
 8005530:	4607      	mov	r7, r0
 8005532:	f10b 0b01 	add.w	fp, fp, #1
 8005536:	e775      	b.n	8005424 <_dtoa_r+0x9fc>
 8005538:	f000 f9be 	bl	80058b8 <__multadd>
 800553c:	4639      	mov	r1, r7
 800553e:	4604      	mov	r4, r0
 8005540:	2300      	movs	r3, #0
 8005542:	220a      	movs	r2, #10
 8005544:	4648      	mov	r0, r9
 8005546:	f000 f9b7 	bl	80058b8 <__multadd>
 800554a:	4607      	mov	r7, r0
 800554c:	e7f1      	b.n	8005532 <_dtoa_r+0xb0a>
 800554e:	9b05      	ldr	r3, [sp, #20]
 8005550:	1e5e      	subs	r6, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	bfd8      	it	le
 8005558:	2600      	movle	r6, #0
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	4627      	mov	r7, r4
 800555e:	4416      	add	r6, r2
 8005560:	2400      	movs	r4, #0
 8005562:	9901      	ldr	r1, [sp, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	4648      	mov	r0, r9
 8005568:	f000 fb54 	bl	8005c14 <__lshift>
 800556c:	4629      	mov	r1, r5
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	f000 fbbe 	bl	8005cf0 <__mcmp>
 8005574:	2800      	cmp	r0, #0
 8005576:	dcb0      	bgt.n	80054da <_dtoa_r+0xab2>
 8005578:	d102      	bne.n	8005580 <_dtoa_r+0xb58>
 800557a:	f01a 0f01 	tst.w	sl, #1
 800557e:	d1ac      	bne.n	80054da <_dtoa_r+0xab2>
 8005580:	4633      	mov	r3, r6
 8005582:	461e      	mov	r6, r3
 8005584:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005588:	2a30      	cmp	r2, #48	@ 0x30
 800558a:	d0fa      	beq.n	8005582 <_dtoa_r+0xb5a>
 800558c:	e4ae      	b.n	8004eec <_dtoa_r+0x4c4>
 800558e:	9a00      	ldr	r2, [sp, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d1a3      	bne.n	80054dc <_dtoa_r+0xab4>
 8005594:	9b02      	ldr	r3, [sp, #8]
 8005596:	3301      	adds	r3, #1
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	2331      	movs	r3, #49	@ 0x31
 800559c:	e7af      	b.n	80054fe <_dtoa_r+0xad6>
 800559e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f aa8c 	bne.w	8004abe <_dtoa_r+0x96>
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <_dtoa_r+0xbcc>)
 80055a8:	f7ff baab 	b.w	8004b02 <_dtoa_r+0xda>
 80055ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f77f ae2f 	ble.w	8005212 <_dtoa_r+0x7ea>
 80055b4:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80055b8:	2001      	movs	r0, #1
 80055ba:	e64e      	b.n	800525a <_dtoa_r+0x832>
 80055bc:	9b05      	ldr	r3, [sp, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f77f aed7 	ble.w	8005372 <_dtoa_r+0x94a>
 80055c4:	9e00      	ldr	r6, [sp, #0]
 80055c6:	9801      	ldr	r0, [sp, #4]
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7ff f9a2 	bl	8004912 <quorem>
 80055ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	f806 ab01 	strb.w	sl, [r6], #1
 80055d8:	1af2      	subs	r2, r6, r3
 80055da:	9b05      	ldr	r3, [sp, #20]
 80055dc:	4293      	cmp	r3, r2
 80055de:	ddb6      	ble.n	800554e <_dtoa_r+0xb26>
 80055e0:	9901      	ldr	r1, [sp, #4]
 80055e2:	2300      	movs	r3, #0
 80055e4:	220a      	movs	r2, #10
 80055e6:	4648      	mov	r0, r9
 80055e8:	f000 f966 	bl	80058b8 <__multadd>
 80055ec:	9001      	str	r0, [sp, #4]
 80055ee:	e7ea      	b.n	80055c6 <_dtoa_r+0xb9e>
 80055f0:	08007066 	.word	0x08007066
 80055f4:	08007000 	.word	0x08007000

080055f8 <_free_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4605      	mov	r5, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d041      	beq.n	8005684 <_free_r+0x8c>
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	18e4      	addlt	r4, r4, r3
 800560c:	f000 f8e8 	bl	80057e0 <__malloc_lock>
 8005610:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <_free_r+0x90>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x2c>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005620:	f000 b8e4 	b.w	80057ec <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x42>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x1e>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x4c>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x42>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1850      	adds	r0, r2, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x6c>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1850      	adds	r0, r2, r1
 8005652:	4283      	cmp	r3, r0
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x22>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6053      	str	r3, [r2, #4]
 800565e:	4408      	add	r0, r1
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	e7da      	b.n	800561a <_free_r+0x22>
 8005664:	d902      	bls.n	800566c <_free_r+0x74>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x22>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf04      	itt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	6054      	str	r4, [r2, #4]
 8005682:	e7ca      	b.n	800561a <_free_r+0x22>
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	20000448 	.word	0x20000448

0800568c <malloc>:
 800568c:	4b02      	ldr	r3, [pc, #8]	@ (8005698 <malloc+0xc>)
 800568e:	4601      	mov	r1, r0
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	f000 b825 	b.w	80056e0 <_malloc_r>
 8005696:	bf00      	nop
 8005698:	20000018 	.word	0x20000018

0800569c <sbrk_aligned>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4e0f      	ldr	r6, [pc, #60]	@ (80056dc <sbrk_aligned+0x40>)
 80056a0:	460c      	mov	r4, r1
 80056a2:	6831      	ldr	r1, [r6, #0]
 80056a4:	4605      	mov	r5, r0
 80056a6:	b911      	cbnz	r1, 80056ae <sbrk_aligned+0x12>
 80056a8:	f000 fe4e 	bl	8006348 <_sbrk_r>
 80056ac:	6030      	str	r0, [r6, #0]
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 fe49 	bl	8006348 <_sbrk_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d103      	bne.n	80056c2 <sbrk_aligned+0x26>
 80056ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80056be:	4620      	mov	r0, r4
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	1cc4      	adds	r4, r0, #3
 80056c4:	f024 0403 	bic.w	r4, r4, #3
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d0f8      	beq.n	80056be <sbrk_aligned+0x22>
 80056cc:	1a21      	subs	r1, r4, r0
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 fe3a 	bl	8006348 <_sbrk_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1f2      	bne.n	80056be <sbrk_aligned+0x22>
 80056d8:	e7ef      	b.n	80056ba <sbrk_aligned+0x1e>
 80056da:	bf00      	nop
 80056dc:	20000444 	.word	0x20000444

080056e0 <_malloc_r>:
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	1ccd      	adds	r5, r1, #3
 80056e6:	f025 0503 	bic.w	r5, r5, #3
 80056ea:	3508      	adds	r5, #8
 80056ec:	2d0c      	cmp	r5, #12
 80056ee:	bf38      	it	cc
 80056f0:	250c      	movcc	r5, #12
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	4606      	mov	r6, r0
 80056f6:	db01      	blt.n	80056fc <_malloc_r+0x1c>
 80056f8:	42a9      	cmp	r1, r5
 80056fa:	d904      	bls.n	8005706 <_malloc_r+0x26>
 80056fc:	230c      	movs	r3, #12
 80056fe:	6033      	str	r3, [r6, #0]
 8005700:	2000      	movs	r0, #0
 8005702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057dc <_malloc_r+0xfc>
 800570a:	f000 f869 	bl	80057e0 <__malloc_lock>
 800570e:	f8d8 3000 	ldr.w	r3, [r8]
 8005712:	461c      	mov	r4, r3
 8005714:	bb44      	cbnz	r4, 8005768 <_malloc_r+0x88>
 8005716:	4629      	mov	r1, r5
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff ffbf 	bl	800569c <sbrk_aligned>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	4604      	mov	r4, r0
 8005722:	d158      	bne.n	80057d6 <_malloc_r+0xf6>
 8005724:	f8d8 4000 	ldr.w	r4, [r8]
 8005728:	4627      	mov	r7, r4
 800572a:	2f00      	cmp	r7, #0
 800572c:	d143      	bne.n	80057b6 <_malloc_r+0xd6>
 800572e:	2c00      	cmp	r4, #0
 8005730:	d04b      	beq.n	80057ca <_malloc_r+0xea>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	4639      	mov	r1, r7
 8005736:	4630      	mov	r0, r6
 8005738:	eb04 0903 	add.w	r9, r4, r3
 800573c:	f000 fe04 	bl	8006348 <_sbrk_r>
 8005740:	4581      	cmp	r9, r0
 8005742:	d142      	bne.n	80057ca <_malloc_r+0xea>
 8005744:	6821      	ldr	r1, [r4, #0]
 8005746:	1a6d      	subs	r5, r5, r1
 8005748:	4629      	mov	r1, r5
 800574a:	4630      	mov	r0, r6
 800574c:	f7ff ffa6 	bl	800569c <sbrk_aligned>
 8005750:	3001      	adds	r0, #1
 8005752:	d03a      	beq.n	80057ca <_malloc_r+0xea>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	442b      	add	r3, r5
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	f8d8 3000 	ldr.w	r3, [r8]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	bb62      	cbnz	r2, 80057bc <_malloc_r+0xdc>
 8005762:	f8c8 7000 	str.w	r7, [r8]
 8005766:	e00f      	b.n	8005788 <_malloc_r+0xa8>
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	1b52      	subs	r2, r2, r5
 800576c:	d420      	bmi.n	80057b0 <_malloc_r+0xd0>
 800576e:	2a0b      	cmp	r2, #11
 8005770:	d917      	bls.n	80057a2 <_malloc_r+0xc2>
 8005772:	1961      	adds	r1, r4, r5
 8005774:	42a3      	cmp	r3, r4
 8005776:	6025      	str	r5, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	6059      	strne	r1, [r3, #4]
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	bf08      	it	eq
 8005780:	f8c8 1000 	streq.w	r1, [r8]
 8005784:	5162      	str	r2, [r4, r5]
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	4630      	mov	r0, r6
 800578a:	f000 f82f 	bl	80057ec <__malloc_unlock>
 800578e:	f104 000b 	add.w	r0, r4, #11
 8005792:	1d23      	adds	r3, r4, #4
 8005794:	f020 0007 	bic.w	r0, r0, #7
 8005798:	1ac2      	subs	r2, r0, r3
 800579a:	bf1c      	itt	ne
 800579c:	1a1b      	subne	r3, r3, r0
 800579e:	50a3      	strne	r3, [r4, r2]
 80057a0:	e7af      	b.n	8005702 <_malloc_r+0x22>
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	bf0c      	ite	eq
 80057a8:	f8c8 2000 	streq.w	r2, [r8]
 80057ac:	605a      	strne	r2, [r3, #4]
 80057ae:	e7eb      	b.n	8005788 <_malloc_r+0xa8>
 80057b0:	4623      	mov	r3, r4
 80057b2:	6864      	ldr	r4, [r4, #4]
 80057b4:	e7ae      	b.n	8005714 <_malloc_r+0x34>
 80057b6:	463c      	mov	r4, r7
 80057b8:	687f      	ldr	r7, [r7, #4]
 80057ba:	e7b6      	b.n	800572a <_malloc_r+0x4a>
 80057bc:	461a      	mov	r2, r3
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d1fb      	bne.n	80057bc <_malloc_r+0xdc>
 80057c4:	2300      	movs	r3, #0
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	e7de      	b.n	8005788 <_malloc_r+0xa8>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 f80c 	bl	80057ec <__malloc_unlock>
 80057d4:	e794      	b.n	8005700 <_malloc_r+0x20>
 80057d6:	6005      	str	r5, [r0, #0]
 80057d8:	e7d6      	b.n	8005788 <_malloc_r+0xa8>
 80057da:	bf00      	nop
 80057dc:	20000448 	.word	0x20000448

080057e0 <__malloc_lock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	@ (80057e8 <__malloc_lock+0x8>)
 80057e2:	f7ff b894 	b.w	800490e <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	20000440 	.word	0x20000440

080057ec <__malloc_unlock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	@ (80057f4 <__malloc_unlock+0x8>)
 80057ee:	f7ff b88f 	b.w	8004910 <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	20000440 	.word	0x20000440

080057f8 <_Balloc>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	69c4      	ldr	r4, [r0, #28]
 80057fc:	4605      	mov	r5, r0
 80057fe:	460e      	mov	r6, r1
 8005800:	b984      	cbnz	r4, 8005824 <_Balloc+0x2c>
 8005802:	2010      	movs	r0, #16
 8005804:	f7ff ff42 	bl	800568c <malloc>
 8005808:	4604      	mov	r4, r0
 800580a:	61e8      	str	r0, [r5, #28]
 800580c:	b928      	cbnz	r0, 800581a <_Balloc+0x22>
 800580e:	4602      	mov	r2, r0
 8005810:	4b16      	ldr	r3, [pc, #88]	@ (800586c <_Balloc+0x74>)
 8005812:	4817      	ldr	r0, [pc, #92]	@ (8005870 <_Balloc+0x78>)
 8005814:	216b      	movs	r1, #107	@ 0x6b
 8005816:	f000 fdb5 	bl	8006384 <__assert_func>
 800581a:	2300      	movs	r3, #0
 800581c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005820:	6003      	str	r3, [r0, #0]
 8005822:	60c3      	str	r3, [r0, #12]
 8005824:	68e3      	ldr	r3, [r4, #12]
 8005826:	b953      	cbnz	r3, 800583e <_Balloc+0x46>
 8005828:	2221      	movs	r2, #33	@ 0x21
 800582a:	2104      	movs	r1, #4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fdc7 	bl	80063c0 <_calloc_r>
 8005832:	69eb      	ldr	r3, [r5, #28]
 8005834:	60e0      	str	r0, [r4, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	b90b      	cbnz	r3, 800583e <_Balloc+0x46>
 800583a:	2000      	movs	r0, #0
 800583c:	bd70      	pop	{r4, r5, r6, pc}
 800583e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005842:	b130      	cbz	r0, 8005852 <_Balloc+0x5a>
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800584a:	2300      	movs	r3, #0
 800584c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005850:	e7f4      	b.n	800583c <_Balloc+0x44>
 8005852:	2101      	movs	r1, #1
 8005854:	fa01 f406 	lsl.w	r4, r1, r6
 8005858:	1d62      	adds	r2, r4, #5
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fdaf 	bl	80063c0 <_calloc_r>
 8005862:	2800      	cmp	r0, #0
 8005864:	d0e9      	beq.n	800583a <_Balloc+0x42>
 8005866:	e9c0 6401 	strd	r6, r4, [r0, #4]
 800586a:	e7ee      	b.n	800584a <_Balloc+0x52>
 800586c:	0800700d 	.word	0x0800700d
 8005870:	08007077 	.word	0x08007077

08005874 <_Bfree>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	69c6      	ldr	r6, [r0, #28]
 8005878:	4605      	mov	r5, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b976      	cbnz	r6, 800589c <_Bfree+0x28>
 800587e:	2010      	movs	r0, #16
 8005880:	f7ff ff04 	bl	800568c <malloc>
 8005884:	4602      	mov	r2, r0
 8005886:	61e8      	str	r0, [r5, #28]
 8005888:	b920      	cbnz	r0, 8005894 <_Bfree+0x20>
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <_Bfree+0x3c>)
 800588c:	4809      	ldr	r0, [pc, #36]	@ (80058b4 <_Bfree+0x40>)
 800588e:	218f      	movs	r1, #143	@ 0x8f
 8005890:	f000 fd78 	bl	8006384 <__assert_func>
 8005894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005898:	6006      	str	r6, [r0, #0]
 800589a:	60c6      	str	r6, [r0, #12]
 800589c:	b13c      	cbz	r4, 80058ae <_Bfree+0x3a>
 800589e:	69eb      	ldr	r3, [r5, #28]
 80058a0:	6862      	ldr	r2, [r4, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058a8:	6021      	str	r1, [r4, #0]
 80058aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	0800700d 	.word	0x0800700d
 80058b4:	08007077 	.word	0x08007077

080058b8 <__multadd>:
 80058b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058bc:	690d      	ldr	r5, [r1, #16]
 80058be:	4607      	mov	r7, r0
 80058c0:	460c      	mov	r4, r1
 80058c2:	461e      	mov	r6, r3
 80058c4:	f101 0c14 	add.w	ip, r1, #20
 80058c8:	2000      	movs	r0, #0
 80058ca:	f8dc 3000 	ldr.w	r3, [ip]
 80058ce:	b299      	uxth	r1, r3
 80058d0:	fb02 6101 	mla	r1, r2, r1, r6
 80058d4:	0c1e      	lsrs	r6, r3, #16
 80058d6:	0c0b      	lsrs	r3, r1, #16
 80058d8:	fb02 3306 	mla	r3, r2, r6, r3
 80058dc:	b289      	uxth	r1, r1
 80058de:	3001      	adds	r0, #1
 80058e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058e4:	4285      	cmp	r5, r0
 80058e6:	f84c 1b04 	str.w	r1, [ip], #4
 80058ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058ee:	dcec      	bgt.n	80058ca <__multadd+0x12>
 80058f0:	b30e      	cbz	r6, 8005936 <__multadd+0x7e>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dc19      	bgt.n	800592c <__multadd+0x74>
 80058f8:	6861      	ldr	r1, [r4, #4]
 80058fa:	4638      	mov	r0, r7
 80058fc:	3101      	adds	r1, #1
 80058fe:	f7ff ff7b 	bl	80057f8 <_Balloc>
 8005902:	4680      	mov	r8, r0
 8005904:	b928      	cbnz	r0, 8005912 <__multadd+0x5a>
 8005906:	4602      	mov	r2, r0
 8005908:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <__multadd+0x84>)
 800590a:	480d      	ldr	r0, [pc, #52]	@ (8005940 <__multadd+0x88>)
 800590c:	21ba      	movs	r1, #186	@ 0xba
 800590e:	f000 fd39 	bl	8006384 <__assert_func>
 8005912:	6922      	ldr	r2, [r4, #16]
 8005914:	3202      	adds	r2, #2
 8005916:	f104 010c 	add.w	r1, r4, #12
 800591a:	0092      	lsls	r2, r2, #2
 800591c:	300c      	adds	r0, #12
 800591e:	f000 fd23 	bl	8006368 <memcpy>
 8005922:	4621      	mov	r1, r4
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff ffa5 	bl	8005874 <_Bfree>
 800592a:	4644      	mov	r4, r8
 800592c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005930:	3501      	adds	r5, #1
 8005932:	615e      	str	r6, [r3, #20]
 8005934:	6125      	str	r5, [r4, #16]
 8005936:	4620      	mov	r0, r4
 8005938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593c:	08007066 	.word	0x08007066
 8005940:	08007077 	.word	0x08007077

08005944 <__hi0bits>:
 8005944:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005948:	4603      	mov	r3, r0
 800594a:	bf36      	itet	cc
 800594c:	0403      	lslcc	r3, r0, #16
 800594e:	2000      	movcs	r0, #0
 8005950:	2010      	movcc	r0, #16
 8005952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005956:	bf3c      	itt	cc
 8005958:	021b      	lslcc	r3, r3, #8
 800595a:	3008      	addcc	r0, #8
 800595c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005960:	bf3c      	itt	cc
 8005962:	011b      	lslcc	r3, r3, #4
 8005964:	3004      	addcc	r0, #4
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	bf3c      	itt	cc
 800596c:	009b      	lslcc	r3, r3, #2
 800596e:	3002      	addcc	r0, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	db05      	blt.n	8005980 <__hi0bits+0x3c>
 8005974:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005978:	f100 0001 	add.w	r0, r0, #1
 800597c:	bf08      	it	eq
 800597e:	2020      	moveq	r0, #32
 8005980:	4770      	bx	lr

08005982 <__lo0bits>:
 8005982:	6803      	ldr	r3, [r0, #0]
 8005984:	4602      	mov	r2, r0
 8005986:	f013 0007 	ands.w	r0, r3, #7
 800598a:	d00b      	beq.n	80059a4 <__lo0bits+0x22>
 800598c:	07d9      	lsls	r1, r3, #31
 800598e:	d421      	bmi.n	80059d4 <__lo0bits+0x52>
 8005990:	0798      	lsls	r0, r3, #30
 8005992:	bf49      	itett	mi
 8005994:	085b      	lsrmi	r3, r3, #1
 8005996:	089b      	lsrpl	r3, r3, #2
 8005998:	2001      	movmi	r0, #1
 800599a:	6013      	strmi	r3, [r2, #0]
 800599c:	bf5c      	itt	pl
 800599e:	6013      	strpl	r3, [r2, #0]
 80059a0:	2002      	movpl	r0, #2
 80059a2:	4770      	bx	lr
 80059a4:	b299      	uxth	r1, r3
 80059a6:	b909      	cbnz	r1, 80059ac <__lo0bits+0x2a>
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	2010      	movs	r0, #16
 80059ac:	b2d9      	uxtb	r1, r3
 80059ae:	b909      	cbnz	r1, 80059b4 <__lo0bits+0x32>
 80059b0:	3008      	adds	r0, #8
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	0719      	lsls	r1, r3, #28
 80059b6:	bf04      	itt	eq
 80059b8:	091b      	lsreq	r3, r3, #4
 80059ba:	3004      	addeq	r0, #4
 80059bc:	0799      	lsls	r1, r3, #30
 80059be:	bf04      	itt	eq
 80059c0:	089b      	lsreq	r3, r3, #2
 80059c2:	3002      	addeq	r0, #2
 80059c4:	07d9      	lsls	r1, r3, #31
 80059c6:	d403      	bmi.n	80059d0 <__lo0bits+0x4e>
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	f100 0001 	add.w	r0, r0, #1
 80059ce:	d003      	beq.n	80059d8 <__lo0bits+0x56>
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4770      	bx	lr
 80059d4:	2000      	movs	r0, #0
 80059d6:	4770      	bx	lr
 80059d8:	2020      	movs	r0, #32
 80059da:	4770      	bx	lr

080059dc <__i2b>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	460c      	mov	r4, r1
 80059e0:	2101      	movs	r1, #1
 80059e2:	f7ff ff09 	bl	80057f8 <_Balloc>
 80059e6:	4602      	mov	r2, r0
 80059e8:	b928      	cbnz	r0, 80059f6 <__i2b+0x1a>
 80059ea:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <__i2b+0x24>)
 80059ec:	4805      	ldr	r0, [pc, #20]	@ (8005a04 <__i2b+0x28>)
 80059ee:	f240 1145 	movw	r1, #325	@ 0x145
 80059f2:	f000 fcc7 	bl	8006384 <__assert_func>
 80059f6:	2301      	movs	r3, #1
 80059f8:	6144      	str	r4, [r0, #20]
 80059fa:	6103      	str	r3, [r0, #16]
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	08007066 	.word	0x08007066
 8005a04:	08007077 	.word	0x08007077

08005a08 <__multiply>:
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005a10:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8005a14:	45d1      	cmp	r9, sl
 8005a16:	b085      	sub	sp, #20
 8005a18:	4688      	mov	r8, r1
 8005a1a:	4614      	mov	r4, r2
 8005a1c:	db04      	blt.n	8005a28 <__multiply+0x20>
 8005a1e:	4653      	mov	r3, sl
 8005a20:	460c      	mov	r4, r1
 8005a22:	46ca      	mov	sl, r9
 8005a24:	4690      	mov	r8, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	6861      	ldr	r1, [r4, #4]
 8005a2c:	eb0a 0609 	add.w	r6, sl, r9
 8005a30:	42b3      	cmp	r3, r6
 8005a32:	bfb8      	it	lt
 8005a34:	3101      	addlt	r1, #1
 8005a36:	f7ff fedf 	bl	80057f8 <_Balloc>
 8005a3a:	b930      	cbnz	r0, 8005a4a <__multiply+0x42>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b45      	ldr	r3, [pc, #276]	@ (8005b54 <__multiply+0x14c>)
 8005a40:	4845      	ldr	r0, [pc, #276]	@ (8005b58 <__multiply+0x150>)
 8005a42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a46:	f000 fc9d 	bl	8006384 <__assert_func>
 8005a4a:	f100 0514 	add.w	r5, r0, #20
 8005a4e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005a52:	462b      	mov	r3, r5
 8005a54:	2200      	movs	r2, #0
 8005a56:	42bb      	cmp	r3, r7
 8005a58:	d31f      	bcc.n	8005a9a <__multiply+0x92>
 8005a5a:	f104 0c14 	add.w	ip, r4, #20
 8005a5e:	f108 0114 	add.w	r1, r8, #20
 8005a62:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 8005a66:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 8005a6a:	9202      	str	r2, [sp, #8]
 8005a6c:	1b1a      	subs	r2, r3, r4
 8005a6e:	3a15      	subs	r2, #21
 8005a70:	f022 0203 	bic.w	r2, r2, #3
 8005a74:	3415      	adds	r4, #21
 8005a76:	429c      	cmp	r4, r3
 8005a78:	bf88      	it	hi
 8005a7a:	2200      	movhi	r2, #0
 8005a7c:	9201      	str	r2, [sp, #4]
 8005a7e:	9a02      	ldr	r2, [sp, #8]
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	428a      	cmp	r2, r1
 8005a84:	d80c      	bhi.n	8005aa0 <__multiply+0x98>
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	dd03      	ble.n	8005a92 <__multiply+0x8a>
 8005a8a:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d05d      	beq.n	8005b4e <__multiply+0x146>
 8005a92:	6106      	str	r6, [r0, #16]
 8005a94:	b005      	add	sp, #20
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	f843 2b04 	str.w	r2, [r3], #4
 8005a9e:	e7da      	b.n	8005a56 <__multiply+0x4e>
 8005aa0:	f8b1 a000 	ldrh.w	sl, [r1]
 8005aa4:	f1ba 0f00 	cmp.w	sl, #0
 8005aa8:	d024      	beq.n	8005af4 <__multiply+0xec>
 8005aaa:	46e0      	mov	r8, ip
 8005aac:	46a9      	mov	r9, r5
 8005aae:	f04f 0e00 	mov.w	lr, #0
 8005ab2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab6:	f8d9 4000 	ldr.w	r4, [r9]
 8005aba:	fa1f fb82 	uxth.w	fp, r2
 8005abe:	b2a4      	uxth	r4, r4
 8005ac0:	fb0a 440b 	mla	r4, sl, fp, r4
 8005ac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8005acc:	4474      	add	r4, lr
 8005ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ad2:	fb0a e20b 	mla	r2, sl, fp, lr
 8005ad6:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005ada:	b2a4      	uxth	r4, r4
 8005adc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ae0:	4543      	cmp	r3, r8
 8005ae2:	f849 4b04 	str.w	r4, [r9], #4
 8005ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aea:	d8e2      	bhi.n	8005ab2 <__multiply+0xaa>
 8005aec:	9a01      	ldr	r2, [sp, #4]
 8005aee:	18aa      	adds	r2, r5, r2
 8005af0:	f8c2 e004 	str.w	lr, [r2, #4]
 8005af4:	9a03      	ldr	r2, [sp, #12]
 8005af6:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8005afa:	3104      	adds	r1, #4
 8005afc:	f1b8 0f00 	cmp.w	r8, #0
 8005b00:	d023      	beq.n	8005b4a <__multiply+0x142>
 8005b02:	682a      	ldr	r2, [r5, #0]
 8005b04:	46e6      	mov	lr, ip
 8005b06:	4691      	mov	r9, r2
 8005b08:	46aa      	mov	sl, r5
 8005b0a:	f04f 0b00 	mov.w	fp, #0
 8005b0e:	f8be 4000 	ldrh.w	r4, [lr]
 8005b12:	fb08 b404 	mla	r4, r8, r4, fp
 8005b16:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 8005b1a:	b292      	uxth	r2, r2
 8005b1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b20:	f84a 2b04 	str.w	r2, [sl], #4
 8005b24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b28:	f8da 9000 	ldr.w	r9, [sl]
 8005b2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b30:	fa1f f289 	uxth.w	r2, r9
 8005b34:	fb08 220b 	mla	r2, r8, fp, r2
 8005b38:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8005b3c:	4573      	cmp	r3, lr
 8005b3e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b42:	d8e4      	bhi.n	8005b0e <__multiply+0x106>
 8005b44:	9c01      	ldr	r4, [sp, #4]
 8005b46:	192c      	adds	r4, r5, r4
 8005b48:	6062      	str	r2, [r4, #4]
 8005b4a:	3504      	adds	r5, #4
 8005b4c:	e797      	b.n	8005a7e <__multiply+0x76>
 8005b4e:	3e01      	subs	r6, #1
 8005b50:	e799      	b.n	8005a86 <__multiply+0x7e>
 8005b52:	bf00      	nop
 8005b54:	08007066 	.word	0x08007066
 8005b58:	08007077 	.word	0x08007077

08005b5c <__pow5mult>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	4617      	mov	r7, r2
 8005b62:	f012 0203 	ands.w	r2, r2, #3
 8005b66:	4680      	mov	r8, r0
 8005b68:	460d      	mov	r5, r1
 8005b6a:	d007      	beq.n	8005b7c <__pow5mult+0x20>
 8005b6c:	4c26      	ldr	r4, [pc, #152]	@ (8005c08 <__pow5mult+0xac>)
 8005b6e:	3a01      	subs	r2, #1
 8005b70:	2300      	movs	r3, #0
 8005b72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b76:	f7ff fe9f 	bl	80058b8 <__multadd>
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	10bf      	asrs	r7, r7, #2
 8005b7e:	d03f      	beq.n	8005c00 <__pow5mult+0xa4>
 8005b80:	f8d8 401c 	ldr.w	r4, [r8, #28]
 8005b84:	b994      	cbnz	r4, 8005bac <__pow5mult+0x50>
 8005b86:	2010      	movs	r0, #16
 8005b88:	f7ff fd80 	bl	800568c <malloc>
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	f8c8 001c 	str.w	r0, [r8, #28]
 8005b92:	b930      	cbnz	r0, 8005ba2 <__pow5mult+0x46>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <__pow5mult+0xb0>)
 8005b98:	481d      	ldr	r0, [pc, #116]	@ (8005c10 <__pow5mult+0xb4>)
 8005b9a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b9e:	f000 fbf1 	bl	8006384 <__assert_func>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005ba8:	6003      	str	r3, [r0, #0]
 8005baa:	60c3      	str	r3, [r0, #12]
 8005bac:	68a6      	ldr	r6, [r4, #8]
 8005bae:	b946      	cbnz	r6, 8005bc2 <__pow5mult+0x66>
 8005bb0:	f240 2171 	movw	r1, #625	@ 0x271
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	f7ff ff11 	bl	80059dc <__i2b>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60a0      	str	r0, [r4, #8]
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	6003      	str	r3, [r0, #0]
 8005bc2:	462c      	mov	r4, r5
 8005bc4:	f04f 0900 	mov.w	r9, #0
 8005bc8:	f007 0301 	and.w	r3, r7, #1
 8005bcc:	107f      	asrs	r7, r7, #1
 8005bce:	b153      	cbz	r3, 8005be6 <__pow5mult+0x8a>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f7ff ff17 	bl	8005a08 <__multiply>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4605      	mov	r5, r0
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7ff fe48 	bl	8005874 <_Bfree>
 8005be4:	b167      	cbz	r7, 8005c00 <__pow5mult+0xa4>
 8005be6:	6830      	ldr	r0, [r6, #0]
 8005be8:	b938      	cbnz	r0, 8005bfa <__pow5mult+0x9e>
 8005bea:	4632      	mov	r2, r6
 8005bec:	4631      	mov	r1, r6
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f7ff ff0a 	bl	8005a08 <__multiply>
 8005bf4:	6030      	str	r0, [r6, #0]
 8005bf6:	f8c0 9000 	str.w	r9, [r0]
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	462c      	mov	r4, r5
 8005bfe:	e7e3      	b.n	8005bc8 <__pow5mult+0x6c>
 8005c00:	4628      	mov	r0, r5
 8005c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c06:	bf00      	nop
 8005c08:	08007114 	.word	0x08007114
 8005c0c:	0800700d 	.word	0x0800700d
 8005c10:	08007077 	.word	0x08007077

08005c14 <__lshift>:
 8005c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	460c      	mov	r4, r1
 8005c1a:	6849      	ldr	r1, [r1, #4]
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	4607      	mov	r7, r0
 8005c26:	4615      	mov	r5, r2
 8005c28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c2c:	f108 0901 	add.w	r9, r8, #1
 8005c30:	454b      	cmp	r3, r9
 8005c32:	db0b      	blt.n	8005c4c <__lshift+0x38>
 8005c34:	4638      	mov	r0, r7
 8005c36:	f7ff fddf 	bl	80057f8 <_Balloc>
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	b948      	cbnz	r0, 8005c52 <__lshift+0x3e>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	4b29      	ldr	r3, [pc, #164]	@ (8005ce8 <__lshift+0xd4>)
 8005c42:	482a      	ldr	r0, [pc, #168]	@ (8005cec <__lshift+0xd8>)
 8005c44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c48:	f000 fb9c 	bl	8006384 <__assert_func>
 8005c4c:	3101      	adds	r1, #1
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	e7ee      	b.n	8005c30 <__lshift+0x1c>
 8005c52:	2300      	movs	r3, #0
 8005c54:	f100 0c14 	add.w	ip, r0, #20
 8005c58:	f100 0210 	add.w	r2, r0, #16
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4553      	cmp	r3, sl
 8005c60:	db35      	blt.n	8005cce <__lshift+0xba>
 8005c62:	6922      	ldr	r2, [r4, #16]
 8005c64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c6c:	f104 0314 	add.w	r3, r4, #20
 8005c70:	f015 0e1f 	ands.w	lr, r5, #31
 8005c74:	4661      	mov	r1, ip
 8005c76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005c7a:	d02c      	beq.n	8005cd6 <__lshift+0xc2>
 8005c7c:	f1ce 0a20 	rsb	sl, lr, #32
 8005c80:	2500      	movs	r5, #0
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	468b      	mov	fp, r1
 8005c86:	fa00 f00e 	lsl.w	r0, r0, lr
 8005c8a:	4328      	orrs	r0, r5
 8005c8c:	f8cb 0000 	str.w	r0, [fp]
 8005c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c94:	429a      	cmp	r2, r3
 8005c96:	f101 0104 	add.w	r1, r1, #4
 8005c9a:	fa25 f50a 	lsr.w	r5, r5, sl
 8005c9e:	d8f0      	bhi.n	8005c82 <__lshift+0x6e>
 8005ca0:	1b13      	subs	r3, r2, r4
 8005ca2:	3b15      	subs	r3, #21
 8005ca4:	f023 0303 	bic.w	r3, r3, #3
 8005ca8:	f104 0115 	add.w	r1, r4, #21
 8005cac:	428a      	cmp	r2, r1
 8005cae:	bf38      	it	cc
 8005cb0:	2300      	movcc	r3, #0
 8005cb2:	449c      	add	ip, r3
 8005cb4:	f8cc 5004 	str.w	r5, [ip, #4]
 8005cb8:	b905      	cbnz	r5, 8005cbc <__lshift+0xa8>
 8005cba:	46c1      	mov	r9, r8
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	f8c6 9010 	str.w	r9, [r6, #16]
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	f7ff fdd6 	bl	8005874 <_Bfree>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	f842 1f04 	str.w	r1, [r2, #4]!
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	e7c3      	b.n	8005c5e <__lshift+0x4a>
 8005cd6:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cda:	600d      	str	r5, [r1, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	f101 0104 	add.w	r1, r1, #4
 8005ce2:	d8f8      	bhi.n	8005cd6 <__lshift+0xc2>
 8005ce4:	e7e9      	b.n	8005cba <__lshift+0xa6>
 8005ce6:	bf00      	nop
 8005ce8:	08007066 	.word	0x08007066
 8005cec:	08007077 	.word	0x08007077

08005cf0 <__mcmp>:
 8005cf0:	690a      	ldr	r2, [r1, #16]
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6900      	ldr	r0, [r0, #16]
 8005cf6:	1a80      	subs	r0, r0, r2
 8005cf8:	b530      	push	{r4, r5, lr}
 8005cfa:	d10e      	bne.n	8005d1a <__mcmp+0x2a>
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	3114      	adds	r1, #20
 8005d00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d10:	4295      	cmp	r5, r2
 8005d12:	d003      	beq.n	8005d1c <__mcmp+0x2c>
 8005d14:	d205      	bcs.n	8005d22 <__mcmp+0x32>
 8005d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d1a:	bd30      	pop	{r4, r5, pc}
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d3f3      	bcc.n	8005d08 <__mcmp+0x18>
 8005d20:	e7fb      	b.n	8005d1a <__mcmp+0x2a>
 8005d22:	2001      	movs	r0, #1
 8005d24:	e7f9      	b.n	8005d1a <__mcmp+0x2a>
	...

08005d28 <__mdiff>:
 8005d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	468a      	mov	sl, r1
 8005d2e:	4606      	mov	r6, r0
 8005d30:	4611      	mov	r1, r2
 8005d32:	4650      	mov	r0, sl
 8005d34:	4614      	mov	r4, r2
 8005d36:	f7ff ffdb 	bl	8005cf0 <__mcmp>
 8005d3a:	1e05      	subs	r5, r0, #0
 8005d3c:	d112      	bne.n	8005d64 <__mdiff+0x3c>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7ff fd59 	bl	80057f8 <_Balloc>
 8005d46:	4602      	mov	r2, r0
 8005d48:	b928      	cbnz	r0, 8005d56 <__mdiff+0x2e>
 8005d4a:	4b41      	ldr	r3, [pc, #260]	@ (8005e50 <__mdiff+0x128>)
 8005d4c:	f240 2137 	movw	r1, #567	@ 0x237
 8005d50:	4840      	ldr	r0, [pc, #256]	@ (8005e54 <__mdiff+0x12c>)
 8005d52:	f000 fb17 	bl	8006384 <__assert_func>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	b003      	add	sp, #12
 8005d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d64:	bfbc      	itt	lt
 8005d66:	4653      	movlt	r3, sl
 8005d68:	46a2      	movlt	sl, r4
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005d70:	bfba      	itte	lt
 8005d72:	461c      	movlt	r4, r3
 8005d74:	2501      	movlt	r5, #1
 8005d76:	2500      	movge	r5, #0
 8005d78:	f7ff fd3e 	bl	80057f8 <_Balloc>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	b918      	cbnz	r0, 8005d88 <__mdiff+0x60>
 8005d80:	4b33      	ldr	r3, [pc, #204]	@ (8005e50 <__mdiff+0x128>)
 8005d82:	f240 2145 	movw	r1, #581	@ 0x245
 8005d86:	e7e3      	b.n	8005d50 <__mdiff+0x28>
 8005d88:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005d8c:	6926      	ldr	r6, [r4, #16]
 8005d8e:	60c5      	str	r5, [r0, #12]
 8005d90:	f10a 0914 	add.w	r9, sl, #20
 8005d94:	f104 0e14 	add.w	lr, r4, #20
 8005d98:	f100 0514 	add.w	r5, r0, #20
 8005d9c:	f10a 0310 	add.w	r3, sl, #16
 8005da0:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 8005da4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	46ab      	mov	fp, r5
 8005dac:	f04f 0c00 	mov.w	ip, #0
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005db6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	fa1f f38a 	uxth.w	r3, sl
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	b283      	uxth	r3, r0
 8005dc4:	1acb      	subs	r3, r1, r3
 8005dc6:	0c00      	lsrs	r0, r0, #16
 8005dc8:	4463      	add	r3, ip
 8005dca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005dce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005dd8:	4576      	cmp	r6, lr
 8005dda:	f84b 3b04 	str.w	r3, [fp], #4
 8005dde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005de2:	d8e5      	bhi.n	8005db0 <__mdiff+0x88>
 8005de4:	1b33      	subs	r3, r6, r4
 8005de6:	3b15      	subs	r3, #21
 8005de8:	3415      	adds	r4, #21
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	bf38      	it	cc
 8005df2:	2300      	movcc	r3, #0
 8005df4:	18e8      	adds	r0, r5, r3
 8005df6:	444b      	add	r3, r9
 8005df8:	1d1c      	adds	r4, r3, #4
 8005dfa:	3004      	adds	r0, #4
 8005dfc:	4626      	mov	r6, r4
 8005dfe:	eba5 0509 	sub.w	r5, r5, r9
 8005e02:	4546      	cmp	r6, r8
 8005e04:	eb06 0e05 	add.w	lr, r6, r5
 8005e08:	d30e      	bcc.n	8005e28 <__mdiff+0x100>
 8005e0a:	f108 0103 	add.w	r1, r8, #3
 8005e0e:	1b09      	subs	r1, r1, r4
 8005e10:	f021 0103 	bic.w	r1, r1, #3
 8005e14:	3301      	adds	r3, #1
 8005e16:	4598      	cmp	r8, r3
 8005e18:	bf38      	it	cc
 8005e1a:	2100      	movcc	r1, #0
 8005e1c:	4401      	add	r1, r0
 8005e1e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e22:	b19b      	cbz	r3, 8005e4c <__mdiff+0x124>
 8005e24:	6117      	str	r7, [r2, #16]
 8005e26:	e799      	b.n	8005d5c <__mdiff+0x34>
 8005e28:	f856 1b04 	ldr.w	r1, [r6], #4
 8005e2c:	46e2      	mov	sl, ip
 8005e2e:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005e32:	fa1c fc81 	uxtah	ip, ip, r1
 8005e36:	4451      	add	r1, sl
 8005e38:	eb09 492c 	add.w	r9, r9, ip, asr #16
 8005e3c:	b289      	uxth	r1, r1
 8005e3e:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8005e42:	ea4f 4c29 	mov.w	ip, r9, asr #16
 8005e46:	f8ce 1000 	str.w	r1, [lr]
 8005e4a:	e7da      	b.n	8005e02 <__mdiff+0xda>
 8005e4c:	3f01      	subs	r7, #1
 8005e4e:	e7e6      	b.n	8005e1e <__mdiff+0xf6>
 8005e50:	08007066 	.word	0x08007066
 8005e54:	08007077 	.word	0x08007077

08005e58 <__d2b>:
 8005e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	2101      	movs	r1, #1
 8005e60:	ec59 8b10 	vmov	r8, r9, d0
 8005e64:	4616      	mov	r6, r2
 8005e66:	f7ff fcc7 	bl	80057f8 <_Balloc>
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	b930      	cbnz	r0, 8005e7c <__d2b+0x24>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4b23      	ldr	r3, [pc, #140]	@ (8005f00 <__d2b+0xa8>)
 8005e72:	4824      	ldr	r0, [pc, #144]	@ (8005f04 <__d2b+0xac>)
 8005e74:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e78:	f000 fa84 	bl	8006384 <__assert_func>
 8005e7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e84:	b10d      	cbz	r5, 8005e8a <__d2b+0x32>
 8005e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	f1b8 0300 	subs.w	r3, r8, #0
 8005e90:	d023      	beq.n	8005eda <__d2b+0x82>
 8005e92:	4668      	mov	r0, sp
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	f7ff fd74 	bl	8005982 <__lo0bits>
 8005e9a:	9900      	ldr	r1, [sp, #0]
 8005e9c:	b1d8      	cbz	r0, 8005ed6 <__d2b+0x7e>
 8005e9e:	9a01      	ldr	r2, [sp, #4]
 8005ea0:	f1c0 0320 	rsb	r3, r0, #32
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	40c2      	lsrs	r2, r0
 8005eac:	6163      	str	r3, [r4, #20]
 8005eae:	9201      	str	r2, [sp, #4]
 8005eb0:	9b01      	ldr	r3, [sp, #4]
 8005eb2:	61a3      	str	r3, [r4, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2201      	moveq	r2, #1
 8005eba:	2202      	movne	r2, #2
 8005ebc:	6122      	str	r2, [r4, #16]
 8005ebe:	b1a5      	cbz	r5, 8005eea <__d2b+0x92>
 8005ec0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ec4:	4405      	add	r5, r0
 8005ec6:	603d      	str	r5, [r7, #0]
 8005ec8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ecc:	6030      	str	r0, [r6, #0]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	b003      	add	sp, #12
 8005ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ed6:	6161      	str	r1, [r4, #20]
 8005ed8:	e7ea      	b.n	8005eb0 <__d2b+0x58>
 8005eda:	a801      	add	r0, sp, #4
 8005edc:	f7ff fd51 	bl	8005982 <__lo0bits>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	6163      	str	r3, [r4, #20]
 8005ee4:	3020      	adds	r0, #32
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	e7e8      	b.n	8005ebc <__d2b+0x64>
 8005eea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ef2:	6038      	str	r0, [r7, #0]
 8005ef4:	6918      	ldr	r0, [r3, #16]
 8005ef6:	f7ff fd25 	bl	8005944 <__hi0bits>
 8005efa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005efe:	e7e5      	b.n	8005ecc <__d2b+0x74>
 8005f00:	08007066 	.word	0x08007066
 8005f04:	08007077 	.word	0x08007077

08005f08 <__ssputs_r>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	688e      	ldr	r6, [r1, #8]
 8005f0e:	461f      	mov	r7, r3
 8005f10:	42be      	cmp	r6, r7
 8005f12:	4682      	mov	sl, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	4690      	mov	r8, r2
 8005f18:	4633      	mov	r3, r6
 8005f1a:	d853      	bhi.n	8005fc4 <__ssputs_r+0xbc>
 8005f1c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005f20:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 8005f24:	d02b      	beq.n	8005f7e <__ssputs_r+0x76>
 8005f26:	6965      	ldr	r5, [r4, #20]
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	6909      	ldr	r1, [r1, #16]
 8005f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f30:	eba3 0901 	sub.w	r9, r3, r1
 8005f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f38:	1c7b      	adds	r3, r7, #1
 8005f3a:	106d      	asrs	r5, r5, #1
 8005f3c:	444b      	add	r3, r9
 8005f3e:	42ab      	cmp	r3, r5
 8005f40:	462a      	mov	r2, r5
 8005f42:	bf84      	itt	hi
 8005f44:	461d      	movhi	r5, r3
 8005f46:	462a      	movhi	r2, r5
 8005f48:	0543      	lsls	r3, r0, #21
 8005f4a:	d527      	bpl.n	8005f9c <__ssputs_r+0x94>
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f7ff fbc6 	bl	80056e0 <_malloc_r>
 8005f54:	4606      	mov	r6, r0
 8005f56:	b358      	cbz	r0, 8005fb0 <__ssputs_r+0xa8>
 8005f58:	6921      	ldr	r1, [r4, #16]
 8005f5a:	464a      	mov	r2, r9
 8005f5c:	f000 fa04 	bl	8006368 <memcpy>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	6126      	str	r6, [r4, #16]
 8005f6e:	6165      	str	r5, [r4, #20]
 8005f70:	444e      	add	r6, r9
 8005f72:	eba5 0509 	sub.w	r5, r5, r9
 8005f76:	6026      	str	r6, [r4, #0]
 8005f78:	60a5      	str	r5, [r4, #8]
 8005f7a:	463e      	mov	r6, r7
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	461f      	mov	r7, r3
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	463a      	mov	r2, r7
 8005f84:	4641      	mov	r1, r8
 8005f86:	f000 f9c5 	bl	8006314 <memmove>
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	1b9b      	subs	r3, r3, r6
 8005f8e:	60a3      	str	r3, [r4, #8]
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	443b      	add	r3, r7
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	2000      	movs	r0, #0
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f000 fa35 	bl	800640c <_realloc_r>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d1e1      	bne.n	8005f6c <__ssputs_r+0x64>
 8005fa8:	6921      	ldr	r1, [r4, #16]
 8005faa:	4650      	mov	r0, sl
 8005fac:	f7ff fb24 	bl	80055f8 <_free_r>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	f8ca 3000 	str.w	r3, [sl]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fc2:	e7e9      	b.n	8005f98 <__ssputs_r+0x90>
 8005fc4:	463e      	mov	r6, r7
 8005fc6:	e7db      	b.n	8005f80 <__ssputs_r+0x78>

08005fc8 <_svfiprintf_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	4698      	mov	r8, r3
 8005fce:	898b      	ldrh	r3, [r1, #12]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	b09d      	sub	sp, #116	@ 0x74
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	d510      	bpl.n	8005ffe <_svfiprintf_r+0x36>
 8005fdc:	690b      	ldr	r3, [r1, #16]
 8005fde:	b973      	cbnz	r3, 8005ffe <_svfiprintf_r+0x36>
 8005fe0:	2140      	movs	r1, #64	@ 0x40
 8005fe2:	f7ff fb7d 	bl	80056e0 <_malloc_r>
 8005fe6:	6028      	str	r0, [r5, #0]
 8005fe8:	6128      	str	r0, [r5, #16]
 8005fea:	b930      	cbnz	r0, 8005ffa <_svfiprintf_r+0x32>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ff4:	b01d      	add	sp, #116	@ 0x74
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	2340      	movs	r3, #64	@ 0x40
 8005ffc:	616b      	str	r3, [r5, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	9309      	str	r3, [sp, #36]	@ 0x24
 8006002:	2320      	movs	r3, #32
 8006004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006008:	f8cd 800c 	str.w	r8, [sp, #12]
 800600c:	2330      	movs	r3, #48	@ 0x30
 800600e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061ac <_svfiprintf_r+0x1e4>
 8006012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006016:	f04f 0901 	mov.w	r9, #1
 800601a:	4623      	mov	r3, r4
 800601c:	469a      	mov	sl, r3
 800601e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006022:	b10a      	cbz	r2, 8006028 <_svfiprintf_r+0x60>
 8006024:	2a25      	cmp	r2, #37	@ 0x25
 8006026:	d1f9      	bne.n	800601c <_svfiprintf_r+0x54>
 8006028:	ebba 0b04 	subs.w	fp, sl, r4
 800602c:	d00b      	beq.n	8006046 <_svfiprintf_r+0x7e>
 800602e:	465b      	mov	r3, fp
 8006030:	4622      	mov	r2, r4
 8006032:	4629      	mov	r1, r5
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff ff67 	bl	8005f08 <__ssputs_r>
 800603a:	3001      	adds	r0, #1
 800603c:	f000 80a7 	beq.w	800618e <_svfiprintf_r+0x1c6>
 8006040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006042:	445a      	add	r2, fp
 8006044:	9209      	str	r2, [sp, #36]	@ 0x24
 8006046:	f89a 3000 	ldrb.w	r3, [sl]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 809f 	beq.w	800618e <_svfiprintf_r+0x1c6>
 8006050:	2300      	movs	r3, #0
 8006052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800605a:	f10a 0a01 	add.w	sl, sl, #1
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9307      	str	r3, [sp, #28]
 8006062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006066:	931a      	str	r3, [sp, #104]	@ 0x68
 8006068:	4654      	mov	r4, sl
 800606a:	2205      	movs	r2, #5
 800606c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006070:	484e      	ldr	r0, [pc, #312]	@ (80061ac <_svfiprintf_r+0x1e4>)
 8006072:	f7fa f895 	bl	80001a0 <memchr>
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	b9d8      	cbnz	r0, 80060b2 <_svfiprintf_r+0xea>
 800607a:	06d0      	lsls	r0, r2, #27
 800607c:	bf44      	itt	mi
 800607e:	2320      	movmi	r3, #32
 8006080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006084:	0711      	lsls	r1, r2, #28
 8006086:	bf44      	itt	mi
 8006088:	232b      	movmi	r3, #43	@ 0x2b
 800608a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b2a      	cmp	r3, #42	@ 0x2a
 8006094:	d015      	beq.n	80060c2 <_svfiprintf_r+0xfa>
 8006096:	9a07      	ldr	r2, [sp, #28]
 8006098:	4654      	mov	r4, sl
 800609a:	2000      	movs	r0, #0
 800609c:	f04f 0c0a 	mov.w	ip, #10
 80060a0:	4621      	mov	r1, r4
 80060a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a6:	3b30      	subs	r3, #48	@ 0x30
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d94b      	bls.n	8006144 <_svfiprintf_r+0x17c>
 80060ac:	b1b0      	cbz	r0, 80060dc <_svfiprintf_r+0x114>
 80060ae:	9207      	str	r2, [sp, #28]
 80060b0:	e014      	b.n	80060dc <_svfiprintf_r+0x114>
 80060b2:	eba0 0308 	sub.w	r3, r0, r8
 80060b6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	46a2      	mov	sl, r4
 80060c0:	e7d2      	b.n	8006068 <_svfiprintf_r+0xa0>
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	9103      	str	r1, [sp, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbb      	ittet	lt
 80060ce:	425b      	neglt	r3, r3
 80060d0:	f042 0202 	orrlt.w	r2, r2, #2
 80060d4:	9307      	strge	r3, [sp, #28]
 80060d6:	9307      	strlt	r3, [sp, #28]
 80060d8:	bfb8      	it	lt
 80060da:	9204      	strlt	r2, [sp, #16]
 80060dc:	7823      	ldrb	r3, [r4, #0]
 80060de:	2b2e      	cmp	r3, #46	@ 0x2e
 80060e0:	d10a      	bne.n	80060f8 <_svfiprintf_r+0x130>
 80060e2:	7863      	ldrb	r3, [r4, #1]
 80060e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80060e6:	d132      	bne.n	800614e <_svfiprintf_r+0x186>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	9203      	str	r2, [sp, #12]
 80060f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060f4:	3402      	adds	r4, #2
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061bc <_svfiprintf_r+0x1f4>
 80060fc:	7821      	ldrb	r1, [r4, #0]
 80060fe:	2203      	movs	r2, #3
 8006100:	4650      	mov	r0, sl
 8006102:	f7fa f84d 	bl	80001a0 <memchr>
 8006106:	b138      	cbz	r0, 8006118 <_svfiprintf_r+0x150>
 8006108:	9b04      	ldr	r3, [sp, #16]
 800610a:	eba0 000a 	sub.w	r0, r0, sl
 800610e:	2240      	movs	r2, #64	@ 0x40
 8006110:	4082      	lsls	r2, r0
 8006112:	4313      	orrs	r3, r2
 8006114:	3401      	adds	r4, #1
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	4824      	ldr	r0, [pc, #144]	@ (80061b0 <_svfiprintf_r+0x1e8>)
 800611e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006122:	2206      	movs	r2, #6
 8006124:	f7fa f83c 	bl	80001a0 <memchr>
 8006128:	2800      	cmp	r0, #0
 800612a:	d036      	beq.n	800619a <_svfiprintf_r+0x1d2>
 800612c:	4b21      	ldr	r3, [pc, #132]	@ (80061b4 <_svfiprintf_r+0x1ec>)
 800612e:	bb1b      	cbnz	r3, 8006178 <_svfiprintf_r+0x1b0>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	3307      	adds	r3, #7
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	3308      	adds	r3, #8
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613e:	4433      	add	r3, r6
 8006140:	9309      	str	r3, [sp, #36]	@ 0x24
 8006142:	e76a      	b.n	800601a <_svfiprintf_r+0x52>
 8006144:	fb0c 3202 	mla	r2, ip, r2, r3
 8006148:	460c      	mov	r4, r1
 800614a:	2001      	movs	r0, #1
 800614c:	e7a8      	b.n	80060a0 <_svfiprintf_r+0xd8>
 800614e:	2300      	movs	r3, #0
 8006150:	3401      	adds	r4, #1
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	4619      	mov	r1, r3
 8006156:	f04f 0c0a 	mov.w	ip, #10
 800615a:	4620      	mov	r0, r4
 800615c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006160:	3a30      	subs	r2, #48	@ 0x30
 8006162:	2a09      	cmp	r2, #9
 8006164:	d903      	bls.n	800616e <_svfiprintf_r+0x1a6>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0c6      	beq.n	80060f8 <_svfiprintf_r+0x130>
 800616a:	9105      	str	r1, [sp, #20]
 800616c:	e7c4      	b.n	80060f8 <_svfiprintf_r+0x130>
 800616e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006172:	4604      	mov	r4, r0
 8006174:	2301      	movs	r3, #1
 8006176:	e7f0      	b.n	800615a <_svfiprintf_r+0x192>
 8006178:	ab03      	add	r3, sp, #12
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	462a      	mov	r2, r5
 800617e:	4b0e      	ldr	r3, [pc, #56]	@ (80061b8 <_svfiprintf_r+0x1f0>)
 8006180:	a904      	add	r1, sp, #16
 8006182:	4638      	mov	r0, r7
 8006184:	f7fd fe56 	bl	8003e34 <_printf_float>
 8006188:	1c42      	adds	r2, r0, #1
 800618a:	4606      	mov	r6, r0
 800618c:	d1d6      	bne.n	800613c <_svfiprintf_r+0x174>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	065b      	lsls	r3, r3, #25
 8006192:	f53f af2d 	bmi.w	8005ff0 <_svfiprintf_r+0x28>
 8006196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006198:	e72c      	b.n	8005ff4 <_svfiprintf_r+0x2c>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <_svfiprintf_r+0x1f0>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7fe f8db 	bl	8004360 <_printf_i>
 80061aa:	e7ed      	b.n	8006188 <_svfiprintf_r+0x1c0>
 80061ac:	080070ba 	.word	0x080070ba
 80061b0:	080070c4 	.word	0x080070c4
 80061b4:	08003e35 	.word	0x08003e35
 80061b8:	08005f09 	.word	0x08005f09
 80061bc:	080070c0 	.word	0x080070c0

080061c0 <__sflush_r>:
 80061c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	0716      	lsls	r6, r2, #28
 80061ca:	4605      	mov	r5, r0
 80061cc:	460c      	mov	r4, r1
 80061ce:	d451      	bmi.n	8006274 <__sflush_r+0xb4>
 80061d0:	684b      	ldr	r3, [r1, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dc02      	bgt.n	80061dc <__sflush_r+0x1c>
 80061d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dd49      	ble.n	8006270 <__sflush_r+0xb0>
 80061dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d046      	beq.n	8006270 <__sflush_r+0xb0>
 80061e2:	2300      	movs	r3, #0
 80061e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061e8:	682f      	ldr	r7, [r5, #0]
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	d031      	beq.n	8006252 <__sflush_r+0x92>
 80061ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	0759      	lsls	r1, r3, #29
 80061f4:	d505      	bpl.n	8006202 <__sflush_r+0x42>
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061fc:	b10b      	cbz	r3, 8006202 <__sflush_r+0x42>
 80061fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	2300      	movs	r3, #0
 8006204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006206:	6a21      	ldr	r1, [r4, #32]
 8006208:	4628      	mov	r0, r5
 800620a:	47b0      	blx	r6
 800620c:	1c42      	adds	r2, r0, #1
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	d106      	bne.n	8006222 <__sflush_r+0x62>
 8006214:	6829      	ldr	r1, [r5, #0]
 8006216:	291d      	cmp	r1, #29
 8006218:	d846      	bhi.n	80062a8 <__sflush_r+0xe8>
 800621a:	4a29      	ldr	r2, [pc, #164]	@ (80062c0 <__sflush_r+0x100>)
 800621c:	40ca      	lsrs	r2, r1
 800621e:	07d6      	lsls	r6, r2, #31
 8006220:	d542      	bpl.n	80062a8 <__sflush_r+0xe8>
 8006222:	2200      	movs	r2, #0
 8006224:	6062      	str	r2, [r4, #4]
 8006226:	04d9      	lsls	r1, r3, #19
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	d504      	bpl.n	8006238 <__sflush_r+0x78>
 800622e:	1c42      	adds	r2, r0, #1
 8006230:	d101      	bne.n	8006236 <__sflush_r+0x76>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	b903      	cbnz	r3, 8006238 <__sflush_r+0x78>
 8006236:	6560      	str	r0, [r4, #84]	@ 0x54
 8006238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800623a:	602f      	str	r7, [r5, #0]
 800623c:	b1c1      	cbz	r1, 8006270 <__sflush_r+0xb0>
 800623e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006242:	4299      	cmp	r1, r3
 8006244:	d002      	beq.n	800624c <__sflush_r+0x8c>
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff f9d6 	bl	80055f8 <_free_r>
 800624c:	2300      	movs	r3, #0
 800624e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006250:	e00e      	b.n	8006270 <__sflush_r+0xb0>
 8006252:	6a21      	ldr	r1, [r4, #32]
 8006254:	2301      	movs	r3, #1
 8006256:	4628      	mov	r0, r5
 8006258:	47b0      	blx	r6
 800625a:	4602      	mov	r2, r0
 800625c:	1c50      	adds	r0, r2, #1
 800625e:	d1c7      	bne.n	80061f0 <__sflush_r+0x30>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c4      	beq.n	80061f0 <__sflush_r+0x30>
 8006266:	2b1d      	cmp	r3, #29
 8006268:	d001      	beq.n	800626e <__sflush_r+0xae>
 800626a:	2b16      	cmp	r3, #22
 800626c:	d11a      	bne.n	80062a4 <__sflush_r+0xe4>
 800626e:	602f      	str	r7, [r5, #0]
 8006270:	2000      	movs	r0, #0
 8006272:	e01e      	b.n	80062b2 <__sflush_r+0xf2>
 8006274:	690f      	ldr	r7, [r1, #16]
 8006276:	2f00      	cmp	r7, #0
 8006278:	d0fa      	beq.n	8006270 <__sflush_r+0xb0>
 800627a:	0793      	lsls	r3, r2, #30
 800627c:	680e      	ldr	r6, [r1, #0]
 800627e:	bf08      	it	eq
 8006280:	694b      	ldreq	r3, [r1, #20]
 8006282:	600f      	str	r7, [r1, #0]
 8006284:	bf18      	it	ne
 8006286:	2300      	movne	r3, #0
 8006288:	eba6 0807 	sub.w	r8, r6, r7
 800628c:	608b      	str	r3, [r1, #8]
 800628e:	f1b8 0f00 	cmp.w	r8, #0
 8006292:	dded      	ble.n	8006270 <__sflush_r+0xb0>
 8006294:	6a21      	ldr	r1, [r4, #32]
 8006296:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006298:	4643      	mov	r3, r8
 800629a:	463a      	mov	r2, r7
 800629c:	4628      	mov	r0, r5
 800629e:	47b0      	blx	r6
 80062a0:	2800      	cmp	r0, #0
 80062a2:	dc08      	bgt.n	80062b6 <__sflush_r+0xf6>
 80062a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b6:	4407      	add	r7, r0
 80062b8:	eba8 0800 	sub.w	r8, r8, r0
 80062bc:	e7e7      	b.n	800628e <__sflush_r+0xce>
 80062be:	bf00      	nop
 80062c0:	20400001 	.word	0x20400001

080062c4 <_fflush_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	4605      	mov	r5, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b913      	cbnz	r3, 80062d4 <_fflush_r+0x10>
 80062ce:	2500      	movs	r5, #0
 80062d0:	4628      	mov	r0, r5
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	b118      	cbz	r0, 80062de <_fflush_r+0x1a>
 80062d6:	6a03      	ldr	r3, [r0, #32]
 80062d8:	b90b      	cbnz	r3, 80062de <_fflush_r+0x1a>
 80062da:	f7fe f9ef 	bl	80046bc <__sinit>
 80062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f3      	beq.n	80062ce <_fflush_r+0xa>
 80062e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	d404      	bmi.n	80062f6 <_fflush_r+0x32>
 80062ec:	0599      	lsls	r1, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_fflush_r+0x32>
 80062f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f2:	f7fe fb0c 	bl	800490e <__retarget_lock_acquire_recursive>
 80062f6:	4628      	mov	r0, r5
 80062f8:	4621      	mov	r1, r4
 80062fa:	f7ff ff61 	bl	80061c0 <__sflush_r>
 80062fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006300:	07da      	lsls	r2, r3, #31
 8006302:	4605      	mov	r5, r0
 8006304:	d4e4      	bmi.n	80062d0 <_fflush_r+0xc>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d4e1      	bmi.n	80062d0 <_fflush_r+0xc>
 800630c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630e:	f7fe faff 	bl	8004910 <__retarget_lock_release_recursive>
 8006312:	e7dd      	b.n	80062d0 <_fflush_r+0xc>

08006314 <memmove>:
 8006314:	4288      	cmp	r0, r1
 8006316:	b510      	push	{r4, lr}
 8006318:	eb01 0402 	add.w	r4, r1, r2
 800631c:	d902      	bls.n	8006324 <memmove+0x10>
 800631e:	4284      	cmp	r4, r0
 8006320:	4623      	mov	r3, r4
 8006322:	d807      	bhi.n	8006334 <memmove+0x20>
 8006324:	1e43      	subs	r3, r0, #1
 8006326:	42a1      	cmp	r1, r4
 8006328:	d007      	beq.n	800633a <memmove+0x26>
 800632a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006332:	e7f8      	b.n	8006326 <memmove+0x12>
 8006334:	4402      	add	r2, r0
 8006336:	4282      	cmp	r2, r0
 8006338:	d100      	bne.n	800633c <memmove+0x28>
 800633a:	bd10      	pop	{r4, pc}
 800633c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8006340:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006344:	e7f7      	b.n	8006336 <memmove+0x22>
	...

08006348 <_sbrk_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d06      	ldr	r5, [pc, #24]	@ (8006364 <_sbrk_r+0x1c>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	f7fd fb48 	bl	80039e8 <_sbrk>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_sbrk_r+0x1a>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_sbrk_r+0x1a>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	2000043c 	.word	0x2000043c

08006368 <memcpy>:
 8006368:	440a      	add	r2, r1
 800636a:	4291      	cmp	r1, r2
 800636c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006370:	d100      	bne.n	8006374 <memcpy+0xc>
 8006372:	4770      	bx	lr
 8006374:	b510      	push	{r4, lr}
 8006376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637e:	4291      	cmp	r1, r2
 8006380:	d1f9      	bne.n	8006376 <memcpy+0xe>
 8006382:	bd10      	pop	{r4, pc}

08006384 <__assert_func>:
 8006384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006386:	4614      	mov	r4, r2
 8006388:	461a      	mov	r2, r3
 800638a:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <__assert_func+0x2c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4605      	mov	r5, r0
 8006390:	68d8      	ldr	r0, [r3, #12]
 8006392:	b14c      	cbz	r4, 80063a8 <__assert_func+0x24>
 8006394:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <__assert_func+0x30>)
 8006396:	9100      	str	r1, [sp, #0]
 8006398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800639c:	4906      	ldr	r1, [pc, #24]	@ (80063b8 <__assert_func+0x34>)
 800639e:	462b      	mov	r3, r5
 80063a0:	f000 f870 	bl	8006484 <fiprintf>
 80063a4:	f000 f880 	bl	80064a8 <abort>
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <__assert_func+0x38>)
 80063aa:	461c      	mov	r4, r3
 80063ac:	e7f3      	b.n	8006396 <__assert_func+0x12>
 80063ae:	bf00      	nop
 80063b0:	20000018 	.word	0x20000018
 80063b4:	080070d5 	.word	0x080070d5
 80063b8:	080070e2 	.word	0x080070e2
 80063bc:	08007110 	.word	0x08007110

080063c0 <_calloc_r>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	fba1 5402 	umull	r5, r4, r1, r2
 80063c6:	b934      	cbnz	r4, 80063d6 <_calloc_r+0x16>
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7ff f989 	bl	80056e0 <_malloc_r>
 80063ce:	4606      	mov	r6, r0
 80063d0:	b928      	cbnz	r0, 80063de <_calloc_r+0x1e>
 80063d2:	4630      	mov	r0, r6
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	220c      	movs	r2, #12
 80063d8:	6002      	str	r2, [r0, #0]
 80063da:	2600      	movs	r6, #0
 80063dc:	e7f9      	b.n	80063d2 <_calloc_r+0x12>
 80063de:	462a      	mov	r2, r5
 80063e0:	4621      	mov	r1, r4
 80063e2:	f7fe fa07 	bl	80047f4 <memset>
 80063e6:	e7f4      	b.n	80063d2 <_calloc_r+0x12>

080063e8 <__ascii_mbtowc>:
 80063e8:	b082      	sub	sp, #8
 80063ea:	b901      	cbnz	r1, 80063ee <__ascii_mbtowc+0x6>
 80063ec:	a901      	add	r1, sp, #4
 80063ee:	b142      	cbz	r2, 8006402 <__ascii_mbtowc+0x1a>
 80063f0:	b14b      	cbz	r3, 8006406 <__ascii_mbtowc+0x1e>
 80063f2:	7813      	ldrb	r3, [r2, #0]
 80063f4:	600b      	str	r3, [r1, #0]
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	1e10      	subs	r0, r2, #0
 80063fa:	bf18      	it	ne
 80063fc:	2001      	movne	r0, #1
 80063fe:	b002      	add	sp, #8
 8006400:	4770      	bx	lr
 8006402:	4610      	mov	r0, r2
 8006404:	e7fb      	b.n	80063fe <__ascii_mbtowc+0x16>
 8006406:	f06f 0001 	mvn.w	r0, #1
 800640a:	e7f8      	b.n	80063fe <__ascii_mbtowc+0x16>

0800640c <_realloc_r>:
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	4607      	mov	r7, r0
 8006412:	4614      	mov	r4, r2
 8006414:	460d      	mov	r5, r1
 8006416:	b921      	cbnz	r1, 8006422 <_realloc_r+0x16>
 8006418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800641c:	4611      	mov	r1, r2
 800641e:	f7ff b95f 	b.w	80056e0 <_malloc_r>
 8006422:	b92a      	cbnz	r2, 8006430 <_realloc_r+0x24>
 8006424:	f7ff f8e8 	bl	80055f8 <_free_r>
 8006428:	4625      	mov	r5, r4
 800642a:	4628      	mov	r0, r5
 800642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006430:	f000 f841 	bl	80064b6 <_malloc_usable_size_r>
 8006434:	4284      	cmp	r4, r0
 8006436:	4606      	mov	r6, r0
 8006438:	d802      	bhi.n	8006440 <_realloc_r+0x34>
 800643a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800643e:	d8f4      	bhi.n	800642a <_realloc_r+0x1e>
 8006440:	4621      	mov	r1, r4
 8006442:	4638      	mov	r0, r7
 8006444:	f7ff f94c 	bl	80056e0 <_malloc_r>
 8006448:	4680      	mov	r8, r0
 800644a:	b908      	cbnz	r0, 8006450 <_realloc_r+0x44>
 800644c:	4645      	mov	r5, r8
 800644e:	e7ec      	b.n	800642a <_realloc_r+0x1e>
 8006450:	42b4      	cmp	r4, r6
 8006452:	4622      	mov	r2, r4
 8006454:	4629      	mov	r1, r5
 8006456:	bf28      	it	cs
 8006458:	4632      	movcs	r2, r6
 800645a:	f7ff ff85 	bl	8006368 <memcpy>
 800645e:	4629      	mov	r1, r5
 8006460:	4638      	mov	r0, r7
 8006462:	f7ff f8c9 	bl	80055f8 <_free_r>
 8006466:	e7f1      	b.n	800644c <_realloc_r+0x40>

08006468 <__ascii_wctomb>:
 8006468:	4603      	mov	r3, r0
 800646a:	4608      	mov	r0, r1
 800646c:	b141      	cbz	r1, 8006480 <__ascii_wctomb+0x18>
 800646e:	2aff      	cmp	r2, #255	@ 0xff
 8006470:	d904      	bls.n	800647c <__ascii_wctomb+0x14>
 8006472:	228a      	movs	r2, #138	@ 0x8a
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800647a:	4770      	bx	lr
 800647c:	700a      	strb	r2, [r1, #0]
 800647e:	2001      	movs	r0, #1
 8006480:	4770      	bx	lr
	...

08006484 <fiprintf>:
 8006484:	b40e      	push	{r1, r2, r3}
 8006486:	b503      	push	{r0, r1, lr}
 8006488:	4601      	mov	r1, r0
 800648a:	ab03      	add	r3, sp, #12
 800648c:	4805      	ldr	r0, [pc, #20]	@ (80064a4 <fiprintf+0x20>)
 800648e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	f000 f83f 	bl	8006518 <_vfiprintf_r>
 800649a:	b002      	add	sp, #8
 800649c:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a0:	b003      	add	sp, #12
 80064a2:	4770      	bx	lr
 80064a4:	20000018 	.word	0x20000018

080064a8 <abort>:
 80064a8:	b508      	push	{r3, lr}
 80064aa:	2006      	movs	r0, #6
 80064ac:	f000 fa06 	bl	80068bc <raise>
 80064b0:	2001      	movs	r0, #1
 80064b2:	f7fd fa69 	bl	8003988 <_exit>

080064b6 <_malloc_usable_size_r>:
 80064b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ba:	1f18      	subs	r0, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bfbc      	itt	lt
 80064c0:	580b      	ldrlt	r3, [r1, r0]
 80064c2:	18c0      	addlt	r0, r0, r3
 80064c4:	4770      	bx	lr

080064c6 <__sfputc_r>:
 80064c6:	6893      	ldr	r3, [r2, #8]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	b410      	push	{r4}
 80064ce:	6093      	str	r3, [r2, #8]
 80064d0:	da08      	bge.n	80064e4 <__sfputc_r+0x1e>
 80064d2:	6994      	ldr	r4, [r2, #24]
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	db01      	blt.n	80064dc <__sfputc_r+0x16>
 80064d8:	290a      	cmp	r1, #10
 80064da:	d103      	bne.n	80064e4 <__sfputc_r+0x1e>
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e0:	f000 b932 	b.w	8006748 <__swbuf_r>
 80064e4:	6813      	ldr	r3, [r2, #0]
 80064e6:	1c58      	adds	r0, r3, #1
 80064e8:	6010      	str	r0, [r2, #0]
 80064ea:	7019      	strb	r1, [r3, #0]
 80064ec:	4608      	mov	r0, r1
 80064ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <__sfputs_r>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	4606      	mov	r6, r0
 80064f8:	460f      	mov	r7, r1
 80064fa:	4614      	mov	r4, r2
 80064fc:	18d5      	adds	r5, r2, r3
 80064fe:	42ac      	cmp	r4, r5
 8006500:	d101      	bne.n	8006506 <__sfputs_r+0x12>
 8006502:	2000      	movs	r0, #0
 8006504:	e007      	b.n	8006516 <__sfputs_r+0x22>
 8006506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650a:	463a      	mov	r2, r7
 800650c:	4630      	mov	r0, r6
 800650e:	f7ff ffda 	bl	80064c6 <__sfputc_r>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d1f3      	bne.n	80064fe <__sfputs_r+0xa>
 8006516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006518 <_vfiprintf_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	460d      	mov	r5, r1
 800651e:	b09d      	sub	sp, #116	@ 0x74
 8006520:	4614      	mov	r4, r2
 8006522:	4698      	mov	r8, r3
 8006524:	4606      	mov	r6, r0
 8006526:	b118      	cbz	r0, 8006530 <_vfiprintf_r+0x18>
 8006528:	6a03      	ldr	r3, [r0, #32]
 800652a:	b90b      	cbnz	r3, 8006530 <_vfiprintf_r+0x18>
 800652c:	f7fe f8c6 	bl	80046bc <__sinit>
 8006530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006532:	07d9      	lsls	r1, r3, #31
 8006534:	d405      	bmi.n	8006542 <_vfiprintf_r+0x2a>
 8006536:	89ab      	ldrh	r3, [r5, #12]
 8006538:	059a      	lsls	r2, r3, #22
 800653a:	d402      	bmi.n	8006542 <_vfiprintf_r+0x2a>
 800653c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800653e:	f7fe f9e6 	bl	800490e <__retarget_lock_acquire_recursive>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	071b      	lsls	r3, r3, #28
 8006546:	d501      	bpl.n	800654c <_vfiprintf_r+0x34>
 8006548:	692b      	ldr	r3, [r5, #16]
 800654a:	b99b      	cbnz	r3, 8006574 <_vfiprintf_r+0x5c>
 800654c:	4629      	mov	r1, r5
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f938 	bl	80067c4 <__swsetup_r>
 8006554:	b170      	cbz	r0, 8006574 <_vfiprintf_r+0x5c>
 8006556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006558:	07dc      	lsls	r4, r3, #31
 800655a:	d504      	bpl.n	8006566 <_vfiprintf_r+0x4e>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006560:	b01d      	add	sp, #116	@ 0x74
 8006562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	0598      	lsls	r0, r3, #22
 800656a:	d4f7      	bmi.n	800655c <_vfiprintf_r+0x44>
 800656c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800656e:	f7fe f9cf 	bl	8004910 <__retarget_lock_release_recursive>
 8006572:	e7f3      	b.n	800655c <_vfiprintf_r+0x44>
 8006574:	2300      	movs	r3, #0
 8006576:	9309      	str	r3, [sp, #36]	@ 0x24
 8006578:	2320      	movs	r3, #32
 800657a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800657e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006582:	2330      	movs	r3, #48	@ 0x30
 8006584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006734 <_vfiprintf_r+0x21c>
 8006588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800658c:	f04f 0901 	mov.w	r9, #1
 8006590:	4623      	mov	r3, r4
 8006592:	469a      	mov	sl, r3
 8006594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006598:	b10a      	cbz	r2, 800659e <_vfiprintf_r+0x86>
 800659a:	2a25      	cmp	r2, #37	@ 0x25
 800659c:	d1f9      	bne.n	8006592 <_vfiprintf_r+0x7a>
 800659e:	ebba 0b04 	subs.w	fp, sl, r4
 80065a2:	d00b      	beq.n	80065bc <_vfiprintf_r+0xa4>
 80065a4:	465b      	mov	r3, fp
 80065a6:	4622      	mov	r2, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ffa2 	bl	80064f4 <__sfputs_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	f000 80a7 	beq.w	8006704 <_vfiprintf_r+0x1ec>
 80065b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065b8:	445a      	add	r2, fp
 80065ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80065bc:	f89a 3000 	ldrb.w	r3, [sl]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 809f 	beq.w	8006704 <_vfiprintf_r+0x1ec>
 80065c6:	2300      	movs	r3, #0
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d0:	f10a 0a01 	add.w	sl, sl, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	9307      	str	r3, [sp, #28]
 80065d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80065de:	4654      	mov	r4, sl
 80065e0:	2205      	movs	r2, #5
 80065e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e6:	4853      	ldr	r0, [pc, #332]	@ (8006734 <_vfiprintf_r+0x21c>)
 80065e8:	f7f9 fdda 	bl	80001a0 <memchr>
 80065ec:	9a04      	ldr	r2, [sp, #16]
 80065ee:	b9d8      	cbnz	r0, 8006628 <_vfiprintf_r+0x110>
 80065f0:	06d1      	lsls	r1, r2, #27
 80065f2:	bf44      	itt	mi
 80065f4:	2320      	movmi	r3, #32
 80065f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065fa:	0713      	lsls	r3, r2, #28
 80065fc:	bf44      	itt	mi
 80065fe:	232b      	movmi	r3, #43	@ 0x2b
 8006600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006604:	f89a 3000 	ldrb.w	r3, [sl]
 8006608:	2b2a      	cmp	r3, #42	@ 0x2a
 800660a:	d015      	beq.n	8006638 <_vfiprintf_r+0x120>
 800660c:	9a07      	ldr	r2, [sp, #28]
 800660e:	4654      	mov	r4, sl
 8006610:	2000      	movs	r0, #0
 8006612:	f04f 0c0a 	mov.w	ip, #10
 8006616:	4621      	mov	r1, r4
 8006618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661c:	3b30      	subs	r3, #48	@ 0x30
 800661e:	2b09      	cmp	r3, #9
 8006620:	d94b      	bls.n	80066ba <_vfiprintf_r+0x1a2>
 8006622:	b1b0      	cbz	r0, 8006652 <_vfiprintf_r+0x13a>
 8006624:	9207      	str	r2, [sp, #28]
 8006626:	e014      	b.n	8006652 <_vfiprintf_r+0x13a>
 8006628:	eba0 0308 	sub.w	r3, r0, r8
 800662c:	fa09 f303 	lsl.w	r3, r9, r3
 8006630:	4313      	orrs	r3, r2
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	46a2      	mov	sl, r4
 8006636:	e7d2      	b.n	80065de <_vfiprintf_r+0xc6>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	1d19      	adds	r1, r3, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	9103      	str	r1, [sp, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	bfbb      	ittet	lt
 8006644:	425b      	neglt	r3, r3
 8006646:	f042 0202 	orrlt.w	r2, r2, #2
 800664a:	9307      	strge	r3, [sp, #28]
 800664c:	9307      	strlt	r3, [sp, #28]
 800664e:	bfb8      	it	lt
 8006650:	9204      	strlt	r2, [sp, #16]
 8006652:	7823      	ldrb	r3, [r4, #0]
 8006654:	2b2e      	cmp	r3, #46	@ 0x2e
 8006656:	d10a      	bne.n	800666e <_vfiprintf_r+0x156>
 8006658:	7863      	ldrb	r3, [r4, #1]
 800665a:	2b2a      	cmp	r3, #42	@ 0x2a
 800665c:	d132      	bne.n	80066c4 <_vfiprintf_r+0x1ac>
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	9203      	str	r2, [sp, #12]
 8006666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800666a:	3402      	adds	r4, #2
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006744 <_vfiprintf_r+0x22c>
 8006672:	7821      	ldrb	r1, [r4, #0]
 8006674:	2203      	movs	r2, #3
 8006676:	4650      	mov	r0, sl
 8006678:	f7f9 fd92 	bl	80001a0 <memchr>
 800667c:	b138      	cbz	r0, 800668e <_vfiprintf_r+0x176>
 800667e:	9b04      	ldr	r3, [sp, #16]
 8006680:	eba0 000a 	sub.w	r0, r0, sl
 8006684:	2240      	movs	r2, #64	@ 0x40
 8006686:	4082      	lsls	r2, r0
 8006688:	4313      	orrs	r3, r2
 800668a:	3401      	adds	r4, #1
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006692:	4829      	ldr	r0, [pc, #164]	@ (8006738 <_vfiprintf_r+0x220>)
 8006694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006698:	2206      	movs	r2, #6
 800669a:	f7f9 fd81 	bl	80001a0 <memchr>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d03f      	beq.n	8006722 <_vfiprintf_r+0x20a>
 80066a2:	4b26      	ldr	r3, [pc, #152]	@ (800673c <_vfiprintf_r+0x224>)
 80066a4:	bb1b      	cbnz	r3, 80066ee <_vfiprintf_r+0x1d6>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	3307      	adds	r3, #7
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	3308      	adds	r3, #8
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	443b      	add	r3, r7
 80066b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b8:	e76a      	b.n	8006590 <_vfiprintf_r+0x78>
 80066ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80066be:	460c      	mov	r4, r1
 80066c0:	2001      	movs	r0, #1
 80066c2:	e7a8      	b.n	8006616 <_vfiprintf_r+0xfe>
 80066c4:	2300      	movs	r3, #0
 80066c6:	3401      	adds	r4, #1
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	4619      	mov	r1, r3
 80066cc:	f04f 0c0a 	mov.w	ip, #10
 80066d0:	4620      	mov	r0, r4
 80066d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d6:	3a30      	subs	r2, #48	@ 0x30
 80066d8:	2a09      	cmp	r2, #9
 80066da:	d903      	bls.n	80066e4 <_vfiprintf_r+0x1cc>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0c6      	beq.n	800666e <_vfiprintf_r+0x156>
 80066e0:	9105      	str	r1, [sp, #20]
 80066e2:	e7c4      	b.n	800666e <_vfiprintf_r+0x156>
 80066e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066e8:	4604      	mov	r4, r0
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7f0      	b.n	80066d0 <_vfiprintf_r+0x1b8>
 80066ee:	ab03      	add	r3, sp, #12
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	462a      	mov	r2, r5
 80066f4:	4b12      	ldr	r3, [pc, #72]	@ (8006740 <_vfiprintf_r+0x228>)
 80066f6:	a904      	add	r1, sp, #16
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7fd fb9b 	bl	8003e34 <_printf_float>
 80066fe:	4607      	mov	r7, r0
 8006700:	1c78      	adds	r0, r7, #1
 8006702:	d1d6      	bne.n	80066b2 <_vfiprintf_r+0x19a>
 8006704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006706:	07d9      	lsls	r1, r3, #31
 8006708:	d405      	bmi.n	8006716 <_vfiprintf_r+0x1fe>
 800670a:	89ab      	ldrh	r3, [r5, #12]
 800670c:	059a      	lsls	r2, r3, #22
 800670e:	d402      	bmi.n	8006716 <_vfiprintf_r+0x1fe>
 8006710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006712:	f7fe f8fd 	bl	8004910 <__retarget_lock_release_recursive>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	065b      	lsls	r3, r3, #25
 800671a:	f53f af1f 	bmi.w	800655c <_vfiprintf_r+0x44>
 800671e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006720:	e71e      	b.n	8006560 <_vfiprintf_r+0x48>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <_vfiprintf_r+0x228>)
 800672a:	a904      	add	r1, sp, #16
 800672c:	4630      	mov	r0, r6
 800672e:	f7fd fe17 	bl	8004360 <_printf_i>
 8006732:	e7e4      	b.n	80066fe <_vfiprintf_r+0x1e6>
 8006734:	080070ba 	.word	0x080070ba
 8006738:	080070c4 	.word	0x080070c4
 800673c:	08003e35 	.word	0x08003e35
 8006740:	080064f5 	.word	0x080064f5
 8006744:	080070c0 	.word	0x080070c0

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
 800674e:	4605      	mov	r5, r0
 8006750:	b118      	cbz	r0, 800675a <__swbuf_r+0x12>
 8006752:	6a03      	ldr	r3, [r0, #32]
 8006754:	b90b      	cbnz	r3, 800675a <__swbuf_r+0x12>
 8006756:	f7fd ffb1 	bl	80046bc <__sinit>
 800675a:	69a3      	ldr	r3, [r4, #24]
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	071a      	lsls	r2, r3, #28
 8006762:	d501      	bpl.n	8006768 <__swbuf_r+0x20>
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	b943      	cbnz	r3, 800677a <__swbuf_r+0x32>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f82a 	bl	80067c4 <__swsetup_r>
 8006770:	b118      	cbz	r0, 800677a <__swbuf_r+0x32>
 8006772:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006776:	4638      	mov	r0, r7
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	1a98      	subs	r0, r3, r2
 8006780:	6963      	ldr	r3, [r4, #20]
 8006782:	b2f6      	uxtb	r6, r6
 8006784:	4283      	cmp	r3, r0
 8006786:	4637      	mov	r7, r6
 8006788:	dc05      	bgt.n	8006796 <__swbuf_r+0x4e>
 800678a:	4621      	mov	r1, r4
 800678c:	4628      	mov	r0, r5
 800678e:	f7ff fd99 	bl	80062c4 <_fflush_r>
 8006792:	2800      	cmp	r0, #0
 8006794:	d1ed      	bne.n	8006772 <__swbuf_r+0x2a>
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	3b01      	subs	r3, #1
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	701e      	strb	r6, [r3, #0]
 80067a4:	6962      	ldr	r2, [r4, #20]
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d004      	beq.n	80067b6 <__swbuf_r+0x6e>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	07db      	lsls	r3, r3, #31
 80067b0:	d5e1      	bpl.n	8006776 <__swbuf_r+0x2e>
 80067b2:	2e0a      	cmp	r6, #10
 80067b4:	d1df      	bne.n	8006776 <__swbuf_r+0x2e>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f7ff fd83 	bl	80062c4 <_fflush_r>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0d9      	beq.n	8006776 <__swbuf_r+0x2e>
 80067c2:	e7d6      	b.n	8006772 <__swbuf_r+0x2a>

080067c4 <__swsetup_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4b28      	ldr	r3, [pc, #160]	@ (8006868 <__swsetup_r+0xa4>)
 80067c8:	4605      	mov	r5, r0
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	460c      	mov	r4, r1
 80067ce:	b118      	cbz	r0, 80067d8 <__swsetup_r+0x14>
 80067d0:	6a03      	ldr	r3, [r0, #32]
 80067d2:	b90b      	cbnz	r3, 80067d8 <__swsetup_r+0x14>
 80067d4:	f7fd ff72 	bl	80046bc <__sinit>
 80067d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067dc:	0719      	lsls	r1, r3, #28
 80067de:	d421      	bmi.n	8006824 <__swsetup_r+0x60>
 80067e0:	06da      	lsls	r2, r3, #27
 80067e2:	d407      	bmi.n	80067f4 <__swsetup_r+0x30>
 80067e4:	2209      	movs	r2, #9
 80067e6:	602a      	str	r2, [r5, #0]
 80067e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067f2:	e031      	b.n	8006858 <__swsetup_r+0x94>
 80067f4:	0758      	lsls	r0, r3, #29
 80067f6:	d512      	bpl.n	800681e <__swsetup_r+0x5a>
 80067f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067fa:	b141      	cbz	r1, 800680e <__swsetup_r+0x4a>
 80067fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <__swsetup_r+0x46>
 8006804:	4628      	mov	r0, r5
 8006806:	f7fe fef7 	bl	80055f8 <_free_r>
 800680a:	2300      	movs	r3, #0
 800680c:	6363      	str	r3, [r4, #52]	@ 0x34
 800680e:	2200      	movs	r2, #0
 8006810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006814:	6062      	str	r2, [r4, #4]
 8006816:	6922      	ldr	r2, [r4, #16]
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800681e:	f043 0308 	orr.w	r3, r3, #8
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	b942      	cbnz	r2, 800683a <__swsetup_r+0x76>
 8006828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800682c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006830:	d003      	beq.n	800683a <__swsetup_r+0x76>
 8006832:	4621      	mov	r1, r4
 8006834:	4628      	mov	r0, r5
 8006836:	f000 f881 	bl	800693c <__smakebuf_r>
 800683a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683e:	f013 0201 	ands.w	r2, r3, #1
 8006842:	d00a      	beq.n	800685a <__swsetup_r+0x96>
 8006844:	2200      	movs	r2, #0
 8006846:	60a2      	str	r2, [r4, #8]
 8006848:	6962      	ldr	r2, [r4, #20]
 800684a:	4252      	negs	r2, r2
 800684c:	61a2      	str	r2, [r4, #24]
 800684e:	6922      	ldr	r2, [r4, #16]
 8006850:	b942      	cbnz	r2, 8006864 <__swsetup_r+0xa0>
 8006852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006856:	d1c7      	bne.n	80067e8 <__swsetup_r+0x24>
 8006858:	bd38      	pop	{r3, r4, r5, pc}
 800685a:	0799      	lsls	r1, r3, #30
 800685c:	bf58      	it	pl
 800685e:	6962      	ldrpl	r2, [r4, #20]
 8006860:	60a2      	str	r2, [r4, #8]
 8006862:	e7f4      	b.n	800684e <__swsetup_r+0x8a>
 8006864:	2000      	movs	r0, #0
 8006866:	e7f7      	b.n	8006858 <__swsetup_r+0x94>
 8006868:	20000018 	.word	0x20000018

0800686c <_raise_r>:
 800686c:	291f      	cmp	r1, #31
 800686e:	b538      	push	{r3, r4, r5, lr}
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	d904      	bls.n	8006880 <_raise_r+0x14>
 8006876:	2316      	movs	r3, #22
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006882:	b112      	cbz	r2, 800688a <_raise_r+0x1e>
 8006884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006888:	b94b      	cbnz	r3, 800689e <_raise_r+0x32>
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f830 	bl	80068f0 <_getpid_r>
 8006890:	4622      	mov	r2, r4
 8006892:	4601      	mov	r1, r0
 8006894:	4628      	mov	r0, r5
 8006896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689a:	f000 b817 	b.w	80068cc <_kill_r>
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d00a      	beq.n	80068b8 <_raise_r+0x4c>
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	d103      	bne.n	80068ae <_raise_r+0x42>
 80068a6:	2316      	movs	r3, #22
 80068a8:	6003      	str	r3, [r0, #0]
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7e7      	b.n	800687e <_raise_r+0x12>
 80068ae:	2100      	movs	r1, #0
 80068b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068b4:	4620      	mov	r0, r4
 80068b6:	4798      	blx	r3
 80068b8:	2000      	movs	r0, #0
 80068ba:	e7e0      	b.n	800687e <_raise_r+0x12>

080068bc <raise>:
 80068bc:	4b02      	ldr	r3, [pc, #8]	@ (80068c8 <raise+0xc>)
 80068be:	4601      	mov	r1, r0
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f7ff bfd3 	b.w	800686c <_raise_r>
 80068c6:	bf00      	nop
 80068c8:	20000018 	.word	0x20000018

080068cc <_kill_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d07      	ldr	r5, [pc, #28]	@ (80068ec <_kill_r+0x20>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	f7fd f84d 	bl	8003978 <_kill>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d102      	bne.n	80068e8 <_kill_r+0x1c>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	b103      	cbz	r3, 80068e8 <_kill_r+0x1c>
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	bf00      	nop
 80068ec:	2000043c 	.word	0x2000043c

080068f0 <_getpid_r>:
 80068f0:	f7fd b840 	b.w	8003974 <_getpid>

080068f4 <__swhatbuf_r>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	460c      	mov	r4, r1
 80068f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fc:	2900      	cmp	r1, #0
 80068fe:	b096      	sub	sp, #88	@ 0x58
 8006900:	4615      	mov	r5, r2
 8006902:	461e      	mov	r6, r3
 8006904:	da0a      	bge.n	800691c <__swhatbuf_r+0x28>
 8006906:	89a1      	ldrh	r1, [r4, #12]
 8006908:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800690c:	d113      	bne.n	8006936 <__swhatbuf_r+0x42>
 800690e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006912:	2000      	movs	r0, #0
 8006914:	6031      	str	r1, [r6, #0]
 8006916:	602a      	str	r2, [r5, #0]
 8006918:	b016      	add	sp, #88	@ 0x58
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	466a      	mov	r2, sp
 800691e:	f000 f847 	bl	80069b0 <_fstat_r>
 8006922:	2800      	cmp	r0, #0
 8006924:	dbef      	blt.n	8006906 <__swhatbuf_r+0x12>
 8006926:	9901      	ldr	r1, [sp, #4]
 8006928:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800692c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006930:	4259      	negs	r1, r3
 8006932:	4159      	adcs	r1, r3
 8006934:	e7eb      	b.n	800690e <__swhatbuf_r+0x1a>
 8006936:	2100      	movs	r1, #0
 8006938:	2240      	movs	r2, #64	@ 0x40
 800693a:	e7ea      	b.n	8006912 <__swhatbuf_r+0x1e>

0800693c <__smakebuf_r>:
 800693c:	898b      	ldrh	r3, [r1, #12]
 800693e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006940:	079e      	lsls	r6, r3, #30
 8006942:	4605      	mov	r5, r0
 8006944:	460c      	mov	r4, r1
 8006946:	d507      	bpl.n	8006958 <__smakebuf_r+0x1c>
 8006948:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	2301      	movs	r3, #1
 8006952:	6163      	str	r3, [r4, #20]
 8006954:	b002      	add	sp, #8
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	ab01      	add	r3, sp, #4
 800695a:	466a      	mov	r2, sp
 800695c:	f7ff ffca 	bl	80068f4 <__swhatbuf_r>
 8006960:	9e00      	ldr	r6, [sp, #0]
 8006962:	4628      	mov	r0, r5
 8006964:	4631      	mov	r1, r6
 8006966:	f7fe febb 	bl	80056e0 <_malloc_r>
 800696a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696e:	b938      	cbnz	r0, 8006980 <__smakebuf_r+0x44>
 8006970:	059a      	lsls	r2, r3, #22
 8006972:	d4ef      	bmi.n	8006954 <__smakebuf_r+0x18>
 8006974:	f023 0303 	bic.w	r3, r3, #3
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	e7e3      	b.n	8006948 <__smakebuf_r+0xc>
 8006980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	6020      	str	r0, [r4, #0]
 800698a:	e9c4 0604 	strd	r0, r6, [r4, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0e0      	beq.n	8006954 <__smakebuf_r+0x18>
 8006992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006996:	4628      	mov	r0, r5
 8006998:	f000 f81c 	bl	80069d4 <_isatty_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	d0d9      	beq.n	8006954 <__smakebuf_r+0x18>
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	e7d2      	b.n	8006954 <__smakebuf_r+0x18>
	...

080069b0 <_fstat_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4d07      	ldr	r5, [pc, #28]	@ (80069d0 <_fstat_r+0x20>)
 80069b4:	2300      	movs	r3, #0
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	f7fd f80a 	bl	80039d6 <_fstat>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d102      	bne.n	80069cc <_fstat_r+0x1c>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	b103      	cbz	r3, 80069cc <_fstat_r+0x1c>
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
 80069ce:	bf00      	nop
 80069d0:	2000043c 	.word	0x2000043c

080069d4 <_isatty_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	@ (80069f0 <_isatty_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fc fffe 	bl	80039e0 <_isatty>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_isatty_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_isatty_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	2000043c 	.word	0x2000043c

080069f4 <__udivmoddi4>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	468c      	mov	ip, r1
 80069fa:	468e      	mov	lr, r1
 80069fc:	9e08      	ldr	r6, [sp, #32]
 80069fe:	4615      	mov	r5, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	4619      	mov	r1, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 80d0 	bne.w	8006baa <__udivmoddi4+0x1b6>
 8006a0a:	4572      	cmp	r2, lr
 8006a0c:	d947      	bls.n	8006a9e <__udivmoddi4+0xaa>
 8006a0e:	fab2 f782 	clz	r7, r2
 8006a12:	b14f      	cbz	r7, 8006a28 <__udivmoddi4+0x34>
 8006a14:	f1c7 0320 	rsb	r3, r7, #32
 8006a18:	fa0e fc07 	lsl.w	ip, lr, r7
 8006a1c:	fa20 f303 	lsr.w	r3, r0, r3
 8006a20:	40bd      	lsls	r5, r7
 8006a22:	ea43 0c0c 	orr.w	ip, r3, ip
 8006a26:	40bc      	lsls	r4, r7
 8006a28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006a2c:	b2a8      	uxth	r0, r5
 8006a2e:	fbbc f8fe 	udiv	r8, ip, lr
 8006a32:	0c23      	lsrs	r3, r4, #16
 8006a34:	fb0e cc18 	mls	ip, lr, r8, ip
 8006a38:	fb08 f900 	mul.w	r9, r8, r0
 8006a3c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006a40:	4599      	cmp	r9, r3
 8006a42:	d928      	bls.n	8006a96 <__udivmoddi4+0xa2>
 8006a44:	18eb      	adds	r3, r5, r3
 8006a46:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8006a4a:	d204      	bcs.n	8006a56 <__udivmoddi4+0x62>
 8006a4c:	4599      	cmp	r9, r3
 8006a4e:	d902      	bls.n	8006a56 <__udivmoddi4+0x62>
 8006a50:	f1a8 0202 	sub.w	r2, r8, #2
 8006a54:	442b      	add	r3, r5
 8006a56:	eba3 0309 	sub.w	r3, r3, r9
 8006a5a:	b2a4      	uxth	r4, r4
 8006a5c:	fbb3 fcfe 	udiv	ip, r3, lr
 8006a60:	fb0e 331c 	mls	r3, lr, ip, r3
 8006a64:	fb0c f000 	mul.w	r0, ip, r0
 8006a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d914      	bls.n	8006a9a <__udivmoddi4+0xa6>
 8006a70:	192c      	adds	r4, r5, r4
 8006a72:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006a76:	d204      	bcs.n	8006a82 <__udivmoddi4+0x8e>
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d902      	bls.n	8006a82 <__udivmoddi4+0x8e>
 8006a7c:	f1ac 0302 	sub.w	r3, ip, #2
 8006a80:	442c      	add	r4, r5
 8006a82:	1a24      	subs	r4, r4, r0
 8006a84:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8006a88:	b11e      	cbz	r6, 8006a92 <__udivmoddi4+0x9e>
 8006a8a:	40fc      	lsrs	r4, r7
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6034      	str	r4, [r6, #0]
 8006a90:	6073      	str	r3, [r6, #4]
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	4642      	mov	r2, r8
 8006a98:	e7dd      	b.n	8006a56 <__udivmoddi4+0x62>
 8006a9a:	4663      	mov	r3, ip
 8006a9c:	e7f1      	b.n	8006a82 <__udivmoddi4+0x8e>
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	d079      	beq.n	8006b96 <__udivmoddi4+0x1a2>
 8006aa2:	fab2 f382 	clz	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d03f      	beq.n	8006b2a <__udivmoddi4+0x136>
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f1c1 0320 	rsb	r3, r1, #32
 8006ab0:	fa02 f501 	lsl.w	r5, r2, r1
 8006ab4:	fa2e f203 	lsr.w	r2, lr, r3
 8006ab8:	fa0e fe01 	lsl.w	lr, lr, r1
 8006abc:	fa20 f303 	lsr.w	r3, r0, r3
 8006ac0:	ea43 030e 	orr.w	r3, r3, lr
 8006ac4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006ac8:	fa00 f401 	lsl.w	r4, r0, r1
 8006acc:	fbb2 fcfe 	udiv	ip, r2, lr
 8006ad0:	b2af      	uxth	r7, r5
 8006ad2:	fb0e 201c 	mls	r0, lr, ip, r2
 8006ad6:	0c1a      	lsrs	r2, r3, #16
 8006ad8:	fb0c f807 	mul.w	r8, ip, r7
 8006adc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006ae0:	4590      	cmp	r8, r2
 8006ae2:	d95a      	bls.n	8006b9a <__udivmoddi4+0x1a6>
 8006ae4:	18aa      	adds	r2, r5, r2
 8006ae6:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006aea:	d204      	bcs.n	8006af6 <__udivmoddi4+0x102>
 8006aec:	4590      	cmp	r8, r2
 8006aee:	d902      	bls.n	8006af6 <__udivmoddi4+0x102>
 8006af0:	f1ac 0002 	sub.w	r0, ip, #2
 8006af4:	442a      	add	r2, r5
 8006af6:	eba2 0208 	sub.w	r2, r2, r8
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	fbb2 fcfe 	udiv	ip, r2, lr
 8006b00:	fb0e 221c 	mls	r2, lr, ip, r2
 8006b04:	fb0c f707 	mul.w	r7, ip, r7
 8006b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b0c:	429f      	cmp	r7, r3
 8006b0e:	d946      	bls.n	8006b9e <__udivmoddi4+0x1aa>
 8006b10:	18eb      	adds	r3, r5, r3
 8006b12:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8006b16:	d204      	bcs.n	8006b22 <__udivmoddi4+0x12e>
 8006b18:	429f      	cmp	r7, r3
 8006b1a:	d902      	bls.n	8006b22 <__udivmoddi4+0x12e>
 8006b1c:	f1ac 0202 	sub.w	r2, ip, #2
 8006b20:	442b      	add	r3, r5
 8006b22:	1bdb      	subs	r3, r3, r7
 8006b24:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b28:	e002      	b.n	8006b30 <__udivmoddi4+0x13c>
 8006b2a:	ebae 0302 	sub.w	r3, lr, r2
 8006b2e:	2201      	movs	r2, #1
 8006b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006b34:	b2af      	uxth	r7, r5
 8006b36:	fbb3 fcfe 	udiv	ip, r3, lr
 8006b3a:	0c20      	lsrs	r0, r4, #16
 8006b3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8006b40:	fb0c f807 	mul.w	r8, ip, r7
 8006b44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8006b48:	4598      	cmp	r8, r3
 8006b4a:	d92a      	bls.n	8006ba2 <__udivmoddi4+0x1ae>
 8006b4c:	18eb      	adds	r3, r5, r3
 8006b4e:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8006b52:	d204      	bcs.n	8006b5e <__udivmoddi4+0x16a>
 8006b54:	4598      	cmp	r8, r3
 8006b56:	d902      	bls.n	8006b5e <__udivmoddi4+0x16a>
 8006b58:	f1ac 0002 	sub.w	r0, ip, #2
 8006b5c:	442b      	add	r3, r5
 8006b5e:	eba3 0308 	sub.w	r3, r3, r8
 8006b62:	b2a4      	uxth	r4, r4
 8006b64:	fbb3 fcfe 	udiv	ip, r3, lr
 8006b68:	fb0e 331c 	mls	r3, lr, ip, r3
 8006b6c:	fb0c f707 	mul.w	r7, ip, r7
 8006b70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006b74:	42a7      	cmp	r7, r4
 8006b76:	d916      	bls.n	8006ba6 <__udivmoddi4+0x1b2>
 8006b78:	192c      	adds	r4, r5, r4
 8006b7a:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8006b7e:	d204      	bcs.n	8006b8a <__udivmoddi4+0x196>
 8006b80:	42a7      	cmp	r7, r4
 8006b82:	d902      	bls.n	8006b8a <__udivmoddi4+0x196>
 8006b84:	f1ac 0302 	sub.w	r3, ip, #2
 8006b88:	442c      	add	r4, r5
 8006b8a:	1be4      	subs	r4, r4, r7
 8006b8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006b90:	460f      	mov	r7, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	e778      	b.n	8006a88 <__udivmoddi4+0x94>
 8006b96:	211f      	movs	r1, #31
 8006b98:	e788      	b.n	8006aac <__udivmoddi4+0xb8>
 8006b9a:	4660      	mov	r0, ip
 8006b9c:	e7ab      	b.n	8006af6 <__udivmoddi4+0x102>
 8006b9e:	4662      	mov	r2, ip
 8006ba0:	e7bf      	b.n	8006b22 <__udivmoddi4+0x12e>
 8006ba2:	4660      	mov	r0, ip
 8006ba4:	e7db      	b.n	8006b5e <__udivmoddi4+0x16a>
 8006ba6:	4663      	mov	r3, ip
 8006ba8:	e7ef      	b.n	8006b8a <__udivmoddi4+0x196>
 8006baa:	4573      	cmp	r3, lr
 8006bac:	d906      	bls.n	8006bbc <__udivmoddi4+0x1c8>
 8006bae:	b916      	cbnz	r6, 8006bb6 <__udivmoddi4+0x1c2>
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	e76d      	b.n	8006a92 <__udivmoddi4+0x9e>
 8006bb6:	e9c6 0e00 	strd	r0, lr, [r6]
 8006bba:	e7f9      	b.n	8006bb0 <__udivmoddi4+0x1bc>
 8006bbc:	fab3 f783 	clz	r7, r3
 8006bc0:	b987      	cbnz	r7, 8006be4 <__udivmoddi4+0x1f0>
 8006bc2:	4573      	cmp	r3, lr
 8006bc4:	d301      	bcc.n	8006bca <__udivmoddi4+0x1d6>
 8006bc6:	4282      	cmp	r2, r0
 8006bc8:	d807      	bhi.n	8006bda <__udivmoddi4+0x1e6>
 8006bca:	1a84      	subs	r4, r0, r2
 8006bcc:	eb6e 0303 	sbc.w	r3, lr, r3
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	469c      	mov	ip, r3
 8006bd4:	b91e      	cbnz	r6, 8006bde <__udivmoddi4+0x1ea>
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	e75b      	b.n	8006a92 <__udivmoddi4+0x9e>
 8006bda:	4638      	mov	r0, r7
 8006bdc:	e7fa      	b.n	8006bd4 <__udivmoddi4+0x1e0>
 8006bde:	e9c6 4c00 	strd	r4, ip, [r6]
 8006be2:	e7f8      	b.n	8006bd6 <__udivmoddi4+0x1e2>
 8006be4:	f1c7 0c20 	rsb	ip, r7, #32
 8006be8:	40bb      	lsls	r3, r7
 8006bea:	fa22 f50c 	lsr.w	r5, r2, ip
 8006bee:	431d      	orrs	r5, r3
 8006bf0:	fa20 f10c 	lsr.w	r1, r0, ip
 8006bf4:	fa2e f30c 	lsr.w	r3, lr, ip
 8006bf8:	fa0e fe07 	lsl.w	lr, lr, r7
 8006bfc:	ea41 010e 	orr.w	r1, r1, lr
 8006c00:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8006c04:	fa00 f407 	lsl.w	r4, r0, r7
 8006c08:	fbb3 f8f9 	udiv	r8, r3, r9
 8006c0c:	fa1f fe85 	uxth.w	lr, r5
 8006c10:	fb09 3018 	mls	r0, r9, r8, r3
 8006c14:	0c0b      	lsrs	r3, r1, #16
 8006c16:	fb08 fa0e 	mul.w	sl, r8, lr
 8006c1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c1e:	459a      	cmp	sl, r3
 8006c20:	fa02 f207 	lsl.w	r2, r2, r7
 8006c24:	d940      	bls.n	8006ca8 <__udivmoddi4+0x2b4>
 8006c26:	18eb      	adds	r3, r5, r3
 8006c28:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006c2c:	d204      	bcs.n	8006c38 <__udivmoddi4+0x244>
 8006c2e:	459a      	cmp	sl, r3
 8006c30:	d902      	bls.n	8006c38 <__udivmoddi4+0x244>
 8006c32:	f1a8 0002 	sub.w	r0, r8, #2
 8006c36:	442b      	add	r3, r5
 8006c38:	eba3 030a 	sub.w	r3, r3, sl
 8006c3c:	b289      	uxth	r1, r1
 8006c3e:	fbb3 f8f9 	udiv	r8, r3, r9
 8006c42:	fb09 3318 	mls	r3, r9, r8, r3
 8006c46:	fb08 fe0e 	mul.w	lr, r8, lr
 8006c4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006c4e:	458e      	cmp	lr, r1
 8006c50:	d92c      	bls.n	8006cac <__udivmoddi4+0x2b8>
 8006c52:	1869      	adds	r1, r5, r1
 8006c54:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006c58:	d204      	bcs.n	8006c64 <__udivmoddi4+0x270>
 8006c5a:	458e      	cmp	lr, r1
 8006c5c:	d902      	bls.n	8006c64 <__udivmoddi4+0x270>
 8006c5e:	f1a8 0302 	sub.w	r3, r8, #2
 8006c62:	4429      	add	r1, r5
 8006c64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006c68:	fba0 9802 	umull	r9, r8, r0, r2
 8006c6c:	eba1 010e 	sub.w	r1, r1, lr
 8006c70:	4541      	cmp	r1, r8
 8006c72:	46ce      	mov	lr, r9
 8006c74:	4643      	mov	r3, r8
 8006c76:	d302      	bcc.n	8006c7e <__udivmoddi4+0x28a>
 8006c78:	d106      	bne.n	8006c88 <__udivmoddi4+0x294>
 8006c7a:	454c      	cmp	r4, r9
 8006c7c:	d204      	bcs.n	8006c88 <__udivmoddi4+0x294>
 8006c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8006c82:	eb68 0305 	sbc.w	r3, r8, r5
 8006c86:	3801      	subs	r0, #1
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d0a4      	beq.n	8006bd6 <__udivmoddi4+0x1e2>
 8006c8c:	ebb4 020e 	subs.w	r2, r4, lr
 8006c90:	eb61 0103 	sbc.w	r1, r1, r3
 8006c94:	fa01 fc0c 	lsl.w	ip, r1, ip
 8006c98:	fa22 f307 	lsr.w	r3, r2, r7
 8006c9c:	ea4c 0303 	orr.w	r3, ip, r3
 8006ca0:	40f9      	lsrs	r1, r7
 8006ca2:	e9c6 3100 	strd	r3, r1, [r6]
 8006ca6:	e796      	b.n	8006bd6 <__udivmoddi4+0x1e2>
 8006ca8:	4640      	mov	r0, r8
 8006caa:	e7c5      	b.n	8006c38 <__udivmoddi4+0x244>
 8006cac:	4643      	mov	r3, r8
 8006cae:	e7d9      	b.n	8006c64 <__udivmoddi4+0x270>

08006cb0 <_init>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr

08006cbc <_fini>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr
