ARM GAS  /tmp/ccNMq7mO.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tim.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/tim.c"
  20              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_TIM_Base_MspInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_TIM_Base_MspInit:
  28              	.LVL0:
  29              	.LFB135:
   1:Core/Src/tim.c **** /* USER CODE BEGIN Header */
   2:Core/Src/tim.c **** /**
   3:Core/Src/tim.c ****   ******************************************************************************
   4:Core/Src/tim.c ****   * @file    tim.c
   5:Core/Src/tim.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/tim.c ****   *          of the TIM instances.
   7:Core/Src/tim.c ****   ******************************************************************************
   8:Core/Src/tim.c ****   * @attention
   9:Core/Src/tim.c ****   *
  10:Core/Src/tim.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/tim.c ****   * All rights reserved.
  12:Core/Src/tim.c ****   *
  13:Core/Src/tim.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/tim.c ****   * in the root directory of this software component.
  15:Core/Src/tim.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/tim.c ****   *
  17:Core/Src/tim.c ****   ******************************************************************************
  18:Core/Src/tim.c ****   */
  19:Core/Src/tim.c **** /* USER CODE END Header */
  20:Core/Src/tim.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/tim.c **** #include "tim.h"
  22:Core/Src/tim.c **** 
  23:Core/Src/tim.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/tim.c **** 
  25:Core/Src/tim.c **** /* USER CODE END 0 */
  26:Core/Src/tim.c **** 
  27:Core/Src/tim.c **** TIM_HandleTypeDef htim1;
  28:Core/Src/tim.c **** 
  29:Core/Src/tim.c **** /* TIM1 init function */
ARM GAS  /tmp/ccNMq7mO.s 			page 2


  30:Core/Src/tim.c **** void MX_TIM1_Init(void)
  31:Core/Src/tim.c **** {
  32:Core/Src/tim.c **** 
  33:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 0 */
  34:Core/Src/tim.c **** 
  35:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 0 */
  36:Core/Src/tim.c **** 
  37:Core/Src/tim.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  38:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  39:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
  40:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
  41:Core/Src/tim.c **** 
  42:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 1 */
  43:Core/Src/tim.c **** 
  44:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 1 */
  45:Core/Src/tim.c ****   htim1.Instance = TIM1;
  46:Core/Src/tim.c ****   htim1.Init.Prescaler = 999;
  47:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  48:Core/Src/tim.c ****   htim1.Init.Period = 1999;
  49:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  50:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
  51:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  52:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  53:Core/Src/tim.c ****   {
  54:Core/Src/tim.c ****     Error_Handler();
  55:Core/Src/tim.c ****   }
  56:Core/Src/tim.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  57:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  58:Core/Src/tim.c ****   {
  59:Core/Src/tim.c ****     Error_Handler();
  60:Core/Src/tim.c ****   }
  61:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  62:Core/Src/tim.c ****   {
  63:Core/Src/tim.c ****     Error_Handler();
  64:Core/Src/tim.c ****   }
  65:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  66:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  67:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  68:Core/Src/tim.c ****   {
  69:Core/Src/tim.c ****     Error_Handler();
  70:Core/Src/tim.c ****   }
  71:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
  72:Core/Src/tim.c ****   sConfigOC.Pulse = 225;
  73:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  74:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  75:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  76:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  77:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  78:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  79:Core/Src/tim.c ****   {
  80:Core/Src/tim.c ****     Error_Handler();
  81:Core/Src/tim.c ****   }
  82:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  83:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  84:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  85:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
  86:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
ARM GAS  /tmp/ccNMq7mO.s 			page 3


  87:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  88:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  89:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  90:Core/Src/tim.c ****   {
  91:Core/Src/tim.c ****     Error_Handler();
  92:Core/Src/tim.c ****   }
  93:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 2 */
  94:Core/Src/tim.c **** 
  95:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 2 */
  96:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim1);
  97:Core/Src/tim.c **** 
  98:Core/Src/tim.c **** }
  99:Core/Src/tim.c **** 
 100:Core/Src/tim.c **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
 101:Core/Src/tim.c **** {
  30              		.loc 1 101 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
 102:Core/Src/tim.c **** 
 103:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
  34              		.loc 1 103 3 view .LVU1
  35              		.loc 1 103 20 is_stmt 0 view .LVU2
  36 0000 0268     		ldr	r2, [r0]
  37              		.loc 1 103 5 view .LVU3
  38 0002 1A4B     		ldr	r3, .L8
  39 0004 9A42     		cmp	r2, r3
  40 0006 00D0     		beq	.L7
  41 0008 7047     		bx	lr
  42              	.L7:
 101:Core/Src/tim.c **** 
  43              		.loc 1 101 1 view .LVU4
  44 000a 10B5     		push	{r4, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 4, -8
  47              		.cfi_offset 14, -4
  48 000c 82B0     		sub	sp, sp, #8
  49              		.cfi_def_cfa_offset 16
 104:Core/Src/tim.c ****   {
 105:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 106:Core/Src/tim.c **** 
 107:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 0 */
 108:Core/Src/tim.c ****     /* TIM1 clock enable */
 109:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_ENABLE();
  50              		.loc 1 109 5 is_stmt 1 view .LVU5
  51              	.LBB2:
  52              		.loc 1 109 5 view .LVU6
  53 000e 0024     		movs	r4, #0
  54 0010 0194     		str	r4, [sp, #4]
  55              		.loc 1 109 5 view .LVU7
  56 0012 03F59C33 		add	r3, r3, #79872
  57 0016 5A6C     		ldr	r2, [r3, #68]
  58 0018 42F00102 		orr	r2, r2, #1
  59 001c 5A64     		str	r2, [r3, #68]
  60              		.loc 1 109 5 view .LVU8
  61 001e 5B6C     		ldr	r3, [r3, #68]
  62 0020 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccNMq7mO.s 			page 4


  63 0024 0193     		str	r3, [sp, #4]
  64              		.loc 1 109 5 view .LVU9
  65 0026 019B     		ldr	r3, [sp, #4]
  66              	.LBE2:
  67              		.loc 1 109 5 view .LVU10
 110:Core/Src/tim.c **** 
 111:Core/Src/tim.c ****     /* TIM1 interrupt Init */
 112:Core/Src/tim.c ****     HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
  68              		.loc 1 112 5 view .LVU11
  69 0028 2246     		mov	r2, r4
  70 002a 2146     		mov	r1, r4
  71 002c 1820     		movs	r0, #24
  72              	.LVL1:
  73              		.loc 1 112 5 is_stmt 0 view .LVU12
  74 002e FFF7FEFF 		bl	HAL_NVIC_SetPriority
  75              	.LVL2:
 113:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  76              		.loc 1 113 5 is_stmt 1 view .LVU13
  77 0032 1820     		movs	r0, #24
  78 0034 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  79              	.LVL3:
 114:Core/Src/tim.c ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
  80              		.loc 1 114 5 view .LVU14
  81 0038 2246     		mov	r2, r4
  82 003a 2146     		mov	r1, r4
  83 003c 1920     		movs	r0, #25
  84 003e FFF7FEFF 		bl	HAL_NVIC_SetPriority
  85              	.LVL4:
 115:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  86              		.loc 1 115 5 view .LVU15
  87 0042 1920     		movs	r0, #25
  88 0044 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  89              	.LVL5:
 116:Core/Src/tim.c ****     HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
  90              		.loc 1 116 5 view .LVU16
  91 0048 2246     		mov	r2, r4
  92 004a 2146     		mov	r1, r4
  93 004c 1A20     		movs	r0, #26
  94 004e FFF7FEFF 		bl	HAL_NVIC_SetPriority
  95              	.LVL6:
 117:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  96              		.loc 1 117 5 view .LVU17
  97 0052 1A20     		movs	r0, #26
  98 0054 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  99              	.LVL7:
 118:Core/Src/tim.c ****     HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 100              		.loc 1 118 5 view .LVU18
 101 0058 2246     		mov	r2, r4
 102 005a 2146     		mov	r1, r4
 103 005c 1B20     		movs	r0, #27
 104 005e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 105              	.LVL8:
 119:Core/Src/tim.c ****     HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 106              		.loc 1 119 5 view .LVU19
 107 0062 1B20     		movs	r0, #27
 108 0064 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 109              	.LVL9:
ARM GAS  /tmp/ccNMq7mO.s 			page 5


 120:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 121:Core/Src/tim.c **** 
 122:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 1 */
 123:Core/Src/tim.c ****   }
 124:Core/Src/tim.c **** }
 110              		.loc 1 124 1 is_stmt 0 view .LVU20
 111 0068 02B0     		add	sp, sp, #8
 112              		.cfi_def_cfa_offset 8
 113              		@ sp needed
 114 006a 10BD     		pop	{r4, pc}
 115              	.L9:
 116              		.align	2
 117              	.L8:
 118 006c 00000140 		.word	1073807360
 119              		.cfi_endproc
 120              	.LFE135:
 122              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 123              		.align	1
 124              		.global	HAL_TIM_MspPostInit
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	HAL_TIM_MspPostInit:
 130              	.LVL10:
 131              	.LFB136:
 125:Core/Src/tim.c **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 126:Core/Src/tim.c **** {
 132              		.loc 1 126 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 24
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		.loc 1 126 1 is_stmt 0 view .LVU22
 137 0000 00B5     		push	{lr}
 138              		.cfi_def_cfa_offset 4
 139              		.cfi_offset 14, -4
 140 0002 87B0     		sub	sp, sp, #28
 141              		.cfi_def_cfa_offset 32
 127:Core/Src/tim.c **** 
 128:Core/Src/tim.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 142              		.loc 1 128 3 is_stmt 1 view .LVU23
 143              		.loc 1 128 20 is_stmt 0 view .LVU24
 144 0004 0023     		movs	r3, #0
 145 0006 0193     		str	r3, [sp, #4]
 146 0008 0293     		str	r3, [sp, #8]
 147 000a 0393     		str	r3, [sp, #12]
 148 000c 0493     		str	r3, [sp, #16]
 149 000e 0593     		str	r3, [sp, #20]
 129:Core/Src/tim.c ****   if(timHandle->Instance==TIM1)
 150              		.loc 1 129 3 is_stmt 1 view .LVU25
 151              		.loc 1 129 15 is_stmt 0 view .LVU26
 152 0010 0268     		ldr	r2, [r0]
 153              		.loc 1 129 5 view .LVU27
 154 0012 0F4B     		ldr	r3, .L14
 155 0014 9A42     		cmp	r2, r3
 156 0016 02D0     		beq	.L13
 157              	.LVL11:
 158              	.L10:
ARM GAS  /tmp/ccNMq7mO.s 			page 6


 130:Core/Src/tim.c ****   {
 131:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 132:Core/Src/tim.c **** 
 133:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 0 */
 134:Core/Src/tim.c **** 
 135:Core/Src/tim.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 136:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 137:Core/Src/tim.c ****     PA8     ------> TIM1_CH1
 138:Core/Src/tim.c ****     */
 139:Core/Src/tim.c ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 140:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 141:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 142:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 143:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 144:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 145:Core/Src/tim.c **** 
 146:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 147:Core/Src/tim.c **** 
 148:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 1 */
 149:Core/Src/tim.c ****   }
 150:Core/Src/tim.c **** 
 151:Core/Src/tim.c **** }
 159              		.loc 1 151 1 view .LVU28
 160 0018 07B0     		add	sp, sp, #28
 161              		.cfi_remember_state
 162              		.cfi_def_cfa_offset 4
 163              		@ sp needed
 164 001a 5DF804FB 		ldr	pc, [sp], #4
 165              	.LVL12:
 166              	.L13:
 167              		.cfi_restore_state
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 168              		.loc 1 135 5 is_stmt 1 view .LVU29
 169              	.LBB3:
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 170              		.loc 1 135 5 view .LVU30
 171 001e 0023     		movs	r3, #0
 172 0020 0093     		str	r3, [sp]
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 173              		.loc 1 135 5 view .LVU31
 174 0022 0C4B     		ldr	r3, .L14+4
 175 0024 1A6B     		ldr	r2, [r3, #48]
 176 0026 42F00102 		orr	r2, r2, #1
 177 002a 1A63     		str	r2, [r3, #48]
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 178              		.loc 1 135 5 view .LVU32
 179 002c 1B6B     		ldr	r3, [r3, #48]
 180 002e 03F00103 		and	r3, r3, #1
 181 0032 0093     		str	r3, [sp]
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 182              		.loc 1 135 5 view .LVU33
 183 0034 009B     		ldr	r3, [sp]
 184              	.LBE3:
 135:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 185              		.loc 1 135 5 view .LVU34
 139:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 186              		.loc 1 139 5 view .LVU35
ARM GAS  /tmp/ccNMq7mO.s 			page 7


 139:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 187              		.loc 1 139 25 is_stmt 0 view .LVU36
 188 0036 4FF48073 		mov	r3, #256
 189 003a 0193     		str	r3, [sp, #4]
 140:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 190              		.loc 1 140 5 is_stmt 1 view .LVU37
 140:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 191              		.loc 1 140 26 is_stmt 0 view .LVU38
 192 003c 0223     		movs	r3, #2
 193 003e 0293     		str	r3, [sp, #8]
 141:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 194              		.loc 1 141 5 is_stmt 1 view .LVU39
 142:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 195              		.loc 1 142 5 view .LVU40
 143:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 196              		.loc 1 143 5 view .LVU41
 143:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 197              		.loc 1 143 31 is_stmt 0 view .LVU42
 198 0040 0123     		movs	r3, #1
 199 0042 0593     		str	r3, [sp, #20]
 144:Core/Src/tim.c **** 
 200              		.loc 1 144 5 is_stmt 1 view .LVU43
 201 0044 01A9     		add	r1, sp, #4
 202 0046 0448     		ldr	r0, .L14+8
 203              	.LVL13:
 144:Core/Src/tim.c **** 
 204              		.loc 1 144 5 is_stmt 0 view .LVU44
 205 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 206              	.LVL14:
 207              		.loc 1 151 1 view .LVU45
 208 004c E4E7     		b	.L10
 209              	.L15:
 210 004e 00BF     		.align	2
 211              	.L14:
 212 0050 00000140 		.word	1073807360
 213 0054 00380240 		.word	1073887232
 214 0058 00000240 		.word	1073872896
 215              		.cfi_endproc
 216              	.LFE136:
 218              		.section	.text.MX_TIM1_Init,"ax",%progbits
 219              		.align	1
 220              		.global	MX_TIM1_Init
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 225              	MX_TIM1_Init:
 226              	.LFB134:
  31:Core/Src/tim.c **** 
 227              		.loc 1 31 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 88
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231 0000 10B5     		push	{r4, lr}
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 4, -8
 234              		.cfi_offset 14, -4
 235 0002 96B0     		sub	sp, sp, #88
ARM GAS  /tmp/ccNMq7mO.s 			page 8


 236              		.cfi_def_cfa_offset 96
  37:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 237              		.loc 1 37 3 view .LVU47
  37:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 238              		.loc 1 37 26 is_stmt 0 view .LVU48
 239 0004 0024     		movs	r4, #0
 240 0006 1294     		str	r4, [sp, #72]
 241 0008 1394     		str	r4, [sp, #76]
 242 000a 1494     		str	r4, [sp, #80]
 243 000c 1594     		str	r4, [sp, #84]
  38:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 244              		.loc 1 38 3 is_stmt 1 view .LVU49
  38:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 245              		.loc 1 38 27 is_stmt 0 view .LVU50
 246 000e 1094     		str	r4, [sp, #64]
 247 0010 1194     		str	r4, [sp, #68]
  39:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 248              		.loc 1 39 3 is_stmt 1 view .LVU51
  39:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 249              		.loc 1 39 22 is_stmt 0 view .LVU52
 250 0012 0994     		str	r4, [sp, #36]
 251 0014 0A94     		str	r4, [sp, #40]
 252 0016 0B94     		str	r4, [sp, #44]
 253 0018 0C94     		str	r4, [sp, #48]
 254 001a 0D94     		str	r4, [sp, #52]
 255 001c 0E94     		str	r4, [sp, #56]
 256 001e 0F94     		str	r4, [sp, #60]
  40:Core/Src/tim.c **** 
 257              		.loc 1 40 3 is_stmt 1 view .LVU53
  40:Core/Src/tim.c **** 
 258              		.loc 1 40 34 is_stmt 0 view .LVU54
 259 0020 2022     		movs	r2, #32
 260 0022 2146     		mov	r1, r4
 261 0024 01A8     		add	r0, sp, #4
 262 0026 FFF7FEFF 		bl	memset
 263              	.LVL15:
  45:Core/Src/tim.c ****   htim1.Init.Prescaler = 999;
 264              		.loc 1 45 3 is_stmt 1 view .LVU55
  45:Core/Src/tim.c ****   htim1.Init.Prescaler = 999;
 265              		.loc 1 45 18 is_stmt 0 view .LVU56
 266 002a 2E48     		ldr	r0, .L30
 267 002c 2E4B     		ldr	r3, .L30+4
 268 002e 0360     		str	r3, [r0]
  46:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 269              		.loc 1 46 3 is_stmt 1 view .LVU57
  46:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 270              		.loc 1 46 24 is_stmt 0 view .LVU58
 271 0030 40F2E733 		movw	r3, #999
 272 0034 4360     		str	r3, [r0, #4]
  47:Core/Src/tim.c ****   htim1.Init.Period = 1999;
 273              		.loc 1 47 3 is_stmt 1 view .LVU59
  47:Core/Src/tim.c ****   htim1.Init.Period = 1999;
 274              		.loc 1 47 26 is_stmt 0 view .LVU60
 275 0036 8460     		str	r4, [r0, #8]
  48:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 276              		.loc 1 48 3 is_stmt 1 view .LVU61
  48:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccNMq7mO.s 			page 9


 277              		.loc 1 48 21 is_stmt 0 view .LVU62
 278 0038 40F2CF73 		movw	r3, #1999
 279 003c C360     		str	r3, [r0, #12]
  49:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
 280              		.loc 1 49 3 is_stmt 1 view .LVU63
  49:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
 281              		.loc 1 49 28 is_stmt 0 view .LVU64
 282 003e 0461     		str	r4, [r0, #16]
  50:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 283              		.loc 1 50 3 is_stmt 1 view .LVU65
  50:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 284              		.loc 1 50 32 is_stmt 0 view .LVU66
 285 0040 4461     		str	r4, [r0, #20]
  51:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 286              		.loc 1 51 3 is_stmt 1 view .LVU67
  51:Core/Src/tim.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 287              		.loc 1 51 32 is_stmt 0 view .LVU68
 288 0042 8461     		str	r4, [r0, #24]
  52:Core/Src/tim.c ****   {
 289              		.loc 1 52 3 is_stmt 1 view .LVU69
  52:Core/Src/tim.c ****   {
 290              		.loc 1 52 7 is_stmt 0 view .LVU70
 291 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 292              	.LVL16:
  52:Core/Src/tim.c ****   {
 293              		.loc 1 52 6 discriminator 1 view .LVU71
 294 0048 0028     		cmp	r0, #0
 295 004a 38D1     		bne	.L24
 296              	.L17:
  56:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 297              		.loc 1 56 3 is_stmt 1 view .LVU72
  56:Core/Src/tim.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 298              		.loc 1 56 34 is_stmt 0 view .LVU73
 299 004c 4FF48053 		mov	r3, #4096
 300 0050 1293     		str	r3, [sp, #72]
  57:Core/Src/tim.c ****   {
 301              		.loc 1 57 3 is_stmt 1 view .LVU74
  57:Core/Src/tim.c ****   {
 302              		.loc 1 57 7 is_stmt 0 view .LVU75
 303 0052 12A9     		add	r1, sp, #72
 304 0054 2348     		ldr	r0, .L30
 305 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 306              	.LVL17:
  57:Core/Src/tim.c ****   {
 307              		.loc 1 57 6 discriminator 1 view .LVU76
 308 005a 0028     		cmp	r0, #0
 309 005c 32D1     		bne	.L25
 310              	.L18:
  61:Core/Src/tim.c ****   {
 311              		.loc 1 61 3 is_stmt 1 view .LVU77
  61:Core/Src/tim.c ****   {
 312              		.loc 1 61 7 is_stmt 0 view .LVU78
 313 005e 2148     		ldr	r0, .L30
 314 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 315              	.LVL18:
  61:Core/Src/tim.c ****   {
 316              		.loc 1 61 6 discriminator 1 view .LVU79
ARM GAS  /tmp/ccNMq7mO.s 			page 10


 317 0064 0028     		cmp	r0, #0
 318 0066 30D1     		bne	.L26
 319              	.L19:
  65:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 320              		.loc 1 65 3 is_stmt 1 view .LVU80
  65:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 321              		.loc 1 65 37 is_stmt 0 view .LVU81
 322 0068 0023     		movs	r3, #0
 323 006a 1093     		str	r3, [sp, #64]
  66:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 324              		.loc 1 66 3 is_stmt 1 view .LVU82
  66:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 325              		.loc 1 66 33 is_stmt 0 view .LVU83
 326 006c 1193     		str	r3, [sp, #68]
  67:Core/Src/tim.c ****   {
 327              		.loc 1 67 3 is_stmt 1 view .LVU84
  67:Core/Src/tim.c ****   {
 328              		.loc 1 67 7 is_stmt 0 view .LVU85
 329 006e 10A9     		add	r1, sp, #64
 330 0070 1C48     		ldr	r0, .L30
 331 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 332              	.LVL19:
  67:Core/Src/tim.c ****   {
 333              		.loc 1 67 6 discriminator 1 view .LVU86
 334 0076 58BB     		cbnz	r0, .L27
 335              	.L20:
  71:Core/Src/tim.c ****   sConfigOC.Pulse = 225;
 336              		.loc 1 71 3 is_stmt 1 view .LVU87
  71:Core/Src/tim.c ****   sConfigOC.Pulse = 225;
 337              		.loc 1 71 20 is_stmt 0 view .LVU88
 338 0078 6023     		movs	r3, #96
 339 007a 0993     		str	r3, [sp, #36]
  72:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 340              		.loc 1 72 3 is_stmt 1 view .LVU89
  72:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 341              		.loc 1 72 19 is_stmt 0 view .LVU90
 342 007c E123     		movs	r3, #225
 343 007e 0A93     		str	r3, [sp, #40]
  73:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 344              		.loc 1 73 3 is_stmt 1 view .LVU91
  73:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 345              		.loc 1 73 24 is_stmt 0 view .LVU92
 346 0080 0022     		movs	r2, #0
 347 0082 0B92     		str	r2, [sp, #44]
  74:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 348              		.loc 1 74 3 is_stmt 1 view .LVU93
  74:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 349              		.loc 1 74 25 is_stmt 0 view .LVU94
 350 0084 0C92     		str	r2, [sp, #48]
  75:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 351              		.loc 1 75 3 is_stmt 1 view .LVU95
  75:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 352              		.loc 1 75 24 is_stmt 0 view .LVU96
 353 0086 0D92     		str	r2, [sp, #52]
  76:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 354              		.loc 1 76 3 is_stmt 1 view .LVU97
  76:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
ARM GAS  /tmp/ccNMq7mO.s 			page 11


 355              		.loc 1 76 25 is_stmt 0 view .LVU98
 356 0088 0E92     		str	r2, [sp, #56]
  77:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 357              		.loc 1 77 3 is_stmt 1 view .LVU99
  77:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 358              		.loc 1 77 26 is_stmt 0 view .LVU100
 359 008a 0F92     		str	r2, [sp, #60]
  78:Core/Src/tim.c ****   {
 360              		.loc 1 78 3 is_stmt 1 view .LVU101
  78:Core/Src/tim.c ****   {
 361              		.loc 1 78 7 is_stmt 0 view .LVU102
 362 008c 09A9     		add	r1, sp, #36
 363 008e 1548     		ldr	r0, .L30
 364 0090 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 365              	.LVL20:
  78:Core/Src/tim.c ****   {
 366              		.loc 1 78 6 discriminator 1 view .LVU103
 367 0094 F8B9     		cbnz	r0, .L28
 368              	.L21:
  82:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 369              		.loc 1 82 3 is_stmt 1 view .LVU104
  82:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 370              		.loc 1 82 40 is_stmt 0 view .LVU105
 371 0096 0023     		movs	r3, #0
 372 0098 0193     		str	r3, [sp, #4]
  83:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 373              		.loc 1 83 3 is_stmt 1 view .LVU106
  83:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 374              		.loc 1 83 41 is_stmt 0 view .LVU107
 375 009a 0293     		str	r3, [sp, #8]
  84:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 376              		.loc 1 84 3 is_stmt 1 view .LVU108
  84:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 377              		.loc 1 84 34 is_stmt 0 view .LVU109
 378 009c 0393     		str	r3, [sp, #12]
  85:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 379              		.loc 1 85 3 is_stmt 1 view .LVU110
  85:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 380              		.loc 1 85 33 is_stmt 0 view .LVU111
 381 009e 0493     		str	r3, [sp, #16]
  86:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 382              		.loc 1 86 3 is_stmt 1 view .LVU112
  86:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 383              		.loc 1 86 35 is_stmt 0 view .LVU113
 384 00a0 0593     		str	r3, [sp, #20]
  87:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 385              		.loc 1 87 3 is_stmt 1 view .LVU114
  87:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 386              		.loc 1 87 38 is_stmt 0 view .LVU115
 387 00a2 4FF40052 		mov	r2, #8192
 388 00a6 0692     		str	r2, [sp, #24]
  88:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 389              		.loc 1 88 3 is_stmt 1 view .LVU116
  88:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 390              		.loc 1 88 40 is_stmt 0 view .LVU117
 391 00a8 0893     		str	r3, [sp, #32]
  89:Core/Src/tim.c ****   {
ARM GAS  /tmp/ccNMq7mO.s 			page 12


 392              		.loc 1 89 3 is_stmt 1 view .LVU118
  89:Core/Src/tim.c ****   {
 393              		.loc 1 89 7 is_stmt 0 view .LVU119
 394 00aa 01A9     		add	r1, sp, #4
 395 00ac 0D48     		ldr	r0, .L30
 396 00ae FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 397              	.LVL21:
  89:Core/Src/tim.c ****   {
 398              		.loc 1 89 6 discriminator 1 view .LVU120
 399 00b2 98B9     		cbnz	r0, .L29
 400              	.L22:
  96:Core/Src/tim.c **** 
 401              		.loc 1 96 3 is_stmt 1 view .LVU121
 402 00b4 0B48     		ldr	r0, .L30
 403 00b6 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 404              	.LVL22:
  98:Core/Src/tim.c **** 
 405              		.loc 1 98 1 is_stmt 0 view .LVU122
 406 00ba 16B0     		add	sp, sp, #88
 407              		.cfi_remember_state
 408              		.cfi_def_cfa_offset 8
 409              		@ sp needed
 410 00bc 10BD     		pop	{r4, pc}
 411              	.L24:
 412              		.cfi_restore_state
  54:Core/Src/tim.c ****   }
 413              		.loc 1 54 5 is_stmt 1 view .LVU123
 414 00be FFF7FEFF 		bl	Error_Handler
 415              	.LVL23:
 416 00c2 C3E7     		b	.L17
 417              	.L25:
  59:Core/Src/tim.c ****   }
 418              		.loc 1 59 5 view .LVU124
 419 00c4 FFF7FEFF 		bl	Error_Handler
 420              	.LVL24:
 421 00c8 C9E7     		b	.L18
 422              	.L26:
  63:Core/Src/tim.c ****   }
 423              		.loc 1 63 5 view .LVU125
 424 00ca FFF7FEFF 		bl	Error_Handler
 425              	.LVL25:
 426 00ce CBE7     		b	.L19
 427              	.L27:
  69:Core/Src/tim.c ****   }
 428              		.loc 1 69 5 view .LVU126
 429 00d0 FFF7FEFF 		bl	Error_Handler
 430              	.LVL26:
 431 00d4 D0E7     		b	.L20
 432              	.L28:
  80:Core/Src/tim.c ****   }
 433              		.loc 1 80 5 view .LVU127
 434 00d6 FFF7FEFF 		bl	Error_Handler
 435              	.LVL27:
 436 00da DCE7     		b	.L21
 437              	.L29:
  91:Core/Src/tim.c ****   }
 438              		.loc 1 91 5 view .LVU128
ARM GAS  /tmp/ccNMq7mO.s 			page 13


 439 00dc FFF7FEFF 		bl	Error_Handler
 440              	.LVL28:
 441 00e0 E8E7     		b	.L22
 442              	.L31:
 443 00e2 00BF     		.align	2
 444              	.L30:
 445 00e4 00000000 		.word	htim1
 446 00e8 00000140 		.word	1073807360
 447              		.cfi_endproc
 448              	.LFE134:
 450              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 451              		.align	1
 452              		.global	HAL_TIM_Base_MspDeInit
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	HAL_TIM_Base_MspDeInit:
 458              	.LVL29:
 459              	.LFB137:
 152:Core/Src/tim.c **** 
 153:Core/Src/tim.c **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 154:Core/Src/tim.c **** {
 460              		.loc 1 154 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		.loc 1 154 1 is_stmt 0 view .LVU130
 465 0000 08B5     		push	{r3, lr}
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 3, -8
 468              		.cfi_offset 14, -4
 155:Core/Src/tim.c **** 
 156:Core/Src/tim.c ****   if(tim_baseHandle->Instance==TIM1)
 469              		.loc 1 156 3 is_stmt 1 view .LVU131
 470              		.loc 1 156 20 is_stmt 0 view .LVU132
 471 0002 0268     		ldr	r2, [r0]
 472              		.loc 1 156 5 view .LVU133
 473 0004 0A4B     		ldr	r3, .L36
 474 0006 9A42     		cmp	r2, r3
 475 0008 00D0     		beq	.L35
 476              	.LVL30:
 477              	.L32:
 157:Core/Src/tim.c ****   {
 158:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 159:Core/Src/tim.c **** 
 160:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 0 */
 161:Core/Src/tim.c ****     /* Peripheral clock disable */
 162:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_DISABLE();
 163:Core/Src/tim.c **** 
 164:Core/Src/tim.c ****     /* TIM1 interrupt Deinit */
 165:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_BRK_TIM9_IRQn);
 166:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 167:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 168:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 169:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 170:Core/Src/tim.c **** 
 171:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 1 */
ARM GAS  /tmp/ccNMq7mO.s 			page 14


 172:Core/Src/tim.c ****   }
 173:Core/Src/tim.c **** }
 478              		.loc 1 173 1 view .LVU134
 479 000a 08BD     		pop	{r3, pc}
 480              	.LVL31:
 481              	.L35:
 162:Core/Src/tim.c **** 
 482              		.loc 1 162 5 is_stmt 1 view .LVU135
 483 000c 094A     		ldr	r2, .L36+4
 484 000e 536C     		ldr	r3, [r2, #68]
 485 0010 23F00103 		bic	r3, r3, #1
 486 0014 5364     		str	r3, [r2, #68]
 165:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 487              		.loc 1 165 5 view .LVU136
 488 0016 1820     		movs	r0, #24
 489              	.LVL32:
 165:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 490              		.loc 1 165 5 is_stmt 0 view .LVU137
 491 0018 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 492              	.LVL33:
 166:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 493              		.loc 1 166 5 is_stmt 1 view .LVU138
 494 001c 1920     		movs	r0, #25
 495 001e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 496              	.LVL34:
 167:Core/Src/tim.c ****     HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 497              		.loc 1 167 5 view .LVU139
 498 0022 1A20     		movs	r0, #26
 499 0024 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 500              	.LVL35:
 168:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 501              		.loc 1 168 5 view .LVU140
 502 0028 1B20     		movs	r0, #27
 503 002a FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 504              	.LVL36:
 505              		.loc 1 173 1 is_stmt 0 view .LVU141
 506 002e ECE7     		b	.L32
 507              	.L37:
 508              		.align	2
 509              	.L36:
 510 0030 00000140 		.word	1073807360
 511 0034 00380240 		.word	1073887232
 512              		.cfi_endproc
 513              	.LFE137:
 515              		.global	htim1
 516              		.section	.bss.htim1,"aw",%nobits
 517              		.align	2
 520              	htim1:
 521 0000 00000000 		.space	72
 521      00000000 
 521      00000000 
 521      00000000 
 521      00000000 
 522              		.text
 523              	.Letext0:
 524              		.file 2 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 525              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
ARM GAS  /tmp/ccNMq7mO.s 			page 15


 526              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 527              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 528              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 529              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 530              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 531              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 532              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 533              		.file 11 "Core/Inc/tim.h"
 534              		.file 12 "Core/Inc/main.h"
 535              		.file 13 "<built-in>"
ARM GAS  /tmp/ccNMq7mO.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 tim.c
     /tmp/ccNMq7mO.s:21     .text.HAL_TIM_Base_MspInit:00000000 $t
     /tmp/ccNMq7mO.s:27     .text.HAL_TIM_Base_MspInit:00000000 HAL_TIM_Base_MspInit
     /tmp/ccNMq7mO.s:118    .text.HAL_TIM_Base_MspInit:0000006c $d
     /tmp/ccNMq7mO.s:123    .text.HAL_TIM_MspPostInit:00000000 $t
     /tmp/ccNMq7mO.s:129    .text.HAL_TIM_MspPostInit:00000000 HAL_TIM_MspPostInit
     /tmp/ccNMq7mO.s:212    .text.HAL_TIM_MspPostInit:00000050 $d
     /tmp/ccNMq7mO.s:219    .text.MX_TIM1_Init:00000000 $t
     /tmp/ccNMq7mO.s:225    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccNMq7mO.s:445    .text.MX_TIM1_Init:000000e4 $d
     /tmp/ccNMq7mO.s:520    .bss.htim1:00000000 htim1
     /tmp/ccNMq7mO.s:451    .text.HAL_TIM_Base_MspDeInit:00000000 $t
     /tmp/ccNMq7mO.s:457    .text.HAL_TIM_Base_MspDeInit:00000000 HAL_TIM_Base_MspDeInit
     /tmp/ccNMq7mO.s:510    .text.HAL_TIM_Base_MspDeInit:00000030 $d
     /tmp/ccNMq7mO.s:517    .bss.htim1:00000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
Error_Handler
HAL_NVIC_DisableIRQ
